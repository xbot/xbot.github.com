<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>青梅煮酒 - 分类 - 晴耕雨讀</title><link>http://0x3f.org/categories/%E9%9D%92%E6%A2%85%E7%85%AE%E9%85%92/</link><description>青梅煮酒 - 分类 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 04 Oct 2020 18:43:16 +0800</lastBuildDate><atom:link href="http://0x3f.org/categories/%E9%9D%92%E6%A2%85%E7%85%AE%E9%85%92/" rel="self" type="application/rss+xml"/><item><title>给 Bose QC35 更换新耳罩</title><link>http://0x3f.org/post/change-muffs-for-bose-qc35/</link><pubDate>Sun, 04 Oct 2020 18:43:16 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/change-muffs-for-bose-qc35/</guid><description><![CDATA[<p>尽管我用东西很爱惜，QC35 的耳罩表面在前年也开始了剥落，并终于在今年早些时候裂开了。</p>
<p>了解到官方耳罩太贵（380￥左右），而且就这四年的使用情况而言，质量一般。所以打算买第三方的自己换。最终在淘宝上买了排序靠前、35包邮的蛋白皮款。</p>
<p>安装过程比较简单（<a href="https://www.bose.cn/zh_cn/support/article/ear-cushion-replacement-qc25.html" target="_blank" rel="noopener noreffer">官方说明</a>），把旧耳罩扯下来，再把新的耳罩的包边逐个塞到耳机的卡扣里就行，就是容易边塞边松脱。</p>
<p>替换前后：</p>
<p></p>
<p>用了两天，不管是外观还是材质，和原装没有区别。</p>
<p>作为易耗品，以后可以考虑在阿里巴巴上买，更便宜。</p>
]]></description></item><item><title>买了个升降台，开始站立办公</title><link>http://0x3f.org/post/a-trial-on-standing-desk/</link><pubDate>Fri, 02 Oct 2020 20:31:17 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/a-trial-on-standing-desk/</guid><description><![CDATA[<p>久坐疲劳，所以打算买个升降台。</p>
<hr>
<h2 id="乐歌-m3s">乐歌 M3S</h2>
<p>我是个颜党，在所有有白色款的型号里，先选中了造型简约的乐歌 M3S。</p>
<p></p>
<p>实物很重，虽然有些地方稍显粗糙（比如平板插槽底部很粗犷地用热熔胶粘合），但是整体上做工扎实。</p>
<p>但是试用之后发现一个很严重的问题，Z 形结构虽然美观，但是不够稳定，敲键盘时用力一点就会有明显晃动。</p>
<h2 id="乐歌-m9s">乐歌 M9S</h2>
<p>一开始没有把 X 形结构当做首选是因为感觉不太好看。重新审视后感觉 M9S 观感尚可。</p>
<p></p>
<p>实物证明，虽然 X 形结构的美感不如 Z 形，但是稳定性远胜后者。</p>
<p>M9S 的另一个优点是可以把笔记本电脑放在键盘托上使用。</p>
<hr>
<p>当然家里使用还是电动升降桌更好，毕竟桌子上摆这么个庞然大物显得很突兀，而且丧失了其它功能。升降台更适合办公室。</p>
]]></description></item><item><title>试用讯飞 A1 和 SR101 录音笔</title><link>http://0x3f.org/post/a-trial-on-iflytec-a1-and-sr101-voice-recorder/</link><pubDate>Mon, 28 Sep 2020 17:30:14 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/a-trial-on-iflytec-a1-and-sr101-voice-recorder/</guid><description><![CDATA[<p>讯飞的中文语音识别做得很好，十几年前在学校的一次讲座上就见识过讯飞的语音技术，印象深刻。录音笔结合语音识别是现在的一个趋势，把一个比较专业向的工具推向普及，做好了可以是个很有用的效率工具。我曾经跟一些产品经理讲过，如果我是他们，就买一个录音笔，无论是收集、讨论还是评审需求，都是个很好的工具，不至于丢三落四、误人误己。</p>
<p>讯飞的录音笔包含终身免费的转写服务，是个很吸引人的点。这次试用了 A1 和 SR101 两款，谈谈感受。</p>
<hr>
<h2 id="无处安放的-a1">无处安放的 A1</h2>
<p></p>
<h3 id="优点">优点</h3>
<ul>
<li>工业设计很有特点，外形模仿磁带，附带贴纸，既怀旧又酷炫，属于数码潮玩向的东西。</li>
<li>体积小巧，火柴盒大小。</li>
<li>录音效果明显好于 iPhone X。</li>
</ul>
<h3 id="特点">特点</h3>
<ul>
<li>通过蓝牙和手机传输数据，交互很流畅。</li>
</ul>
<h3 id="缺点">缺点</h3>
<ul>
<li>不支持待机，5分钟无操作自动关机，不适合做备忘。</li>
<li>录音过程中不支持做标记，所以不适合做会议记录。</li>
<li>有安全隐患，手机可以不经授权连接并读取录音笔里的数据。</li>
</ul>
<h3 id="总结">总结</h3>
<p>几乎完全不满足我的使用场景，所以无处安放。感觉如果能增加标记功能和实现一键录音就值得一用。</p>
<hr>
<h2 id="五脏俱全但囿于软件的-sr101">五脏俱全但囿于软件的 SR101</h2>
<p></p>
<h3 id="优点-1">优点</h3>
<ul>
<li>工业设计年轻时尚。</li>
<li>支持待机、标记、一键录音。</li>
<li>有屏幕，更方便。</li>
</ul>
<h3 id="缺点-1">缺点</h3>
<ul>
<li>通过触屏做标记，误操作的机率很大，影响效率。</li>
<li>待机状态下，一键录音有3秒左右的等待时间。</li>
<li>录音数据通过云盘和手机 APP 同步，等待时间超过 A1 很多，极其影响体验。</li>
<li>录音效果不如 A1。</li>
</ul>
<h3 id="总结-1">总结</h3>
<p>功能覆盖我的所有需求，但是体验总是离及格线差那么一点。</p>
<hr>
<p>讯飞在中文语音识别这个核心技术上的成就勿庸置疑，但是它的产品总是在体验上做得差一点。我用过的讯飞产品里，手机输入法是最接近满意分数线的，但是它的动图搜索功能真的是很反人类，交互很繁复。</p>
<p>这两款录音笔各自有独特的点、有吸引人的地方，但是最大的短板在软件的体验上，导致不太适合把它们当成效率工具。基于这个出发点，我云了几个设想：</p>
<ul>
<li>允许自动转写，目前只能逐条手工操作转写，如果录音较多，会不厌其烦。</li>
<li>做开放平台，和 IFTTT 之类的服务打通。</li>
<li>支持 iOS Shortcuts 之类的效率工具。</li>
</ul>
]]></description></item><item><title>MacBook Pro 维修记</title><link>http://0x3f.org/post/story-of-repairing-macbook-pro/</link><pubDate>Fri, 26 Jun 2020 23:29:24 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/story-of-repairing-macbook-pro/</guid><description><![CDATA[<p></p>
<p>生平第一次修电脑。</p>
<p>17款的 MacBook Pro 13`，该有的问题全有——键盘随机连击或无反应、在桌面上放不平且触控板反馈很弱、疑似电池鼓包。</p>
<p>用过 ThinkPad X200 和 X220，虽然屏幕很渣，但从来没出过问题。上一台电脑是 15 款的 MacBook Air，用了三年，也没事儿。只能说这届苹果不行。</p>
<p>APP 上预约的三里屯店，时间下午两点多。太古里门口和店门口分别出示了一次健康码。虽然是工作日、而且在疫情期间，店里人不多也不少，还是等了一会儿。</p>
<p>常规的询问和联机检查，大概花了十几分钟，没有要求提供任何凭证。店员说因为键盘和电池都在一起，所以是要一块换的。时间上快则一天，慢则两三天，就能修好。</p>
<p>第二天晚上九点半，接到一个陌生座机号码打来的电话，以为是营销电话，而且之前看过有说换键盘用了一周时间的帖子，所以没往这上面想，就没接。</p>
<p>第三天晚上看手机电池健康状态的时候，偶然看到电脑的维修状态是已完成，才意识到，回电话过去果然是三里屯苹果商店，但是没人接。</p>
<p>今天早上九点多，再次打过去，说是十点才营业。于是决定直接过去。</p>
<p>交接需要出示身份证，花了几分钟验机，很快结束。期间问店员如果之后键盘再坏了怎么办，说是有一年保修期，而且因为批次不同的原因，换过的键盘不容易再出问题。暗笑，换个批次就能解决的话，新款何至于换回剪刀脚？！</p>
<p>回家后用了一会儿，新键盘和触控板体验很棒，没有打油的阻尼感沁人心脾，发了条 tweet 说：找回了初恋的感觉。</p>
]]></description></item><item><title>从 Hexo 到 Hugo</title><link>http://0x3f.org/post/migrate-from-hexo-to-hugo/</link><pubDate>Fri, 19 Jun 2020 17:41:52 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/migrate-from-hexo-to-hugo/</guid><description><![CDATA[<p>一切源于我这个颜党的喜新厌旧。</p>
<p>总想找到一个极简而不失现代感的主题，在这个过程中，发现越来越多比较贴近我口味的主题都是适配 Hugo 的。趁最近有时间，就换了过来。</p>
<hr>
<h2 id="创建一个空站点">创建一个空站点</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 安装 hugo</span>
brew install hugo

<span class="c1"># 创建空站点</span>
hugo new site Blog

<span class="c1"># 安装 LoveIt 主题</span>
<span class="nb">cd</span> Blog
git init
git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt
cp -f themes/LoveIt/exampleSite/config.toml .

<span class="c1"># 配置 config.toml</span>

<span class="c1"># 在本机预览效果</span>
hugo server -D
</code></pre></td></tr></table>
</div>
</div><h2 id="写一篇新文章">写一篇新文章</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">hugo new posts/test.md
</code></pre></td></tr></table>
</div>
</div><p>Hugo 需要自己指定文章的相对路径和文件名，这一点不如 Hexo 自动化程度高。</p>
<h2 id="迁移文章">迁移文章</h2>
<blockquote>
<p>注意：以下命令和脚本仅适用于本博客，不加判断地使用可能会修改不需要变动的内容。</p>
</blockquote>
<h3 id="统一文章后缀">统一文章后缀</h3>
<p>历史原因，用过的文件后缀不止一种，这次把<code>.mkd</code>和<code>.markdown</code>统一成<code>.md</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">rename -s .mkd .md -s .markdown .md *
</code></pre></td></tr></table>
</div>
</div><h3 id="删除不兼容的-front-matter">删除不兼容的 Front Matter</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">gsed -i <span class="s1">&#39;/^type:\s*post/d&#39;</span> *
</code></pre></td></tr></table>
</div>
</div><h3 id="修改不规范的-front-matter">修改不规范的 Front Matter</h3>
<p>我用单分类、多标签的方式管理文章，所以以前都是把分类名直接写在<code>categories:</code>后面了，Hugo 要求必须使用连接符前缀另起一行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">perl -pi -e <span class="s1">&#39;s/(?&lt;=^categories:)/\n-/g&#39;</span> *
</code></pre></td></tr></table>
</div>
</div><p>也是因为历史的原因，有的文章没有日期时间，有的格式也不统一。Hugo 对日期时间的格式要求比较严格。这里把所有没有秒的时间后补全。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">perl -pi -e <span class="s1">&#39;s/(?&lt;=^date:\s\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}$)/:00/g&#39;</span> *
</code></pre></td></tr></table>
</div>
</div><h3 id="替换文章摘要标签">替换文章摘要标签</h3>
<p>Hugo 不允许“more”两侧有空格：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">gsed -ri <span class="s1">&#39;s/!-- more --/!--more--/g&#39;</span> *
</code></pre></td></tr></table>
</div>
</div><h3 id="补充和转换复杂内容">补充和转换复杂内容</h3>
<p>此外还有诸如日期时间缺失、转换 Octopress 标签到 Markdown 格式等问题，另外为了保持 Permalink 不变，准备每篇文章都补充一个Front Matter <code>slug</code>。所以写了一个 PHP 脚本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">#!/usr/bin/env php
<span class="cp">&lt;?php</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">file_put_contents</span><span class="p">(</span><span class="s1">&#39;php://stderr&#39;</span><span class="p">,</span> <span class="s2">&#34;需输入一个合法的文件路径</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">);</span>
    <span class="k">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$argc</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">handle_file</span><span class="p">(</span><span class="nv">$argv</span><span class="p">[</span><span class="nv">$i</span><span class="p">]);</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">handle_file</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$content</span> <span class="o">=</span> <span class="nx">file_get_contents</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">);</span>
    <span class="nv">$lines</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nv">$content</span><span class="p">);</span>

    <span class="nv">$isDateMissing</span> <span class="o">=</span> <span class="k">empty</span><span class="p">(</span><span class="nx">preg_grep</span><span class="p">(</span><span class="s1">&#39;/^date:\s*/&#39;</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$isDateMissing</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">append_date</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nv">$isSlugMissing</span> <span class="o">=</span> <span class="k">empty</span><span class="p">(</span><span class="nx">preg_grep</span><span class="p">(</span><span class="s1">&#39;/^slug:\s/&#39;</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$isSlugMissing</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">append_slug</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">convert_hexo_tags</span><span class="p">(</span><span class="nv">$lines</span><span class="p">);</span>

    <span class="nx">file_put_contents</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">,</span> <span class="nx">implode</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">));</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">append_date</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$lines</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// 获取文件名中的日期
</span><span class="c1"></span>    <span class="nv">$arr</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/\d{4}-\d{2}-\d{2}/&#39;</span><span class="p">,</span> <span class="nx">basename</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">),</span> <span class="nv">$arr</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$arr</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">file_put_contents</span><span class="p">(</span><span class="s1">&#39;php://stderr&#39;</span><span class="p">,</span> <span class="s2">&#34;未能从文件名中找到日期</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">);</span>
        <span class="k">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$lines</span> <span class="k">as</span> <span class="nv">$idx</span> <span class="o">=&gt;</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">strpos</span><span class="p">(</span><span class="nv">$line</span><span class="p">,</span> <span class="s1">&#39;title:&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$lines</span> <span class="o">=</span> <span class="nx">array_merge</span><span class="p">(</span>
                <span class="nx">array_slice</span><span class="p">(</span><span class="nv">$lines</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">$idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
                <span class="p">[</span><span class="s2">&#34;date: </span><span class="si">{</span>$arr[0]<span class="si">}</span><span class="s2"> 00:00:00&#34;</span><span class="p">],</span>
                <span class="nx">array_slice</span><span class="p">(</span><span class="nv">$lines</span><span class="p">,</span> <span class="nv">$idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">append_slug</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$lines</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/(?&lt;=\d{4}-\d{2}-\d{2}-).*(?=\.)/&#39;</span><span class="p">,</span> <span class="nx">basename</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">),</span> <span class="nv">$matches</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">file_put_contents</span><span class="p">(</span><span class="s1">&#39;php://stderr&#39;</span><span class="p">,</span> <span class="s2">&#34;未能从文件名中找到slug</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">);</span>
        <span class="k">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$lines</span> <span class="k">as</span> <span class="nv">$idx</span> <span class="o">=&gt;</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">strpos</span><span class="p">(</span><span class="nv">$line</span><span class="p">,</span> <span class="s1">&#39;title:&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$lines</span> <span class="o">=</span> <span class="nx">array_merge</span><span class="p">(</span>
                <span class="nx">array_slice</span><span class="p">(</span><span class="nv">$lines</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">$idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
                <span class="p">[</span><span class="s2">&#34;slug: &#34;</span> <span class="o">.</span> <span class="nx">str_replace</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">[</span><span class="mi">0</span><span class="p">])],</span>
                <span class="nx">array_slice</span><span class="p">(</span><span class="nv">$lines</span><span class="p">,</span> <span class="nv">$idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">convert_hexo_tags</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$lines</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$lines</span> <span class="k">as</span> <span class="nv">$idx</span> <span class="o">=&gt;</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/(?&lt;={%\simg\s).*(?=\s\d+\s%})/&#39;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">)</span>
            <span class="o">||</span> <span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/(?&lt;={%\simg\s).*(?=\s%})/&#39;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">)</span>
        <span class="p">)</span> <span class="p">{</span>
            <span class="nv">$lines</span><span class="p">[</span><span class="nv">$idx</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;![](</span><span class="si">{</span>$matches[0]<span class="si">}</span><span class="s2">)&#34;</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/(?&lt;={%\scodeblock\slang:).*(?=\s[a-zA-Z0-9.]+\s%})/&#39;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">)</span>
            <span class="o">||</span> <span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/(?&lt;={%\scodeblock\slang:).*(?=\s%})/&#39;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">)</span>
            <span class="o">||</span> <span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/(?&lt;={%\scodeblock).*(?=\s%})/&#39;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">)</span>
        <span class="p">)</span> <span class="p">{</span>
            <span class="nv">$lines</span><span class="p">[</span><span class="nv">$idx</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;```</span><span class="si">{</span>$matches[0]<span class="si">}</span><span class="s2">&#34;</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/{%\sendcodeblock\s%}/&#39;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$lines</span><span class="p">[</span><span class="nv">$idx</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;```&#34;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">ls content/posts <span class="p">|</span> sed <span class="s2">&#34;s:^:`pwd`/content/posts/:&#34;</span> <span class="p">|</span> xargs ./convert.php
</code></pre></td></tr></table>
</div>
</div><h2 id="实现全文检索">实现全文检索</h2>
<p>默认的 Lunr 方式开箱即用，但速度较慢，而且中文分词做得不好。所以使用 <a href="https://www.algolia.com/" target="_blank" rel="noopener noreffer">Algolia</a> 实现。</p>
<p>注册账号并选用免费方案后，在“API Keys”页面复制“Application ID”、“Search-Only API Key”和“Admin API Key”。</p>
<p>在项目根目录下创建 <code>.env</code> 文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ini" data-lang="ini"><span class="na">ALGOLIA_APP_ID</span><span class="o">=</span><span class="s">XXXXXX</span>
<span class="na">ALGOLIA_ADMIN_KEY</span><span class="o">=</span><span class="s">XXXXXX</span>
<span class="na">ALGOLIA_INDEX_NAME</span><span class="o">=</span><span class="s">0x3f.org</span>
<span class="na">ALGOLIA_INDEX_FILE</span><span class="o">=</span><span class="s">public/index.json</span>
</code></pre></td></tr></table>
</div>
</div><p><code>APP_ID</code> 和 <code>ADMIN_KEY</code> 是前面复制的三项中的值，<code>INDEX_NAME</code> 是 Algolia 上的索引名称，随便起一个就行。<code>INDEX_FILE</code> 是生成站点时自动生成的索引文件的路径，一般不需要修改。</p>
<p>安装自动提交索引到 Algolia 的脚本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">npm install atomic-algolia -g
</code></pre></td></tr></table>
</div>
</div><p>执行提交：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">atomic-algolia
</code></pre></td></tr></table>
</div>
</div><p>因为我所用的主题是支持 Algolia 的，所以把 “Application ID”、“Search-Only Key”和索引名称填到配置文件中对应的项后就可以使用搜索了。</p>
<h2 id="添加评论功能">添加评论功能</h2>
<p>用了很多年 Disqus ，这次打算换用 Github Issues ，选择了 <a href="https://utteranc.es/" target="_blank" rel="noopener noreffer">Utterances</a> 。</p>
<p>主题原生支持，注册账号后简单配置即可。</p>
<h2 id="favicon">Favicon</h2>
<p>原来简单粗暴地用了唯一在的图标文件，这次改用 <a href="https://realfavicongenerator.net/" target="_blank" rel="noopener noreffer">Favicon Generator</a> 生成一套对多平台浏览器优化的图标。</p>
<p>把全套文件放到 <code>static/</code> 目录下即可。</p>
<h2 id="部署到-github-pages">部署到 Github Pages</h2>
<p>Github Pages 支持多种站点生成方式，由于 Hexo 默认使用 master 分支管理生成的静态资源，而站点源码存放在 source 分支，所以我打算沿用这个方案，在继续使用 master 分支存放静态资源的同时，新增一个 hugo 分支，管理源码。</p>
<h3 id="手动部署">手动部署</h3>
<p>Hugo 会将生成的静态资源存放在项目根目录下的<code>public</code>目录中，所以需要将 master 分支检出到该目录：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">git worktree add -B master public origin/master
</code></pre></td></tr></table>
</div>
</div><p>生成站点并部署：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">hugo
<span class="nb">cd</span> public <span class="o">&amp;&amp;</span> git add —all
git commit
git push -f origin master
</code></pre></td></tr></table>
</div>
</div><p>很快就能看到新网站了。</p>
<h3 id="自动部署">自动部署</h3>
<p>Hugo 并没有提供 Hexo 那样的自动部署命令，所以要么把上述手动部署的命令写成脚本，要么使用自动部署工具，恰好 Github Actions 可以很好地实现。</p>
<p>创建 <code>.github/workflows/main.yml</code> 文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="k">name</span><span class="p">:</span><span class="w"> </span>github<span class="w"> </span>pages<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- hugo<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">deploy</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">runs-on</span><span class="p">:</span><span class="w"> </span>ubuntu<span class="m">-18.04</span><span class="w">
</span><span class="w">    </span><span class="k">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="k">uses</span><span class="p">:</span><span class="w"> </span>actions/checkout@v2<span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  </span><span class="c"># Fetch Hugo themes (true OR recursive)</span><span class="w">
</span><span class="w">          </span><span class="k">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">    </span><span class="c"># Fetch all history for .GitInfo and .Lastmod</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Setup<span class="w"> </span>Hugo<span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>peaceiris/actions-hugo@v2<span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="c">#   hugo-version: &#39;0.71.1&#39;</span><span class="w">
</span><span class="w">          </span><span class="k">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;latest&#39;</span><span class="w">
</span><span class="w">          </span><span class="c"># extended: true</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Build<span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>hugo<span class="w"> </span>--minify<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Deploy<span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>peaceiris/actions-gh-pages@v3<span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">github_token</span><span class="p">:</span><span class="w"> </span>${{<span class="w"> </span>secrets.GITHUB_TOKEN<span class="w"> </span>}}<span class="w">
</span><span class="w">          </span><span class="k">publish_dir</span><span class="p">:</span><span class="w"> </span>./public<span class="w">
</span><span class="w">          </span><span class="k">publish_branch</span><span class="p">:</span><span class="w"> </span>master<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Update<span class="w"> </span>Algolia<span class="w"> </span>Index<span class="w">
</span><span class="w">        </span><span class="k">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">ALGOLIA_APP_ID</span><span class="p">:</span><span class="w"> </span>XXXXXX<span class="w">
</span><span class="w">          </span><span class="k">ALGOLIA_ADMIN_KEY</span><span class="p">:</span><span class="w"> </span>${{<span class="w"> </span>secrets.ALGOLIA_ADMIN_KEY<span class="w"> </span>}}<span class="w">
</span><span class="w">          </span><span class="k">ALGOLIA_INDEX_NAME</span><span class="p">:</span><span class="w"> </span><span class="m">0x3f</span>.org<span class="w">
</span><span class="w">          </span><span class="k">ALGOLIA_INDEX_FILE</span><span class="p">:</span><span class="w"> </span>public/index.json<span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span><span class="sd">|
</span><span class="sd">          sudo apt-get -yqq install npm</span><span class="w">
</span><span class="w">          </span>sudo<span class="w"> </span>npm<span class="w"> </span>install<span class="w"> </span>atomic-algolia<span class="w"> </span>-g<span class="w">
</span><span class="w">          </span>atomic-algolia<span class="w">
</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>注意替换 <code>ALGOLIA_APP_ID</code> 的真实值，并把 Algolia 的“Admin API Key”添加到 Github 项目设置中的“Secrets”里，名称为“ALGOLIA_ADMIN_KEY”。</p>
<p>以后再在 hugo 分支推送新的提交时，Github Actions 就会自动执行部署操作。</p>
<hr>
<p>从06年在中国博客网上开始写文章，到后来换到个人搭建并售卖的 Wordpress，五年颠沛流离的博客生涯终于在12年结束并<a href="/post/migrate-blog-to-octopress/" rel="">定居到 Github 上</a>，之后 Octopress 一用就又是五年。17年，因为 Octopress 转换速度太慢，<a href="/post/migrate-octopress-to-hexo/" rel="">换成了 Hexo</a>。</p>
<p>我想，这次折腾之后，应该能再安分五年吧。</p>]]></description></item><item><title>用Github当图床</title><link>http://0x3f.org/post/take-github-as-image-hosting-service/</link><pubDate>Thu, 06 Feb 2020 22:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/take-github-as-image-hosting-service/</guid><description><![CDATA[<p>微博图床的域名不知道什么时候改了，Google找不到相关信息，经过排查发现原域名中的“ws”改成了“wx”，浪费了不少时间。</p>
<p>于是打算换图床。</p>
<p>Github自从去年扩大免费账户享受的权利后，单个仓库的大小没有硬性限制，很适合做图床。</p>
<p>uPic是个很好用的图床辅助工具，支持Github。</p>
<p></p>
<p>同类工具还有PicGo。</p>]]></description></item><item><title>AirPods Pro的使用感受</title><link>http://0x3f.org/post/the-expirence-of-airpods-pro/</link><pubDate>Tue, 05 Nov 2019 16:18:54 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/the-expirence-of-airpods-pro/</guid><description><![CDATA[<p>Bose QC35曾是带给我巨大幸福感的工具，并且三年来一直处于重度使用的状态。但是它的一些弱点，使得在某些细分场景下并不能得到很好的体验。首先是包耳式的设计在夏天会很热。其次，虽然有折叠的功能，但头戴式的设计对于日常通勤来说，还是不够便携。再次，QC35一代的降噪级别只能通过APP设置，很麻烦，所以我一直都保持默认开启状态，出于安全性考虑，不适合徒步或者骑行。</p>
<p>于是后来买了一副AirPods（以下简称AP）。高温和骑行的体验得以改善，但一直被通勤过程中北京公交糟糕的乘坐体验所困扰。其实在购买AP之前，更想买的是带降噪功能的耳塞，当时索尼的降噪豆一代才刚上市，评测普遍反馈体验不太好，而QC30的狗圈又让我完全接受不能，除此之外，在当时并无更多的选择。AP其实是权衡之后妥协的结果。</p>
<p>所以从看到AirPods Pro（以下简称APP）上市的消息到下单，并没有考虑太久。下单时提示可能一到两周才能到货，但其实第二天就发了货，次日到手。体验了几天，说说感受。</p>
<h1 id="降噪效果">降噪效果</h1>
<p>首先是最大的卖点，降噪。整体上不如QC35，但完全可以接受。</p>
<p>在主要的应用场景（通勤）下，对公交车、马路上的低频噪音过滤效果明显，戴上之后一秒钟，整个世界都安静了。仍然能听到较为清楚的人声，好处是可以听到报站声、避免坐过站，但旁边大声打电话的声音也会产生一定的干扰。</p>
<h1 id="佩戴舒适度">佩戴舒适度</h1>
<p>对APP主要的疑虑应该就是入耳式的设计。对于我来说，默认的中号耳塞确实会有明显的胀感，戴的时间稍长就会不舒服。换上小号之后好很多，可以长时间佩戴，但稳固度会受到一定影响。</p>
<h1 id="稳固度">稳固度</h1>
<p>我戴AP时，右耳容易松脱。APP的稳固度会好于AP，但吃东西时右耳仍然会松脱。而且换成小号耳塞也会影响到稳固度。</p>
<h1 id="操控体验">操控体验</h1>
<p>之前对APP捏的操控方式有些顾虑，担心会影响稳固度。实际体验下来没有那么严重，可能跟入耳式、柄较短和重心靠上有关。但还是会在每次操作后不自觉地扶一下。整体上操控比AP敲击的方式精准，但不如后者方便。</p>
<h1 id="音质和续航">音质和续航</h1>
<p>我不是个音乐发烧友，对音质不敏感。续航方面也没有过多关注。这两方面大致是Apple一贯的水准吧，和AP相比差不多。</p>
<h1 id="通话体验">通话体验</h1>
<p>我很少打电话，留做后补吧。</p>
<h1 id="结尾">结尾</h1>
<p>我曾<a href="/post/the-experience-of-bose-qc35/" rel="">说过</a>，我对耳机的核心需求是降噪、无线和舒适。AirPods Pro完全可以满足这样的需求。QC35仍是我降噪效果最好、佩戴最舒适的耳机，而APP会是通勤、高温场景下绝对的主力。至于AP，我想知道iOS 13的音频共享什么时候迁移到macOS上？</p>]]></description></item><item><title>《Clean Code》第十四章读后</title><link>http://0x3f.org/post/after-reading-chapter-14-of-clean-code/</link><pubDate>Mon, 20 May 2019 23:48:41 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/after-reading-chapter-14-of-clean-code/</guid><description><![CDATA[<p>蹩脚的译文看着实在费解，干脆去看《Clean Code》的原版。第14章“Successive Refinement（逐步改进）”讲的是对一个用Java实现的解析命令行参数的类Args重构的过程。</p>
<p>很多人都应该好好看看这章。</p>
<p>如果你觉得用了类就是面向对象编程，就去看看Args的第一版代码，一定程度上它是面向过程的。这种代码在我们项目中比比皆是。</p>
<p>如果你觉得重构代码容易出问题，去看看作者是怎么利用单元测试保证重构的质量的。</p>
<p>如果你觉得只要能实现业务逻辑就万事大吉，去看看这章结尾的总结部分：</p>
<blockquote>
<p>Programmers who satisfy themselves with merely working code are behaving unprofessionally. They may fear that they don’t have time to improve the structure and design of their code, but I disagree. Nothing has a more profound and long-term degrading effect upon a development project than bad code.</p>
</blockquote>
<p>第一句的意思就是——抱有这种看法的人是不专业的。</p>
<p>接下来作者说：</p>
<blockquote>
<p>But bad code rots and ferments, becoming an inexorable weight that drags the team down. Time and time again I have seen teams grind to a crawl because, in their haste, they created a malignant morass of code that forever thereafter dominated their destiny.</p>
</blockquote>
<p>很多人总是抱怨老项目的代码写得不好，而我审核他们代码的时候听到最多的话是“这回先这样吧”……亲，你正在成为自己厌恶的人，而你终将被别人厌恶！</p>
<p>本章开头的部分有一段话：</p>
<blockquote>
<p>Most freshman programmers (like most grade-schoolers) don’t follow this advice particularly well. They believe that the primary goal is to get the program working. Once it’s “working,” they move on to the next task, leaving the “working” program in whatever state they finally got it to “work.” Most seasoned programmers know that this is professional suicide.</p>
</blockquote>
<p>当你还是个“freshman”的时候，你觉得精益求精无关紧要是可以被短暂地容忍的，而当你不再fresh的时候还表现得像个freshman，你的职业生涯几乎就走到头了（professional suicide）。</p>]]></description></item><item><title>我叫王战斗</title><link>http://0x3f.org/post/i-am-wang-zhandou/</link><pubDate>Sun, 01 Jul 2018 16:46:32 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/i-am-wang-zhandou/</guid><description><![CDATA[<p>我叫王战斗，男，喵星人，狸花族，现年四个半月，折合成你们两脚兽的年龄算7岁了。</p>
<p>虽然刚降临你星不久，但是我已经能驯服和驾驭两脚兽这种低等生物了。因为我发现这种生物本性里有一个致命弱点：对它很好反而不会珍惜，故作高冷却奴颜婢膝求抱抱！我们喵星管这叫「贱」。</p>
<p>开始的时候，我的驭兽术还不熟练，而且我酷爱往两脚兽的脖子里钻，然后蹭它们的脸。结果它们不干了，在我才两个月零九天的时候就把我交给了现在这头两脚兽。是它们不懂喵星习俗好不好？！而且作为一个刚断奶的小正太，卖个萌怎么啦，怪我咯？</p>
<p>我一直在暗中观察现在这头两脚兽。发现每隔五天，它都会在巢穴里待上两天，然后在接下来的五天里每天都消失一段时间。虽然有点好奇，不过也不是什么大事，只要我有吃有喝、两脚兽按时铲屎，每天给它放个风什么的我也OK，这是我们喵星高等生物的自我修养。</p>
<p>不过还是要测试一下这货的驯服度。所以我命令它伺候我睡个午觉：
</p>
<p>这货竟然没有反抗！！！</p>
<p>有一天我发现它竟然在偷看我练习家传绝学「黑虎掏心」，我就瞪它，就瞪它：
</p>
<p>有时候两脚兽全神贯注地照镜子，我就想看看它看的啥，然后它就扒拉我，我想一定是我高大威猛的身躯挡住它了：
</p>
<p>这老头叫马霸霸，挺能白话的，它的巢穴已经被我军占领了：
</p>
<p>那天两脚兽带回来一只老鼠，我一眼就看出来是假的，但是这货一碰就叫啊，然后我就停不下来了，你星管这叫口嫌体正直，看著两脚兽谜之微笑，我觉得中了奸计：
</p>
<p>更有甚者，它竟然趁我睡著的时候拍我裸照，还传到网上：
</p>
<p>生亦何欢，死亦何惧。趁两脚兽上厕所的时候，叼走了卷纸，然后撕稀碎，有能耐学我们喵星人上完厕所自己舔干净啊？！
</p>
<p>没想到报复来得如此突然，两脚兽不知道从哪儿搞了一瓶毒气，走到哪儿揣到哪儿，我一想搞事情就各种喷：
</p>
<p>真臭啊，臭到怀疑喵生啊！
</p>
<p>话说回来，大部分时间两脚兽还是没那么讨厌。比如这个会喷水的盒子，被我霸占后就成了我最常喝水的东西兼洗脚盆：
</p>
<p>两脚兽的厨艺也不赖：
</p>
<p>吹嘘自己慷慨的时候，两脚兽就指著这口袋说：「比我吃得都好。」其实就是618的打折货。
</p>
<p>两脚兽就是个肥宅兼Nerd，且不说为了给我做饭专门买了台电动切碎机和保鲜盒。铲个屎都装绝命毒师：
</p>
<p>某天整了把稀奇古怪的东西在床上、沙发上各种吸，完事非要说是我干的：
</p>
<p>我的天啊！不就掉个毛么，全宇宙只有你们两脚兽光著屁股满世界跑！
</p>
<p>我来，我见，我征服。我是王战斗，一个普通的驯兽师。
</p>
]]></description></item><item><title>少不读村上</title><link>http://0x3f.org/post/after-reading-killing-commendatore/</link><pubDate>Sun, 22 Apr 2018 13:55:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/after-reading-killing-commendatore/</guid><description><![CDATA[<p>读完了《刺杀骑士团长》。</p>
<p>开始一直以为是类似《禁闭岛》那样的表达手法，觉得当个悬疑的故事看也不错，结果直到最后一页，才发现连装神弄鬼都不是，顿时觉得六十块钱花得有点冤。单从表达手法上说，不喜欢神神叨叨的东西。凭著炒魔幻现实主义的冷饭得诺奖怕是不大可能。</p>
<p>故事的大致情节是：生活平淡的画家，突遇婚变，逃避现实的过程中经历一系列魔幻和现实交错的事，最后解开心结，回到现实，找到救赎。</p>
<p>这本书要表达的东西很多，出现的每一个主体都存在于多条叙事线中，只粗略读过一遍，大概也就理解了个皮毛。最主要的，是两个概念和五幅画。</p>
<p>两个概念，分别是「理念」和「隐喻」。</p>
<p>理念是人在自我审视下出现的另一个「我」，包括善的和恶的。象征善的理念的是「骑士团长」，一个时隐时现、身高60厘米的古代日本武士形象。象征恶的理念的是「白色斯巴鲁男子」，随时提醒「我」：你的恶，我都知道。</p>
<p>隐喻是人生各种经历的具象化的形象。</p>
<p>五幅画，分别是《刺杀骑士团长》、《免色肖像画》、《白色斯巴鲁男子》、《杂木林中的洞穴》和《真理惠肖像画》。</p>
<p>《刺杀骑士团长》的作用很多。首先，从这幅画引出被遗忘的二战中的往事，包括雨田具彦在奥地利和雨田继彦在南京的遭遇。其次，骑士团长于「我」，是善的理念的象征，于雨田具彦，是隐藏数十年挥之不去的心结。第三，最终「我」刺杀了骑士团长，一方面解了雨田具彦的心结，使其安详地离世，另一方面，这是「我」进入隐喻世界的前提，也是解救真理惠的必要条件。</p>
<p>《白色斯巴鲁男子》象征「我」的恶的理念，也是所有人的恶的理念。</p>
<p>《免色肖像画》引出免色这个重要角色。免色是个从世俗的各方面看都臻于完美的男人，然而这幅画真正打动他的，恰恰是表现出了那些深藏的、消极的、恶的不完美的东西。</p>
<p>《杂木林中的洞穴》既是魔幻的开端，也是魔幻的终点。一切魔幻的开始，源于深夜中听到的铃声。而「我」穿过隐喻世界，逃回现实世界，也发生在这个洞里。</p>
<p>《真理惠肖像画》。真理惠既是「我」的妹妹「路」的替身，也是免色的心结。「我」通过刺杀骑士团长、穿过隐喻世界「解救」了真理惠，实际上解开了对「路」早逝的心结。</p>
<p>很多年前读过《挪威的森林》，沮丧得要命，那时就认为少不读村上春树，至今如故。</p>
]]></description></item></channel></rss>