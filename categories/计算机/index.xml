<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>计算机 on 晴耕雨讀</title><link>http://0x3f.org/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/</link><description>Recent content in 计算机 on 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>© 淘气 2022</copyright><lastBuildDate>Tue, 06 Feb 2024 11:25:58 +0800</lastBuildDate><atom:link href="http://0x3f.org/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/index.xml" rel="self" type="application/rss+xml"/><item><title>GVT-g 配置指南：实现多虚拟机共享 Intel 核显硬件加速</title><link>http://0x3f.org/posts/guide-to-configuring-gvt-g-graphics-acceleration/</link><pubDate>Tue, 06 Feb 2024 11:25:58 +0800</pubDate><guid>http://0x3f.org/posts/guide-to-configuring-gvt-g-graphics-acceleration/</guid><description>Proxmox Virtual Environment（PVE）是一个功能强大的开源虚拟化管理平台。它允许用户在单个主机上运行多个虚拟机，每个虚拟机都可以拥有自己的操作系统。为了进一步提升虚拟机的性能，特别是对于那些需要图形处理能力的应用，我们可以通过配置 Intel® Graphics Virtualization Technology –g (GVT-g) 来实现。GVT-g 是一种硬件辅助的虚拟化技术，它允许虚拟机直接访问宿主机的图形处理单元（GPU），从而提高图形性能。本文将详细介绍如何在 PVE 中为 Intel 核显开启 GVT-g 。
本文环境：
操作系统：PVE 8.0 CPU： Intel Core i5-8600t 核显：UHD630 步骤 1 ：修改 GRUB 配置 首先，我们需要确保 GRUB 引导加载器在启动时启用了必要的参数。打开/etc/default/grub文件，并找到GRUB_CMDLINE_LINUX_DEFAULT行。添加以下参数：
1 GRUB_CMDLINE_LINUX_DEFAULT=&amp;#34;quiet intel_iommu=on iommu=pt i915.enable_gvt=1&amp;#34; 这将启用 Intel IOMMU（Input/Output Memory Management Unit）和 GVT-g 。保存文件后，运行以下命令来更新 GRUB 配置：
1 sudo update-grub 步骤 2 ：添加内核模块 接下来，我们需要确保 PVE 在启动时加载必要的内核模块。编辑/etc/modules文件，添加以下模块：
1 2 3 4 5 vfio vfio_iommu_type1 vfio_pci vfio_virqfd kvmgt 如果你之前因为配置直通核显而在/etc/modprobe.d/pve-blacklist.conf中屏蔽了显卡驱动，现在需要解除屏蔽。这可以通过注释掉或删除相关行来实现。
完成修改后，运行以下命令来更新 initramfs ：</description></item><item><title>轻松管理 Docker 下的 MariaDB 错误日志：重定向到日志控制台和日志轮转</title><link>http://0x3f.org/posts/steps-to-implement-redirection-and-rotation-for-error-logs-of-docker-deployed-mariadb/</link><pubDate>Mon, 15 Jan 2024 16:48:09 +0800</pubDate><guid>http://0x3f.org/posts/steps-to-implement-redirection-and-rotation-for-error-logs-of-docker-deployed-mariadb/</guid><description>本文旨在通过把 MariaDB 的错误日志重定向到 Docker 的错误控制台以实现通过 Loki 收集日志，并使用日志轮转控制日志文件大小。
指定固定的日志文件名 1 2 [mariadb] log_error=/config/databases/mariadb.err 把容器中的错误日志重定向到 Docker 日志控制台 在容器的环境变量中添加以下内容：
1 2 DOCKER_MODS=lscr.io/linuxserver/mods:universal-stdout-logs LOGS_TO_STDOUT=/config/databases/mariadb.err 设置 MariaDB 的 root@localhost 用户的鉴权方式 创建 root@localhost 用户：
1 CREATE USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED VIA &amp;#39;unix_socket&amp;#39;; 或更改已存在的 root@localhost 用户的鉴权方式：
1 ALTER USER &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED VIA &amp;#39;unix_socket&amp;#39;; 受权 RELOAD 给 root@localhost 用户 1 GRANT RELOAD ON *.* TO &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39;;` 配置 logrotate 在宿主机创建 /etc/logrotate.d/mariadb：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 /mnt/user/appdata/mariadb/databases/mariadb.</description></item><item><title>优化 BT 下载速度的方法</title><link>http://0x3f.org/posts/how-to-optimize-bt-download-speed/</link><pubDate>Wed, 15 Nov 2023 22:30:47 +0800</pubDate><guid>http://0x3f.org/posts/how-to-optimize-bt-download-speed/</guid><description>映射下载机端口到外网 申请公网 IP 找宽带客服给分配公网 IP 地址。现在一般是给城域网地址了吧，不过也能用。
配置光猫桥接 找宽带客服提要求，会安排维修人员上门处理。
配置路由器 映射下载机端口 把 BT 客户端所在的 IP 和端口映射到外网：
打开 uPnP 配置 BT 客户端 指定固定的端口号，和前面路由器里的端口映射对应：
更新 Trackers 从下面网址获取最新的 tracker 服务器，保存到 BT 客户端里：
https://trackerslist.com/best.txt
其它问题 Alternative Rate Limits qBittorrent 有个可选限速的配置，默认是 10KiBps ，如果误点了状态栏的按钮可能会启用这个配置，导致速度上不去。</description></item><item><title>通过 Karabiner-Elements 实现用 Esc 键关闭 Twitter App 的窗口</title><link>http://0x3f.org/posts/using-karabiner-elements-to-close-twitter-app-windows-with-the-esc-key/</link><pubDate>Fri, 25 Aug 2023 16:27:15 +0800</pubDate><guid>http://0x3f.org/posts/using-karabiner-elements-to-close-twitter-app-windows-with-the-esc-key/</guid><description>Twitter for macOS 不支持用 Esc 键关闭图片预览窗口，不符合我的习惯。下面是针对 Twitter App 把 Esc 键映射为 Cmd+W 的配置。</description></item><item><title>从 macOS 桌面运行 Neovide 的方法</title><link>http://0x3f.org/posts/how-to-run-neovide-from-macos-desktop/</link><pubDate>Mon, 21 Aug 2023 17:07:48 +0800</pubDate><guid>http://0x3f.org/posts/how-to-run-neovide-from-macos-desktop/</guid><description>截至当前版本（0.11.1），Neovide 在 macOS 下只能从命令行启动，为方便起见，有时候我希望通过 RayCast 或者 Dashboard 启动它，或者通过右键菜单“Open with”用它直接打开选中的文件。
方法是通过 Automator 创建一个“Application”类型的新文档，添加一个“Run AppleScript”的 Action 。然后填入下面的内容：
最后将文档保存到 Application 目录，命名为“Neovide”。</description></item><item><title>用 SuperDuper! 配合迁移助理加速 Mac 的迁移</title><link>http://0x3f.org/posts/speed-up-mac-migration-with-superduper-and-migration-assistant/</link><pubDate>Sat, 05 Aug 2023 22:29:54 +0800</pubDate><guid>http://0x3f.org/posts/speed-up-mac-migration-with-superduper-and-migration-assistant/</guid><description>用迁移助理迁移数据到一台新的 Mac ，点对点传输提示要几个小时。改用 SuperDuper! 复制到固态移动硬盘，再用迁移助理迁移，几分钟就好了。
趁着今年 SSD 降价攒了个移动硬盘，把机械的卖了，省了太多时间了。</description></item><item><title>保存 tweet 到 OmniFocus 的快捷指令</title><link>http://0x3f.org/posts/a-shortcuts-that-saves-tweets-to-omnifocus/</link><pubDate>Tue, 22 Nov 2022 21:34:25 +0800</pubDate><guid>http://0x3f.org/posts/a-shortcuts-that-saves-tweets-to-omnifocus/</guid><description>保存 tweet 到 OnniFocus 并提取内嵌链接的快捷指令，绕过了iOS 16 快捷指令“Make rich text from HTML”丢失编码信息导致乱码的 bug 。
https://www.icloud.com/shortcuts/fc68643daa044b44959f16b0a94ec598</description></item><item><title>用 Obsidian 写博客的方法</title><link>http://0x3f.org/posts/how-to-write-blog-with-obsidian/</link><pubDate>Sun, 23 Oct 2022 17:09:28 +0800</pubDate><guid>http://0x3f.org/posts/how-to-write-blog-with-obsidian/</guid><description>我用 Hugo + GitHub Pages 写博客，之前一直通过命令新建文章，然后在编辑器里一项一项修改 Front Matters ，最后再通过命令提交上去。有一天突然觉得这样太麻烦了，应该可以用图形界面简化一下。
Typora 收费之后，Obsidian 可能是最好的免费 Markdown 编辑器了。这里用到三个插件：QuickAdd 、 Templater 和 Obsidian Git 。
在 Hugo 目录下创建两个子目录 templates 和 scripts ，设置 Templater 的选项 Template folder location 为 templates 。
然后在 templates 目录下创建模板 New Post.md：
1 2 3 4 5 6 7 8 9 --- title: &amp;#34;{{VALUE:articleTitle}}&amp;#34; slug: &amp;#34;{{VALUE:articleSlug}}&amp;#34; date: {{VALUE:articleTimestamp}} categories: [&amp;#34;{{VALUE:articleCategory}}&amp;#34;] tags: toc: false draft: true --- 在 scripts 下创建脚本 create_new_post.js：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 module.</description></item><item><title>自动设置节假日和工作日闹钟的快捷指令</title><link>http://0x3f.org/posts/yet-another-shortcuts-that-sets-alarms-for-chinese-holidays-and-workdays-automatically/</link><pubDate>Thu, 20 Oct 2022 22:23:04 +0800</pubDate><guid>http://0x3f.org/posts/yet-another-shortcuts-that-sets-alarms-for-chinese-holidays-and-workdays-automatically/</guid><description>写了个自动设置节假日和工作日闹钟的快捷指令，数据源用的是苹果官方的“中国大陆节假日”日历。
https://www.icloud.com/shortcuts/97960ed8326e43d387b0d7bb459667dd
需要先订阅上述日历，订阅方法见这个快捷指令里的说明。
最后把它配置到自动化（比如助眠开始时执行）里就可以了。</description></item><item><title>用 Hammerspoon 收集 Arc 浏览器网页到 OmniFocus 的方法</title><link>http://0x3f.org/posts/how-to-collect-webpage-from-the-arc-browser-to-omnifocus/</link><pubDate>Wed, 19 Oct 2022 23:02:50 +0800</pubDate><guid>http://0x3f.org/posts/how-to-collect-webpage-from-the-arc-browser-to-omnifocus/</guid><description>我用 Hammerspoon 收集网页到 OmniFocus ，它的 SendToOmniFocus 对 Chrome 家族的浏览器有原生的支持，但并不适用于 Arc 浏览器。
看 SendToOmniFocus 的源码是用 Apple Script 获取 Chrome 家族浏览器中网页的信息的，但最初我没有解决怎样用同样的办法拿到 Arc 浏览器网页信息的问题。所以采取通过剪贴板中转的方式实现。
首先配置 Surfingkeys 实现把网页信息组装成特定格式复制到剪贴板：
1 2 3 4 5 6 7 8 9 10 11 mapkey(&amp;#39;yO&amp;#39;, &amp;#39;Copy OmniFocus sensible info.&amp;#39;, yankOmniFocusSensibleInfo); function yankOmniFocusSensibleInfo() { var info_arr = []; info_arr.push(&amp;#34;#omnifocus_sensible&amp;#34;); info_arr.push(document.title); info_arr.push(window.location.href); Clipboard.write(info_arr.join(&amp;#34;\n&amp;#34;)); } 然后在 Hammerspoon 中监听剪贴板，一旦发现特定格式的文本，就调用 Apple Script 填充解析到的网页信息到 OmniFocus 的对话框：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 -- Interpolate table values into a string -- From http://lua-users.</description></item><item><title>用 Caddy 做 Home Lab 的反向代理</title><link>http://0x3f.org/posts/reverse-proxying-home-lab-with-caddy/</link><pubDate>Sun, 16 Oct 2022 22:37:08 +0800</pubDate><guid>http://0x3f.org/posts/reverse-proxying-home-lab-with-caddy/</guid><description>我原本用 SWAG 做 Home Lab 的反向代理，它自带很多服务的配置模板，只需要复制后改几个参数就能工作，还有通过 ACME 自动更新 SSL 证书的功能，但是从某个时间起，首次访问经由它代理的服务会报 404 或 502 的错误，刷新页面就恢复正常，然后隔段时间后又会再次发生，另外还会偶尔出现页面无法显示最新的状态的问题，尤以当服务出错时发生居多。
最近尝试用 Caddy 代替 SWAG ，效果非常好，再也没有出现上述问题。而且 Caddy 的使用很简单，只需要在 Caddyfile 中加几行配置信息就能实现对一个服务的反向代理。当然，它也集成了自动更新 SSL 证书的功能。此外，它的镜像只有 80 多 MB ，在我测试的几个反向代理服务里是最节省空间的。
出于安全考虑，我没有把 Home Lab 的服务暴露在公网上，所以需要通过 DNS challenge 的方式申请 SSL 证书。我的 Docker 容器部署在 Unraid 上，官方软件仓库里的 Caddy 镜像并不包含 Cloudflare 的模块，所以找了个打包了该模块的镜像，看起来更新得还很及时。
镜像的 README 里有申请 Cloudflare API Token 的说明，部署容器前填到环境变量里即可。这里有个小坑，创建容器前需要手动创建 Caddyfile ，空文件就行，否则会报错：
Are you trying to mount a directory onto a file
Caddy 不如 SWAG 的地方是没有为服务提供配置模板，所以我保留了后者的配置目录，作为在前者中配置服务时的参考。以下是我的 Caddyfile 的示例，展示了怎样配置泛域名的反向代理和 SSL 证书的自动申请，以及服务的几种典型反向代理配置：</description></item><item><title>Leaderf-phpnamespace: Yet another PHP namespace resolver</title><link>http://0x3f.org/posts/leaderf-phpnamespace-yet-another-php-namespace-resolver/</link><pubDate>Sun, 25 Sep 2022 22:33:13 +0800</pubDate><guid>http://0x3f.org/posts/leaderf-phpnamespace-yet-another-php-namespace-resolver/</guid><description>This plugin uses the power of LeaderF to perform PHP namespace related tasks.
https://github.com/xbot/Leaderf-phpnamespace
Features Insert use statements for FQCNs. Sort use statements alphabetically. Expand class names to FQCNs. Insert namespace for the current file. All the above features support the fuzzy searching function and all the three modes (nameonly, fullpath and regex) provided by LeaderF. Requirements LeaderF ctags is properly configured in Vim/Neovim. Install Use any of your favourite plugin manager to install it, for example:</description></item><item><title>Unraid 6.11 弃用 NerdPack 的解决办法</title><link>http://0x3f.org/posts/how-to-install-packages-after-nerdpack-is-deprecated-in-unraid-6.11/</link><pubDate>Sun, 25 Sep 2022 21:29:41 +0800</pubDate><guid>http://0x3f.org/posts/how-to-install-packages-after-nerdpack-is-deprecated-in-unraid-6.11/</guid><description>Unraid 6.11 的 release note 没提弃用 NerdPack ，浪费了我很多时间。😞
当前版本的 Unraid 是基于 Slackware 15.0 的，可以手动从以下站点下载软件包手动安装：
https://slackware.pkgs.org/15.0/slackware-x86_64/ https://slackonly.com/pub/packages/15.0-x86_64/ 把下载的软件包放到运行中的 Unraid 的 /boot/extra 目录（不存在就手动创建）下，重启系统后自动安装或者通过 installpkg 命令手动安装。例如：
1 installpkg vim-8.2.4256-x86_64-1.txz 更简单的方法是使用 un-get ：
1 2 3 4 5 6 un-get search vim un-get install python3 python-pip python-setuptools un-get remove vim un-get update un-get cleanup un-get upgrade 这个命令目前不解决依赖关系，而且存在部分包无法下载或找不到的现象，还是需要手动干预。
作者没有在项目主页写安装说明，而是写在 Reddit 帖子里了。
2022-10-07 更新 出了个新的 NerdTools ，界面和 NerdPack 一样难用，包的数量现在还很少，但版本较新，还有一些 un-get 目前搜不到的包（比如: fzf）。可以作为补充。</description></item><item><title>用 Neovim 调试 RESTful 接口</title><link>http://0x3f.org/posts/send-restful-requests-with-neovim/</link><pubDate>Sun, 18 Sep 2022 11:31:16 +0800</pubDate><guid>http://0x3f.org/posts/send-restful-requests-with-neovim/</guid><description>纯文本有很多好处，比如可以用 Git 管理，方便备份和追溯，方便多机同步和分享。
之前使用 VS Code 的插件 Rest Client ，从浏览器后台复制请求数据过来就可以用，很方便。但是存在一些用起来不舒服的地方，比如：
不方便对接口分组管理。 不方便快速查找接口。 这些在对纯文本操作效率更高的 Vim 里都可以解决，但是之前尝试过的一些 Vim 的 RESTful 客户端插件还不成熟，最近发现 rest.nvim 基本可以满足日常使用需要了。
rest.nvim 是个 Neovim 的插件，和 Rest Client 支持的格式差异较小，迁移很方便。这样我就可以用 Vim 的折叠特性对接口分组管理，用插件 Leaderf 的模糊查找特性快速定位接口，当然，对纯文本的任何编辑和操作在 Vim 里就是浑然天成、行云流水的。
它的大致用法如下：
在工作目录下创建环境变量文件 .env ：
1 2 3 4 5 6 base_url=http://myapp.dev header_accept_json=application/json, application/problem+json, text/plain, */* header_content_type_json=application/json;charset=utf-8 header_cookie_debug_session=XDEBUG_SESSION=1;app_session=1ObUjvLvEYjVhJ8tbzn5BorN7TViNtI1S625140e user_email=user@test.com user_password=password 在工作目录下创建请求文件（例如 myapp.http ）：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 ### Login POST {{base_url}}/v1/sessions Accept: {{header_accept_json}} Content-Type: {{header_content_type_json}} Cookie: {{header_cookie_debug_session}} {&amp;#34;email&amp;#34;: &amp;#34;{{user_email}}&amp;#34;, &amp;#34;password&amp;#34;: &amp;#34;{{user_password}}&amp;#34;} ### Get an article GET {{base_url}}/v1/articles/DiJeb7IQHo8FOFkXulieyA Accept: {{header_accept_json}} Cookie: {{header_cookie_debug_session}} ### Create an article POST {{base_url}}/v1/articles Accept: {{header_accept_json}} Cookie: {{header_cookie_debug_session}} Content-Type: {{header_content_type_json}} { &amp;#34;title&amp;#34;: &amp;#34;Hello world&amp;#34;, &amp;#34;Content&amp;#34;: &amp;#34;This is a dummy post.</description></item><item><title>给 Vim 插件做快照</title><link>http://0x3f.org/posts/create-snapshot-for-vim-plugins/</link><pubDate>Tue, 06 Sep 2022 23:28:26 +0800</pubDate><guid>http://0x3f.org/posts/create-snapshot-for-vim-plugins/</guid><description>我的 Vim 插件数快到 150 了，弊端也越来越明显。
最大的问题是稳定性，经常批量更新后发现某个功能不工作了，尤其是大部分问题只有在用到的时候才发现，非常影响效率。
我用的插件管理工具是 vim-plug ，虽然有回滚到上一次的功能，但是我手比较欠，经常频繁更新，往往发现一个问题时已经更新了几次了，所以这个功能对我来说不是很适用。
好在它提供了做快照的命令 :PlugSnapshot ，其实就是把当前所有插件的 Git 哈希值输出到一个 Vim 脚本里，恢复快照的时候只要执行这个脚本就行了。
为了方便使用，创建一个自定义命令：
1 command! SnapshotPlugins PlugSnapshot ~/.vim/plugin.lock 然后把生成的 plugin.lock 文件加入 Git 仓库，必要的时候可以利用 git bisect 快速找到问题出处。
恢复的命令如下：
1 vim -S plugin.lock</description></item><item><title>Leaderf-folder: Quickly open a subfolder</title><link>http://0x3f.org/posts/the-leaderf-folder-plugin/</link><pubDate>Sun, 07 Aug 2022 17:31:50 +0800</pubDate><guid>http://0x3f.org/posts/the-leaderf-folder-plugin/</guid><description>LeaderF-folder is a plugin for LeaderF that aims to open a subfolder quickly.
Requirements LeaderF fd Dirbuf: Optional, can be changed to other file managers. Setup This plugin takes Dirbuf as the default solution to open the chosen subfolder. You can use the following option to customize it:
1 let g:Lf_FolderAcceptSelectionCmd = &amp;#39;Dirbuf&amp;#39; Usage 1 :LeaderfFolder Press F1 to get more help</description></item><item><title>Laravel Horizon 简介</title><link>http://0x3f.org/posts/an-introduction-of-laravel-horizon/</link><pubDate>Sat, 06 Aug 2022 20:22:36 +0800</pubDate><guid>http://0x3f.org/posts/an-introduction-of-laravel-horizon/</guid><description>简介 Horizon 针对 Laravel 的 Redis 队列，增加了可视化、进程池等特性。
特性 可视化仪表板 Worker 进程池的维护和调度 词汇表 master supervisor: 主进程，通过 proc_open() 启动 supervisor 子进程。 environments: 可以按 APP_ENV 针对不同环境创建多套配置。 supervisors: Horizon 自己的进程池概念，与托管后台进程的软件 Supervisor 没有关系。 workers: 队列消费者进程，每个 supervisor 中包含多个 worker。 负载均衡策略 false 一个 supervisor 下的所有 worker 全部用于按队列名称的顺序逐个队列消费任务。
simple 一个 supervisor 下的所有 worker 被平均分配给每个队列。
auto 一个 supervisor 下空闲的 worker 会被优先分配给负载最高的队列。同时保证空闲队列有配置项 minProcesses 数量的 worker 待命。
超时提醒 如果一个队列执行任务的时间超过预先配置的时间限制，horizon 将终止该任务并可以通过短信、邮件或 Slack 发送通知。
Horizon 每分钟查询一次执行任务的时间超过配置值的队列：
每 5 分钟发送一次通知：
吞吐量和平均耗时统计 需要通过定时任务周期性执行 artisan horizon:snapshot 命令生成统计数据并存储到 Redis 中。</description></item><item><title>解决 PHPUnit 生成代码覆盖报告时抛出重复定义类的错误的办法</title><link>http://0x3f.org/posts/the-solution-of-class-redeclaration-error-raised-while-generating-php-code-coverage-report/</link><pubDate>Thu, 23 Jun 2022 14:42:34 +0800</pubDate><guid>http://0x3f.org/posts/the-solution-of-class-redeclaration-error-raised-while-generating-php-code-coverage-report/</guid><description>在生成 Cobertura 格式的代码覆盖报告时程序报了如下错误：
Generating code coverage report in Cobertura XML format &amp;hellip; PHP Fatal error: Cannot declare class App\FakeNamespace\GenericProvider, because the name is already in use in /builds/fake_project/app/FakeNamespace/GenericProvider.php on line 17
对应的代码和单元测试执行均无问题。
经排查，直接原因是使用了 Mockery 的 Instance Mocking 1特性 mock 代码中的硬依赖关系（Hard Dependency）。
该特性的实现利用了类的自动加载机制和依赖注入技术。对依赖关系 mock 的实例保存在 Mockery 的容器中，同时生成一个 stub 文件：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 &amp;lt;?php namespace Mockery; class Mockery_App_FakeNamespace_GenericProvider { private Container $container; function doSomething($param) { // internal code check expectations return $this-&amp;gt;container-&amp;gt;get(&amp;#39;App\FakeNamespace\GenericProvider::doSomething&amp;#39;)-&amp;gt;expectations(); } } 当代码中实例化这个类的时候，Mockery 自动加载该文件，从而代替了对原类文件的加载。</description></item><item><title>ClashX 在使用订阅链接的同时添加自定义规则的方法</title><link>http://0x3f.org/posts/customize-rules-for-clashx-while-using-a-subscribed-link/</link><pubDate>Wed, 22 Jun 2022 22:15:12 +0800</pubDate><guid>http://0x3f.org/posts/customize-rules-for-clashx-while-using-a-subscribed-link/</guid><description>在 ClashX 中使用机场的订阅链接时，如果需要添加自定义的规则，且在定时更新订阅的链接时不会被覆盖，解决的方法是创建一个新的配置文件，使用 Clash 的 proxy-providers 和 rule-providers 分别引用订阅的链接和开源的规则集：
然后就可以在 rules 区块里添加自定义规则了。</description></item><item><title>使用 lemonade 和 autossh 辅助 Neovim 远程开发</title><link>http://0x3f.org/posts/assisting-neovim-with-remote-development-using-lemonade-and-autossh/</link><pubDate>Thu, 19 May 2022 16:02:34 +0800</pubDate><guid>http://0x3f.org/posts/assisting-neovim-with-remote-development-using-lemonade-and-autossh/</guid><description>我的开发环境部署在 Linux VM 里，普通的远程复制用 vim-oscyank 插件是可以实现的。但是当我想用 fugitive 的 :GBrowse 命令打开 Gitlab 链接的时候遇到了困难，甚至我想退而求其次、通过 :GBrowse! 复制链接都不可得，因为 fugitive 的代码里通过 has('clipboard') 判断 Vim 是否可以使用系统剪贴板，且我的 Linux VM 不满足该特性的条件（见 :help clipboard）。所以用 lemonade 解决这个问题。
实现方式 lemonade 虽然支持客户端和服务端直接通信，但是并不提供安全保障，所以我采取 SSH 端口远程转发的方式并用 autossh 保持连接。
首先分别在服务端（MacOS）和客户端（Linux VM）创建 lemonade 的配置文件（~/.config/lemonade.toml）：
服务端：
1 2 3 port = 2489 allow = &amp;#39;127.0.0.1&amp;#39; line-ending = &amp;#39;lf&amp;#39; 客户端：
1 2 3 4 5 port = 2489 host = &amp;#39;localhost&amp;#39; trans-loopback = true trans-localfile = true line-ending = &amp;#39;lf&amp;#39; 然后创建 MacOS 的服务配置文件：</description></item><item><title>让 AdGuard Home 和 OpenClash 协同工作</title><link>http://0x3f.org/posts/make-adguard-home-and-openclash-work-together/</link><pubDate>Sun, 06 Mar 2022 12:12:10 +0800</pubDate><guid>http://0x3f.org/posts/make-adguard-home-and-openclash-work-together/</guid><description>家庭网络环境 使用 OpenWrt （以下简称 OP ）做旁路网关 OP 内建 OpenClash （以下简称 OC ）访问不存在的网站 OP 内建 WireGuard （以下简称 WG ）做内网穿透 使用 AdGuard Home （以下简称 AH ）做内网 DNS 和广告过滤 之前遇到的问题 不管怎样配置，内网和 WG 下的内网主机名解析和科学上网这 4 种场景总有至少一个不工作。
期间创建过一个虚拟机做独立的 WG Server ，内建 SmartDNS （以下简称 SD ）做 AH 的上游，其它场景工作得很好，只是无法通过旁路网关访问不存在的网站。
解决方法 首先如果要正常使用 OC ，就必须使用它的 DNS 解析。
同时，又要达到使用 AH 做内网主机名解析和广告过滤的目的，所以要把 OC 设成 AH 的唯一上游。
然后最棘手的问题来了。如果把 AH 设成 dnsmasq 的上游， WG 下不能解析内网主机名。如果把 AH 设成监听 53 端口，则内网无法解析主机名。
想到之前在独立的 WG Server 上用 SD 在两种场景下都可以正常解析，就试着用它代替 dnsmasq ，结果柳暗花明，所以场景都跑通了。</description></item><item><title>为 Seafile 配置反向代理的问题</title><link>http://0x3f.org/posts/setup-reverse-proxy-for-seafile/</link><pubDate>Mon, 10 Jan 2022 23:27:08 +0800</pubDate><guid>http://0x3f.org/posts/setup-reverse-proxy-for-seafile/</guid><description>我目前用 SWAG 做 Homelab 的反向代理，在和其它服务一样为 Seafile 配置好后，访问时却报如下错误：
Contradictory scheme headers
原因是 Seafile 的 Docker 镜像里已经使用了 NGINX 做反代，而且配置里包含和 SWAG 反代相同的配置项：
1 proxy_set_header X-Forwarded-Proto $scheme； 此时，通过 HTTPS 访问的 SWAG 反代传递的 HEADER 里 X-Forwarded-Proto 是 https ，而通过 HTTP 访问的 Seafile 传递的是 http ，就会报以上错误。
一种解决方法是，把 Seafile 的 /etc/nginx/conf.d/seafile.nginx.conf 复制到宿主机，把文件中 X-Forwarded-Proto 这一行注释掉，然后映射到 Docker 容器的上述路径上：
1 -v &amp;#39;/mnt/user/appdata/seafile/seafile.nginx.conf&amp;#39;:&amp;#39;/etc/nginx/conf.d/seafile.nginx.conf&amp;#39;:&amp;#39;ro&amp;#39; 需要注意的是，不同版本的 Seafile 镜像里该文件的路径可能不同。</description></item><item><title>在 gv.vim 中使用 Diffview.nvim 查看提交内容</title><link>http://0x3f.org/posts/check-commit-with-diffview-in-gv-vim/</link><pubDate>Thu, 23 Dec 2021 14:42:03 +0800</pubDate><guid>http://0x3f.org/posts/check-commit-with-diffview-in-gv-vim/</guid><description>Vim 没有很好的 Git commits viewer ，普通的 diff 模式对于很小的 commit 还行，文件较多、改动较大的 commit 看起来很糟糕。
gv.vim + Diffview.nvim 是我目前找到的最好的解决方案，下面稍加配置，实现在 gv.vim 的 log 界面通过快捷键 vv 在 Diffview.nvim 里打开光标所在行对应的 commit ：
1 2 3 4 5 6 7 8 9 10 11 12 lua &amp;lt;&amp;lt; EOF function _G.diff_view_commit(commit_hash) require&amp;#39;diffview&amp;#39;.open(commit_hash .. &amp;#39;~1..&amp;#39; .. commit_hash) end EOF au! FileType GV nnoremap vv &amp;lt;Esc&amp;gt;:call &amp;lt;SID&amp;gt;DiffviewCommitUnderCursor()&amp;lt;CR&amp;gt; function! s:DiffviewCommitUnderCursor() normal! ^2f w call v:lua.diff_view_commit(expand(&amp;#39;&amp;lt;cword&amp;gt;&amp;#39;)) endfunction</description></item><item><title>Hammerspoon 快速入门</title><link>http://0x3f.org/posts/hammerspoon-quick-start/</link><pubDate>Mon, 13 Dec 2021 00:38:06 +0800</pubDate><guid>http://0x3f.org/posts/hammerspoon-quick-start/</guid><description>Hammerspoon（以下简称 HS）是个很好用的效率工具脚手架，我一直用它实现 APP 启动器、窗口控制、桌面常亮等功能。
HS 可以通过写脚本可以实现很多个性化的需求。最快的上手方式是直接安装别人写好的脚本，然后根据自己的需要稍加修改即可。如果需要深度定制，可以自行实现新的模块。
HS 使用 Lua 语言。我在 08 年左右用过一年的 SciTE 编辑器，它也通过内嵌的 Lua 配置和扩展功能，所以学了这个语言。当时 NGINX 也才刚起步， Lua 主要还是被用在游戏脚本的开发，并没有现在使用得如此广泛。当时对这个语言的印象是两个极端，一是速度非常快，远远超过 PHP 和 Python ，比 C 也只慢一点点；二是开发库非常简陋，其它脚本语言一行就能实现的常见功能，它往往要从头开始写。
总之 Lua 是个很精简的语言，可以通过 Y 分钟速成 X 的教程快速熟悉它的语法，然后浏览一遍官方入门指南。HS 提供了很多方便的模块，通过 API 文档查看。
由于经常需要切换键盘映射方案，所以我写了一个简单的模块来实现这个功能：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 local hotkey = require &amp;#34;hs.</description></item><item><title>用微力同步换掉了 Dropbox</title><link>http://0x3f.org/posts/replace-dropbox-with-verysync/</link><pubDate>Wed, 06 Oct 2021 01:24:41 +0800</pubDate><guid>http://0x3f.org/posts/replace-dropbox-with-verysync/</guid><description>我希望找到一种体验较好的方式，把两部手机和索尼黑卡上的照片集中同步到 NAS 上交由 PhotoPrism 托管。
需求如下：
可以方便地发送多平台照片到 NAS 。 可以单向同步手机到 NAS 并忽略手机的删除操作，以节省手机的存储空间。 可以实现内网穿透且简单稳定。 便宜。 对比了 PhotoSync 、 Resilio Sync 、 Syncthing 和微力同步（verysync）。
PhotoSync 作为专门针对同步照片的场景设计的 APP ，完美覆盖前两点，第三点可以借助 NAS 已经配置好的内网穿透实现，但是需要购买相应的 Plan ，而且 Android 和 iOS 平台要各自单独购买。
Resilio Sync 实现内网穿透需要引入新的依赖关系，不完全满足第三点。
Syncthing 看起来不错，但是没有官方的 iOS 客户端。
微力同步据说是基于 Syncthing 的，且补上了后者缺失的一环。各平台免费，只有 iOS 上需要花 12￥ 买 APP 。
我的 NAS 运行的是 Unraid ， Community Applications 里没有微力同步，在这里找到了别人配置好的模板，部署很方便。
试用后因为太好用，干脆把 Dropbox 目录也放到微力同步里，卸载了会占用很多内存且免费方案 3 个端的限制早已捉襟见肘的 Dropbox 。</description></item><item><title>使用 Remote Torrent Adder 做 qBittorrent 的客户端</title><link>http://0x3f.org/posts/take-remote-torrent-adder-as-client-of-qbittorrent/</link><pubDate>Fri, 20 Aug 2021 00:03:28 +0800</pubDate><guid>http://0x3f.org/posts/take-remote-torrent-adder-as-client-of-qbittorrent/</guid><description>我使用部署在 NAS 中的 qBittorrent 下载资源，每次手动复制磁力链链接到 qBittorrent 的 WebUI 很麻烦。
Remote Torrent Adder 是 Chrome 的扩展，可以通过右键菜单把 magnet 等协议的链接发送到多种下载工具，其中就包括 qBittorrent 。
安装过程不是那么顺利，这个开源小工具并没有对用户体验做更多的优化。
首先初次安装后，配置界面会有一个初始的、针对 Vuze SwingUI 的配置，需要把它删掉，再添加针对 qBittorrent v4.1+ WebUI 的配置，填好各项配置后选中 Label/Directory interactivity 复选框。因为我把电影和剧集分目录存放，开始下载前需要指定存储目录。
第一次点菜单的时候没有反应，后来刷新页面后就好了。但是弹出来的指定下载目录的对话框没有选项，经测试发现第一次需要手工填写，之后有了缓存就可以选了。</description></item><item><title>用 zsh-autoenv 实现目录级别的 zshrc</title><link>http://0x3f.org/posts/implement-directory-specific-zshrc-with-zsh-autoenv/</link><pubDate>Thu, 19 Aug 2021 23:34:25 +0800</pubDate><guid>http://0x3f.org/posts/implement-directory-specific-zshrc-with-zsh-autoenv/</guid><description>zsh-autoenv 可以实现当进入特定的目录时加载特定的 zshrc 文件，并当切换到其它目录时取消其中的变更。后者在当前的版本下，对环境变量、命令别名和函数有效。
使用方法为：
在目录（如 ~/project ）下创建文件 .autoenv.zsh :
1 2 3 4 5 6 7 8 autostash TEST_VAR=&amp;#39;This is a test variable.&amp;#39; autostash alias test_cmd=&amp;#39;echo &amp;#34;This is a test alias.&amp;#34;&amp;#39; autostash test_func test_func() { echo &amp;#34;This is a test function.&amp;#34; } 出于安全考虑， zsh-autoenv 会对 .autoenv.zsh 做哈希校验，所以第一次或者做变动后进入该目录时，都会要求确认是否接受此文件最新的内容。
此外，如果进入的目录不存在 .autoenv.zsh， zsh-autoenv 会自动向上查找最近的同名文件并加载，上溯的层级可以通过配置项定义。
最后，它提供了一个命令 autoenv-edit 用来快速打开和编辑 .autoenv.zsh 文件。</description></item><item><title>PHPUnit 9.x 性能分析的方法</title><link>http://0x3f.org/posts/method-for-phpunit-9.x-performance-analysis/</link><pubDate>Tue, 17 Aug 2021 14:48:12 +0800</pubDate><guid>http://0x3f.org/posts/method-for-phpunit-9.x-performance-analysis/</guid><description>利用 PHPUnit 9.x 的 extension 特性，可以记录每个测试用例的耗时并存储到 CSV 文件中。
Extension 代码：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 &amp;lt;?php declare(strict_types=1); namespace Tests; use PHPUnit\Runner\AfterTestHook; class LongRunningTestsLogger implements AfterTestHook { public function __construct(private string $log_file) { } public function executeAfterTest(string $test, float $time): void { $fp = fopen($this-&amp;gt;log_file . &amp;#39;.csv&amp;#39;, &amp;#39;a&amp;#39;); fputcsv($fp, [$test, $time]); fclose($fp); } } phpunit.xml 的配置：</description></item><item><title>Archlinux 下 PHP 不能读取 /tmp 下文件的问题</title><link>http://0x3f.org/posts/php-failed-to-open-stream-under-tmp-in-archlinux/</link><pubDate>Mon, 09 Aug 2021 15:27:58 +0800</pubDate><guid>http://0x3f.org/posts/php-failed-to-open-stream-under-tmp-in-archlinux/</guid><description>问题的场景是，以 http 用户运行的 FPM 进程访问 /tmp 下由普通用户运行的 CLI 进程创建的文件时，报如下错误：
Failed to open stream.
原因是 PHP-FPM 的 systemd 配置中默认对 FPM 进程单独挂载 /tmp 目录。
具体对应：
/usr/lib/systemd/system/php-fpm.service
中的：
PrivateTmp=true</description></item><item><title>Archlinux 下在 /var/run 下创建目录的方法</title><link>http://0x3f.org/posts/create-directory-under-/var/run-in-archlinux/</link><pubDate>Sun, 08 Aug 2021 23:30:18 +0800</pubDate><guid>http://0x3f.org/posts/create-directory-under-/var/run-in-archlinux/</guid><description>Archlinux 使用 systemd-tmpfiles 管理 /var/run 下的临时目录。这意味着如果我手动创建 /var/run/php 目录，在系统重启后将不复存在。
解决的办法是修改 /usr/lib/tmpfiles.d/php-fpm.conf 文件，把默认的目录名 php-fpm 改成 php。
但这会带来另一个问题，当 PHP 被重装或升级后，该文件会被覆盖。所以，解决的方法是复制后再修改。</description></item><item><title>使用 Homebrew 安装旧版程序</title><link>http://0x3f.org/posts/rollback-to-old-version-with-homebrew/</link><pubDate>Sun, 04 Oct 2020 18:21:04 +0800</pubDate><guid>http://0x3f.org/posts/rollback-to-old-version-with-homebrew/</guid><description>前几天发现因为 Hugo 的不兼容更新导致我在用的主题在部署时报错，所以打算装回旧版。但是网上找到的 Homebrew 回滚方法已过时，新的方法更简单，但找到具体说明也费了点功夫。
以回滚 Hugo 到 0.74.3 为例：
1 2 3 4 brew uninstall hugo brew tap-new donie/hugo-0-74-3 brew extract --version 0.74.3 hugo donie/hugo-0-74-3 brew install hugo@0.74.3 即：先创建一个名为“donie/hugo-0-74-3”的 tap ，然后通过 extract 命令把相应版本的数据放到里面，就可以安装了。</description></item><item><title>MySQL 事务的一致性、隔离级别与幻读问题</title><link>http://0x3f.org/posts/isolation-levels-and-phantom-reads-in-mysql/</link><pubDate>Tue, 21 Jul 2020 16:25:09 +0800</pubDate><guid>http://0x3f.org/posts/isolation-levels-and-phantom-reads-in-mysql/</guid><description>数据库事务的一致性 数据库事务有四个特性：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability），简称“ACID”。
其中，“一致性”指的是数据库层面的一致性，与应用层面的一致性不同。
数据库层面的一致性是说，事务具备把数据库从一个正确的状态迁移到另一个正确的状态的特性。所谓正确的状态，是指任何写入数据库的数据都满足数据库既定的规则，这些规则包括各种约束、级联回滚、触发器以及任何它们的组合。
与数据库层面的一致性不同，应用层面的一致性要求保证结果的正确性。例如，当执行如下 SQL 语句时：
1 update accounts set balance = balance + 1 where id = 3 我希望最终的结果是在事务开始时 id = 3 的这行数据 balance 列的值的基础上加一，否则，结果就是不正确的。
因此，只要写入的数据满足数据库的规则，就保证了数据库层面的一致性。数据库层面的一致性并不保证数据正确1。
MySQL 事务的隔离级别与幻读问题 隔离级别 隔离性是指：多个事务并发执行时，每个事务对数据库所做的更改必须与其它事务隔离。
隔离性是并发控制的主要目标2，并发控制用来实现在保证应用层面一致性的前提下，尽可能快地对并发请求做出响应。由此可见，隔离性和并发能力是一对此消彼长的关系。极端情况下，如果并发的请求按顺序执行，隔离性是最好的，但是响应最慢，反之亦然。
在此基础上，产生了四个隔离级别的划分。由低到高依次为：读未提交、读已提交、可重复读、序列化。据前所述，它们的并发能力是依次下降的。
因此，隔离级别的本质是通过适度地破坏隔离性来提高并发能力。
隔离级别的问题 隔离级别不同，存在的问题也不一样。
“读未提交”的级别最低、并发能力最高，存在的问题也最多，包括：脏读、不可重复读、幻读。其中，脏读是这个级别独有的，即事务 A 读取了并发事务 B 未提交的数据。
“读已提交”顾名思义，事务 A 不会读取并发事务 B 未提交的数据，但可以读取其已提交的。因此，这个级别存在不可重复读和幻读的问题。
在“可重复读”级别下，同一事务中两次同样的查询结果一致，不会受并发事务的影响，它因此也解决了不可重复读的问题。但还会存在幻读问题。
“序列化”级别要求对查询的对象加范围锁并保持到事务结束，因此，它避免了幻读的问题。
幻读问题（Phantom Reads） 幻读问题是个很 tricky 的问题，以至于网上找到的很多文章对它的理解都是不全面甚至是错误的。
幻读即同一事务中两次相同查询的结果集不一致。乍一看，好像和不可重复读是一样的。那它们的区别是什么呢？
事实上，幻读是不可重复读的一种特殊情况。换句话说，只要存在幻行（Phantom Rows），就是幻读问题。
所谓幻行，即同一事务中两次相同的查询结果集的非空差集里的元素，或者说第二次查询后发现不存在于前一次结果集中的行。
幻行产生的原因主要是除“序列化”之外的隔离级别不要求对查询结果加范围锁，导致并发事务在查询范围内插入新的行后被当前事务查到。
MVCC 在此基础上，MySQL 的 InnoDB 引擎实现了“多版本并发控制”（MVCC: Multiversion Concurrency Control）。
简单地说，InnoDB 的表存在两个隐藏列，用于记录每行数据的版本信息。当插入一行数据时，InnoDB 将当前事务的版本信息一并写入。当修改一行数据时，InnoDB 先将该行做一次复制，并把当前版本信息写入进去。查询时，只返回版本小于等于当前事务版本的数据。通过这样保证一个事务中查询到的是事务开始前已经存在的数据或当前事务写入的数据。其它事务写入的数据则不会被读取。</description></item><item><title>用 SSH 命令调试 Git 的连接问题</title><link>http://0x3f.org/posts/debug-git-connection-with-ssh/</link><pubDate>Sat, 28 Mar 2020 23:17:45 +0000</pubDate><guid>http://0x3f.org/posts/debug-git-connection-with-ssh/</guid><description>昨天执行git pull的时候发现会一直卡在那儿，排除了各种可能，而且 Github 上的项目也是可以正常拉取的，说明跟网络、代理等关系应该不大，git 命令本身也工作正常。
问题集中在公司的项目上，所有项目都无法拉取代码。起先怀疑是公司自建的 Gitlab 出了问题，但是其他人那里又是正常的，甚至跟我同一局域网的电脑上也是正常的。
也就是说问题应该出在我自己的电脑上。考虑到前两天还能正常使用，之后唯一一件相关的事就是升级 macOS 到 10.15.4 了。
然而用 Homebrew 重新安装 git 等相关的几个包也没能解决问题，于是用ssh -T -v git@gitlab.xxx.com -p 8848调试，输出如下：
donie@Donies  ~  ssh -T -v git@gitlab.xxx.com -p 8848 OpenSSH_8.1p1, LibreSSL 2.7.3 debug1: Reading configuration data /Users/donie/.ssh/config debug1: /Users/donie/.ssh/config line 9: Applying options for gitlab.xxx.com debug1: Reading configuration data /etc/ssh/ssh_config debug1: /etc/ssh/ssh_config line 47: Applying options for * debug1: Connecting to gitlab.xxx.com port 8848. 卡在了“Connecting to gitlab.</description></item><item><title>改变 Vim 模式时自动切换输入法的方法</title><link>http://0x3f.org/posts/auto-switch-input-method-while-changing-vim-mode/</link><pubDate>Wed, 19 Feb 2020 21:48:15 +0000</pubDate><guid>http://0x3f.org/posts/auto-switch-input-method-while-changing-vim-mode/</guid><description>VS Code的Vim插件有个很贴心的功能，可以在切换到普通模式时自动切换到英文输入法，而当切换回插入模式时再换到此前的输入法。
设置的方法很简单。先安装im-select，然后配置如下（macOS）：
当然，在Vim里也可以利用im-select实现这个功能。</description></item><item><title>在 VS Code 中快速创建 PHPUnit 测试类的方法</title><link>http://0x3f.org/posts/quickly-create-phpunit-test-cases-with-vscode/</link><pubDate>Tue, 18 Feb 2020 22:49:45 +0000</pubDate><guid>http://0x3f.org/posts/quickly-create-phpunit-test-cases-with-vscode/</guid><description>&lt;p>通过单元测试解决问题或者调试代码，可以避开错综复杂的依赖关系、直击问题的核心，从而极大地节约时间、提高效率。&lt;/p>
&lt;p>但是，当创建测试类成为一个经常发生的操作时，每次都手动创建类、引入基类、添加测试方法就显得很烦琐。我需要这样一个解决方案，让我可以立即开始着手写测试代码。&lt;/p></description></item><item><title>关于Lumen的Facade不支持引用传递的看法</title><link>http://0x3f.org/posts/lumen-facade-doesnot-support-pass-by-reference-param/</link><pubDate>Tue, 04 Feb 2020 17:40:34 +0000</pubDate><guid>http://0x3f.org/posts/lumen-facade-doesnot-support-pass-by-reference-param/</guid><description>&lt;p>今天遇到一个奇怪的问题，一次调用带引用传递形参的方法后，该形参对应的变量值没有按预期改变。&lt;/p></description></item><item><title>用C4-PlantUML画软件架构图</title><link>http://0x3f.org/posts/design-software-architecture-with-c4-plantuml/</link><pubDate>Fri, 17 Jan 2020 17:29:24 +0000</pubDate><guid>http://0x3f.org/posts/design-software-architecture-with-c4-plantuml/</guid><description>&lt;p>&lt;a href="https://c4model.com">C4 Model&lt;/a>是一种简洁有序的架构模型，四个“C”分别表示“Context”、“Container”、“Component”和“Code”，是由上而下逐步细化的四个层级。&lt;/p></description></item><item><title>用鼠须管输入日期时间的方法</title><link>http://0x3f.org/posts/input-date-and-time-with-rime/</link><pubDate>Wed, 08 Jan 2020 13:52:49 +0000</pubDate><guid>http://0x3f.org/posts/input-date-and-time-with-rime/</guid><description>&lt;p>原来在Linux下用小小输入法，输入日期时间很方便。换到Mac后，很早就在关注这个问题，直到后来鼠须管实现了嵌入Lua脚本的功能才得以解决。&lt;/p></description></item><item><title>用 PlantUML 实现 ERD</title><link>http://0x3f.org/posts/plantuml-erd/</link><pubDate>Fri, 03 Jan 2020 17:01:41 +0000</pubDate><guid>http://0x3f.org/posts/plantuml-erd/</guid><description>&lt;p>很长一段时间，我们都在用 MySQLWorkbench 画 ER 图。但是这个东西有一些缺陷，导致体验很不好。&lt;/p>
&lt;p>首先它生成的文件是二进制的，做不了版本控制。这意味着在版本迭代的过程中做数据结构评审的体验很糟糕。其次，离线文件难以管理，不利于团队协作。第三，图形界面虽然简单，但并不等价于高效。用它画图的成本还是比较高的。&lt;/p>
&lt;p>PlantUML 是个基于文本、灵活且强大的 UML 画图工具，高度可定制，而且可以集成到多种开发工具中。主流的 IDE 、文本编辑器都可以集成 PlantUML ，以便用自己最熟悉的工具画图并实时预览。基于文本的特性使得版本控制和 Code Review 很容易实现。如果 VCS 用的是 Gitlab ，可以更进一步，借助 PlantUML Server 实现实时预览。即使对于像 Github 这种暂时没有提供支持的 Web 平台，也有变通的解决方案。&lt;/p></description></item><item><title>解决Laravel中makeWith()无法取到被mock的实例的问题</title><link>http://0x3f.org/posts/mocking-objects-made-by-laravel-container-with-parameters/</link><pubDate>Fri, 16 Aug 2019 10:55:40 +0000</pubDate><guid>http://0x3f.org/posts/mocking-objects-made-by-laravel-container-with-parameters/</guid><description>&lt;p>被测单元有一行实例化一个类的代码，而且该类的构造方法需要参数。基于面向单元测试编程的原则，通过容器的makeWith()方法实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$api&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">app&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">makeWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Api&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;config&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nv">$config&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是在执行单元测试时发现，虽然测试代码中已经mock了这个类且注入到容器，但在被测单元中取到的还是原类的实例。&lt;/p></description></item><item><title>利用单元测试为开发提效</title><link>http://0x3f.org/posts/use-unit-test-as-an-efficiency-tool/</link><pubDate>Tue, 13 Aug 2019 16:38:02 +0000</pubDate><guid>http://0x3f.org/posts/use-unit-test-as-an-efficiency-tool/</guid><description>&lt;p>单元测试可以方便地伪造和回滚测试数据，这个特性决定了它其实是一个效率工具。&lt;/p>
&lt;p>例如在开发退款单、发票的时候，由于这种后置的功能依赖订单、支付、库存等前置的数据，因此需要频繁地创建这些测试数据，这就导致开发的效率极低，有时甚至需要切换多个系统做诸如增加库存、下单、支付等操作。虽然在开发环境可以通过直接修改数据使之恢复可被测试的状态，但仍然存在效率很低、遗留垃圾数据和存在隐患等问题。&lt;/p>
&lt;p>单元测试可以完美地解决这些问题。&lt;/p></description></item><item><title>面向单元测试编程</title><link>http://0x3f.org/posts/unit-test-oriented-programming/</link><pubDate>Tue, 13 Aug 2019 16:35:15 +0000</pubDate><guid>http://0x3f.org/posts/unit-test-oriented-programming/</guid><description>&lt;p>同一逻辑可以有多种实现方式，选择对单元测试友好的方式可以提高写测试代码的效率。&lt;/p></description></item><item><title>PHP单元测试的技巧</title><link>http://0x3f.org/posts/phpunit-tips/</link><pubDate>Tue, 13 Aug 2019 14:21:48 +0000</pubDate><guid>http://0x3f.org/posts/phpunit-tips/</guid><description>&lt;p>以下是我平时写单元测试时总结的一些最佳实践，有些是和具体的框架强相关的。&lt;/p></description></item><item><title>Lumen单元测试提示自定义校验规则不存在的问题</title><link>http://0x3f.org/posts/unit-test-in-laravel-complains-validation-rule-not-exist/</link><pubDate>Fri, 02 Aug 2019 15:12:17 +0000</pubDate><guid>http://0x3f.org/posts/unit-test-in-laravel-complains-validation-rule-not-exist/</guid><description>&lt;p>执行单元测试时遇到报错：&lt;/p>
&lt;pre tabindex="0">&lt;code>BadMethodCallException: Method [validateIdList] does not exist.
&lt;/code>&lt;/pre></description></item><item><title>对比Laravel Excel和Spout的读写性能</title><link>http://0x3f.org/posts/performance-comparation-for-laravel-excel-and-spout/</link><pubDate>Sun, 07 Jul 2019 20:23:26 +0000</pubDate><guid>http://0x3f.org/posts/performance-comparation-for-laravel-excel-and-spout/</guid><description>./artisan excel:write --driver=spout --amount=100000 写入数据100000行。 用时：156秒。 最大使用内存：2750.5106964111 M。 ./artisan excel:write --driver=laravel-excel --amount=100000 写入数据100000行。 用时：305秒。 最大使用内存：1330.7370758057 M。 ./artisan excel:read ./storage/app/test.xlsx --driver=spout 读取数据100001行。 用时：576秒。 最大使用内存：122.15303039551 M。 ./artisan excel:read ./storage/app/test.xlsx --driver=laravel-excel 读取数据100001行。 用时：166秒。 最大使用内存：739.48976898193 M。 基本上，Laravel Excel写XLSX的性能是Spout的一半，但内存占用是对方的一半。而在读文件上，前者的性能是后者的约3倍多，而内存占用是后者的6倍。
测试环境：
MBP 3.1 GHz Intel Core i5 8G内存 PHP 7.1.30 Laravel 5.8.27 Laravel Excel 3.1.14 Spout 3.0.1</description></item><item><title>Git工作流调研报告</title><link>http://0x3f.org/posts/investigation-report-of-git-flows/</link><pubDate>Wed, 15 May 2019 16:14:17 +0000</pubDate><guid>http://0x3f.org/posts/investigation-report-of-git-flows/</guid><description>&lt;h2 id="面临的问题">面临的问题&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>测试环境杂乱导致的问题&lt;/p>
&lt;p>每个任务都要搭建测试环境，或者把闲置的测试环境切换到待测试分支。麻烦，而且容易出问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>抢占beta环境的问题&lt;/p>
&lt;p>每个任务部署到beta环境时都要和别人确认，同时其它任务都要等待。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>上线任务A把尚在测试中的任务B的部分代码部署上线的问题&lt;/p>
&lt;p>先把feature分支合并到master分支，再部署到beta环境。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>任务A和B在逻辑上互斥或者代码有冲突，导致问题在上线后才发现&lt;/p>
&lt;p>测试阶段是针对每个feature分支测试，而不是针对一个集成的分支。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>不能保证所有上线的代码都经过测试&lt;/p>
&lt;p>直接把feature分支合并到master分支，不能保证所有代码都经过测试。&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>基于Laravel的项目的单元测试规范</title><link>http://0x3f.org/posts/unit-testing-standard-for-laravel-based-projects/</link><pubDate>Sun, 24 Mar 2019 22:42:08 +0000</pubDate><guid>http://0x3f.org/posts/unit-testing-standard-for-laravel-based-projects/</guid><description>&lt;p>单元测试是个好东西，解决了我很多问题，不论开发效率还是代码质量，都给我助益良多。最近想在团队内部推广，就拟了个规范草稿：&lt;/p></description></item><item><title>用ALE替换了Syntastic</title><link>http://0x3f.org/posts/replace-syntastic-with-ale/</link><pubDate>Wed, 12 Dec 2018 20:42:10 +0000</pubDate><guid>http://0x3f.org/posts/replace-syntastic-with-ale/</guid><description>&lt;p>习惯频繁地保存源码，但是每次保存都有明显的卡顿，于是用Vim自己的调优功能跟踪了一下。&lt;/p></description></item><item><title>配置鼠须管的特殊符号输入</title><link>http://0x3f.org/posts/input-punctuations-with-rime/</link><pubDate>Sat, 13 Oct 2018 11:59:50 +0000</pubDate><guid>http://0x3f.org/posts/input-punctuations-with-rime/</guid><description>开源工具最常见的问题就是文档不全，实现一个需求的时候只能苦苦Google，甚至连蒙带猜。这也是我逐渐倾向买用户体验更好的收费软件的原因。
鼠须管是自带特殊符号码表的，在用户配置目录中的symbols.yaml，但是有的码表需要手动配置。经过查资料和摸索，关键在于以下几项配置：
1 2 3 4 5 6 7 punctuator: import_preset: symbols recognizer: import_preset: default patterns: punct: &amp;#34;^/([a-z]+|[0-9]0?)$&amp;#34; 然后就可以通过【/】+【编码】的方式显示符号备选项了，具体的编码可以到symbols.yaml里看，当然一般为了方便定制该码表，会复制并重命名该文件，然后上述的配置项里也要做相应的修改。</description></item><item><title>生成PDF的方案调研</title><link>http://0x3f.org/posts/pdf-creating-solutions/</link><pubDate>Wed, 16 May 2018 15:41:36 +0000</pubDate><guid>http://0x3f.org/posts/pdf-creating-solutions/</guid><description>结论 倾向于通过wkhtmltopdf+消息队列实现。
工作流程：
用户保存表单 推送生成pdf的任务到队列 同时页面显示「正在生成PDF文档，请稍候」并轮询后端接口 PDF生成后，页面显示下载按钮 后端 dompdf 纯PHP实现。工作原理是把HTML转换成PDF。
优点：
不需要PHP调用命令行，安全性高。 缺点：
HTML/CSS支持不完全，实测多个网页转换后排版错乱。 中文网页转换后，中文都是问号（网上说有解决办法1、2，未测试）。 CPU占用比较高（网上的说法，没有实测具体有多高）。 参考：
laravel-dompdf主页 mpdf 纯PHP实现。工作原理是把HTML转换成PDF。
优点：
不需要PHP调用命令行，安全性高。 缺点（未实测）：
HTML/CSS支持不完整。 生成PDF耗时长。 参考：
laravel-pdf主页 mpdf文档 mpdf主页 mpdf与fpdf的使用比较 PDFtk Server PDFtk Server是个命令行程序。工作原理是利用FDF表单替换PDF模板中的占位符。实现方案有：纯PHP实现FDF + PDFtk、FPDI + PDFtk。
优点：
直接替换PDF模板，实现成本低，最大程度保证生成的PDF的效果。 缺点：
需要允许PHP调用命令行，有安全隐患。 只能实现简单的字符串替换（例如公司名称），不能替换有格式文本。 参考：
FPDI PHP的FDF手册 PDFtk的使用方法 纯PHP实现FDF + PDFtk wkhtmltopdf wkhtmltopdf是个命令行程序。工作原理是转换HTML到PDF。实现方案是laravel-snappy。
优点：
由于内嵌webkit核心，HTML/CSS的支持没有问题。 缺点：
需要允许PHP调用命令行，有安全隐患。 wkhtmltopdf体积40M，并发较多时影响服务器性能和稳定性（需要考虑用队列辅助实现，异步执行，需要需求变更交互方式）。 参考：
laravel-snappy主页 CutyCapt 命令行程序。工作原理和wkhtmtopdf相同。
优缺点同wkhtmltopdf，但是最近的更新在13年。
参考：
CutyCapt主页 Prince 命令行程序。工作原理是转换HTML到PDF。
优点：
HTML/CSS的支持很好。 文档很全 缺点：</description></item><item><title>鼠须管的美化</title><link>http://0x3f.org/posts/beautify-squrrel-input-method/</link><pubDate>Sat, 21 Apr 2018 20:52:42 +0000</pubDate><guid>http://0x3f.org/posts/beautify-squrrel-input-method/</guid><description>效果如下： 尽管鼠须管的Github仓库一直在更新，但释出版已经很久没有更新了，所以下面的美化基于网络上个人编译的版本。这篇文章里有该版本和「花园明朝」字体的下载链接，按照文中的说明替换鼠须管的程序。（注意：官方当前释出版本鼠须管不支持下文通过patch自定义配置的方式，会造成原配置信息丢失。也不支持图示的样式。）
然后参考这篇文章，把新的颜色方案移植到用户配置中。
图示样式使用「dust」方案。原色彩方案的字体设置的有点小，需要把font_point和label_font_point分别从14和10修改成18和14。原方案的第一顺序字体是「HYQiHei-55S Book」，要使用图示的花园明朝字体，可以不安装或者从配置信息中去掉该字体。由于原方案中已存在的配置项不能通过patch的方式覆盖，所以只能直接修改squirrel.yaml文件。</description></item><item><title>我在用的Safari扩展</title><link>http://0x3f.org/posts/the-safari-extensions-i-am-using/</link><pubDate>Sun, 15 Apr 2018 22:29:10 +0000</pubDate><guid>http://0x3f.org/posts/the-safari-extensions-i-am-using/</guid><description>和Chrome相比，Safari更省电、需要更少的系统资源，而且Chrome还有一些莫名其妙的问题，比如在没有运行的时候，从Alfred执行搜索会启动两个窗口，一个是之前的会话，另一个是当前的搜索页面。并且，启用了一些扩展之后Safari的体验可以改进很多。所以平时用Safari更多一些。
sVim 作为注重效率的Vim党和键盘党，这种扩展是使用任何浏览器必备的东西。最常用的就是用标记打开链接的功能。
Tampermonkey 油猴脚本管理器，应该是任何浏览器必备的东西。
AutoPagerize 用Google搜索时自动滚动到下一页。
RSS Menu 当发现当前页面有可订阅的RSS链接时，在工具栏图标上显示提示。
Instapaper 稍后读工具。
Turn Off the Lights 看视频时降低网页其余部分亮度。
Scroll To Top Button 在页面右下角显示一个浮动的跳转到页首按钮。
Push for Kindle FiveFilters.org的发送到Kindle按钮。
octotree GitHub侧边栏。
Translate 翻译当前页。
WikiWand 优化维基百科阅读体验。
Xdebug Helper PHP单步调试辅助工具。
AdBlock 广告过滤器。
Sessions 网页会话管理器。如果打开的页面太多，又可能在将来再用到，可以保存会话后清理掉，用到的时候再打开保存过的会话。虽然没有Chrome下的Session Buddy和Tab Snooze好用，但是解决关键问题也够了。</description></item><item><title>广告过滤工具AdBlock、Adblock Plus和uBlock的简单对比</title><link>http://0x3f.org/posts/a-simple-comparison-among-adblock-ublock-and-adblock-plus/</link><pubDate>Sun, 01 Apr 2018 22:47:47 +0000</pubDate><guid>http://0x3f.org/posts/a-simple-comparison-among-adblock-ublock-and-adblock-plus/</guid><description>Adblock Plus作者的那篇博客可能会影响很多人。我并不关心那些情怀的东西，只看疗效。
简单地对比了下AdBlock、Adblock Plus、uBlock在Safari for Mac上的效果，所有样本和环境均为当前最新版本。AdBlock开启Safari内容过滤后是最好的，成功地过滤掉了我常访问的一个BT下载网站上的所有广告，而不开启Safari内容过滤时，会出现部分广告先显示后隐藏的情况。uBlock漏掉了个别不容易屏蔽的。而Adblock Plus最差，缺省设置下一条都没过滤掉，在选择更多的过滤规则后才过滤掉一部分。由于样本很单一，本结论不具有普适性。
说句题外话，我觉得Adblock Plus这名字起得动机就挺不纯的，没有详细考证过，印象中这个东西是比AdBlock后出现的，而且这名字很容易让人理解成AdBlock的加强版。</description></item><item><title>用OTP Auth替换了Authy</title><link>http://0x3f.org/posts/migrate-from-authy-to-otp-auth/</link><pubDate>Tue, 06 Feb 2018 22:53:40 +0000</pubDate><guid>http://0x3f.org/posts/migrate-from-authy-to-otp-auth/</guid><description>Authy的界面很花哨，但并不实用，管理多个两步验证账号时查询效率很低。OTP Auth采用更直观的列表布局，并且支持搜索，在用户体验和效率上有更大的优势。两者之间没有批量迁移数据的方式，只能逐个手动添加，很麻烦。</description></item><item><title>对XSS的防御更适合放在前端</title><link>http://0x3f.org/posts/better-to-do-defenses-against-xss-in-front-end/</link><pubDate>Tue, 06 Feb 2018 15:13:17 +0000</pubDate><guid>http://0x3f.org/posts/better-to-do-defenses-against-xss-in-front-end/</guid><description>很多项目会把转义操作放在后端接口获取参数的地方，从而忽略了这样一个问题——为什么主流框架都不在获取参数的方法里实现这一点？
以Laravel为例，如果可以这样获取转义后的参数：$request-&amp;gt;escape('content')，代码会显得更优雅，而实际上只能用自己封装的函数手工转义：my_escape($request-&amp;gt;get('content'))，很丑陋的代码。
事实上，主流框架并非没有提供防御XSS的封装，只是都放在模板引擎里。这样做的依据是，XSS的原理是在原本用于展示的数据里包含了可执行的文本，但不是所有展示的位置都不应该包含可执行的文本。从另一角度上说，后端应该校验前端传递的数据，但不应该篡改它。</description></item><item><title>解决Laravel的Facade在被Mock时不自动注入依赖的一种方法</title><link>http://0x3f.org/posts/manual-dependency-injection-with-laravel/</link><pubDate>Tue, 30 Jan 2018 15:41:16 +0000</pubDate><guid>http://0x3f.org/posts/manual-dependency-injection-with-laravel/</guid><description>由于集成了Mockery，Laravel的Facade对单元测试非常友好，只需要一行代码就能实现mocking。
例如，测试目标方法中调用了订单工具类的一个方法，在使用依赖注入的方式时，需要用三行代码实现对这个方法的mocking：
1 2 3 $fakeOrderTool = m::mock(\App\Tool\Order::class); $fakeOrderTool-&amp;gt;shouldReceive(&amp;#39;getById&amp;#39;)-&amp;gt;once()-&amp;gt;with($id)-&amp;gt;andReturn($fakeOrder); $this-&amp;gt;app-&amp;gt;instance(\App\Tool\Order::class, $fakeOrderTool); 而用Facade是这样的：
1 OrderFacade::shouldReceive(&amp;#39;getById&amp;#39;)-&amp;gt;once()-&amp;gt;with($id)-&amp;gt;andReturn($fakeOrder); 当测试目标方法也属于订单工具类时，需要部分mock这个类，所以还要加上一行：
1 OrderFacade::makePartial(); 但如果订单工具类的构造方法里有需要注入的依赖关系，这里并不会被执行。所以我在工具类基类里封装了一个方法，用反射机制实现手工注入依赖关系：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 /** * 注入依赖，用于单元测试 * * @return void * @author donieli * @since 5 * @version 5 */ public function injectDependencies() { $reflector = new \ReflectionClass(get_class($this)); $params = $reflector-&amp;gt;getConstructor()-&amp;gt;getParameters(); $args = []; foreach ($params as $param) { $paramClass = $param-&amp;gt;getClass(); if (empty($paramClass)) { throw new \Exception(&amp;#39;Dependency named &amp;#39;.</description></item><item><title>从Vultr新加坡迁移到洛杉矶</title><link>http://0x3f.org/posts/migrate-vultr-from-singapore-to-los-angeles/</link><pubDate>Sun, 28 Jan 2018 14:15:57 +0000</pubDate><guid>http://0x3f.org/posts/migrate-vultr-from-singapore-to-los-angeles/</guid><description>Vultr新加坡节点挂了两天了，不能翻墙简直什么都干不了。早上用CloudSpeed看了下，洛杉矶机房的响应速度还不错，就迁移了过去。
ShadowsocksR 这个很简单，用一键安装脚本。
网络加速 用BBR，一键安装脚本。
Tiny Tiny RSS 先按照之前的笔记安装ttrss。
然后重建一个空的ttrss的数据库：
1 2 docker exec f6d92ad8efba /usr/bin/psql -c &amp;#34;drop database ttrss&amp;#34; docker exec f6d92ad8efba /usr/bin/psql -c &amp;#34;create database ttrss&amp;#34; 把数据库的备份复制到容器里并导入：
1 2 docker cp ttrss.sql f6d92ad8efba:/tmp/ttrss.sql docker exec f6d92ad8efba /usr/bin/psql -d ttrss -f /tmp/ttrss.sql postgres 以root身份登录容器并删除备份文件：
1 2 docker exec -it --user root f6d92ad8efba /bin/sh rm /tmp/ttrss.sql</description></item><item><title>Unlox：兼顾安全和体验的东西深得我心</title><link>http://0x3f.org/posts/unlox/</link><pubDate>Sun, 14 Jan 2018 16:52:11 +0000</pubDate><guid>http://0x3f.org/posts/unlox/</guid><description>买了Unlox。早就知道MacID，阴差阳错一直没买，所以这又是一次后知后觉的行为。
曾经用过一段时间ControlPlane，通过多种条件自动判断场景以启用或关闭锁屏密码。后来在一次系统升级之后就不能用了。因为这个东西本身体验也不是很好，免费的东西折腾起来太耗费精力，所以付费买体验也是个不错的选择。
有三个功能对我来说很有用。
首先是用Face ID解锁Mac。在Mac被唤醒后，iPhone X自动弹出解锁的通知，点击后Unlox被打开并自动调用Face ID，验证通过后Mac即被解锁。不过两次Face ID验证稍显繁琐，如果在iPhone锁屏界面验证通过后就自动解锁，体验会更好。不过我猜应该是iOS在这个地方不会通知到App。
其次是Tap解锁。用手指点击触摸板，点击次数和每次用的手指数目可以自定义。这个方式确实很方便。为了加强安全性，还可以设置当手机断开时禁用Tap解锁。
第三是离开时自动锁屏。可以设置当手机和Mac之间的蓝牙连接信号减弱多少时自动锁屏。虽然对于Macbook用处不大，也不失为忘记合上屏幕时的一种补救手段。
此外还有其它一些功能，例如通过手机锁定或解锁Mac、靠近时自动唤醒Mac等。
今年Apple应该会全系支持Face ID，所以这只是一个过渡方案。</description></item><item><title>密码管理的最佳实践</title><link>http://0x3f.org/posts/the-best-practice-of-password-management/</link><pubDate>Wed, 27 Dec 2017 17:26:17 +0000</pubDate><guid>http://0x3f.org/posts/the-best-practice-of-password-management/</guid><description>通密之所以不应该被过分指责，是因为有其存在的道理，没有哪种方案的管理成本比它更低，它不需要购买昂贵的1password，不需要担心临时用的时候突然想不起来，而且，只要这个密码足够强壮并且使用环境足够安全，大多数情况下也不会有什么问题。通密的问题在于它的风险成本太高，一旦一处泄漏，所有使用这个密码的地方都不安全。
另一个极端是，使用很复杂的密码，每个账号都不同，甚至用密码生成工具生成完全没有规律的随机字符串。这种方案的安全性很高，高到连你自己都记不住。
所以我需要这样一套好的方案，它应该在安全性和易用性之间取得一个比较好的平衡，并且随著方法论和工具链的进化，这个平衡可以无限逼近黄金分割点。
首先，密码应该是复杂但容易记住的。密码的复杂度和记忆负担并不成正比，例如如果你实在记不住“ppnn13%,dkstFeb1st”，那么这样呢——“娉娉袅袅十三余，豆蔻梢头二月初”。密码只是一个字符串，如果不去死记最终的值，而是字符串背后的规律，记忆的压力就会小很多。
但考虑到每个账号都想一个这样的密码是不现实的，而且怎么解决记忆密码和账号的对应关系的问题？所以进一步，可以用这样的密码当前缀，每个密码的前缀都一样，然后针对每个账号创造一个后缀，这个后缀应该是每个账号都不同的，且和账号有某种只有你自己才知道的关联，这样你可以随时根据账号计算出它的后缀。例如，可以用账号拼音首字母（当然，实际的规则应该更复杂一点）。
这样你就有了足够复杂、每个账号都不同并且很容易记住的密码。进一步地，在私有设备上可以利用文本替换功能（例如：Alfred for Mac的Snippets功能）快速输入通用前缀，某些支持按键编程的机械键盘会有更好的体验。
不过好记性不如烂笔头，为防万一，还是需要一个Plan B。主流的密码管理工具主要有这么几种：
浏览器的账号记忆功能 操作系统的keychain 在线密码管理工具 离线密码管理工具 浏览器一般是把密码以明文存储在本地的，firefox虽然有个主密码，但只是个幌子，别人仍然可以拿到它记录密码的数据库文件。这种做法的逻辑在于，设备上存储的数据的安全性由操作系统和用户负责，换句话说，用户不应该允许他人用自己的权限登录设备。但实际上很难避免这种情况，而且还要考虑到系统被入侵的可能。所以，只应该让浏览器记住那些最不重要的账号。
相对来说，操作系统的keychain一般有自动锁定的功能，会更安全一些。但是仍无法完全避免上述问题。而且keychain只能记录账号和密码，无法存储更多的附加信息。所以这种工具也只应该存储一些不重要的账号。
最著名的在线密码管理工具应该是Lastpass。关于它的安全性有很多种说法，不过我觉得但凡是敏感数据都不要存储到线上，所以这种方式不予考虑。
我倾向于使用离线的密码管理工具。1password据说很好用，但是太贵了，而且开源免费的keepass已经完全够用了。我在Mac上用KeePassXC，在iOS中用MiniKeePass，私钥文件离线存储，然后数据库文件用Dropbox同步就可以了。
此外，对于重要的账号，如果支持两步验证，一定要开启，然后用OTP Auth管理即可。
最终的方案是：
方法论：统一的复杂但有规律的前缀+根据账号计算出来的后缀 工具链：KeePass + OTP Auth + Dropbox</description></item><item><title>Laravel单元测试错误：1205 Lock wait timeout exceeded</title><link>http://0x3f.org/posts/1205-lock-wait-timeout-exceeded/</link><pubDate>Fri, 22 Dec 2017 15:47:32 +0000</pubDate><guid>http://0x3f.org/posts/1205-lock-wait-timeout-exceeded/</guid><description>错误信息：
1205 Lock wait timeout exceeded; try restarting transaction
原因之一是测试用例里重写的tearDown()方法中没有调用父类的该方法。因为DatabaseTransaction这个trait自动开启了事务，对应的回滚方法在测试用例基类的tearDown()中执行。</description></item><item><title>用Charles拦截iOS APP HTTPS请求</title><link>http://0x3f.org/posts/ios-app-intercepting-using-charles/</link><pubDate>Fri, 22 Dec 2017 15:17:04 +0000</pubDate><guid>http://0x3f.org/posts/ios-app-intercepting-using-charles/</guid><description>实践环境 Charles 4.2 iOS 11.2.1 安装证书 按照Charles菜单（Help -&amp;gt; SSL Proxying -&amp;gt; Install Charles Root Certificate on a Mobile Device or Remote Browser）的指示，设置iOS的系统代理。
为了以后使用方便，可以在代理工具（如ShadowRocket）里设置，注意使用时应配置代理工具对全部流量使用代理，如果使用PAC之类动态代理可能会拦截不到。
在iOS的Safari中访问上面提示中的网址，会弹出提示安装证书。iOS 10.3以后还要设置信任该证书（设置-&amp;gt;通用-&amp;gt;关于本机-&amp;gt;证书信任设置）。
配置Charles拦截HTTPS请求 路径为：Proxy -&amp;gt; SSL Proxying Settings
可以设置对特定的主机名和端口拦截，也可以直接保存，此时对所有请求均会拦截。
拦截 iOS中打开上述代理，APP中发送的请求就会在Charles里列出来。</description></item><item><title>测试驱动开发的实际收益</title><link>http://0x3f.org/posts/the-real-income-of-tdd/</link><pubDate>Sun, 17 Dec 2017 14:20:02 +0000</pubDate><guid>http://0x3f.org/posts/the-real-income-of-tdd/</guid><description>我并不试图系统地谈TDD，因为我在这方面的经验还不足以做到这一点。但是TDD的一些方法论和工具确实解决了我在实际开发过程中遇到的一些问题。
第一个问题是健壮性。尤其是对于我这样思维发散、容易迷失又喜欢重构的人，TDD给了我一个明确的目标，在一切刚开始的时候，我要做的只是满足测试用例，让它们由红变绿。到了重构阶段，我就可以把精力放到优化代码上面，且不必对健壮性有过多的担心。在此之前，由于手动测试比较麻烦，很多时候惰性会说服潜意识告诉自己这部分逻辑很简单、不会有什么bug，结果提交测试后却一再地发生问题。
第二个问题是效率。曾经只有不忙的时候才会写测试用例，但是现在一般都会写，因为确实可以提高开发效率，而不只是保证重构的健壮性。可能对于所有对单元测试不熟悉的人来说，这都是匪夷所思的，我也曾认为单元测试只是用来保证健壮性的，必然和开发效率是一对矛盾，因为要花很多时间写测试代码。这种想法首先是因为对单元测试不熟悉，所以才需要花很多时间在上面。其次是没有看到它所带来的好处。
例如你要实现一整套退款单的功能，退款单是依赖订单的，这意味著你需要不只一条符合条件的订单数据。但是订单是有状态的，随著时间的推移、人为的操作或者开发过程中程序的影响，状态会变得不再符合你的要求，这时候你就必须停下来去做更多符合要求的订单。而创建订单也存在很多麻烦，你需要找到有库存的商品，有时候还要去库管系统中补充库存，然后下单并支付。最后花了很多时间做出来的订单，因为正在开发的退款单的程序出现的一个小问题变得不能使用！时间被大量浪费在创建所依赖的上游数据上。
这时候如果用单元测试并mock出依赖关系，就可以随时随地、无限制地执行相关的业务逻辑。对效率的提高不言而喻。
特别的，mock并不是随时可以抓起的救命稻草，它的原罪在于：不负责任地滥用mock会导致很多问题被掩盖。因此，对mock的使用应该是节制的、目标明确的。
当然，这并不包括单纯地为了提高代码覆盖率而使用mock，只所以这是个在很多强制TDD的团队里的普遍现象，归根结底是因为KPI是万恶之源，任何好的方法论，一旦沦为KPI，就离死不远了。</description></item><item><title>BaiduPCS：当前最好用的百度网盘下载工具</title><link>http://0x3f.org/posts/baidupcs/</link><pubDate>Tue, 12 Dec 2017 21:21:16 +0000</pubDate><guid>http://0x3f.org/posts/baidupcs/</guid><description>BaiduPCS是个命令行工具，用于下载百度网盘中的资源。之前用的是浏览器插件，需要先创建分享，再拿到下载链接，最后用下载工具下载。这个工具可以直接执行一条命令下载指定的资源，非常方便。
这里有安装说明，然后按照使用说明操作即可。</description></item><item><title>Firefox Quantum：狐狸的反击</title><link>http://0x3f.org/posts/firefox-quantum/</link><pubDate>Sun, 03 Dec 2017 21:53:18 +0000</pubDate><guid>http://0x3f.org/posts/firefox-quantum/</guid><description>不知不觉已经很多年没有用过Firefox了。在Chrome发布之前，这只狐狸以一己之力扛著互联网承前启后的大旗。后来被Chrome在网页加载速度上吊打，逐渐式微。之后还在用Firefox的人一般也只是因为受不了Chrome的内存占用。
Firefox Quantum刚发布的时候我就安装了，以为是个全新的项目，新项目初期往往特性不健全，所以就没有太多关注。
然后发现版本号接续了旧版，也兼容原Firefox的插件，所以就装上几个必要的插件，尝试了一下。新的UI借鉴了Chrome，不像原来那么过时。最重要的是内存占用和网页打开速度比Chrome有优势。如官方宣传语所说——快而不俗。
准备把默认浏览器改成FQ，用一段时间看看。</description></item><item><title>Vim最好的PHP语法高亮插件</title><link>http://0x3f.org/posts/the-best-php-syntax-file-of-vim/</link><pubDate>Tue, 28 Nov 2017 15:55:59 +0000</pubDate><guid>http://0x3f.org/posts/the-best-php-syntax-file-of-vim/</guid><description>StanAngeloff/php.vim应该是目前最新、最全的PHP语法高亮插件了，它解决了旧版本无法高亮@throws的问题。
默认会把方法注释全部当做普通注释显示，也就是没有高亮，需要专门做配置：
1 2 3 4 5 6 7 8 9 function! PhpSyntaxOverride() hi! def link phpDocTags phpDefine hi! def link phpDocParam phpType endfunction augroup phpSyntaxOverride autocmd! autocmd FileType php call PhpSyntaxOverride() augroup END</description></item><item><title>用Tiny Tiny RSS搭建私人阅读器的步骤</title><link>http://0x3f.org/posts/ttrss/</link><pubDate>Fri, 27 Oct 2017 14:12:16 +0000</pubDate><guid>http://0x3f.org/posts/ttrss/</guid><description>优势 自定义过滤器 全功能，无限制 利用已有VPS，无需额外费用 安装 安装并启动docker 1 2 3 4 curl https://get.docker.com/ | sh // centos7 systemctl start docker 安装postgre 1 docker run -d --name ttrssdb nornagon/postgres 安装tiny tiny rss 1 docker run -d --link ttrssdb:db -p 80:80 -e SELF_URL_PATH=http://example.org/ttrss fischerman/docker-ttrss example.org替换成VPS的IP或者对应的域名。
配置 配置主程序 访问http://example.org/ttrss，用户名admin，密码password。
伪装成fever 如果RSS阅读器不支持ttrss，但支持fever，例如reeder，可以通过安装插件伪装成fever：
1 2 3 git clone https://github.com/rannen/tinytinyrss-fever-plugin.git docker cp fever [[CONTAINER ID]]:/var/www/plugins 然后去设置见面启用fever插件，并在fever插件的配置栏设置单独的密码，该栏目中会显示在RSS阅读器中使用的接口地址，用户名就是admin。
备份 每天凌晨3点备份数据库到dropbox。
下载dropbox上传脚本 在VPS的/root下执行：
1 wget https://raw.github.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh 执行命令并按提示操作：
1 ./dropbox_uploader.sh info 创建备份脚本 创建/root/backup.</description></item><item><title>搭好了SSR</title><link>http://0x3f.org/posts/ready-for-ssr/</link><pubDate>Wed, 18 Oct 2017 15:34:33 +0000</pubDate><guid>http://0x3f.org/posts/ready-for-ssr/</guid><description>搭在vultr东京节点的SS在家里的网络上已经不能用了，lantern和大杀器也不稳定到基本没有可用性的程度。短短几天时间，三把梯子挂了仨。
搭好了SSR，等着晚上回去测试。
SSR一键部署脚本：https://github.com/91yun/shadowsocks_install Mac的SSR客户端：https://github.com/qinyuhang/ShadowsocksX-NG-R/releases iOS的SSR客户端：ShadowRocket</description></item><item><title>用gv.vim查看git提交历史</title><link>http://0x3f.org/posts/gv-vim/</link><pubDate>Wed, 18 Oct 2017 13:28:16 +0000</pubDate><guid>http://0x3f.org/posts/gv-vim/</guid><description>gv.vim是fugitive的插件，用于查看git提交历史，特点是速度快、好用。我现在用它做code review。
1 2 3 4 nnoremap &amp;lt;leader&amp;gt;gll :GV --no-merges&amp;lt;CR&amp;gt; nnoremap &amp;lt;leader&amp;gt;glc :GV!&amp;lt;CR&amp;gt; nnoremap &amp;lt;leader&amp;gt;gla :GV --no-merges --author&amp;lt;space&amp;gt; nnoremap &amp;lt;leader&amp;gt;glg :GV --no-merges --grep&amp;lt;space&amp;gt;</description></item><item><title>解决phpqa和fugitive不兼容的问题</title><link>http://0x3f.org/posts/solve-the-incompatablility-between-fugitive-and-phpqa/</link><pubDate>Wed, 18 Oct 2017 11:05:12 +0000</pubDate><guid>http://0x3f.org/posts/solve-the-incompatablility-between-fugitive-and-phpqa/</guid><description>在:Gstatus中查看diff时，报错：
Error detected while processing function Phpqa#PhpLint: line 8: E684: list index out of range: 0 E116: Invalid arguments for function match(l:php_list[0],&amp;ldquo;No syntax errors&amp;rdquo;) == -1 E15: Invalid expression: 0 != v:shell_error &amp;amp;&amp;amp; match(l:php_list[0],&amp;ldquo;No syntax errors&amp;rdquo;) == -1
这是phpqa的bug，有人创建了PR，但作者没有合并，需要手工合并：
1 curl -L https://github.com/joonty/vim-phpqa/pull/43.patch | git am</description></item><item><title>为什么不应该给表名加前缀</title><link>http://0x3f.org/posts/why-prefixes-are-not-needed-for-table-names/</link><pubDate>Mon, 25 Sep 2017 14:12:41 +0000</pubDate><guid>http://0x3f.org/posts/why-prefixes-are-not-needed-for-table-names/</guid><description>表前缀是个过时的东西。在计算机资源比较昂贵的时代，出于节约成本的需要，会把多个系统的数据放在同一个数据库实例里，所以才会用前缀区分。如今各种云的普及，使这个问题早已经不存在，大家的资源都是冗余的，没有人会把多个系统的表放到同一个库里，这会给运维带来不必要的麻烦。
然而身边总是会遇到胶柱鼓瑟的人，知其然而不知其所以然。表前缀既非必要，又会导致一些问题。
其一是写代码时的困扰。比如我经常会在用查询构造器时忘了给表别名加前缀，直到程序报错才突然想起来。
其二是代码重构的问题。在构造SQL语句的过程中，总是免不了会写原生的语句，这时就得写死表前缀。如果将来表前缀发生变化，重构代码时会麻烦而容易出错。</description></item><item><title>用AlfredTweet发推</title><link>http://0x3f.org/posts/tweet-with-alfredtweet/</link><pubDate>Sun, 17 Sep 2017 09:26:41 +0000</pubDate><guid>http://0x3f.org/posts/tweet-with-alfredtweet/</guid><description>AlfredTweet是用来解决“最后一公里”问题的东西，有了它就可以随时发推了。
需要修改源码指定代理：
1 2 3 4 5 6 7 8 9 // twitteroauth.php function http($url, $method, $postfields = NULL) { // ... curl_setopt($ci, CURLOPT_HTTPPROXYTUNNEL, TRUE); curl_setopt($ci, CURLOPT_PROXY, &amp;#39;127.0.0.1:1086&amp;#39;); curl_setopt($ci, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5); // ... }</description></item><item><title>什么是docker</title><link>http://0x3f.org/posts/what-is-docker/</link><pubDate>Thu, 07 Sep 2017 15:31:11 +0000</pubDate><guid>http://0x3f.org/posts/what-is-docker/</guid><description>什么是docker docker是一种容器，这篇文章对容器的定义是：
容器是一组运行在Linux操作系统上并使用命名空间进程进行分隔的进程，有了容器就无需再启动和维护虚拟机。与虚拟机技术相比，容器的最大不同之处在于打包格式和可移植性。构建容器的目的在于为现代基础设施降低占用空间和启动时间、提供重用性、更好地利用服务器资源，并更好地集成到整个开发生态系统中（例如持续集成和交付生命周期）。
容器相对于虚拟机有以下优点：
更高效地利用系统资源 更快的启动速度 一致的运行环境 持续的交付和部署 更轻松的迁移 维护和扩展的便利性 基本概念 镜像 Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。
镜像分为黑箱镜像和dockerfile。
前者通过实际创建和配置docker容器并通过docker commit记录每个版本的变更，优点是简单直观，缺点是不能记录在基础镜像上做了哪些操作，并且在多次修改之后，镜像会变得很臃肿。
dockerfile是镜像的配置文件，部署时docker根据配置内容生成容器，优点是可以清楚地记录每次修改的内容、镜像体积很小，缺点是编写时比较复杂。
容器 容器是镜像运行的实体。
仓库 分发镜像的服务。
编排 容器的编排包含如下一系列任务：
调度（包括部署、复制、扩展、复活、重新调度、升级、降级等） 资源管理（内存、CPU、存储空间、端口、IP、镜像等） 服务管理（即使用标签、分组、命名空间、负载均衡和准备就绪检查将多个容器编排在一起） 安装 我在黑苹果下安装。Mac下安装docker有两种方式：Docker for Mac或Docker Toolbox。前者最简单，后者在前者的系统要求不能被满足的情况下使用。后者的卸载比较麻烦，具体参照这里。
我用前种方式安装，启动时报错：
com.docker.osx.hyperkit.linux failed to start
解决方法是到BIOS里打开VT特性，有说法说黑苹果不支持VT，我这里是可以的。
镜像加速器 一般用阿里云的镜像服务。
docker的使用 拉取镜像 1 docker pull base/archlinux 列出镜像 1 docker images 创建容器 1 docker run --name arch --it base/archlinux bash 终止容器 exit或ctrl-d
启动已终止容器 1 docker start arch attach运行中的容器 1 docker attach arch detach运行中的容器 ctrl+p ctrl+q或者：</description></item><item><title>让hexo使用小写文件名</title><link>http://0x3f.org/posts/let-hexo-use-lowercase-filename/</link><pubDate>Tue, 15 Aug 2017 13:25:50 +0000</pubDate><guid>http://0x3f.org/posts/let-hexo-use-lowercase-filename/</guid><description>hexo在生成tag目录时默认保持大小写，如果tag名称掺杂了大小写，会导致用tag索引文章的链接无法访问。解决的办法是强制hexo使用小写的文件或目录名，修改_config.yml：
1 filename_case: 1 即便如此，还要把之前生成的结果从托管服务器上删除，不过在Mac这样的不区分大小写的文件系统中，直接部署新生成的结果是无效的，这时需要删除hexo目录下的.deploy_git目录并重新部署：
1 2 3 4 rm -rf .deploy_git hexo clean hexo d -g</description></item><item><title>用vim-test简化单元测试的编写</title><link>http://0x3f.org/posts/make-writing-unit-tests-easier-with-vim-test/</link><pubDate>Mon, 14 Aug 2017 16:43:59 +0000</pubDate><guid>http://0x3f.org/posts/make-writing-unit-tests-easier-with-vim-test/</guid><description>vim-test允许在Vim中直接执行一个或多个单元测试，并使用预设的或自定义的执行策略。
例如，命令:TestNearest可以执行当前测试文件中离光标最近的一个测试方法。而:TestFile、:TestSuite和:TestLast分别执行整个测试文件、测试项目和最近一次执行过的测试。这在编写测试代码时能很大地提高效率。
执行策略是执行测试的方式和环境。例如缺省状态下，将使用:!执行测试命令，这会从Vim切换回终端。而在MacVim下，可以选择在iTerm或者系统自带的Terminal中执行。</description></item><item><title>把博客字体改成了方正北魏楷书</title><link>http://0x3f.org/posts/set-blog-webfont-to-fzbeiweikaishu/</link><pubDate>Mon, 14 Aug 2017 16:05:30 +0000</pubDate><guid>http://0x3f.org/posts/set-blog-webfont-to-fzbeiweikaishu/</guid><description>我曾说过方正北魏楷书是最佳的阅读字体，不过后来感觉长时间阅读的体验还是普通的楷体更好。但这并不妨碍在Reeder、博客这种短时阅读场合突出页面的设计感。
今天把博客（hexo）的webfont改成了方正北魏楷书，用font-spider压缩后，从13M缩减到1.4M。方法是这样的：
首先把完整的字体复制到主题的字体目录中（themes/crisp/source/fonts），文件名为FZBeiWeiKaiShu-full.ttf。
在CSS中加入webfont配置：
1 2 3 4 5 @font-face { font-family: &amp;#39;FZBeiWeiKaiShu&amp;#39;; src: url(&amp;#39;../fonts/FZBeiWeiKaiShu.ttf&amp;#39;) format(&amp;#39;truetype&amp;#39;), url(&amp;#39;../fonts/FZBeiWeiKaiShu-full.ttf&amp;#39;) format(&amp;#39;truetype&amp;#39;); } FZBeiWeiKaiShu.ttf是压缩后的字体文件名，这样访问时浏览器会优先下载压缩后的字体。
然后把CSS中使用字体的地方都指定为FZBeiWeiKaiShu。
在博客根目录下创建脚本update_fonts.sh：
1 2 3 4 5 6 7 8 9 10 11 12 #!/bin/sh hexo clean hexo g find public -name &amp;#34;*.html&amp;#34; |xargs sed -i &amp;#39;&amp;#39; &amp;#34;s#/styles/crisp.css#$HOME/Projects/blog/public/styles/crisp.css#g&amp;#34; find public -name &amp;#34;*.html&amp;#34;|xargs font-spider cp -f public/fonts/FZBeiWeiKaiShu.ttf themes/crisp/source/fonts/FZBeiWeiKaiShu.ttf hexo clean hexo s -g 除非用到新的字符，否则不需要经常更新字体。
font-spider会提示一共使用了多少种字符，我这么多年也只用到三千多种，真是太没文化了。🤥</description></item><item><title>Mock Laravel的DB Facade的方法</title><link>http://0x3f.org/posts/how-to-mock-the-db-facade-of-laravel/</link><pubDate>Mon, 14 Aug 2017 15:51:41 +0000</pubDate><guid>http://0x3f.org/posts/how-to-mock-the-db-facade-of-laravel/</guid><description>关于数据库操作是否应该mock的问题，我认为查询一般不应该mock，可以避免一些问题，但如果查询的结果可能影响到断言，就应该mock了。
Laravel的DB facade完整的mock实例是这样的：</description></item><item><title>用vim-laravel简化laravel下的开发</title><link>http://0x3f.org/posts/speed-up-artisan-with-vim-laravel/</link><pubDate>Fri, 11 Aug 2017 15:05:30 +0000</pubDate><guid>http://0x3f.org/posts/speed-up-artisan-with-vim-laravel/</guid><description>vim-laravel是个极简而实用的插件，只提供一个:Artisan命令。但它并不仅仅是artisan的一个wrapper，还可以实现一些贴心的自动化，利如自动打开artisan make:*创建的文件。</description></item><item><title>用vim-php-namespace管理PHP的命名空间</title><link>http://0x3f.org/posts/manage-php-namespaces-with-vim-php-namespace/</link><pubDate>Fri, 11 Aug 2017 14:56:12 +0000</pubDate><guid>http://0x3f.org/posts/manage-php-namespaces-with-vim-php-namespace/</guid><description>vim-php-namespace是个简单实用的插件，提供三种功能：
自动用use语句导入光标下的类 自动把光标下的类名扩展成完整命名空间的格式 自动排序use语句 此外，还提供一个选项控制是否在导入类后自动排序use语句。</description></item><item><title>使neocomplete和ultisnips共用tab键的方法</title><link>http://0x3f.org/posts/reconcile-neocomplete-with-ultisnips/</link><pubDate>Fri, 11 Aug 2017 14:43:14 +0000</pubDate><guid>http://0x3f.org/posts/reconcile-neocomplete-with-ultisnips/</guid><description>昨天用vim-clevertab换掉了supertab，但是实际使用中总是出莫名其妙的问题。看了一下插件源码，使用全局变量判断状态，这是个很不靠谱的方案，所以还是卸掉了。
下面的配置可以很好的解决问题：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 let g:UltiSnipsExpandTrigger=&amp;#34;&amp;lt;c-tab&amp;gt;&amp;#34; let g:UltiSnipsJumpForwardTrigger=&amp;#34;&amp;lt;c-tab&amp;gt;&amp;#34; let g:UltiSnipsJumpBackwardTrigger=&amp;#34;&amp;lt;s-tab&amp;gt;&amp;#34; let g:UltiSnipsSnippetsDir=&amp;#39;~/.vim/UltiSnips&amp;#39; let g:ulti_expand_or_jump_res = 0 function! CleverTab()&amp;#34;{{{ call UltiSnips#ExpandSnippetOrJump() if g:ulti_expand_or_jump_res return &amp;#34;&amp;#34; else if pumvisible() return &amp;#34;\&amp;lt;c-n&amp;gt;&amp;#34; else return neocomplete#start_manual_complete() endif endif endfunction&amp;#34;}}} inoremap &amp;lt;silent&amp;gt; &amp;lt;tab&amp;gt; &amp;lt;c-r&amp;gt;=CleverTab()&amp;lt;cr&amp;gt; snoremap &amp;lt;silent&amp;gt; &amp;lt;tab&amp;gt; &amp;lt;esc&amp;gt;:call UltiSnips#ExpandSnippetOrJump()&amp;lt;cr&amp;gt; ultisnips没有禁用按键映射的开关，而默认的映射会干扰上述配置，所以这里把默认的映射改成了&amp;lt;c-tab&amp;gt;。</description></item><item><title>GraphQL：RESTful之外的接口实现方案</title><link>http://0x3f.org/posts/graphql-vs-restful/</link><pubDate>Tue, 01 Aug 2017 17:36:27 +0000</pubDate><guid>http://0x3f.org/posts/graphql-vs-restful/</guid><description>和RESTfull一样，GraphQL也是一种基于HTTP的接口实现方式。它区别于前者的主要有两点：数据格式的自定义和请求的合并。
本质上，GraphQL是为了解决RESTful中前后端在业务逻辑上的耦合关系。在RESTful中，接口是为前端具体的业务需求定制的，从实现什么样的功能，到返回哪些数据，都是既定的，所以很难被其它业务逻辑共用，即使可以共用，前端也必须发送多个请求到后端，因而造成资源浪费、效率下降。
GraphQL实现的是一套逻辑积木，每个封装好的业务逻辑都是原子的，前端可以自由选择使用哪些，也可以定制返回数据的格式。并且这一切，都可以通过一次请求实现。
当然，GraphQL也有一些短板。比如缓存，对于RESTfull接口，可以根据操作的幂等性实现负载均衡层面的缓存，而对于GraphQL，由于请求数据格式灵活且可能很大，请求会用POST方式发送，这样就必须改变缓存的实现方式。再一点是嵌套的层级问题，GraphQL的灵活性允许查询类型之间彼此嵌套，如果层级过多，可能导致严重的性能和可用性问题，因此需要注意限制嵌套的层级。还有就是GraphQL的实现复杂度比RESTful要高，需要权衡使用哪种实现方案。
GraphQL用schema管理接口，可以根据业务等因素划分schema，例如需要权限验证的和公开的。每个schema包含两类接口：query和mutation，分别用来查询和变更数据。
下面在Laravel中简单实现一个query接口。
先安装folklore/graphql库。
实现文章类型：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 namespace App\GraphQL\Type; use GraphQL\Type\Definition\Type; use Folklore\GraphQL\Support\Type as GraphQLType; class PostType extends GraphQLType { public function fields() { return [ &amp;#39;id&amp;#39; =&amp;gt; [ &amp;#39;type&amp;#39; =&amp;gt; Type::nonNull(Type::string()), &amp;#39;description&amp;#39; =&amp;gt; &amp;#39;The id of the post&amp;#39; ], &amp;#39;title&amp;#39; =&amp;gt; [ &amp;#39;type&amp;#39; =&amp;gt; Type::string(), &amp;#39;description&amp;#39; =&amp;gt; &amp;#39;Post title&amp;#39; ] ]; } protected function resolveTitleField($root, $args) { return $root-&amp;gt;post_title; } } 实现文章的查询逻辑：</description></item><item><title>用vim-plug换掉了vim-addon-manager</title><link>http://0x3f.org/posts/replaced-vam-with-vim-plug/</link><pubDate>Mon, 31 Jul 2017 22:44:16 +0000</pubDate><guid>http://0x3f.org/posts/replaced-vam-with-vim-plug/</guid><description>四年零两个月前，我在Vim的邮件组中征询pathogen和vundle的优劣。一个人建议我试试VAM，语气幽怨——他是它的作者。
试过之后就从pathogen迁移到了VAM，因为它兼有前者和vundle的优点，在当时，这是最好的插件管理器。就这样用了很久，期间还写了点脚本简化插件的管理，VAM工作得很好。
最近发现越来越多的插件的文档里提到vim-plug，亮点是支持并行安装和更新，这真是解决了VAM最大的痛点：我叠代了十年的vimrc里用了很多插件，串行的VAM每次更新都让我很痛苦。
另外，vim-plug较VAM的另一个优势是简单。这倒不是说后者很难用，只是作者过于追求灵活性，导致有些工作实现起来相对更复杂。例如，有的插件安装之后需要做一些额外的操作，VAM需要自己实现回调函数，然后挂到post-install钩子上。而对于vim-plug，只需要在注册插件的地方增加一个选项。对于插件的懒加载，也是同样。
VAM也有自己的优势。其中之一是可以自动处理依赖关系：当一个要被安装的插件依赖别的插件时，相应的依赖也会被自动安装。还有就是对多源的支持：既可以拉取github上的插件，也可以从vim.org或其它源安装。而vim-plug就只支持github。
所以，vim-plug并没有全面超过VAM，只是没有明显的短板、功能又刚刚够用。</description></item><item><title>用choosewin.vim切换窗口</title><link>http://0x3f.org/posts/choosewin-vim/</link><pubDate>Sun, 30 Jul 2017 20:48:46 +0000</pubDate><guid>http://0x3f.org/posts/choosewin-vim/</guid><description>输入-显示每个窗口的hint，输入hint跳转，简单而高效：</description></item><item><title>Python 2还是3是个纠结的问题</title><link>http://0x3f.org/posts/bothered-by-python-2-vs-3/</link><pubDate>Sun, 30 Jul 2017 08:40:11 +0000</pubDate><guid>http://0x3f.org/posts/bothered-by-python-2-vs-3/</guid><description>前些天用denite取代unite，用--with-python3重装了vim，结果发现vdebug只支持python 2。
vim同时只能在py2和py3中选一个，据说可以通过重新编译python实现共存，但是我在编译py3的时候失败。
neovim同时支持两个版本，但是尝试deoplete失败，报「Invalid Channel」的错误，似乎是python-neovim的锅。而且由于neovim内建lua、不支持has('lua')，所以不能fall back到neocomplete。
万般无奈，只好换回unite。</description></item><item><title>给Thinkpad X220装了黑苹果</title><link>http://0x3f.org/posts/installed-hackintosh-in-thinkpad-x220/</link><pubDate>Sat, 29 Jul 2017 17:44:16 +0000</pubDate><guid>http://0x3f.org/posts/installed-hackintosh-in-thinkpad-x220/</guid><description>闲鱼上突然收到询价消息，于是突发奇想，在闲置很久的X220上装个黑苹果玩玩。
过程很简单，参考这两个链接：link1和link2。
内置的无线网卡不能驱动，用了个闲置的USB卡。蓝牙能用耳机，但不能airdrop。关机会变重启。此外没别的问题了。
现在计算机性能真是过剩的，n年前的机器，除了机械硬盘慢了点，其它毫无压力。
我在twitter上说：“似可再战三年。”</description></item><item><title>利用goyo.vim专注写作</title><link>http://0x3f.org/posts/distraction-free-writing-in-vim/</link><pubDate>Sat, 29 Jul 2017 16:48:45 +0000</pubDate><guid>http://0x3f.org/posts/distraction-free-writing-in-vim/</guid><description>goyo.vim是给vim提供专注写作模式的插件，配合markdown效果不错：
最好在单独的vim实例中使用，已发现和vim-workspace配合不好的情况。
对markdown文件自动开启goyo的配置如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 function! s:auto_goyo() if &amp;amp;ft == &amp;#39;markdown&amp;#39; Goyo 80 else let bufnr = bufnr(&amp;#39;%&amp;#39;) Goyo! execute &amp;#39;b &amp;#39;.bufnr endif endfunction augroup goyo_markdown autocmd! autocmd BufNewFile,BufRead * call s:auto_goyo() augroup END</description></item><item><title>用vim-workspace换掉了session.vim</title><link>http://0x3f.org/posts/replace-session-vim-with-vim-workspace/</link><pubDate>Wed, 19 Jul 2017 17:47:30 +0000</pubDate><guid>http://0x3f.org/posts/replace-session-vim-with-vim-workspace/</guid><description>用session.vim一直有几个痛点。一是保存会话后，退出时仍然会提示保存。二是会话会记录vimrc，恢复会话后用的仍然是旧的配置。
vim-workspace没有这些问题，而且实现了更多功能。</description></item><item><title>用neocomplete换掉了YouCompleteMe</title><link>http://0x3f.org/posts/replace-youcompleteme-with-neocomplete/</link><pubDate>Sat, 15 Jul 2017 10:29:48 +0000</pubDate><guid>http://0x3f.org/posts/replace-youcompleteme-with-neocomplete/</guid><description>在尝试了多种方案后，我又一次换掉了自动补全插件。
工具应该是能提高生产力的，而不是相反，很长一段时间以来，YouCompleteMe带给我的却是个疑惑，真不知道这个东东到底是提高了我的生产力，还是反之。自动补全在提高输入速度和准确度上都有助益，但是有时候补全选项弹出的又很慢。
测试了nvim-complete-manager+LanguageClient-neovim+LanguageServer-php-neovim、deoplete+phpcd、deoplete+padawan、neocomplete+phpcomplete-extended，效果都非常不理想。最后选择了neocomplete+phpcomplete，速度可以接受，表现比YCM稳定，功能该有的都有。
相关阅读： How to Make YouCompleteMe Compatible with UltiSnips Vim的终极自动补全插件：NeoComplCache</description></item><item><title>LeaderF，也许是Vim最好的模糊查询插件</title><link>http://0x3f.org/posts/leaderf-currently-the-best-fuzzy-finder-of-vim/</link><pubDate>Thu, 13 Jul 2017 16:45:15 +0000</pubDate><guid>http://0x3f.org/posts/leaderf-currently-the-best-fuzzy-finder-of-vim/</guid><description>之前对比过几个模糊查询插件（Fuzzy Finder），最后选定了ctrlp。
用了下LeaderF，在速度和匹配的准确度上都明显超过了ctrlp，所以用它换掉了后者。
只是在交互方式上，我更喜欢ctrlp，文件列表高度是动态变化的，最匹配的行和输入焦点都在窗口的最下方。LeaderF是定高的，最匹配的行在最上方，个人认为不如前者自然。
能解决痛点的才是好东西，什么时候能换掉YouCompleteMe就好了。</description></item><item><title>怎样测试PHP的Private或Protected方法</title><link>http://0x3f.org/posts/how-to-test-private-or-protected-methods-in-php/</link><pubDate>Mon, 03 Jul 2017 13:17:30 +0000</pubDate><guid>http://0x3f.org/posts/how-to-test-private-or-protected-methods-in-php/</guid><description>利用闭包绑定：
1 2 3 4 5 6 7 $ctrlr = new UserController; $tester = function () use ($uid) { $this-&amp;gt;getUser($uid); }; $runner = $tester-&amp;gt;bindTo($ctrlr, $ctrlr); $runner();</description></item><item><title>为每个GTK3应用指定单独的主题</title><link>http://0x3f.org/posts/specify-a-theme-for-each-gtk-3-app/</link><pubDate>Tue, 27 Jun 2017 15:37:43 +0000</pubDate><guid>http://0x3f.org/posts/specify-a-theme-for-each-gtk-3-app/</guid><description>指定GVim 8使用Numix主题并最小程度影响既有的脚本、快捷键。
我这里gvim安装在/usr/bin/gvim，$PATH中/usr/local/bin在/usr/bin前面，所以在/usr/local/bin下创建gvim：
1 2 3 #!/bin/sh GTK_THEME=Numix /usr/bin/gvim &amp;#34;$@&amp;#34; 同理，对gvimdiff也做同样处理。</description></item><item><title>调校mycli</title><link>http://0x3f.org/posts/fine-tune-mycli/</link><pubDate>Mon, 26 Jun 2017 18:05:31 +0000</pubDate><guid>http://0x3f.org/posts/fine-tune-mycli/</guid><description>做以下配置，使mycli按需使用pager，并在数据过多时不破坏表格格式：
1 2 3 4 # ~/.my.cnf [client] pager = less -FSXR</description></item><item><title>用MySQL的全文检索实现相关性排序</title><link>http://0x3f.org/posts/fulltext-searching-in-mysql/</link><pubDate>Mon, 19 Jun 2017 23:10:41 +0000</pubDate><guid>http://0x3f.org/posts/fulltext-searching-in-mysql/</guid><description>实现根据文章的关键词搜索出相关的文章，并按相关性排序。
数据库版本是5.6.x，还不能像5.7那样支持中文的全文检索，所以另外创建一列保存关键词的编码。方法为base64转码并去掉「%」符号：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &amp;lt;?php /** * 转换关键词到全文检索的格式 * * @param mixed $keywords 关键词数组或英文逗号分隔的字符串 * @return string */ function encode_keywords($keywords) { $encoder = function ($keyword) { return str_replace(&amp;#39;%&amp;#39;, &amp;#39;&amp;#39;, urlencode(trim($keyword))); }; if (!is_array($keywords)) { $keywords = explode(&amp;#39;,&amp;#39;, $keywords); } return implode(&amp;#39; &amp;#39;, array_map($encoder, $keywords)); } 对该列创建全文检索的索引：
1 CREATE FULLTEXT INDEX idx_post_keywords ON posts (keywords_ft); 查询语句：</description></item><item><title>CopyQ，也许是Linux最好的剪贴板管理工具</title><link>http://0x3f.org/posts/copyq/</link><pubDate>Mon, 19 Jun 2017 21:49:14 +0000</pubDate><guid>http://0x3f.org/posts/copyq/</guid><description>我对剪贴板管理工具的核心需求有四个：
记录文本 记录图片 快速搜索 独立软件包 CopyQ是Linux上唯一满足这些需求的实现，虽然体验上跟Mac下的竞品还有差距。
用法：
copyq：运行 copyq menu：显示剪贴板历史管理菜单 copyq show：显示剪贴板历史管理窗口</description></item><item><title>手机锁屏后自动断开WiFi的解决办法</title><link>http://0x3f.org/posts/solve-the-auto-breaking-problem-of-huawei-e5573s/</link><pubDate>Sat, 17 Jun 2017 23:13:33 +0000</pubDate><guid>http://0x3f.org/posts/solve-the-auto-breaking-problem-of-huawei-e5573s/</guid><description>我的iPhone 6总是在锁屏后不久就从华为E5573S断开，但是连接家里的WiFi不会有这个问题，iOS同版本的iPad mini 4连接E5573S也正常。
两台机器里E5573S的连接属性界面有差异，iPhone 6里有「自动加入」等两个选项，这在同机其它WiFi连接里是没有的，iPad里也没有。所以猜测应该是iPhone里连接本身的问题，忽略掉该连接，再重新连，就好了。</description></item><item><title>用Tmux的控制模式提高生产力</title><link>http://0x3f.org/posts/improve-productivity-with-tmux-control-mode/</link><pubDate>Sun, 11 Jun 2017 10:40:06 +0000</pubDate><guid>http://0x3f.org/posts/improve-productivity-with-tmux-control-mode/</guid><description>Tmux的控制模式（Control Mode）可以把tmux的窗口映射为本地虚拟终端的窗口，也就是说，用户可以像操作本地虚拟终端一样操作tmux。这对备受tmux的emacs风格的热键绑定折磨或需要嵌套tmux的人来说非常有用。
在支持这个特性的虚拟终端（例如「iTerm」）里，执行tmux -CC即可。当然也可以tmux -CC a恢复会话。</description></item><item><title>用SwitchHosts!切换主机映射方案</title><link>http://0x3f.org/posts/switch-hosts-with-switchhosts/</link><pubDate>Sun, 11 Jun 2017 09:57:54 +0000</pubDate><guid>http://0x3f.org/posts/switch-hosts-with-switchhosts/</guid><description>最近在Archlinux上开始用SwitchHosts!管理主机映射方案，它可能是Linux下做这件事的最好的工具了。
在Mac下也用它替换掉了Gas Mask，因为支持Alfred Workflow。相对的缺点是不支持在状态栏图标上显示当前方案名称，不过Alfred里可以，一定程度上缓解了这个问题。</description></item><item><title>自定义GVIM 8标签栏样式的方法</title><link>http://0x3f.org/posts/how-to-customize-gvim8-tab-style/</link><pubDate>Sun, 04 Jun 2017 12:42:12 +0000</pubDate><guid>http://0x3f.org/posts/how-to-customize-gvim8-tab-style/</guid><description>GVim 8用的是GTK 3，原来在~/.gtkrc-2.0里加样式的方法不能用了。
GTK 3的样式在~/.config/gtk-3.0/gtk.css里：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 /** * Adapt to the nova colorscheme */ @define-color VIM_BG_FIX #3C4C55; window#vim-main-window { background-color: @VIM_BG_FIX; } window#vim-main-window notebook header { background-color: #1E272C; border-bottom-width: 0; } window#vim-main-window notebook tab { border-bottom-width: 0; } window#vim-main-window notebook tab label { padding-left:5px; padding-right:5px; padding-top:1px; padding-bottom:2px; color: #7CBDC6; } window#vim-main-window notebook tab:checked label { background-color: #7CBDC6; color: #1E272C; } 查看GTK 3程序的样式结构的方法是用GTK Inspector：</description></item><item><title>网站签到的最佳实践</title><link>http://0x3f.org/posts/the-best-practice-of-checking-in/</link><pubDate>Wed, 24 May 2017 11:42:52 +0000</pubDate><guid>http://0x3f.org/posts/the-best-practice-of-checking-in/</guid><description>v2ex、优酷、什么值得买用qiandao.today实现。优点是依赖少，速度快，支持的范围广，可扩展。缺点是对京东和京东金融无效。
京东和京东金融使用daily-signin。缺点是依赖docker，速度慢。
淘宝签到没有有效的脚本，用淘金币一键领取。
飞猪也没有有效脚本，手工签：
http://trip.taobao.com/mytrip/?tvm=tvip http://trip.taobao.com/mytrip/ http://h5.m.taobao.com/trip/member/index.html</description></item><item><title>通过比较截图检查网页变化</title><link>http://0x3f.org/posts/check-changes-of-webpage-by-comparing-screenshots/</link><pubDate>Sun, 30 Apr 2017 17:21:52 +0000</pubDate><guid>http://0x3f.org/posts/check-changes-of-webpage-by-comparing-screenshots/</guid><description>有时候我们希望检查代码或数据的更新对网页产生的影响，如果能把这个过程集成到git等版本控制系统中，在提交成果的同时自动批量执行，将会极大地提高生产力。
首先网页的截图可以用PhantomJS、Headless Chrome实现：
1 2 3 4 5 var page = require(&amp;#39;webpage&amp;#39;).create(); page.open(&amp;#39;http://github.com/&amp;#39;, function() { page.render(&amp;#39;github.png&amp;#39;); phantom.exit(); }); 图片的差异比较用GraphicsMagick实现：
1 gm compare old.png new.png -file diff.png -highlight-style assign 为方便查看，还可以把截图做成gif动图：
1 gm convert -delay 20 old.png diff.png new.png diff.gif</description></item><item><title>PHPUnit代码覆盖率的统计方法</title><link>http://0x3f.org/posts/how-to-count-code-coverage-of-phpunit/</link><pubDate>Sun, 30 Apr 2017 14:20:41 +0000</pubDate><guid>http://0x3f.org/posts/how-to-count-code-coverage-of-phpunit/</guid><description>关于PHPUnit代码覆盖率的很多概念，官方文档中讲的十分清楚，本文仅就部分语焉不详的细节做些补充。
虽然phpunit.xml不是必需，但每次都输入完整的命令很不方便，所以一般都要生成这个配置文件。用phpunit --generate-configuration生成的phpunit.xml默认包含forceCoversAnnotation=&amp;quot;true&amp;quot;，它表示必须在测试方法头部的注释里显式使用@covers标签声明统计范围，例如：
1 2 3 4 5 6 7 8 9 10 /** * @covers Ox3f\LaravelUtils\Log\Log::&amp;lt;public&amp;gt; * @covers Ox3f\LaravelUtils\Log\Log::parseCallStack * @covers Ox3f\LaravelUtils\Log\Log::__construct * @covers Ox3f\LaravelUtils\Log\Log::__callStatic */ public function testAll() { // ... } 否则在执行统计代码覆盖率的命令时，会报risk：
There was 1 risky test:
Ox3f\LaravelUtils\Log\LogTest::testAll This test does not have a @covers annotation but is expected to have one 如果希望单元测试覆盖全部代码、且不用一一显式声明，可以将此选项的值改成 false。
之后即可使用明令phpunit —coverage-html ./report统计代码覆盖率，统计结果保存在report目录中。
参考 官方文档：第11章-代码覆盖率分析</description></item><item><title>利用依赖注入Mock PHP的内建函数</title><link>http://0x3f.org/posts/mock-php-built-in-functions-using-dependency-injection/</link><pubDate>Sun, 30 Apr 2017 09:57:50 +0000</pubDate><guid>http://0x3f.org/posts/mock-php-built-in-functions-using-dependency-injection/</guid><description>简述 上篇文章讨论了如何利用命名空间实现对PHP内建函数的mocking，本文介绍另一种实现方法——依赖注入。
出于编写可测试代码的需要，依赖注入是经常使用的一种技术。通过把代码中依赖的其它数据获取服务提取出来、和原有逻辑解耦，提高代码的可测试性。只需mock这些依赖并注入到测试对象中即可。
实现 对原有代码的重构 先把原有代码用依赖注入的方式重构（为突出重点，省略了和上篇文章中重复的部分）：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 // ... use Ox3f\LaravelUtils\Services\Builtins; /** * Class Log * @author donie */ class Log { // ... private $builtins; // Builtin functions private function __construct() { $this-&amp;gt;builtins = new Builtins(); // .</description></item><item><title>利用命名空间Mock PHP的内建函数</title><link>http://0x3f.org/posts/mock-php-built-in-functions-using-namespace/</link><pubDate>Sun, 30 Apr 2017 09:06:17 +0000</pubDate><guid>http://0x3f.org/posts/mock-php-built-in-functions-using-namespace/</guid><description>简述 Mock PHP的内建函数一般有两种方法：命名空间法和依赖注入法。
命名空间法是利用PHP优先使用同命名空间内函数的特性，在测试对象的命名空间内重载内建函数来实现。前提是内建函数在被调用时没有使用命名空间，例如：\debug_backtrace()是不能使用本方法的。
上篇文章《接口编程中记录日志的最佳实践》中实现的日志类中，核心部分调用了debug_backtrace()函数获取方法调用堆栈。下面讨论下如何利用命名空间法实现对此函数的mock。
实现 先看代码：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 &amp;lt;?</description></item><item><title>接口编程中记录日志的最佳实践</title><link>http://0x3f.org/posts/the-best-practice-of-logging-in-api-programming/</link><pubDate>Tue, 25 Apr 2017 15:50:41 +0000</pubDate><guid>http://0x3f.org/posts/the-best-practice-of-logging-in-api-programming/</guid><description>解决什么问题 快速定位日志 降低记录成本 提高代码可读性 日志框架是项目开始阶段应该最先搭建好的内容之一，有助于极大地节约以后解决问题的时间和成本。但这也是最让我头疼的问题之一，因为记日志不光包括用什么记、怎么记，也包括记什么内容，这恰恰是最容易被忽略的问题。
一条好的日志需要做到能让问题的跟踪者快速定位它在程序中的位置且包含关键数据。工作中不乏这样的团队成员，在移交接口问题的时候没有主动提供关键信息的意识，所谓关键信息，是指像问题发生的环境、接口名、传递的实参和返回结果这样的内容，使得面向契约编程本来是很好的开发模式，却得不到最好的应用。这时我们可以从自己接口的日志中得到一些弥补。
但是日志的记录不应该占用很大的代码量，一来降低了代码的可读性，二来会耗费太多的时间精力。
本文目的在于讨论一种日志记录的最佳实践方式，使得可以兼顾以上这些问题。
实践 这里针对Laravel实现一个日志工具类，实现以下功能：
兼容Laravel自己的日志系统 自动记录关键的业务数据 自动记录日志所属的接口名 自动记录接口的实参 记录接口的返回值 生成简洁规范的日志内容 代码：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 &amp;lt;?</description></item><item><title>Google BBR和锐速在Vultr上的对比</title><link>http://0x3f.org/posts/google-bbr-is-awesome/</link><pubDate>Sun, 23 Apr 2017 23:48:21 +0000</pubDate><guid>http://0x3f.org/posts/google-bbr-is-awesome/</guid><description>BBR比锐速略快，看YouTube的1080p效果差别不大，SSH操作反应改善明显。
两个都不用的情况：
$ speedtest Retrieving speedtest.net configuration... Testing from Choopa (xx.xx.xx.xx)... Retrieving speedtest.net server list... Selecting best server based on ping... Hosted by Allied Telesis Capital Corporation (Fussa-shi) [41.04 km]: 88.085 ms Testing download speed................................................................................ Download: 1.81 Mbit/s Testing upload speed.................................................................................................... Upload: 7.48 Mbit/s 使用锐速的情况：
$ speedtest Retrieving speedtest.net configuration... Testing from Choopa (xx.xx.xx.xx)... Retrieving speedtest.net server list... Selecting best server based on ping... Hosted by Allied Telesis Capital Corporation (Fussa-shi) [41.</description></item><item><title>Cross-site Request Forgery简介</title><link>http://0x3f.org/posts/introduction-of-cross-site-request-forgery/</link><pubDate>Sun, 23 Apr 2017 20:55:58 +0000</pubDate><guid>http://0x3f.org/posts/introduction-of-cross-site-request-forgery/</guid><description>什么是CSRF Cross-site Request Forgery（简称CSRF），意思是跨站请求伪造。原理是利用网站服务器对浏览器的信任，通过一些技术手段欺骗用户的浏览器访问自己曾经认证过的网站，并执行一些危害用户利益的操作。
例如，假设网站的会话信息保存在cookie中，提现的请求是GET http://www.sample.com/withdraw?toCard=123456&amp;amp;amount=10000，攻击者在自己的网页中通过img标签、iframe或者AJAX访问这个链接，并诱使用户访问这个网页，如果用户刚刚登录过sample.com，余额就会被转走。
防止CSRF的方法 CSRF的关键在于用户的鉴权信息保存在cookie中，或攻击者可以拿到它。目前防止CSRF攻击的方法主要有两种：JWT和表单校验token。
JWT的token通过HTTP请求的header传递，且由于浏览器的跨站限制，钓鱼网页中的JS无法拿到token，从而达到防止CSRF的目的。关于JWT更详细的介绍在「JSON Web Token简介」。
表单校验token通常是存储在表单的隐藏字段中的一个随机字符串，服务器端通过比对表单提交的token判断请求是否伪造，此时需要注意服务器端的CORS配置，即便在有需要的情况下开放了，也应该严格限制允许的HTTP方法和域，否则，钓鱼网页的JS就可以拿到这个token，从而实现CSRF。</description></item><item><title>JSON Web Token简介</title><link>http://0x3f.org/posts/introduction-of-json-web-token/</link><pubDate>Sun, 23 Apr 2017 18:29:06 +0000</pubDate><guid>http://0x3f.org/posts/introduction-of-json-web-token/</guid><description>什么是JWT？ JSON Web Token（简称JWT）是一种token格式，通常用来解决身份认证的问题，和会话（session）作用相同，常用在RESTful API或者OAuth认证上。
和session相比，JWT有以下优势：
服务器端的开销低 服务器端扩展方便 不用专门处理CSRF 由于session的实现方式需要在服务器端存储会话数据，所以当存在大量会话时，服务器端的存储压力会很大，并由此带来扩展上的复杂度（共享session）。而JWT可以把这些数据存储在token里，不需要服务器端存储，优势自然很明显。
对于CSRF，由于session一般使用cookie实现，所以需要专门处理这个安全隐患。JWT借助HTTP请求的header传递，所以伪造成本更高。
JWT和Bearer Token的关系 JWT在使用的时候要在token前面加上字符串「bearer」再填到HTTP请求的header里，这个值就是「Bearer Token」。为什么要这么做？它和JWT是什么关系？
简单地说，JWT是一种token格式，Bearer Token是一种鉴权方案。
HTTP的header项「Authorization」是在HTTP 1.0引入的，它的值的格式是类型+token，支持多种鉴权方案，bearer只是其中的一种。bearer方案中使用的token是JWT格式，这就是它们之间的关系。
JWT的格式 JWT是一个用英文点号连接起来的、分成三个部分的字符串：header、payload和signature。
header header是个base64字符串，解密后是个JSON对象，包含一些元数据。例如：
1 2 3 4 { &amp;#39;typ&amp;#39;: &amp;#39;JWT&amp;#39;, &amp;#39;alg&amp;#39;: &amp;#39;HS256&amp;#39; } 「typ」是格式，「alg」是加密方法。
payload payload也是个base64字符串，解密后也是个JSON对象，一般包含两种数据：JWT标准数据和自定义数据。
JWT标准数据常见的有：
iss：提供方。 sub：主题，一般是用户ID。 exp：过期时间。 iat：创建时间。 jti：token的唯一标识。 此外，和session一样，可以把一些自定义的数据存储在payload里。但由于token存储在客户端，所以不应该在这里存储敏感数据。
signature signature也是个base64字符串，解密后是个使用header里描述的加密方法针对header和payload加密的字符串。目的是防止这两部分的数据被篡改。
JWT的使用原则 不存放敏感信息 保护好私钥 结合https使用 都是出于安全角度考虑。token存储在客户端，而且base64可以被解密，所以不能存储敏感数据。如果私钥泄漏，意味著签名可以被随意伪造。使用https可以更好的保护数据，防止中间人攻击。
JWT相关开发资源 jwt.io有各种语言的JWT开发资源。</description></item><item><title>设计RESTful API的几个原则</title><link>http://0x3f.org/posts/some-principles-on-designing-restful-api/</link><pubDate>Fri, 21 Apr 2017 10:07:29 +0000</pubDate><guid>http://0x3f.org/posts/some-principles-on-designing-restful-api/</guid><description>REST不是一项技术，而是一种设计风格。它的核心思想是实现一种清晰明确的语义，用来描述Web操作。包含两个主要因素：HTTP动词和资源地址。
HTTP动词的使用原则 参与Web操作的HTTP动词主要有GET、POST、DELETE、PUT、HEAD、PATCH。实际上，几乎所有的操作只需GET和POST就可以实现，为什么还要有其它几种呢？目的就是为了实现清晰明确的语义：DELETE /api/v1/post/18肯定比GET /api/v1/post?id=18&amp;amp;action=delete更清楚。
因此HTTP动词使用的重点在于明确语义。例如更新操作，很多文章会说创建资源用POST、修改用PUT，实际上是对REST风格理解不透彻。
总体上，HTTP动词分为两类：幂等和非幂等。幂等是个数学概念，对于一元操作，如果它作用于任一元素两次以上后所得的结果和第一次相同，就认为它是幂等的。简单地说，如果一个接口，传递同样的实参，多次请求的结果和一次没有不同，就认为它是安全的、幂等的，反之，就是不安全、非幂等的。
GET、DELETE、PUT、HEAD是幂等操作，POST和PATCH是非幂等操作。因此，修改操作用POST还是PUT，要看操作本身的幂等与否。举个例子，对于修改用户描述的接口，调用任意次得到的结果都是相同的，所以它是幂等的，应该用PUT。而对于修改用户登录积分的操作，假设每次登录加十分，重复调用会导致分数重复增加，这就是不安全、非幂等的，应该用POST。
资源地址的命名原则 资源地址是对被操作资源位置的描述，因此应该有以下几个原则：
全部使用名词 不使用驼峰风格 资源名称统一使用复数 对于前两个，因为对资源的操作已由HTTP动词表述，资源地址里不应该存在动词，否则会造成语义的混乱。此外，不存在动词也就不需要使用驼峰风格。例如，GET /api/v1/getUser/89，「get」在语义上就重复了。
关于资源名称用复数的原则，主要是为了API在风格上的统一，同一种资源用同一个单词表示，单、复数用资源的id表示，URI里有id的就是单数，否则是复数。
结论 REST是风格而不是技术，出bug的可能性不大，并不是能实现业务逻辑、没有bug就是好代码。风格错了，连REST都不算。</description></item><item><title>Postman的Pre-request Script和Tests</title><link>http://0x3f.org/posts/pre-request-script-and-tests-in-postman/</link><pubDate>Wed, 19 Apr 2017 17:05:55 +0000</pubDate><guid>http://0x3f.org/posts/pre-request-script-and-tests-in-postman/</guid><description>Pre-request Script和Tests都是Javascript代码块。前者在请求发起前执行，通常用来生成请求数据，例如对用户注册接口随机生成用户名。后者在请求结束后执行，通常用来测试和处理返回值。
以下是随机生成用户名的Pre-request Script：
1 postman.setEnvironmentVariable(&amp;#34;random_username&amp;#34;, &amp;#34;测试用户&amp;#34; + Math.floor(Math.random()*1000000)); 产生的值存储在环境变量里，表单里直接引用环境变量即可。
对于REST接口普遍使用的JWT，可以在登录接口的Tests里直接把返回的token更新到环境变量里，这样其它接口直接引用这个环境变量即可：
1 2 3 4 var data = JSON.parse(responseBody); tests[&amp;#34;token is returned&amp;#34;] = typeof(data.token) == &amp;#34;string&amp;#34; &amp;amp;&amp;amp; data.token.length &amp;gt; 0 postman.setEnvironmentVariable(&amp;#34;token&amp;#34;, data.token);</description></item><item><title>用Raspberry Pi实现音频Airplay</title><link>http://0x3f.org/posts/implement-airplay-with-raspberry-pi/</link><pubDate>Mon, 17 Apr 2017 10:19:51 +0000</pubDate><guid>http://0x3f.org/posts/implement-airplay-with-raspberry-pi/</guid><description>用树莓派做音频airplay效果不错，老书架音箱又可以用起来了。
实现方式是shairplay-sync，利用HDMI转VGA线上的3.5mm音频输出孔，因为我的树莓派2B的3.5mm音视频输出口没有合适的转接头。
我用的是Arch Linux ARM，需要手动开启HDMI输出。修改/boot/config.txt：
1 2 3 4 hdmi_force_hotplug=1 hdmi_drive=2 config_hdmi_boost=4 dtparam=audio=on 重启后，用alsamixer把树莓派音量调整到最大值。
AUR里没有针对ARM的shairplay-sync，需要手动编译：
1 git clone https://github.com/mikebrady/shairport-sync.git 1 2 # 生成configure autoreconf -i -f 1 2 3 4 5 6 # 针对systemd编译 ./configure --sysconfdir=/etc --with-alsa --with-avahi --with-ssl=openssl --with-metadata --with-soxr --with-systemd # END 1 2 3 4 5 6 7 8 # 如果shairport-sync用户不存在，新增用户和用户组 getent group shairport-sync &amp;amp;&amp;gt;/dev/null || sudo groupadd -r shairport-sync &amp;gt;/dev/null getent passwd shairport-sync &amp;amp;&amp;gt; /dev/null || sudo useradd -r -M -g shairport-sync -s /usr/bin/nologin -G audio shairport-sync &amp;gt;/dev/null # END airplay默认的服务名和树莓派的hostname一致，可以到/etc/shairport-sync.</description></item><item><title>编写接口文档的最佳实践</title><link>http://0x3f.org/posts/the-best-practice-of-writing-api-documents/</link><pubDate>Mon, 10 Apr 2017 16:36:27 +0000</pubDate><guid>http://0x3f.org/posts/the-best-practice-of-writing-api-documents/</guid><description>前言 传统的做法是用office写接口文档，这种方式的缺点很多：
格式混乱 事实上，所有的传统富文本文档都存在这个问题，富文本的跨平台兼容性很差，很容易造成格式错乱。
版本管理困难 依赖文件系统管理文档是很落后的做法，很难保证手头的文档是最新的版本。
兼容性差 不是所有人都用windows。
低效 对效率的负面影响很大程度上已经包含在前面几项里。此外，编辑工具的臃肿、编辑内容的同时还要调整样式、缺少全文检索等，也是导致效率下降的原因。
理想情况 理想的接口文档应该有以下特征：
方便创作 文档编辑最重要的是文档的内容，而不是编辑操作本身。所以编写文档的过程应该是简单快捷的，而且最好不需要额外的学习成本。
排版简洁规范 技术文档的排版，简洁规范是最重要的，花哨的排版会降低效率。
方便查阅 应该有目录或者大纲视图，并且可以方便地全文检索。
在线协作 传统的离线文档不方便协作。
多端兼容 允许在大多数常见平台编辑和使用文档。
版本管理 可以查看什么人在什么时间改了哪些内容。
交互式文档 所见即所得。可以修改参数、发送请求并查看接口返回值。
可订阅 可以给接口打标签。用户可以订阅任意标签下的接口变更，也可以针对接口订阅。
自动生成 如果代码的可读性足够好，何必浪费时间写文档？或者至少可以自动生成。
当前实践 理想很丰满，但是目前还没有能满足以上所有需求的解决方案。权衡之下，markdown和wiki是目前比较合适的方案。
markdown 用markdown写文档有以下特点：
适合单文档形式 主流git托管平台都支持 适合个人创作 适合小型项目、需要移交开发成果的项目 下面是用markdown写的接口文档的例子： 主流markdown编辑器在转换过程中会为标题添加锚点，利用这个特性可以实现从接口列表跳转到接口详情。
最佳工具 Cmd Markdown
美观 跨平台 编辑操作支持Vim模式 wiki 用wiki写文档有这些特点：
方便多层级文档 需要自己搭建平台 适合团队创作 适合长期、大型项目 最佳工具 dokuwiki
刚刚好 结论 综上，小型的、托管在主流git平台的项目适合用markdown，公司级项目用wiki更好。但这还达不到理想的标准，需要继续探索更好的解决方案。</description></item><item><title>一次对Workflow不完全成功的抓包过程</title><link>http://0x3f.org/posts/a-failed-attempt-to-capture-workflow-requests/</link><pubDate>Tue, 04 Apr 2017 20:19:52 +0000</pubDate><guid>http://0x3f.org/posts/a-failed-attempt-to-capture-workflow-requests/</guid><description>一个workflow对https链接的请求总是失败，而同样的接口在postman里是成功的。所以想对比一下两个请求的差异。
尝试了两种抓包方式，都不成功。一种是用中间人攻击的原理，用的是mitmproxy，类似的还有charles、fiddler等。另一种是从网卡直接抓取，用的是wireshark。
第一种情况，虽然在iOS里安装并信任了mitmproxy的伪证书、safari里也是可以正常访问https链接的，但在workflow里仍然不认。
第二种情况，wireshark支持两种解密TLS包的方式：一是使用https服务的私钥，二是用浏览器输出的「SSLKEYLOGFILE」。这里需要用第二种。但是这种方式只对本机发送的请求有效，而且在实际操作中还发现有时候本机也解密不了。
最后只能采用临时方案，把https链接改成http，然后用mitmproxy抓取，虽然请求是失败的，但是可以拿到请求本身的数据。</description></item><item><title>迄今最好的发送网页到 Kindle 的快捷指令</title><link>http://0x3f.org/posts/send-to-kindle-with-shortcut/</link><pubDate>Thu, 30 Mar 2017 11:12:02 +0000</pubDate><guid>http://0x3f.org/posts/send-to-kindle-with-shortcut/</guid><description>转换成 PDF 和 FiveFilters 都不完美， send.reabble.cn 是迄今最好的解决方案，所以写了这个快捷指令：
Send to Kindle
注意：
参照 Reabble 的说明做相关配置。 用 Kindle 接收邮箱创建一个联系人，并在快捷指令里选择他。 2023-04-20
优化了提示信息。
2021-10-05
使用新的 send.reabble.cn 替换原 com 域名，修复发送失败的问题。</description></item><item><title>Shadowrocket下优酷无法播放的解决办法</title><link>http://0x3f.org/posts/how-to-play-youku-under-shadowrocket/</link><pubDate>Sun, 26 Mar 2017 00:03:10 +0000</pubDate><guid>http://0x3f.org/posts/how-to-play-youku-under-shadowrocket/</guid><description>导入这里提供的配置文件。</description></item><item><title>自动探测RSS地址的workflow</title><link>http://0x3f.org/posts/find-rss-with-workflow/</link><pubDate>Fri, 24 Mar 2017 21:09:13 +0000</pubDate><guid>http://0x3f.org/posts/find-rss-with-workflow/</guid><description>RSS真是没落了，很多网站都没有明确输出Feed地址，每次想订阅都要浪费不少时间，所以写了这个Workflow。
列出页面中所有的Feed地址，点击后复制到剪贴板 如果页面中的Feed地址是相对地址，自动转换为绝对地址 如果页面中没有Feed地址，列出常见的几种地址，并侦测被点选的地址，侦测成功后自动复制到剪贴板</description></item><item><title>用 Keyboard Maestro 自动登录 Mac App Store</title><link>http://0x3f.org/posts/auto-login-mas-with-keyboard-maestro/</link><pubDate>Tue, 21 Mar 2017 22:51:32 +0000</pubDate><guid>http://0x3f.org/posts/auto-login-mas-with-keyboard-maestro/</guid><description>按以下步骤配置：
在 Keychain 里创建一个密码项，填上 Apple ID 和密码。 下载 login_mas.kmmacros 并导入。 将 YOUR@EMAIL.COM 改成自己的 Apple ID 。 将 YOUR KEYCHAIN PASSWORD NAME 改成 Keychain 里密码项的名称。</description></item><item><title>MacOS中切换输入法的最佳实践</title><link>http://0x3f.org/posts/the-best-practice-of-switching-input-methods-in-macos/</link><pubDate>Mon, 20 Mar 2017 14:25:00 +0000</pubDate><guid>http://0x3f.org/posts/the-best-practice-of-switching-input-methods-in-macos/</guid><description>原则：
一键切换 可以对特定应用设定初始输入状态 可以方便地确认当前输入状态 兼容外接键盘 思路：
用Karabiner Elements把右Shift修改成F19，在系统里设置用F19切换输入法 用isHUD显示输入法状态 用Keyboard Maestro自动切换键盘布局 Karabiner Elements会使系统的键盘布局失效，且不能对不同的键盘使用不同的布局，所以只有用Keyboard Maestro自动切换。
isHUD只在切换输入法时有效，理想情况是用Caps Lock键灯表示输入状态，不过目前没找到可用的解决办法。
鼠须管可以对不同的应用设置初始输入状态，但只是在切换输入法后，例如对于Alfred，如果上次鼠须管处于中文输入状态，再次打开输入框的时候不会变成英文状态，因此需要在Alfred中设置初始输入法为英文。</description></item><item><title>MacOS下自动切换Karabiner Elements配置</title><link>http://0x3f.org/posts/auto-switch-keyboard-layouts-in-macos/</link><pubDate>Mon, 20 Mar 2017 13:14:18 +0000</pubDate><guid>http://0x3f.org/posts/auto-switch-keyboard-layouts-in-macos/</guid><description>Karabiner Elements不支持对不同的键盘自动使用不同的配置，所以本文通过监听USB键盘插拔事件实现自动切换。
依赖： Keyboard Maestro php 脚本 Karabiner Elements会监听配置文件~/.config/karabiner/karabiner.json，如果有变动，会自动重新加载。
切换配置的脚本在这里。
Keyboard Maestro 键盘插入事件：
键盘拔出事件：</description></item><item><title>鼠须管实现简繁转换的方法</title><link>http://0x3f.org/posts/switch-cn-tw-in-rime/</link><pubDate>Sat, 11 Mar 2017 23:42:11 +0000</pubDate><guid>http://0x3f.org/posts/switch-cn-tw-in-rime/</guid><description>鼠须管默认输出繁体，可以通过自带的过滤器转换成简体。这样做是科学的，因为繁体的异体字较多，从简转繁容易转错。
对于只有简体的码表，可以转换成繁体，再通过过滤器转简体，但是会导致在简体状态下无法自造词。所以最好的办法是给繁体单独配一个码表。
步骤为：
复制简体码表的schema.yaml和dict.yaml文件 修改两个yaml文件的名称 文件内容中和文件名对应的内容也都改为和新文件名一致 修改schema.yaml中输入法的名称，使之和简体码表区分开 转换dict.yaml中的内容到繁体 重新部署 如果需要给繁体码表增加临时输出简体的功能，方法如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 在码表的schema.yaml中 # switches下增加 - name: simplification states: [ 汉字, 汉字 ] # engine下增加 filters: - simplifier - uniquifier #key_binder下增加 - { when: always, accept: Control+Shift+4, toggle: simplification } - { when: always, accept: Control+Shift+dollar, toggle: simplification }</description></item><item><title>加速Homebrew</title><link>http://0x3f.org/posts/speed-up-homebew/</link><pubDate>Mon, 06 Mar 2017 23:14:02 +0000</pubDate><guid>http://0x3f.org/posts/speed-up-homebew/</guid><description>两个方法：走代理和使用国内镜像。镜像有同步时间差，而且遇到国外资源还是慢。
homebrew用curl下载，用proxychains和环境变量http_proxy都没用，需要在~/.curlrc里配置：
socks5 = &amp;#34;127.0.0.1:1080&amp;#34;</description></item><item><title>CORS：另一种前端跨域请求方式</title><link>http://0x3f.org/posts/cors/</link><pubDate>Mon, 27 Feb 2017 17:07:17 +0000</pubDate><guid>http://0x3f.org/posts/cors/</guid><description>CORS的全称是「Cross-Origin Resource Sharing」，即跨域资源共享。
CORS是比JSONP更强大的前端跨域请求的实现方式。JSONP只支持GET请求，而CORS支持更多种类。JSONP的优势是支持老版本的浏览器。
实现CORS需要浏览器和服务器同时支持，主流框架有实现CORS的中间件，如：laravel-cors。
具体参考：http://www.ruanyifeng.com/blog/2016/04/cors.html</description></item><item><title>怎样在Vim中删除引号文本对象</title><link>http://0x3f.org/posts/how-to-delete-quoted-text-object-in-vim/</link><pubDate>Sat, 25 Feb 2017 19:33:18 +0000</pubDate><guid>http://0x3f.org/posts/how-to-delete-quoted-text-object-in-vim/</guid><description>假设有这样一段代码（光标在「|」位置）：
$title = &amp;ldquo;Article:|&amp;rdquo; . $realTitle;
要删除引号及其内容，并进入插入模式准备输入其它内容。
如果执行ca&amp;quot;，会得到如下的结果：
$title = |. $realTitle;
连引号旁边的空格也删除了。
如果不想删除空格，可以用c2i&amp;quot;。
参考：Is it possible to exclude surrounding whitespace from the word-object a&amp;quot;?</description></item><item><title>Git的衍合</title><link>http://0x3f.org/posts/git-rebase/</link><pubDate>Wed, 22 Feb 2017 18:44:37 +0000</pubDate><guid>http://0x3f.org/posts/git-rebase/</guid><description>合并分支有两种方式，merge和rebase。merge是根据三方合并的差异，创建一个新的提交。rebase是将上游分支的各个提交在比较差异后在下游分支上重演一遍。
rebase适合对没有推送到远程的提交对象做合并，这样可以保持一个整洁的提交历史。若对已推送的提交对象使用rebase，可能导致其它已经拉取并创建了新的提交的人不得不重新合并，进而导致提交历史变得很混乱。
基本的rebase：
1 2 3 git rebase master unstable git checkout master git merge unstable 复杂的情况：存在三个分支，unstable基于master的某个提交创建，feature基于unstable的某个提交创建，要把feature合并到master而不合并unstable。更多分支时方法也一样。
1 2 3 git rebase --onto master unstable feature git checkout master git merge feature rebase过程中如果存在冲突，合并后用git add标记已解决，再用git rebase --continue继续。如果解决冲突后仍然不能继续，可能是当前补丁的内容在下游分支已存在，可以用git rebase --skip跳过。</description></item><item><title>在Vim中格式化Javascript、HTML和CSS</title><link>http://0x3f.org/posts/vim-js-beautify/</link><pubDate>Tue, 21 Feb 2017 14:58:08 +0000</pubDate><guid>http://0x3f.org/posts/vim-js-beautify/</guid><description>依赖 vim-jsbeautify js-beautify js-beautify的安装：
1 2 3 npm -g install js-beautify # 或 pip install jsbeautifier 配置快捷键 1 2 3 4 vmap &amp;lt;leader&amp;gt;jsb :&amp;#39;&amp;lt;,&amp;#39;&amp;gt;!js-beautify -i&amp;lt;CR&amp;gt; autocmd FileType javascript noremap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;jsb :call JsBeautify()&amp;lt;CR&amp;gt; autocmd FileType html noremap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;htmlb :call HtmlBeautify()&amp;lt;CR&amp;gt; autocmd FileType css noremap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;cssb :call CSSBeautify()&amp;lt;CR&amp;gt;</description></item><item><title>Vim 查找与替换的最佳实践</title><link>http://0x3f.org/posts/the-best-practice-of-searching-in-vim/</link><pubDate>Sun, 19 Feb 2017 20:37:18 +0000</pubDate><guid>http://0x3f.org/posts/the-best-practice-of-searching-in-vim/</guid><description>更新 日期 更新内容 2022-03-16 更新 80% 的内容。包含这几年所有的配置上的更新，并且把 ag 换成了 rg 。 2017-02-19 第一版。 目标 多文件搜索和替换
使用 PCRE 正则表达式在工作目录下递归搜索 将选定文本自动转换成正则表达式 有较高的搜索速度 对搜索结果做替换 当前 buffer 内的搜索和替换
一键将选定文本自动转换成正则表达式并执行搜索或替换 依赖 Ferret：实现对搜索和替换操作的封装。 ripgrep：搜索工具，速度快。 工具和方法 Ferret Ferret 是我用过的 vim 搜索扩展里最接近理想的一个，最大的优点是不用引号包裹搜索内容，且较大程度地支持 PCRE 正则表达式。
EasyGrep 的缺点是正则表达式必须是 shellescape() 过的，手写不方便，也不直观。Ferret 在底层做了 shellescape() ，所以比 EasyGrep 简单一些。不过 Ferret 对反斜杠的处理仍然不直观，例如搜索App\Link，正则表达式是App\\Link，而Ferret里只能用App\\\\Link。原因是从输入到执行，存在著三层转义：Vim命令行、Shell、grep/ag。所以对于EasyGrep，要搜索一个\，必须输入\\\\\\\\。对于Ferret，由于底层做了shellescape()，只需要两层转义，即\\\\。当然这样也不方便，所以我用自定义函数XEscapeRegex()对选择的内容做这个事，不过最完美的方法当然是Ferret自己支持，或者自己再封装一下Ferret的命令，这样输入的正则表达式可读性就正常了。
Ferret 的另一个优点是可以对搜索结果做筛选，删除不需要做替换的行，再对剩下的行执行批量替换。当执行替换命令 :Acks 时，会自动把上一个 :Ack 命令中的正则表达式或关键词补全到命令的参数中。
Ferret 最大的问题在于，搜索使用 rg 、 ag 这样的命令行工具，而替换使用 Vim 内置的 :substitute 命令。前者使用 PCRE 正则表达式，而后者使用 Vim 自己的正则表达式。两者在格式上的不兼容导致对一些复杂的 pattern 做搜索和替换时，往往需要对 pattern 做修改才能正常对之前的搜索结果做替换。关于这个问题，后面细说。</description></item><item><title>Postman: Could Not Get Any Response</title><link>http://0x3f.org/posts/postman-could-not-get-any-response/</link><pubDate>Tue, 14 Feb 2017 14:37:54 +0000</pubDate><guid>http://0x3f.org/posts/postman-could-not-get-any-response/</guid><description>Postman如果不显示API返回结果，而是报错：
Could not get any response
有一种原因是响应的header存在错误：
图中以双引号开头的第一行是有问题的。
PS：httpie是个好东西。</description></item><item><title>用NGINX实现WSS</title><link>http://0x3f.org/posts/implement-wss-with-nginx/</link><pubDate>Tue, 14 Feb 2017 13:35:41 +0000</pubDate><guid>http://0x3f.org/posts/implement-wss-with-nginx/</guid><description>实现基于SSL的安全的WebSocket。
NGINX配置 server { listen 4431; server_name ws.sample.com; ssl on; ssl_certificate ssl/server.crt; ssl_certificate_key ssl/server.key; ssl_session_timeout 5m; ssl_session_cache shared:SSL:50m; ssl_protocols SSLv3 SSLv2 TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; location / { proxy_pass http://127.0.0.1:4759; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &amp;#34;Upgrade&amp;#34;; proxy_set_header X-Real-IP $remote_addr; proxy_read_timeout 60s; } } 常见问题 连不上或连接时报错 WebSocket network error: OSStatus Error -9807: Invalid certificate chain
如果使用的是自签证书或者证书针对的域名和连接所指定的不符，会出这种问题。
wss一分钟自动断开 NGINX里设置proxy_read_timeout或者程序实现心跳。</description></item><item><title>WebSocket: Connection Header Value Must Contain Upgrade</title><link>http://0x3f.org/posts/websocket-connection-header-value-must-contain-upgrade/</link><pubDate>Sat, 11 Feb 2017 21:52:30 +0000</pubDate><guid>http://0x3f.org/posts/websocket-connection-header-value-must-contain-upgrade/</guid><description>用NGINX反向代理实现WSS后，创建连接时报错：
Error during WebSocket handshake: &amp;lsquo;Connection&amp;rsquo; header value must contain &amp;lsquo;Upgrade&amp;rsquo;
根据官方文档，NGINX从1.3.13开始才支持这个特性，所以解决方法是升级到最新版。</description></item><item><title>Git Reset、Revert和Checkout的区别</title><link>http://0x3f.org/posts/differences-among-reset-checkout-revert-of-git/</link><pubDate>Thu, 09 Feb 2017 19:27:47 +0000</pubDate><guid>http://0x3f.org/posts/differences-among-reset-checkout-revert-of-git/</guid><description>reset在提交层面，是将HEAD设定到指定的提交，通常用来舍弃最新的几个提交。在文件层面，是将指定的提交中的该文件保存到暂存区，工作区中的文件不变。
reset有三个常用的参数：--mixed、--soft和--hard。
在提交层面，--mixed是默认值，影响暂存区，不影响工作区；--soft将HEAD版本保存到暂存区，并将HEAD设定到指定的提交，用来合并提交历史；--hard既影响暂存区，也影响工作区。
在文件层面，--soft和--hard均会报错，不支持这两个选项。
在提交层面，执行过reset后如果需要撤销，使用reflog命令查看之前HEAD的hash，通过reset --hard恢复到该版本。
checkout在提交层面，用来切换分支或检出到指定的提交。对于后者，如果增加了新的提交，在切换到其它分支后，再切换回来时，这些提交将会丢失，如果希望保存这些提交，在切换到其它分支前，创建一个新的分支。
revert用来通过创建一个新的提交来回滚一个提交，因此，和reset不同，并不会改变提交的历史。
对于回滚一次提交的场景，revert比reset安全，所以revert适用于公共分支，reset适用于私有分支。</description></item><item><title>两条分组的SQL语句</title><link>http://0x3f.org/posts/two-grouping-sql-statements/</link><pubDate>Fri, 27 Jan 2017 17:51:00 +0000</pubDate><guid>http://0x3f.org/posts/two-grouping-sql-statements/</guid><description>最近做访问统计解决的两个问题：
根据日期分组 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 select ( case when visit_at &amp;gt;= 1485014400 then from_unixtime(visit_at, &amp;#39;%Y-%m-%d&amp;#39;) when visit_at &amp;gt;= 1484928000 and visit_at &amp;lt; 1485014400 then from_unixtime(visit_at, &amp;#39;%Y-%m-%d&amp;#39;) else 0 end ) col, count(*) as pv, count(distinct session_id) as uv from `statistics` where `visit_at` &amp;gt;= 1484496000 group by ( case when visit_at &amp;gt;= 1485014400 then from_unixtime(visit_at, &amp;#39;%Y-%m-%d&amp;#39;) when visit_at &amp;gt;= 1484928000 and visit_at &amp;lt; 1485014400 then from_unixtime(visit_at, &amp;#39;%Y-%m-%d&amp;#39;) else 0 end ) 选择每组数据的第一条 1 2 3 4 5 6 7 8 9 10 11 12 13 select a.</description></item><item><title>用OpenResty自动转换silk到MP3</title><link>http://0x3f.org/posts/convert-silk-to-mp3-with-openresty/</link><pubDate>Wed, 25 Jan 2017 18:59:00 +0000</pubDate><guid>http://0x3f.org/posts/convert-silk-to-mp3-with-openresty/</guid><description>PHP没有原生的转换silk格式音频到mp3的方案，所以考虑用NGINX+Lua调用命令行工具实现。
思路 当访问以「.silk.mp3」为后缀的文件时，查找对应的mp3文件，存在则返回，否则，如果对应的silk文件存在，调用命令行工具转换文件格式，然后内部重定向到新生成的mp3。
安装 OpenResty silk-v3-decoder ffmpeg NGINX配置 1 2 3 location ~* /.*\.silk\.mp3$ { content_by_lua_file &amp;#34;/opt/script/silk2mp3.lua&amp;#34;; } Lua脚本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 function file_exists(name) local f=io.open(name,&amp;#34;r&amp;#34;) if f~=nil then io.close(f) return true else return false end end local resource = ngx.var.request_filename; local realResource = resource:sub(1, #resource - 9).</description></item><item><title>小确幸，用Vim编辑当前命令行</title><link>http://0x3f.org/posts/edit-command-with-vim/</link><pubDate>Mon, 26 Dec 2016 11:58:00 +0000</pubDate><guid>http://0x3f.org/posts/edit-command-with-vim/</guid><description>修改很长的命令是件痛苦的事，在Linux下，可以通过快捷键Ctrl+X Ctrl+E调用$EDITOR快速编辑当前命令行的内容，保存退出后，结果会呈现在光标下。
不过在Mac OS的iTerm2下，似乎是因为Ctrl+X被占用而不能生效。误打误撞地发现了另外一个方法，使用oh-my-zsh并且开启了vi mode的话，先进入vi mode，然后输入v，同样可以实现这样的功能。</description></item><item><title>用锐速加速Shadowsocks</title><link>http://0x3f.org/posts/accelerate-shadowsocks-with-serverspeeder/</link><pubDate>Sun, 25 Dec 2016 15:39:00 +0000</pubDate><guid>http://0x3f.org/posts/accelerate-shadowsocks-with-serverspeeder/</guid><description>各种VPS加速方案一般都是重复发包的原理，也就是用流量换速度。
先尝试了kcptun，因为据说资源占用很低，不过部署后打不开网页。然后试了一下锐速，用一键脚本安装，很方便，而且不像kcptun，不需要客户端。部署前在Youtube只能看最低清晰度，现在在网络条件好的情况下，720p也不卡，效果很明显。
不过锐速不支持OpenVZ，所以搬瓦工用不了，我用的 Vultr 东京机房的基础配置。
参考 锐速破解版linux一键自动安装包</description></item><item><title>Vultr基配可以部署Gitlab</title><link>http://0x3f.org/posts/setup-gitlab-on-vultr-basic-vps/</link><pubDate>Sat, 24 Dec 2016 17:18:00 +0000</pubDate><guid>http://0x3f.org/posts/setup-gitlab-on-vultr-basic-vps/</guid><description>想在Vultr上部署Gitlab，但是官方文档上说最低要求1GB RAM + 3GB swap，而我的VPS是基础配置：768MB RAM。
忐忑地试了一下，居然可以用，只是重启防火墙的时候CPU一直100%，最后reboot了事。
环境 CentOS 7 x64 Gitlab CE 8.15 参考 Setup Swap File on Linux - Vultr.com Installation Guide of GitLab Community Edition | GitLab</description></item><item><title>JSON是对象还是字符串？</title><link>http://0x3f.org/posts/what-is-json/</link><pubDate>Tue, 08 Nov 2016 10:46:00 +0000</pubDate><guid>http://0x3f.org/posts/what-is-json/</guid><description>前两天，一个前端跟我争论说JSON是对象。我在接口文档里的数据格式写的是JSON，结果对方真就传了个对象过来。
要搞清楚JSON是什么，先得知道JSON是为了解决什么问题的。维基百科里的定义是：
JSON（JavaScript Object Notation）是一种由道格拉斯·克罗克福特构想设计、轻量级的数据交换语言，以文字为基础，且易于让人阅读。尽管JSON是Javascript的一个子集，但JSON是独立于语言的文本格式，并且采用了类似于C语言家族的一些习惯。
所以说，JSON是为了解决语言之间数据交换的一种文本格式，体现在数据上，JSON就是字符串类型。那么为什么需要为数据交换制订一种通用的文本格式呢？可以做一个简单的试验：
用JavaScript建立一个到PHP的WebSocket并发送一个对象：
1 2 var ws = new WebSocket(&amp;#39;ws://127.0.0.1:4759&amp;#39;); ws.send({name:&amp;#34;hello&amp;#34;}); PHP接收并打印对象：
1 2 3 4 5 6 use Workerman\Worker; $worker = new Worker(&amp;#39;websocket://0.0.0.0:4759&amp;#39;); $worker-&amp;gt;onMessage = function($connection, $data) { var_dump($data); } Worker::runAll(); 得到的结果是：
[object Object]
所以，一种语言的对象的实例以二进制形式直接传递给另一种语言是无法识别的，因此需要把对象数据用文本描述之后再行传递。
此外，相对于XML等其它格式，JSON有可读性上的优势，如果是对象，二进制的数据哪来的可读性？</description></item><item><title>在Vim窗口标题中显示会话名</title><link>http://0x3f.org/posts/show-session-name-in-vim-window-title/</link><pubDate>Sun, 23 Oct 2016 11:52:00 +0000</pubDate><guid>http://0x3f.org/posts/show-session-name-in-vim-window-title/</guid><description>同时处理多个项目时，在窗口标题中显示会话名，方便区分，需用session管理会话。
1 2 3 4 5 6 7 8 9 10 11 &amp;#34; custom the window title fun! MyTitleString() let sessionName = xolox#session#find_current_session() let sessionStr = &amp;#39;&amp;#39; if len(sessionName)&amp;gt;0 let sessionStr = &amp;#39; [&amp;#39;.sessionName.&amp;#39;] &amp;#39; endif return &amp;#39;VIM&amp;#39;.sessionStr.&amp;#39;: %-25.55F %a%r%m&amp;#39; endfun au BufEnter * let &amp;amp;titlestring=MyTitleString() set titlelen=70</description></item><item><title>Archlinux安装过程中的几个坑</title><link>http://0x3f.org/posts/pits-of-archlinux/</link><pubDate>Mon, 17 Oct 2016 13:14:00 +0000</pubDate><guid>http://0x3f.org/posts/pits-of-archlinux/</guid><description>安装方案 Archboot是比官方镜像更友好的安装媒介，此外还有AUI和Arch Anywhere，没有试过。
分区 Archboot使用parted处理分区任务。
第一个分区不能从sector 0开始，否则安装完成后系统玩法启动，报如下错误：
no operating system found
正确的姿势：
(parted) mkpart primary 2048s 512
以上假设第一个分区用来挂载/boot，分配512M。
还需要设置/boot所在的分区可启动：
(parted) set 1 boot on
启动引导器 GRUB的兼容性比较好。
如果是syslinux，对于没有单独对/boot分区并且根分区使用ext4的情况，会无法启动，报如下错误：
failed to load ldlinux.c32
此时，应对/boot单独分区并使用fat格式。
图形界面 安装X不会连带安装显卡驱动，要单独安装，否则启动图形界面会黑屏。
在VirtualBox中安装时，驱动在「virtualbox-guest-utils」。</description></item><item><title>小确幸，用shift切换输入法</title><link>http://0x3f.org/posts/little-happiness-from-replacing-ctrl-space-with-shift/</link><pubDate>Sat, 17 Sep 2016 15:36:00 +0000</pubDate><guid>http://0x3f.org/posts/little-happiness-from-replacing-ctrl-space-with-shift/</guid><description>把Alfred升级到3，就想著把切换中英输入状态的问题一块解决掉。
Alfred可以设置默认使用英文输入状态，然后用Karabiner把Shift_L映射成Ctrl+Space。现在切换输入状态和用Alfred的效率都高多了。
1 2 3 4 5 6 7 &amp;lt;item&amp;gt; &amp;lt;name&amp;gt;Shift_L to Shift_L&amp;lt;/name&amp;gt; &amp;lt;appendix&amp;gt; + When you type Shift_L only,change to previous system input method&amp;lt;/appendix&amp;gt; &amp;lt;appendix&amp;gt;Shift_L == (Ctrl-Space)&amp;lt;/appendix&amp;gt; &amp;lt;identifier&amp;gt;private.change_input_source_to_squirrel.Rime&amp;lt;/identifier&amp;gt; &amp;lt;autogen&amp;gt;__KeyOverlaidModifier__ KeyCode::SHIFT_L, ModifierFlag::SHIFT_L | ModifierFlag::NONE, KeyCode::SHIFT_L, KeyCode::SPACE,ModifierFlag::CONTROL_L&amp;lt;/autogen&amp;gt; &amp;lt;/item&amp;gt;</description></item><item><title>Kindle Lazybones: Control Kindle From Your Phone</title><link>http://0x3f.org/posts/kindle-lazybones/</link><pubDate>Mon, 06 Jun 2016 10:33:00 +0000</pubDate><guid>http://0x3f.org/posts/kindle-lazybones/</guid><description>Kindle Lazybones .-. _ ( `. .' ) `\ ` .' | | | | | 66|_ | ,__) |(,_| | | | \_, | | | | .' \ ( , ) '--' '-' Remote controlling utilities for Kindle.
Feature Flip over Kindle with your smartphone. Issues Currently only Kindle PaperWhite is supported, PW2/PW3 are not yet. Kindle still goes to sleep after 10 minutes, a temporary solution is running the searchbox command ~ds to disable screensaver, but only a restart can resume it.</description></item><item><title>Alfred-pushbullet: Push a text to your phone</title><link>http://0x3f.org/posts/alfred-pushbullet/</link><pubDate>Wed, 13 Apr 2016 17:30:00 +0000</pubDate><guid>http://0x3f.org/posts/alfred-pushbullet/</guid><description>Pushbullet workflow for Alfred.
Features Push a text to another device. Installation Download the latest release and rename it to pushbullet.alfredworkflow. Double click it to import it into Alfred. Double click the &amp;ldquo;Run Script&amp;rdquo; button and replace &amp;ldquo;ACCESS_TOKEN&amp;rdquo; and &amp;ldquo;DEVICE_NAME&amp;rdquo; according to your pushbullet settings. Activate alfred and input &amp;ldquo;push blablabla&amp;rdquo;, then press enter. Author base64decode IkRvbmllIExlaWdoIiA8ZG9uaWUubGVpZ2hAZ21haWwuY29tPgo=
Download https://github.com/xbot/alfred-pushbullet/</description></item><item><title>Linux下做Mac OSX安装U盘的步骤</title><link>http://0x3f.org/posts/create-mac-bootable-usb-stick-on-linux/</link><pubDate>Tue, 08 Mar 2016 12:22:00 +0000</pubDate><guid>http://0x3f.org/posts/create-mac-bootable-usb-stick-on-linux/</guid><description>假设U盘对应/dev/sdb1、OSX安装包是osx.dmg。整个过程就是提取出一系列文件，然后复制到U盘里。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 格式化U盘为hfs+文件系统 sudo mkfs.hfsplus -v EICaptianInstall /dev/sdb1 # 提取和挂载第一个光盘镜像 dmg2img -p 5 osx.dmg osx.img mkdir raw &amp;amp;&amp;amp; sudo mount -o loop osx.img raw # 提取和挂载第二个光盘镜像 dmg2img -p 5 raw/Install\ OS\ X\ El\ Capitan.app/Contents/SharedSupport/InstallESD.dmg InstallESD.img mkdir esd &amp;amp;&amp;amp; sudo mount -o loop InstallESD.img esd # 提取和挂载第三个光盘镜像 dmg2img -p 4 esd/BaseSystem.</description></item><item><title>FastFold：Vim折叠功能的救赎</title><link>http://0x3f.org/posts/fastfold-for-vim/</link><pubDate>Wed, 24 Feb 2016 11:06:00 +0000</pubDate><guid>http://0x3f.org/posts/fastfold-for-vim/</guid><description>设置Vim的折叠规则为syntax存在两个问题。一是如果源码中有大量折叠区域，在插入模式中输入会变得很卡。二是刚输入一个折叠区域的起始符号，后面所有的折叠都会被打开。
第一个问题是因为Vim的syntax折叠规则处理过于低效。而后一个问题对于所有自动折叠规则都会存在，原因是Vim对折叠的更新过早。
传统的解决办法是将折叠规则置为manual，并在合适的时机重置为syntax或其它相应规则。但是工作繁复而且往往问题很多。
FastFold是遵循上面所说的方法解决这些问题的插件，不过默认会在所有与折叠相关的时机更新折叠，会导致相关的操作变慢，例如zc和zo时都会有明显的卡顿。鉴于其它时机对折叠的更新已经足够及时，可以通过配置取消受在到明显影响的时机更新折叠：
1 2 &amp;#34; FastFold只在za/zA/zx/zX时更新折叠信息 let g:fastfold_fold_command_suffixes = [&amp;#39;x&amp;#39;,&amp;#39;X&amp;#39;,&amp;#39;a&amp;#39;,&amp;#39;A&amp;#39;]</description></item><item><title>FZF: 又一个文件模糊查询工具</title><link>http://0x3f.org/posts/fzf-yet-another-fuzzy-finder/</link><pubDate>Mon, 01 Feb 2016 11:42:00 +0000</pubDate><guid>http://0x3f.org/posts/fzf-yet-another-fuzzy-finder/</guid><description>fzf是个独立的命令行工具，索引速度很快，可以通过fzf-vim配合使用。
特性 功能支持还是比较全的：
Command List Files [PATH] Files (similar to :FZF ) GitFiles Git files Buffers Open buffers Colors Color schemes Ag [PATTERN] {ag}{5} search result (ALT-A to select all, ALT-D to deselect all) Lines Lines in loaded buffers BLines Lines in the current buffer Tags Tags in the project ( ctags -R ) BTags Tags in the current buffer Marks Marks Windows Windows Locate PATTERN locate command output History v:oldfiles and open buffers History: Command history History/ Search history Snippets Snippets ({UltiSnips}{6}) Commits Git commits (requires {fugitive.</description></item><item><title>ctags vs gtags vs phpctags</title><link>http://0x3f.org/posts/ctags-vs-gtags-vs-phpctags/</link><pubDate>Fri, 29 Jan 2016 17:55:00 +0000</pubDate><guid>http://0x3f.org/posts/ctags-vs-gtags-vs-phpctags/</guid><description>这两天把源码分析工具从ctags向gtags迁移，另外尝试了一下phpctags。
之前用ctags有两个问题，一个是如果同一tag有多个定义，按Ctrl+]只能跳转到第一处。另一个是用cscope查询tag的调用记录时，有些tag查不到结果。
几年前接触过gtags，因为当时还不支持宇宙最好语言，所以没用。这次测试了一下，前面两个ctags的问题都可以解决。
安装后需要手工拷贝gtags.vim和gtags-cscope.vim到vim的plugin目录，然后配置如下：
1 2 3 4 5 6 7 let Gtags_Close_When_Single = 1 let Gtags_Auto_Update = 0 let g:cscope_silent = 1 au FileType php,python,c,cpp,javascript,go map &amp;lt;C-]&amp;gt; :Gtags&amp;lt;CR&amp;gt;&amp;lt;CR&amp;gt; au FileType php,python,c,cpp,javascript,go map &amp;lt;C-[&amp;gt; :Gtags -r&amp;lt;CR&amp;gt;&amp;lt;CR&amp;gt; nnoremap &amp;lt;leader&amp;gt;&amp;lt;C-]&amp;gt; :execute &amp;#39;Unite gtags/def:&amp;#39;.expand(&amp;#39;&amp;lt;cword&amp;gt;&amp;#39;)&amp;lt;CR&amp;gt; nnoremap &amp;lt;leader&amp;gt;&amp;lt;C-[&amp;gt; :execute &amp;#39;Unite gtags/ref:&amp;#39;.expand(&amp;#39;&amp;lt;cword&amp;gt;&amp;#39;)&amp;lt;CR&amp;gt; 其它选项参见前面两个文件里的注释。
另外尝试了一下phpctags，据说和ctags兼容并对php做了优化。实际使用效果和ctags没发现有什么区别，不过tagbar-phpctags倒是比tagbar用ctags时效果更好。</description></item><item><title>CtrlP vs Unite vs Command-T vs FuzzyFinder</title><link>http://0x3f.org/posts/ctrlp-vs-unite-vs-command-t-vs-fuzzyfinder/</link><pubDate>Wed, 27 Jan 2016 16:16:00 +0000</pubDate><guid>http://0x3f.org/posts/ctrlp-vs-unite-vs-command-t-vs-fuzzyfinder/</guid><description>简述 Sublime在文件打开速度上的表现很惊艳，Vim有几个扩展可以实现类似功能，本文对这些扩展做个对比。
虽然每个扩展都或多或少地实现了一些功能，我个人用得最多的也就文件、Tag、Buffer Tag的模糊查找这三个，像MRU、buffer之类的查找不觉得有多大用处，所以提高工作效率的工具一定是在热度环节有很好表现，其余偏门功能可以交给插件实现，在这点上CtrlP和Unite做得很好。所以下面针对最常用的这三个功能做下对比，更多功能的对比见下表：
文件模糊查找 Command-T的文件索引速度最快，各方面在这几个扩展中的表现都是最好的。
CtrlP默认使用VIM自建的globpath()，需要手工配置使用ag以获取更快的速度，据说使用find命令效率更高，实际感觉和ag差别不大。
Unite也需要手工设置使用ag，而且可以实现异步索引，在这一点的体验上好于前两个，但是在模糊匹配的排序上表现不好，比如输入“php”，当然希望“/etc/php.ini”这样的结果排在“/home/peter/host/tmp.txt”前面，实际往往不是这样，Unite的几个sorter里，数rank的排序结果最接近于这个要求，但是表现仍然不如前两个。
Tag模糊查找 三个扩展都是通过ctags实现，虽然Unite的排序问题仍然存在，对于Tag这么简短的东西，问题不大。
Buffer Tag模糊查找 CtrlP的表现是最好的。
Unite需要通过unite-outline这个source实现，但是只能列出类和方法，无法定制列举类型。而且默认选中排在第一位的类名，查询方法时很不方便。
Command-T不支持此功能。
我的选择 FuzzyFinder是该类扩展里的老前辈，不过早已不维护，功能上不比其它几个出彩。Command-T虽然在文件索引速度上表现最好，但是优势并不很明显，而且支持功能最少。所以排除这两个。
在最常用的三个功能上，CtrlP的综合表现是最均衡的，所以留下它。Unite本身是一种统一的交互方式和界面，很多扩展（source）可以实现五花八门的功能，像unite-outline虽然在Buffer Tag上表现不佳，对于Markdown和Vim文档还是很有用的。
Update: 2016-02-01 FZF: 又一个文件模糊查询工具</description></item><item><title>简化Vim Addons Manager安装扩展的操作</title><link>http://0x3f.org/posts/simplify-vim-addon-installation-issues/</link><pubDate>Wed, 20 Jan 2016 18:05:00 +0000</pubDate><guid>http://0x3f.org/posts/simplify-vim-addon-installation-issues/</guid><description>相对Sublime的Package Control，VAM安装和卸载扩展的操作很烦琐。以下脚本在安装完扩展后自动注册，无须手工添加到vimrc，另外增加命令:UninstallAddons，从注册表中删除扩展。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 set runtimepath+=~/.vim/addons/vim-addon-manager let active_addons = [] let s:vamRegistryFile = expand(&amp;#39;~&amp;#39;).&amp;#39;/.vim/vam_registry&amp;#39; if filereadable(s:vamRegistryFile) let active_addons += readfile(s:vamRegistryFile) endif call vam#ActivateAddons(active_addons) &amp;#34; Addon post-install hook.</description></item><item><title>BiuBiu: A Chrome Extension Blocking AJAX Requests</title><link>http://0x3f.org/posts/chrome-extension-biubiu/</link><pubDate>Thu, 31 Dec 2015 14:19:00 +0000</pubDate><guid>http://0x3f.org/posts/chrome-extension-biubiu/</guid><description>BiuBiu BiuBiu is an extension for Google Chrome Browser which intends to make life easier for debugging and profiling.
For now, it only blocks AJAX requests made by JQuery, more features may be added in the future.
Features Toggle to enable or disable BiuBiu. Block requests made by JQuery by URL. Author Donie Leigh &amp;lt;donie.leigh at gmail.com&amp;gt; Links Project: https://github.com/xbot/chrome-biubiu FAQ &amp;ndash; &amp;ndash; Change Log version 1.0.1 (2015-12-31)
Fix the complaining when there is no jQuery or jQuery.</description></item><item><title>Swoole与PHP-FPM性能对比</title><link>http://0x3f.org/posts/swoole-vs-php-fpm/</link><pubDate>Tue, 14 Jul 2015 16:40:00 +0000</pubDate><guid>http://0x3f.org/posts/swoole-vs-php-fpm/</guid><description>测试环境：
CPU: Intel(R) Core(TM) i5-3470 CPU @ 3.20GHz MEM: 4G OS: Archlinux 64bit 测试命令：
1 ab -c 200 -n 200000 -k http://127.0.0.1/test NGINX + PHP-FPM Requests per second: 16240.50 [#/sec] (mean)
Time per request: 12.315 [ms] (mean)
NGINX + Swoole Requests per second: 31284.57 [#/sec] (mean)
Time per request: 6.393 [ms] (mean)
Swoole Requests per second: 99926.55 [#/sec] (mean)
Time per request: 2.001 [ms] (mean)
结论 对一个最简单的PHP脚本做测试，排除业务逻辑的消耗的影响。Swoole威武。</description></item><item><title>PHP扩展框架的创建</title><link>http://0x3f.org/posts/create-php-extension-skeleton/</link><pubDate>Thu, 18 Jun 2015 14:15:00 +0000</pubDate><guid>http://0x3f.org/posts/create-php-extension-skeleton/</guid><description>创建项目 在PHP源码目录下的ext目录下执行：
1 ./ext_skel --extname=foobar 修改foobar/config.m4，移除以下三行前的dnl：
dnl PHP_ARG_WITH(foobar, for foobar support,
dnl Make sure that the comment is aligned:
dnl [ &amp;ndash;with-foobar Include foobar support])
编译与安装 在foobar目录下执行以下命令，生成configure脚本：
1 /usr/bin/phpize 执行configure：
1 ./configure --with-php-config=/usr/bin/php-config 编译安装：
1 sudo make install 修改php.ini，启用扩展：
1 extension=foobar.so</description></item><item><title>PHP流的上下文和过滤器的实现</title><link>http://0x3f.org/posts/contexts-and-filters-implementation-of-php/</link><pubDate>Mon, 15 Jun 2015 19:15:00 +0000</pubDate><guid>http://0x3f.org/posts/contexts-and-filters-implementation-of-php/</guid><description>上下文的实现和应用 上下文包含流的选项和流的参数两部分内容。
1 php_stream_context *php_stream_context_alloc(void); 流的选项是一系列键值对。
1 2 3 int php_stream_context_set_option(php_stream_context *context, const char *wrappername, const char *optionname, zval *optionvalue); int php_stream_context_get_option(php_stream_context *context, const char *wrappername, const char *optionname, zval ***optionvalue); 流的参数目前只实现对流的事件的回调，php_stream_context-&amp;gt;notifier存储如下结构：
1 2 3 4 5 6 7 typedef struct { php_stream_notification_func func; void (*dtor)(php_stream_notifier *notifier); void *ptr; int mask; size_t progress, progress_max; } php_stream_notifier; 回调函数的原型为：
1 2 3 4 5 typedef void (*php_stream_notification_func)(php_stream_context *context, int notifycode, int severity, char *xmsg, int xcode, size_t bytes_sofar, size_t bytes_max, void * ptr TSRMLS_DC); notifycode包含如下：</description></item><item><title>使用gn操作增强Vim的搜索</title><link>http://0x3f.org/posts/enhance-search-with-gn-in-vim/</link><pubDate>Sun, 14 Jun 2015 21:16:00 +0000</pubDate><guid>http://0x3f.org/posts/enhance-search-with-gn-in-vim/</guid><description>gn是Vim 7.4新增的一个操作（motion），作用是跳到并选中下一个搜索匹配项。
具体说，Vim里执行搜索后，执行n操作只会跳转到下一个匹配项，而不选中它。但是我们往往需要对匹配项执行一些修改操作，例如替换、删除或修改大小写等，如果先跳转再执行对应操作，会比较繁琐。gn可以和相应的操作结合，简化这些过程。
举个栗子。如果要把所有的win、linux替换成大写，可以先用正则搜索“\(win|linux\)\C”，然后执行“gUgn”，此时下一个匹配的结果就会被替换成大写，然后直接执行“.”重复上次操作即可。
此外，常用的组合有：
cgn: 删除下一个匹配项，并进入插入模式。 dgn: 删除下一个匹配项，并保持常规模式。 和操作“N”相同，执行“gN”是逆向操作。</description></item><item><title>在i3wm状态栏显示股票信息</title><link>http://0x3f.org/posts/show-stocks-in-i3status/</link><pubDate>Fri, 12 Jun 2015 17:39:00 +0000</pubDate><guid>http://0x3f.org/posts/show-stocks-in-i3status/</guid><description>效果如图：
创建脚本，并赋可执行权限：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #!/bin/sh # shell script to prepend i3status with more stuff STOCK_SCRIPT=`realpath &amp;#34;$0&amp;#34;|xargs dirname`/stock.php i3status | while : do stock_info=&amp;#34;&amp;#34; if [[ -x &amp;#34;$STOCK_SCRIPT&amp;#34; ]]; then stock_info=`$STOCK_SCRIPT` fi read line # if output_format = i3bar in i3status.conf stock_info=&amp;#34;[{ \&amp;#34;full_text\&amp;#34;: \&amp;#34;${stock_info}\&amp;#34; },&amp;#34; echo &amp;#34;${line/[/$stock_info}&amp;#34; || exit 1 # # if not output_format = i3bar in i3status.</description></item><item><title>PHP流的操作</title><link>http://0x3f.org/posts/stream-operations-of-php/</link><pubDate>Mon, 01 Jun 2015 15:33:00 +0000</pubDate><guid>http://0x3f.org/posts/stream-operations-of-php/</guid><description>实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 /* reimplement fopen using stream */ ZEND_FUNCTION(donie_stream_fopen) { php_stream *stream; char *path, *mode; int path_len, mode_len; int options = ENFORCE_SAFE_MODE|REPORT_ERRORS; if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, &amp;#34;ss&amp;#34;, &amp;amp;path, &amp;amp;path_len, &amp;amp;mode, &amp;amp;mode_len) == FAILURE) { return; } stream = php_stream_open_wrapper(path, mode, options, NULL); if (!stream) { RETURN_FALSE; } php_stream_to_zval(stream, return_value); } php_stream_open_wrapper()是对文件类型资源创建流的方法，此外还有基于socket的流、目录流和特殊流三种。php_stream_to_zval()用于把流实例转换成zval结构。</description></item><item><title>PHP流的实现</title><link>http://0x3f.org/posts/stream-implementation-in-php/</link><pubDate>Fri, 29 May 2015 17:33:00 +0000</pubDate><guid>http://0x3f.org/posts/stream-implementation-in-php/</guid><description>流的概念 流是一系列概念的集合，包括流包装器、流资源、流操作、上下文等内容。流是对不同资源进行操作的抽象，允许线性地从指定位置读取或写入数据，通过一套统一的API简化对资源操作的实现。
流由scheme://target指代，scheme是包装器（Wrapper）的名字，target是流的目标地址。
PHP的流的实现较Java简单，后者可以通过嵌套实现更灵活的应用。
流的实现 存储结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 struct _php_stream { php_stream_ops *ops; void *abstract;	/* convenience pointer for abstraction */ php_stream_filter_chain readfilters, writefilters; php_stream_wrapper *wrapper; /* which wrapper was used to open the stream */ void *wrapperthis;	/* convenience pointer for a instance of a wrapper */ zval *wrapperdata;	/* fgetwrapperdata retrieves this */ int fgetss_state;	/* for fgetss to handle multiline tags */ int is_persistent; char mode[16];	/* &amp;#34;rwb&amp;#34; etc.</description></item><item><title>在Archlinux ARM上使用DS18B20温度传感器</title><link>http://0x3f.org/posts/setup-ds18b20-on-archlinux/</link><pubDate>Mon, 25 May 2015 15:30:00 +0000</pubDate><guid>http://0x3f.org/posts/setup-ds18b20-on-archlinux/</guid><description>线路图：
修改/boot/config.txt，启用w1内核模块。配置文件中有两部分关于w1的内容，一个只使用一个GPIO引脚，需要自行添加上拉电阻，另一个使用一个额外的GPIO引脚作上拉。
使用Python模块w1thermsensor读数，用法见这里。</description></item><item><title>PHP全局变量的实现和操作</title><link>http://0x3f.org/posts/globals-implementation-in-php/</link><pubDate>Fri, 08 May 2015 17:23:00 +0000</pubDate><guid>http://0x3f.org/posts/globals-implementation-in-php/</guid><description>扩展内部的全局变量 1 2 3 4 ZEND_BEGIN_MODULE_GLOBALS(donie) unsigned long global_long; char *global_string; ZEND_END_MODULE_GLOBALS(donie) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 ZEND_DECLARE_MODULE_GLOBALS(donie); static void php_donie_init_globals(zend_donie_globals *donie_globals) { donie_globals-&amp;gt;global_long = 2015; donie_globals-&amp;gt;global_string = &amp;#34;Long live Donie Leigh !&amp;#34;; } static void php_donie_globals_dtor(zend_donie_globals *donie_globals) { php_printf(&amp;#34;php_donie_globals_dtor triggered.&amp;#34;); } PHP_MINIT_FUNCTION(donie) { /* init extension globals */ ZEND_INIT_MODULE_GLOBALS(donie, php_donie_init_globals, php_donie_globals_dtor); return SUCCESS; } PHP_RSHUTDOWN_FUNCTION(donie) { #ifndef ZTS php_donie_globals_dtor(&amp;amp;donie_globals); #endif return SUCCESS; } ZEND_FUNCTION(donie_test_ext_globals) { php_printf(&amp;#34;%s&amp;#34;, DONIE_G(global_string)); } 声明 ZEND_BEGIN_MODULE_GLOBALS和ZEND_END_MODULE_GLOBALS及其间的内容实际上声明了一个结构体zend_donie_globals。</description></item><item><title>PHP常量的实现和操作</title><link>http://0x3f.org/posts/constant-implementation-in-php/</link><pubDate>Thu, 07 May 2015 16:29:00 +0000</pubDate><guid>http://0x3f.org/posts/constant-implementation-in-php/</guid><description>存储结构 常量存储在哈希表EG(zend_constants)中。
常量的结构定义为：
1 2 3 4 5 6 7 typedef struct _zend_constant { zval value; int flags; char *name; uint name_len; int module_number; } zend_constant; value是常量的值，是一个zval。name是常量名。module_number是模块被加载时，PHP内核在MINIT和RINIT方法的原型里默认传递的一个值，作为模块清理时的线索，在注册常量的接口里直接传递即可。
flags是常量的标识或标识组合：
CONST_CS CONST_PERSISTENT CONST_CT_SUBST CONST_CS表示常量名对大小写敏感，对应PHP函数define()的第三个参数，TRUE、FALSE、NULL这些常量名对大小写是不敏感的。CONST_PERSISTENT表示常量在请求结束后被保存，只在PHP进程结束时才销毁，一般在MINIT中定义的常量应该指定此参数，RINIT中定义的不指定。CONST_CT_SUBST表示在编译时可替换，TRUE、FALSE、NULL、ZEND_THREAD_SAFE、ZEND_DEBUG_BUILD属于此类。
常量的声明 常量的声明方法有两种，简单的使用宏函数族REGISTER_*_CONSTANT()：
REGISTER_NULL_CONSTANT(name, flags) REGISTER_BOOL_CONSTANT(name, bval, flags) REGISTER_LONG_CONSTANT(name, lval, flags) REGISTER_DOUBLE_CONSTANT(name, dval, flags) REGISTER_STRING_CONSTANT(name, str, flags) REGISTER_STRINGL_CONSTANT(name, str, len, flags)
由于不需指定常量名长度，所以name参数应直接使用字符串，而不是char*。
如需使用变量作为name参数，使用zend_register_*_constant()函数族，并指定变量名长度（sizeof(name)）。上面的宏函数其实是对这族函数的封装。
void zend_register_long_constant(char *name, uint name_len, long lval, int flags, int module_number TSRMLS_DC) void zend_register_double_constant(char *name, uint name_len, double dval, int flags, int module_number TSRMLS_DC) void zend_register_bool_constant(const char *name, uint name_len, zend_bool bval, int flags, int module_number TSRMLS_DC) void zend_register_string_constant(char *name, uint name_len, char *strval, int flags, int module_number TSRMLS_DC) void zend_register_stringl_constant(char *name, uint name_len, char *strval, uint strlen, int flags, int module_number TSRMLS_DC)</description></item><item><title>PHP资源的实现和操作</title><link>http://0x3f.org/posts/resource-implementation-in-php/</link><pubDate>Tue, 05 May 2015 18:53:00 +0000</pubDate><guid>http://0x3f.org/posts/resource-implementation-in-php/</guid><description>存储结构 资源变量也是一个zval结构，zval-&amp;gt;type == IS_RESOURCE，zval-&amp;gt;value-&amp;gt;lval存储一个整数，此整数为资源数据在存储资源的哈希表中的索引。
资源数据的结构为：
1 2 3 4 5 6 typedef struct _zend_rsrc_list_entry { void *ptr; int type; int refcount; }zend_rsrc_list_entry; 常规资源与持久资源 有两个存储资源数据的哈希表。EG(regular_list)存储常规资源，EG(persistent_list)存储持久资源。
常规资源对应的变量在作用域结束后会被内核回收，对应的资源数据也会被销毁。持久资源可以保持并被多次请求使用。持久资源的自动析构发生在PHP进程退出时。
实现 重新实现基本的文件句柄和相关操作。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 // 资源名称 #define PHP_DONIE_RES_NAME_FILE &amp;#34;Donie&amp;#39;s File Descriptor&amp;#34; // 资源类型 static int le_donie_file_descriptor; static int le_donie_file_descriptor_persist; // 资源析构函数 static void php_donie_file_descriptor_dtor(zend_rsrc_list_entry *rsrc TSRMLS_CC) { FILE *fp = (FILE*)rsrc-&amp;gt;ptr; fclose(fp); } // 在扩展的MINIT方法里创建资源类型 PHP_MINIT_FUNCTION(donie) { /* create a new resource type */ le_donie_file_descriptor = zend_register_list_destructors_ex( php_donie_file_descriptor_dtor, NULL, PHP_DONIE_RES_NAME_FILE, module_number ); /* create a persistent resource type */ le_donie_file_descriptor_persist = zend_register_list_destructors_ex( NULL, php_donie_file_descriptor_dtor, PHP_DONIE_RES_NAME_FILE, module_number ); return SUCCESS; } // 文件打开操作 PHP_FUNCTION(donie_fopen) { FILE *fp; char *filename, *mode; int filename_len, mode_len; zend_bool persist = 0; char *hash_key; int hash_key_len; list_entry *persist_file; if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, &amp;#34;ss|b&amp;#34;, &amp;amp;filename, &amp;amp;filename_len, &amp;amp;mode, &amp;amp;mode_len, &amp;amp;persist) == FAILURE) { RETURN_NULL(); } if (!</description></item><item><title>PHP对象的实现和操作</title><link>http://0x3f.org/posts/object-implementation-in-php/</link><pubDate>Wed, 29 Apr 2015 23:00:00 +0000</pubDate><guid>http://0x3f.org/posts/object-implementation-in-php/</guid><description>Object的存储结构 对象实例用zval存储。zval-&amp;gt;type == IS_OBJECT，zval-&amp;gt;value-&amp;gt;obj存储zend_object_value类型的结构体变量。
1 2 3 4 typedef struct _zend_object_value { zend_object_handle handle; const zend_object_handlers *handlers; } zend_object_value; zend_object_handle是一个unsigned int，是对象的ID。zend_object_handlers存储对象所有的行为。
Object的实例化过程 Object的初始化用以下几个宏函数：
object_init(zval *arg) object_init_ex(zval *arg, zend_class_entry *class_type) object_and_properties_init(zval *arg, zend_class_entry *class_type, HashTable *properties) 底层都是调用_object_and_properties_init(zval *arg, zend_class_entry *class_type, HashTable *properties)实现。这个函数做以下几件事：
检查类是否可实例化（例如接口、抽象类等不允许初始化） 处理类常量 检查类是否存在自定义实例化逻辑 若存在，调用自定义实例化逻辑 若不存在，调用缺省的函数zend_objects_new(zend_object **object, zend_class_entry *class_type) 把实例化的zend_object类型的数据存入zval中 zend_objects_new()做这些事：
分配一个zend_object类型的内存空间 初始化zend_object类型数据 把zend_object类型数据存入对象仓库（Objects Store） zend_objects_store_put(void *object, zend_objects_store_dtor_t dtor, zend_objects_free_object_storage_t free_storage, zend_objects_store_clone_t clone） zend_object的存储结构 1 2 3 4 5 6 typedef struct _zend_object { zend_class_entry *ce; HashTable *properties; zval **properties_table; HashTable *guards; /* protects from __get/__set .</description></item><item><title>PHP类和接口的实现</title><link>http://0x3f.org/posts/class-interface-implementation-in-php/</link><pubDate>Tue, 28 Apr 2015 18:38:00 +0000</pubDate><guid>http://0x3f.org/posts/class-interface-implementation-in-php/</guid><description>Class的实现 类的注册是在扩展的MINIT方法里。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 /* * this pointer should be put into the header file, * so other modules can access this class.</description></item><item><title>PHP数组的实现与操作</title><link>http://0x3f.org/posts/array-implementation-in-php/</link><pubDate>Fri, 24 Apr 2015 12:09:00 +0000</pubDate><guid>http://0x3f.org/posts/array-implementation-in-php/</guid><description>存储结构 和其它变量一样，PHP的数组也是一个zval。存储数据的哈希表存放在zval-&amp;gt;value-&amp;gt;ht中。
符号表操作 为实现可转换成整数的字符串键与整数键指向同一个元素，在哈希表操作的基础上封装了一层，对可转换成整数的字符串键转换成整数，然后调用zend_hash_index_*操作，否则调用zend_hash_*操作。这就是符号表操作。
用ZEND_HANDLE_NUMERIC处理整数字符串键：
1 2 3 4 5 6 static inline int zend_symtable_find( HashTable *ht, const char *arKey, uint nKeyLength, void **pData ) { ZEND_HANDLE_NUMERIC(arKey, nKeyLength, zend_hash_index_find(ht, idx, pData)); return zend_hash_find(ht, arKey, nKeyLength, pData); } 其它符号表操作函数：
1 2 3 4 5 6 7 8 static inline int zend_symtable_exists(HashTable *ht, const char *arKey, uint nKeyLength); static inline int zend_symtable_del(HashTable *ht, const char *arKey, uint nKeyLength); static inline int zend_symtable_update( HashTable *ht, const char *arKey, uint nKeyLength, void *pData, uint nDataSize, void **pDest ); static inline int zend_symtable_update_current_key_ex( HashTable *ht, const char *arKey, uint nKeyLength, int mode, HashPosition *pos ); 数组操作 初始化 1 2 3 4 5 6 7 8 9 // 初始化数组 zval *zv1; array_init(zv1); // 初始化数组并指定哈希表nTableSize的值 array_init_size(zv1, 100); // 在函数中返回数组：把返回值初始化为数组 array_init(return_value); 插入和更新 1 2 3 4 5 6 7 8 /* Insert at next index */ int add_next_index_*(zval *arg, .</description></item><item><title>PHP哈希表的实现与操作</title><link>http://0x3f.org/posts/hashtable-implementation-of-php/</link><pubDate>Thu, 23 Apr 2015 15:56:00 +0000</pubDate><guid>http://0x3f.org/posts/hashtable-implementation-of-php/</guid><description>结构 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 // 哈希表结构 typedef struct _hashtable { uint nTableSize; uint nTableMask; uint nNumOfElements; // 全部元素数 ulong nNextFreeElement; // 下一个可用的整数键 Bucket *pInternalPointer; // 枚举操作时使用，指向当前Bucket Bucket *pListHead; Bucket *pListTail; Bucket **arBuckets; dtor_func_t pDestructor; // 元素的析构函数 zend_bool persistent; // 是否在本次请求结束后保留哈希表 unsigned char nApplyCount; // 循环级别，防止循环引用导致遍历哈希表时死循环 zend_bool bApplyProtection; // 是否防止死循环 #if ZEND_DEBUG int inconsistent; #endif } HashTable; // Bucket结构 typedef struct bucket { ulong h; uint nKeyLength; void *pData; void *pDataPtr; struct bucket *pListNext; struct bucket *pListLast; struct bucket *pNext; struct bucket *pLast; char *arKey; } Bucket; 哈希冲突处理 哈希表通过计算键值的哈希值，将对应的数据映射到对应的槽上。理论上会存在不同的键的哈希值相同的情况。</description></item><item><title>自动重映射键盘</title><link>http://0x3f.org/posts/auto-remap-keyboard/</link><pubDate>Fri, 17 Apr 2015 18:02:00 +0000</pubDate><guid>http://0x3f.org/posts/auto-remap-keyboard/</guid><description>每次键盘拔出再插入时，键盘映射都会失效，要重新执行映射，而且要对不同的键盘应用不同的映射方案。试过直接添加udev规则，即使指定X Display和Xauthority也不成功。所以用pyudev写个脚本（最新版本）：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 #!</description></item><item><title>用树苺派做家庭监控</title><link>http://0x3f.org/posts/monitor-home-with-raspberry-pi/</link><pubDate>Tue, 07 Apr 2015 10:56:00 +0000</pubDate><guid>http://0x3f.org/posts/monitor-home-with-raspberry-pi/</guid><description>用树苺派做视频监控，当视野内有物体移动时，自动拍照、录视频、同步到远程主机，并提醒到远程电脑和手机。
用Motion做视频监控 安装Motion，修改几项必要的配置：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 照片和视频存储路径 target_dir = /media/sda1/cam # 允许局域网内其它主机访问视频 webcam_localhost off # 监测到移动物体时，创建作为标识的临时文件 on_event_start &amp;#34;echo 1 &amp;gt; /tmp/invasion_detected&amp;#34; # 移动物体消失时，移除临时文件 on_event_end &amp;#34;rm /tmp/invasion_detected&amp;#34; # 监测到移动物体并在保存第一张照片时，发送提醒到电脑和手机 on_picture_save [ -f /tmp/invasion_detected ] &amp;amp;&amp;amp; [ `cat /tmp/invasion_detected` -gt 0 ] &amp;amp;&amp;amp; echo 0 &amp;gt; /tmp/invasion_detected &amp;amp;&amp;amp; proxychains /root/SmartHome/script/alert.py -f %f 用Lsyncd同步到VPS 安装lsyncd并配置：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 settings{ pidfile = &amp;#34;/var/log/lsyncd/lsyncd.</description></item><item><title>用树苺派搭NAS</title><link>http://0x3f.org/posts/make-nas-with-raspberry-pi/</link><pubDate>Fri, 03 Apr 2015 15:13:00 +0000</pubDate><guid>http://0x3f.org/posts/make-nas-with-raspberry-pi/</guid><description>为了让盒子能直接播放远程下载的电影，继续在树苺派上搭NAS。
安装samba，然后配置：
1 2 3 4 5 6 7 [nas] path = /media/sda1 valid users = @users force group = users create mask = 0660 directory mask = 0771 read only = no 把Linux用户添加到samba并设置密码：
1 smbpasswd -a pi 盒子上的Kodi硬解有问题，用ES+MX Player替代。电脑上用Kodi。</description></item><item><title>再次调整磁盘分区</title><link>http://0x3f.org/posts/adjust-disk-partitions-again/</link><pubDate>Fri, 03 Apr 2015 14:44:00 +0000</pubDate><guid>http://0x3f.org/posts/adjust-disk-partitions-again/</guid><description>自从上次调整磁盘分区，一直把根目录和主目录分别挂在一个物理分区下，即使系统挂了或者换发行版也不影响主目录。最近根分区很紧张，干脆把两个分区合并了。
先用UNetBootin安装Puppy Linux到U盘，需要手工修改U盘里的syslinux.cfg，把“pmedia=cd”改成“pmedia=usbflash”，然后用U盘启动。
把主目录的内容完整复制到移动硬盘：
1 2 3 4 5 6 7 8 9 10 11 12 13 # 挂载主目录 mkdir /mnt/oldhome mount -t ext4 /dev/sda2 /mnt/oldhome # 挂载移动硬盘 mkdir /mnt/bakdisk mount -t ext4 /dev/sdc1 /mnt/bakdisk # 复制主目录 cp -a /mnt/oldhome /mnt/bakdisk/ # 取消挂载主目录 umount /mnt/oldhome 用gparted删除主目录分区，合并到根分区。然后恢复主目录：
1 2 3 4 5 6 7 8 9 10 11 12 13 # 挂载根分区 mkdir /mnt/newroot mount -t ext4 /dev/sda1 /mnt/newroot # 恢复主目录 cp -a /mnt/bakdisk/* /mnt/newroot/ # 修改fstab，取消主目录的挂载 vim /mnt/newroot/etc/fstab # 取消挂载 umount /mnt/bakdisk umount /mnt/newroot</description></item><item><title>用树苺派实现远程下载</title><link>http://0x3f.org/posts/remote-downloading-with-raspberry-pi/</link><pubDate>Sat, 28 Mar 2015 19:14:00 +0000</pubDate><guid>http://0x3f.org/posts/remote-downloading-with-raspberry-pi/</guid><description>远程用树苺派利用空闲时间下载大文件，需要百度云、aria2和VPS。因为网络运营商给的IP不是真的公网IP，而且免费的动态域名服务不稳定，所以用VPS把树苺派上的端口转发到外网。
树苺派 在树苺派上部署aria2下载服务，并发布到VPS。
安装aria2，创建以下配置文件，修改/media/sda1为实际下载目录：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 dir=/media/sda1 file-allocation=prealloc continue=true log-level=info #log-level=debug max-connection-per-server=10 summary-interval=120 daemon=true enable-rpc=true rpc-listen-port=6800 rpc-listen-all=true max-concurrent-downloads=3 save-session=/etc/aria2/save-session.list input-file=/etc/aria2/save-session.list log=/media/sda1/aria.log disable-ipv6=true disk-cache=25M timeout=600 retry-wait=30 max-tries=0 user-agent=netdisk;4.4.0.6;PC;PC-Windows;6.2.9200;WindowsBaiduYunGuanJia 我的树苺派用Archlinux，创建systemd的服务配置文件：
1 2 3 4 5 6 7 8 9 10 11 12 13 [Unit] Description=aria2c -- file download manager After=network.target [Service] Type=forking User=%i WorkingDirectory=%h Environment=VAR=/var/%i ExecStart=/usr/bin/aria2c --daemon --enable-rpc --rpc-listen-all --rpc-allow-origin-all -c -D --conf-path=/etc/aria2/aria2.</description></item><item><title>运行时可装卸的Mixin的PHP实现</title><link>http://0x3f.org/posts/php-implementation-of-runtime-mixin/</link><pubDate>Thu, 04 Dec 2014 11:52:00 +0000</pubDate><guid>http://0x3f.org/posts/php-implementation-of-runtime-mixin/</guid><description>PHP的Trait可以实现加载时（load time）的混入（mixin）。作为元编程的一部分，运行时（run time）的混入拥有更大的灵活性。下面利用PHP的魔术方法实现运行时的混入。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 &amp;lt;?</description></item><item><title>Phalcon项目中PHPUnit的初始化</title><link>http://0x3f.org/posts/testing-with-phpunit-in-phalcon/</link><pubDate>Sat, 29 Nov 2014 09:58:00 +0000</pubDate><guid>http://0x3f.org/posts/testing-with-phpunit-in-phalcon/</guid><description>参考官方文档，稍作修改。
在项目下创建目录 unittests ，进入目录执行：
1 composer require phpunit/phpunit 创建 tests 目录并在其中创建文件 Bootstrap.php ：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 &amp;lt;?php use Phalcon\DI, Phalcon\DI\FactoryDefault; ini_set(&amp;#39;display_errors&amp;#39;,1); error_reporting(E_ALL); define(&amp;#39;ROOT_PATH&amp;#39;, __DIR__); define(&amp;#39;PROJECT_DIR&amp;#39;, &amp;#39;/home/taoqi/workspace&amp;#39;); set_include_path( ROOT_PATH . PATH_SEPARATOR . get_include_path() ); // required for phalcon/incubator include __DIR__ . &amp;#34;/../vendor/autoload.php&amp;#34;; // 加载项目文件 $config = require_once PROJECT_DIR.</description></item><item><title>用好代码时光机</title><link>http://0x3f.org/posts/leverage-code-time-machine/</link><pubDate>Fri, 21 Nov 2014 23:19:00 +0000</pubDate><guid>http://0x3f.org/posts/leverage-code-time-machine/</guid><description>今天看了篇文章，讲几种常见的、糟糕的注释用法。其中之一是把废弃的代码注释起来，而不是直接删掉，原因是担心以后可能会用。
这个其实就是版本控制系统（VCS）要解决的问题之一。包括对于团队协作的项目，经常需要看某段代码是谁改的、什么时间、什么原因。都是可以用VCS很方便地解决的问题。
我以前是用二分法在提交列表里找的。其实有更好的解决方法，思路是列出源码在历次提交中修改的内容，然后在其中查找要找的东西就行了。
git的解决方法：
1 git log -p abc.php svn的解决方法：
1 svn log --diff --internal-diff abc.php vim的辅助函数：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 &amp;#34; Show commit history of the current file under the given VCS in a new window function! ShowCommitHistory(vcs) &amp;#34; Check parameter if a:vcs != &amp;#39;svn&amp;#39; &amp;amp;&amp;amp; a:vcs != &amp;#39;git&amp;#39; echoerr &amp;#39;Unknow VCS: &amp;#39;.</description></item><item><title>开始用在线Markdown编辑器记笔记</title><link>http://0x3f.org/posts/start-taking-note-in-online-markdown-editor/</link><pubDate>Thu, 20 Nov 2014 22:35:00 +0000</pubDate><guid>http://0x3f.org/posts/start-taking-note-in-online-markdown-editor/</guid><description>开始用支持VIM模式的在线Markdown编辑器记笔记。既非鼠辈（鼠标依赖症不治者），始终忍受不了其它WYSIWYG（所见即所得）的在线笔记。
大部分在线笔记最傻X的一点是，必须点一下编辑按钮才能开始写东西。支持VIM模式的笔记就不用说了，丝般顺滑，不是我大Vimer就不会懂个中骚柔。
组织上一向后知后觉。智能手机刚开始的时候，组织上很不感冒，理由是屏幕易碎、电池难支、冯唐易老、李广难封。而今现在眼目下，一日不搞机，如隔三秋。在线Markdown编辑器出现也有段时间了，一直觉得这货无非就是给Markdown加了个可笑的准WYSIWYG，现在看来，真是做笔记的不二神器，罪过罪过。
说说组织上跟Markdown的故事。很久很久以前，博客刚开始流行的时候，组织上开始写博客，和大部分人一样，注册个账号写公开日记，很快就忍受不了WYSIWYG编辑器失控的格式，于是开始手写HTML代码，很快就发现这货真TM反人类，从此恨乌及乌至今最讨厌的数据交换格式还是XML，于是自定几种格式或标记，用Java写了个解析工具，把文章源码翻译成HTML。突然有天发现这个星球上居然有种叫轻量型标记语言的东西，干的就是这么个事，只不过我的那些标记和解析工具又丑又烂而已。试了几种之后，最终选了Markdown，从此举案齐眉云云。</description></item><item><title>Vim强制在PHP中使用HTML注释的方法</title><link>http://0x3f.org/posts/force-commenting-html-in-php-files-in-vim/</link><pubDate>Thu, 13 Nov 2014 21:45:00 +0000</pubDate><guid>http://0x3f.org/posts/force-commenting-html-in-php-files-in-vim/</guid><description>对PHP页面模板中的HTML做注释，NERDCommenter是根据文件类型处理的，所以必须临时转换文件类型：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 &amp;#34; 强制使用HTML的注释 function! ForceHTMLComment(mode, type) range set ft=html if a:mode == &amp;#34;x&amp;#34; execute a:firstline.&amp;#34;,&amp;#34;.a:lastline.&amp;#34;call NERDComment(\&amp;#34;x\&amp;#34;, \&amp;#34;&amp;#34;.a:type.&amp;#34;\&amp;#34;)&amp;#34; else if a:type == &amp;#34;Sexy&amp;#34; normal ,cs else normal ,cc endif endif set ft=php endfunction au FileType php nmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;fhcc :call ForceHTMLComment(&amp;#34;n&amp;#34;, &amp;#34;Comment&amp;#34;)&amp;lt;CR&amp;gt; au FileType php vmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;fhcc :call ForceHTMLComment(&amp;#34;x&amp;#34;, &amp;#34;Comment&amp;#34;)&amp;lt;CR&amp;gt; au FileType php nmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;fhcs :call ForceHTMLComment(&amp;#34;n&amp;#34;, &amp;#34;Sexy&amp;#34;)&amp;lt;CR&amp;gt; au FileType php vmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;fhcs :call ForceHTMLComment(&amp;#34;x&amp;#34;, &amp;#34;Sexy&amp;#34;)&amp;lt;CR&amp;gt; au FileType php nmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;fhcu :call ForceHTMLComment(&amp;#34;n&amp;#34;, &amp;#34;Uncomment&amp;#34;)&amp;lt;CR&amp;gt; au FileType php vmap &amp;lt;buffer&amp;gt; &amp;lt;leader&amp;gt;fhcu :call ForceHTMLComment(&amp;#34;x&amp;#34;, &amp;#34;Uncomment&amp;#34;)&amp;lt;CR&amp;gt; 有日子没写vimscript了，手都生了。</description></item><item><title>ZSH下新安装的程序无法自动补全的解决方法</title><link>http://0x3f.org/posts/how-to-auto-complete-newly-installed-command-in-zsh/</link><pubDate>Wed, 12 Nov 2014 22:15:00 +0000</pubDate><guid>http://0x3f.org/posts/how-to-auto-complete-newly-installed-command-in-zsh/</guid><description>Zsh默认开启了对PATH变量的缓存，这是导致新安装的程序无法立即使用自动补全的原因。
其实只要PATH变量不太复杂，安装的程序不太多，完全没必要开启缓存，实际上我把缓存关掉后完全没有感觉到补全的速度有什么变化。
方法如下，在.zshrc中增加一行：
1 zstyle &amp;#39;:completion:*&amp;#39; rehash true 也可以在必要的时间手工执行命令rehash，也是个临时解决方法。</description></item><item><title>接管PHP致命错误的方法</title><link>http://0x3f.org/posts/how-to-take-over-php-fatal-error-handling/</link><pubDate>Wed, 12 Nov 2014 00:47:00 +0000</pubDate><guid>http://0x3f.org/posts/how-to-take-over-php-fatal-error-handling/</guid><description>Yii 2.0引入了一项新特性，可以接管PHP的致命错误。在此之前，如果PHP源码有语法错误，框架本身是不会处理的。
实现的思路如下：
禁止显示错误 注册自定义的shutdown回调函数 在回调函数中获取最近的错误 若错误是致命错误，调用相应的处理逻辑 代码如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &amp;lt;?php // ... ini_set(&amp;#39;display_errors&amp;#39;, false); register_shutdown_function(function(){ $error = error_get_last(); if (isset($error[&amp;#39;type&amp;#39;]) &amp;amp;&amp;amp; in_array($error[&amp;#39;type&amp;#39;], [E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING])) { ob_clean(); echo &amp;#39;&amp;lt;pre&amp;gt;&amp;#39;; var_dump($error); echo &amp;#39;&amp;lt;/pre&amp;gt;&amp;#39;; exit(1); } }); // ... ?&amp;gt;</description></item><item><title>Project Euler Problem 25 Solved</title><link>http://0x3f.org/posts/project-euler-25-solved/</link><pubDate>Sat, 16 Aug 2014 17:32:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-25-solved/</guid><description>1000-digit Fibonacci number The Fibonacci sequence is defined by the recurrence relation:
Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
Hence the first 12 terms will be:
F1 = 1
F2 = 1
F3 = 2
F4 = 3
F5 = 5
F6 = 8
F7 = 13
F8 = 21
F9 = 34
F10 = 55
F11 = 89
F12 = 144
The 12th term, F12, is the first term to contain three digits.</description></item><item><title>使用lsyncd同步文件</title><link>http://0x3f.org/posts/live-syncing-daemon/</link><pubDate>Wed, 18 Jun 2014 14:03:00 +0000</pubDate><guid>http://0x3f.org/posts/live-syncing-daemon/</guid><description>lsyncd全称“Live Syncing Daemon”，是Linux下的文件自动同步工具，同时支持SSH、rsync的实现方式。相对于rsync+inotify，它速度更快，也更稳定。
对于SSH的方式，需要目标机器中已启动SSHD，并把源机器上的公钥加到目标机器root用户的authorized_keys中，私钥应放在源机器上运行lsyncd的用户的.ssh目录中，密钥放错了用户，会导致无法同步。
然后就是在源机器上创建配置文件，lsyncd的配置文件是个lua脚本：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 settings{ pidfile = &amp;#34;/var/log/lsyncd/lsyncd.pid&amp;#34;, logfile = &amp;#34;/var/log/lsyncd/lsyncd.log&amp;#34;, statusFile = &amp;#34;/var/log/lsyncd/lsyncd-status.log&amp;#34;, statusInterval = 1, maxDelays = 1, -- nodaemon = true, } sync{ default.rsyncssh, source = &amp;#34;/home/monk/workspace&amp;#34;, host = &amp;#34;192.168.1.3&amp;#34;, targetdir = &amp;#34;/var/www/workspace&amp;#34;, exclude={ &amp;#34;.*&amp;#34;, &amp;#34;*.tmp&amp;#34; }, rsync = { compress = false, _extra = {&amp;#34;--bwlimit=50000&amp;#34;}, } } 然后启动lsyncd：</description></item><item><title>Project Euler Problem 24 Solved</title><link>http://0x3f.org/posts/project-euler-24/</link><pubDate>Sun, 27 Apr 2014 21:17:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-24/</guid><description>Lexicographic permutations A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:
012 021 102 120 201 210
What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?</description></item><item><title>Project Euler Problem 23 Solved</title><link>http://0x3f.org/posts/project-euler-23/</link><pubDate>Fri, 25 Apr 2014 23:56:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-23/</guid><description>Non-abundant sums A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.
A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.</description></item><item><title>UltraBlog.vim v3.6.1: 文章分类自动补全</title><link>http://0x3f.org/posts/ultrablog-v361-released/</link><pubDate>Sun, 20 Apr 2014 22:50:00 +0000</pubDate><guid>http://0x3f.org/posts/ultrablog-v361-released/</guid><description>春节期间收到两个issue，一直拖到今天才有时间完成。
增加了一个功能，在文章编辑视图的元数据中分类那行，使用热键&amp;lt;C-X&amp;gt;&amp;lt;C-U&amp;gt;自动完成文章的分类。在配置数组ub_blog中增加键值对“categories”，默认使用这一项的值实现自动完成，如下：
1 2 3 4 5 6 7 let ub_blog = {&amp;#39;login_name&amp;#39;:&amp;#39;admin&amp;#39;, \&amp;#39;password&amp;#39;:&amp;#39;pass2011&amp;#39;, \&amp;#39;url&amp;#39;:&amp;#39;http://www.sample.com/&amp;#39;, \&amp;#39;xmlrpc_uri&amp;#39;:&amp;#39;xmlrpc.php&amp;#39;, \&amp;#39;db&amp;#39;:&amp;#39;$VIM/UltraBlog.db&amp;#39;, \&amp;#39;categories&amp;#39;: &amp;#39;News|Computer|Image&amp;#39; \} 如果这一项不存在，将从博客中拉取分类数据。
自从迁移到Octopress，有两年不用Wordpress了，没想到居然还有人在用UltraBlog.vim。</description></item><item><title>Project Euler Problem 22 Solved</title><link>http://0x3f.org/posts/project-euler-22/</link><pubDate>Sun, 20 Apr 2014 08:03:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-22/</guid><description>Names scores Using names.txt (right click and &amp;lsquo;Save Link/Target As&amp;hellip;&amp;rsquo;), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.
For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list.</description></item><item><title>Project Euler Problem 21 Solved</title><link>http://0x3f.org/posts/project-euler-21/</link><pubDate>Thu, 17 Apr 2014 22:18:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-21/</guid><description>Amicable numbers Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.
For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284.</description></item><item><title>Project Euler Problem 20 Solved</title><link>http://0x3f.org/posts/project-euler-20/</link><pubDate>Mon, 14 Apr 2014 22:19:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-20/</guid><description>Factorial digit sum n! means n × (n − 1) × &amp;hellip; × 3 × 2 × 1
For example, 10! = 10 × 9 × &amp;hellip; × 3 × 2 × 1 = 3628800,
and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
Find the sum of the digits in the number 100!</description></item><item><title>Project Euler Problem 19 Solved</title><link>http://0x3f.org/posts/project-euler-19/</link><pubDate>Sat, 12 Apr 2014 21:21:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-19/</guid><description>Counting Sundays You are given the following information, but you may prefer to do some research for yourself.
1 Jan 1900 was a Monday. Thirty days has September, April, June and November.
All the rest have thirty-one,
Saving February alone,
Which has twenty-eight, rain or shine.
And on leap years, twenty-nine. A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.</description></item><item><title>Project Euler Problem 18&amp;67 Solved</title><link>http://0x3f.org/posts/project-euler-18-and-67/</link><pubDate>Thu, 10 Apr 2014 21:28:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-18-and-67/</guid><description>Maximum path sum I By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
3
7 4
2 4 6
8 5 9 3
That is, 3 + 7 + 4 + 9 = 23.
Find the maximum total from top to bottom of the triangle below:
75
95 64
17 47 82</description></item><item><title>Project Euler Problem 17 Solved</title><link>http://0x3f.org/posts/project-euler-17/</link><pubDate>Wed, 09 Apr 2014 22:29:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-17/</guid><description>Number letter counts If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters.</description></item><item><title>Project Euler Problem 16 Solved</title><link>http://0x3f.org/posts/project-euler-16/</link><pubDate>Tue, 08 Apr 2014 21:57:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-16/</guid><description>Power digit sum 2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
What is the sum of the digits of the number 2^1000?
Solution 1 2 3 4 5 6 7 8 9 10 11 #!/usr/bin/python # -*- coding: utf-8 -*- import math if __name__ == &amp;#39;__main__&amp;#39;: str = format(math.pow(2, 1000), &amp;#39;f&amp;#39;) sum = 0 for c in str[:str.</description></item><item><title>Project Euler Problem 15 Solved</title><link>http://0x3f.org/posts/project-euler-15/</link><pubDate>Wed, 02 Apr 2014 21:44:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-15/</guid><description>Lattice paths Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.
How many such routes are there through a 20×20 grid?
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #!/usr/bin/python # -*- coding: utf-8 -*- if __name__ == &amp;#39;__main__&amp;#39;: (steps, a, b) = (20, 1, 1) i = steps * 2 while i &amp;gt; steps: a *= i i -= 1 while steps &amp;gt; 1: b *= steps steps -= 1 print a / b I&amp;rsquo;m the 86747th person to have solved this problem.</description></item><item><title>Project Euler Problem 14 Solved</title><link>http://0x3f.org/posts/project-euler-14/</link><pubDate>Tue, 01 Apr 2014 22:17:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-14/</guid><description>Longest Collatz sequence The following iterative sequence is defined for the set of positive integers:
n → n/2 (n is even)
n → 3n + 1 (n is odd)
Using the rule above and starting with 13, we generate the following sequence:
13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms.</description></item><item><title>PHP框架实战（六）：依赖注入</title><link>http://0x3f.org/posts/flamework-dependency-injection/</link><pubDate>Sun, 30 Mar 2014 10:00:00 +0000</pubDate><guid>http://0x3f.org/posts/flamework-dependency-injection/</guid><description>简述 依赖注入是个很好的解耦方法，也可以优雅的实现懒加载。
以数据库连接为例，当一个组件用到数据库时，最简单粗暴的办法是在使用前创建连接：
1 2 3 4 5 6 7 8 9 10 11 &amp;lt;?php class Component { public function doSth() { // ... $db = new DatabaseConnection($schema, $host, $port, $login, $password); // ... } } ?&amp;gt; 这样做的缺点是代码一旦执行，Component行为将不可更改，有时我们需要在程序执行的过程中决定其行为。很直接地，可以想到给Component添加一个Setter方法：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 &amp;lt;?php class Component { private $__db; public function doSth() { // ... if ($this-&amp;gt;__db !</description></item><item><title>Project Euler Problem 13 Solved</title><link>http://0x3f.org/posts/project-euler-13/</link><pubDate>Sun, 30 Mar 2014 09:50:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-13/</guid><description>Large sum Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
37107287533902102798797998220837590246510135740250 46376937677490009712648124896970078050417018260538 74324986199524741059474233309513058123726617309629 91942213363574161572522430563301811072406154908250 23067588207539346171171980310421047513778063246676 89261670696623633820136378418383684178734361726757 28112879812849979408065481931592621691275889832738 44274228917432520321923589422876796487670272189318 47451445736001306439091167216856844588711603153276 70386486105843025439939619828917593665686757934951 62176457141856560629502157223196586755079324193331 64906352462741904929101432445813822663347944758178 92575867718337217661963751590579239728245598838407 58203565325359399008402633568948830189458628227828 80181199384826282014278194139940567587151170094390 35398664372827112653829987240784473053190104293586 86515506006295864861532075273371959191420517255829 71693888707715466499115593487603532921714970056938 54370070576826684624621495650076471787294438377604 53282654108756828443191190634694037855217779295145 36123272525000296071075082563815656710885258350721 45876576172410976447339110607218265236877223636045 17423706905851860660448207621209813287860733969412 81142660418086830619328460811191061556940512689692 51934325451728388641918047049293215058642563049483 62467221648435076201727918039944693004732956340691 15732444386908125794514089057706229429197107928209 55037687525678773091862540744969844508330393682126 18336384825330154686196124348767681297534375946515 80386287592878490201521685554828717201219257766954 78182833757993103614740356856449095527097864797581 16726320100436897842553539920931837441497806860984 48403098129077791799088218795327364475675590848030 87086987551392711854517078544161852424320693150332 59959406895756536782107074926966537676326235447210 69793950679652694742597709739166693763042633987085 41052684708299085211399427365734116182760315001271 65378607361501080857009149939512557028198746004375 35829035317434717326932123578154982629742552737307 94953759765105305946966067683156574377167401875275 88902802571733229619176668713819931811048770190271 25267680276078003013678680992525463401061632866526 36270218540497705585629946580636237993140746255962 24074486908231174977792365466257246923322810917141 91430288197103288597806669760892938638285025333403 34413065578016127815921815005561868836468420090470 23053081172816430487623791969842487255036638784583 11487696932154902810424020138335124462181441773470 63783299490636259666498587618221225225512486764533 67720186971698544312419572409913959008952310058822 95548255300263520781532296796249481641953868218774 76085327132285723110424803456124867697064507995236 37774242535411291684276865538926205024910326572967 23701913275725675285653248258265463092207058596522 29798860272258331913126375147341994889534765745501 18495701454879288984856827726077713721403798879715 38298203783031473527721580348144513491373226651381 34829543829199918180278916522431027392251122869539 40957953066405232632538044100059654939159879593635 29746152185502371307642255121183693803580388584903 41698116222072977186158236678424689157993532961922 62467957194401269043877107275048102390895523597457 23189706772547915061505504953922979530901129967519 86188088225875314529584099251203829009407770775672 11306739708304724483816533873502340845647058077308 82959174767140363198008187129011875491310547126581 97623331044818386269515456334926366572897563400500 42846280183517070527831839425882145521227251250327 55121603546981200581762165212827652751691296897789 32238195734329339946437501907836945765883352399886 75506164965184775180738168837861091527357929701337 62177842752192623401942399639168044983993173312731 32924185707147349566916674687634660915035914677504 99518671430235219628894890102423325116913619626622 73267460800591547471830798392868535206946944540724 76841822524674417161514036427982273348055556214818 97142617910342598647204516893989422179826088076852 87783646182799346313767754307809363333018982642090 10848802521674670883215120185883543223812876952786 71329612474782464538636993009049310363619763878039 62184073572399794223406235393808339651327408011116 66627891981488087797941876876144230030984490851411 60661826293682836764744779239180335110989069790714 85786944089552990653640447425576083659976645795096 66024396409905389607120198219976047599490197230297 64913982680032973156037120041377903785566085089252 16730939319872750275468906903707539413042652315011 94809377245048795150954100921645863754710598436791 78639167021187492431995700641917969777599028300699 15368713711936614952811305876380278410754449733078 40789923115535562561142322423255033685442488917353 44889911501440648020369068063960672322193204149535 41503128880339536053299340368006977710650566631954 81234880673210146739058568557934581403627822703280 82616570773948327592232845941706525094512325230608 22918802058777319719839450180888072429661980811197 77158542502016545090413245809786882778948721859617 72107838435069186155435662884062257473692284509516 20849603980134001723930671666823555245252804609722 53503534226472524250874054075591789781264330331690</description></item><item><title>Project Euler Problem 12 Solved</title><link>http://0x3f.org/posts/project-euler-12/</link><pubDate>Fri, 28 Mar 2014 22:51:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-12/</guid><description>Highly divisible triangular number The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, &amp;hellip;
Let us list the factors of the first seven triangle numbers:
1: 1
3: 1,3</description></item><item><title>使用存取控制表在Linux用户间共享文件</title><link>http://0x3f.org/posts/share-file-using-access-control-lists/</link><pubDate>Wed, 19 Mar 2014 22:38:00 +0000</pubDate><guid>http://0x3f.org/posts/share-file-using-access-control-lists/</guid><description>我用Dropbox在两台电脑间同步个人维基数据，将数据目录从Web Server下软连接到Dropbox里，而对Dropbox目录的备份实际上只包含那个软连接，没有内容，结果当把备份拷贝到另一台电脑上并打开Dropbox后，维基数据被清空了！我积累多年的笔记差一点儿完蛋，幸亏单独备份过维基。然后改将维基数据放到Dropbox里，然后软连接到Web Server下，新问题出现了，Web Server是以http身份运行的，对用户主目录没有权限，当然也不能访问主目录下的Dropbox目录。
最简单的办法是将主目录、Dropbox、维基目录的权限全部设成777，显然，这样做太不安全。另一种方法是把Dropbox用NFS输出，然后挂载到Web Server下，这么做太蛋疼。最合适的解决方案是Access Control List（存取控制表），它可以为文件和目录设置具体到单个用户或用户组的存取权限，实现像Windows下的文件（目录）共享权限设置那样的效果，而且比后者更强大、灵活。
使用ACL首先需要目录的挂载选项中包含acl，不过一般缺省都包含这一项。
ACL包含两个命令：getfacl和setfacl，前者用来查看目录或文件的存取控制表，后者用来操作它。
首先，把维基目录的所有者改成http，并设置目录权限为770：
1 2 chown -R http:http ~/Dropbox/wiki chmod -R 770 ~/Dropbox/wiki 这时Web Server还是不能访问维基目录，使用getfacl查看用户主目录的ACL：
1 getfacl ~ 显示结果如下：
getfacl: Removing leading &amp;lsquo;/&amp;rsquo; from absolute path names
# file: home/taoqi
# owner: taoqi
# group: users
user::rwx
user:root:&amp;ndash;x
group::&amp;mdash;
mask::&amp;ndash;x
other::&amp;mdash;
显然，要给http用户访问该目录的权限：
1 setfacl -m u:http:x ~ 再查看ACL，发现增加了一条：
user:http:&amp;ndash;x
同理，给Dropbox目录也加上这一条规则之后，Web Server就可以访问维基数据目录了。</description></item><item><title>PHP框架实战（∝）：烈焰之终章</title><link>http://0x3f.org/posts/flamework-summary/</link><pubDate>Thu, 02 Jan 2014 15:15:00 +0000</pubDate><guid>http://0x3f.org/posts/flamework-summary/</guid><description>写“烈焰”（Flame）用了一周的业余时间，主要是对平时一些想法的总结和验证。实现了比较完整的控制器层和视图层，对模型层的ActiveRecord实现思路做了一下梳理。
当然，一个可实用的框架需要包含的东西远不止这些。比如框架中用到代码动态调用的地方，一定要做好语言安全子集的过滤，否则就是很大的安全漏洞。再比如需要支持依赖反转的缓存机制，实现对多种缓存方式的平滑支持。此外，像URI路由、可扩展、多模板方案支持也都是现代框架的标配。这些留待以后有时间再讨论。然而在这次练习的过程中，我突然想到一个问题——PHP是不是适合实现一个完备的框架。
曾见过一句话，说PHP本身就是一个框架，后来明白，这才是微言大义。PHP有很多高级选项、高级函数和扩展，用得好事半功倍，用不好就是魔鬼。
PHP本身有很多问题，协议不统一、函数命名混乱、命名空间语法怪异而且鸡肋等等都是老生常谈。在运行模式上，无论是Apache+PHP模块，还是NGINX+FastCGI，都只能实现在纵向层面上对一次请求的处理，由于缺乏在内存中持续运行程序的机制，凡是对程序全局共享并持续占有的东西都不能实现，比如数据库连接池等，以至于很多初始化的工作对于每次请求都要重新执行一次，这意味著面向对象越彻底、封装越多，系统资源的重复消耗越厉害，所以PHP的程序在性能和内存占用上与Java相比有一定缺陷。因此PHP更适合短平快的应用场景，不适合实现复杂的业务逻辑。
基于这个观点，我认同混合编程。没有哪种语言是完美的，用对的工具做对的事是最理想的。用PHP实现一个完备的框架也许不是个明智的选择，从短平快的角度出发，它更适合用来实现微框架。
现在微框架是个比较热门的话题，我最早接触的是Python的Bottle和Flask，短小精悍，非常容易上手。微框架主要实现控制器层和视图层，一般不包括模型层。为了以最快的速度将请求路由到处理逻辑，一般以最直接的方式建立URI模板和回调物件之间的映射，控制器层可以以极简的方式实现，例如只做一个像本文后面例子中那样简单的约定。微框架应该尽可能少地包含配置，大部分时候并不需要像Java的S.S.H那样滥用配置，CoC原则就持这样的观点，约定可以解决的问题就不要用配置去做。
下面只使用两个函数和五条约定实现一个微框架：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 &amp;lt;?php /** * 路由定义与应用 * @param string $route 用作定义路由规则时，此参数为模板字符串， * 使用冒号加参数名作为参数占位符，例如： * on(&amp;#39;/post/edit/:id&amp;#39;, function($id){}); * 用做应用路由规则时，此参数为URI，例如： * on($_SERVER[&amp;#39;REQUEST_URI&amp;#39;]); * @param callable $callback 路由规则的回调逻辑，如果路由规则中 * 含有参数占位符，回调中需存在同名的参数；当函数作为应用路 * 由规则使用时，此参数不指定 * @return void * @since 1.</description></item><item><title>PHP框架实战（五）：ORM与ActiveRecord</title><link>http://0x3f.org/posts/flamework-active-record/</link><pubDate>Wed, 01 Jan 2014 20:45:00 +0000</pubDate><guid>http://0x3f.org/posts/flamework-active-record/</guid><description>简述 Model是MVC框架中最复杂的部分，它要提供与业务逻辑相关的数据及数据处理方法的封装，一般要提供数据对象、数据库连接、事务管理、SQL语句构造、数据CRUD、高级通用业务逻辑等一系列功能。由于Model与Controller和View是解耦的，并且本身具备很高的通用性和复杂性，所以有很多独立的实现。本文希望能通过开发一个简单的ActiveRecord，验证这种Model实现方案的原理和过程。
ORM：对象关系映射 ORM的全称是Object Relational Mapping，即对象关系映射。它是为了解决关系数据库的数学模型和编程语言的对象模型之间的阻抗不匹配问题而提出的解决方案。
阻抗不匹配是个逼格很高的词。
阻抗是指电路中的电容、电感、电阻对交流电的障碍作用，就像电阻对直流电的障碍作用。两个系统传递信号可以形象地看成电压的传递，公式为：
U(out) * Z(in)
U(in) = &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;
Z(in) + Z(out)
即输入电压等于输出电压与输入阻抗的积除以输入阻抗与输出阻抗的和。
理想情况肯定是输入电压等于输出电压，这时信号是没有失真的，也就是要求Z(in)与Z(in)+Z(out)之商无限逼近1，这个过程就叫阻抗匹配。关系型数据库是建立在数学模型的基础上，而编程语言中的对象是建立在人对客观世界认知的具象模型上。说白了，阻抗不匹配问题就是说因这两种模型不一致而导致的问题。
ORM通过建立表与对象、列与属性（这只是一般情况）之间的映射关系而解决问题，这可以实现像操作对象一样对数据库中的数据进行增删改查，简化了开发过程。不过ORM的缺点是不能很好地处理复杂数据关系，会出现效率低下的问题，因此必要时仍然需要直接使用SQL。
ActiveRecord ActiveRecord是Ruby on Rails提出的一个概念，其实就是ORM的一种实现，它是对象类型、数据、CRUD方法的合体，使对数据的操作以更具象化的方式实现。下面介绍在Flamework中实现一个简单的ActiveRecord的过程。
首先实现数据库的接口，提供数据库连接、查询、执行SQL语句、事务管理等基本功能。这里使用PDO实现：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 &amp;lt;?</description></item><item><title>PHP框架实战（四）：View的模板与渲染</title><link>http://0x3f.org/posts/flamework-view-rendering/</link><pubDate>Mon, 30 Dec 2013 21:05:00 +0000</pubDate><guid>http://0x3f.org/posts/flamework-view-rendering/</guid><description>目标 实现MVC模型的View层，Controller的Action中应可以将从Model层获取的数据填充到View模板中，并将渲染结果返回给访问者。本文并不志在实现一个完备的模板框架，相应的需求可借助Smarty这样现有的实现。
获取代码 1 git checkout v0.4 设计与实现 View的模板是最好实现的，因为PHP本身就是一个模板语言，所以这里实现的模板主要是指几条约定：
模板文件本身是一个普通PHP文件，文件名后缀是“.php”； 模板文件应存储在项目指定的模板基础目录中； 模板名称指模板文件相对于项目的模板基础目录的路径，并且去掉文件后缀； 模板本身的实际效果等同于在Controller的Action中执行的代码，故可以调用Controller的所有方法以及Flame对象的方法等内容； 所有要填充到模板中的数据以键值对的形式存储在一个关联数组中，并传递给渲染模板的方法，在模板中使用与键名相同的变量调用数据； View的渲染方法
添加Controller::render()方法：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 &amp;lt;?php // ... /** * Render the view template with data * @param string $view View template relative path to base path of the templates * For example, &amp;#39;post/list&amp;#39; point to file /srv/http/mysite/protected/view/post/list.</description></item><item><title>PHP框架实战（三）：实现Controller和Filter</title><link>http://0x3f.org/posts/flamework-controller-and-filter/</link><pubDate>Sun, 29 Dec 2013 20:40:00 +0000</pubDate><guid>http://0x3f.org/posts/flamework-controller-and-filter/</guid><description>目标 实现Controller和Filter，程序可以从HTTP请求中解析Controller和Action，并在这两个切面级别实现Filter链。此外，在Controller中，可以使用Action的参数直接访问HTTP请求中的同名参数。
获取代码 项目目录结构做了调整，framework目录存放Flamework框架源码，demo目录存放示例项目。
1 git checkout v0.3 设计与实现 Controller的实现
要求请求URL的格式如下：
http://www.mydomain.com/index.php?r=post/save
r表示Route，斜杠前面的post表示Controller的名称，后面的save表示Action的名称。对HTTP请求的各种处理逻辑封装在新对象HttpRequest中：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 &amp;lt;?</description></item><item><title>PHP框架实战（二）：错误和异常的自动处理</title><link>http://0x3f.org/posts/flamework-error-auto-handling/</link><pubDate>Sat, 28 Dec 2013 13:40:00 +0000</pubDate><guid>http://0x3f.org/posts/flamework-error-auto-handling/</guid><description>目标 实现错误和异常的自动捕获和处理。
获取代码 1 git checkout v0.2 设计与实现 使用set_error_handler()和set_exception_handler()两个函数注册错误和异常的处理方法，并在两个处理方法中先调用用户自定义的错误和异常处理逻辑，如果自定义逻辑不存在或者返回false，继续调用框架缺省的处理逻辑，输出错误信息到页面。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 &amp;lt;?</description></item><item><title>PHP框架实战（一）：框架入口与类的自动加载</title><link>http://0x3f.org/posts/flamework-entry/</link><pubDate>Sat, 28 Dec 2013 01:56:00 +0000</pubDate><guid>http://0x3f.org/posts/flamework-entry/</guid><description>目标 实现框架入口和类的自动加载。
获取代码 1 git checkout v0.1 设计与实现 通过两个类实现本次目标。
静态类Flame作为整个框架的入口，实现一系列框架级公用静态方法（例如创建应用实例和自动加载类）。
WebApplication是应用的抽象层，实现应用的入口和其它应用级（即运行时）公用方法（例如读取配置文件）。
程序入口
1 2 3 4 &amp;lt;?php // ... Flame::createApplication($config)-&amp;gt;run(); ?&amp;gt; 此处传入的$config是应用配置文件的路径，该配置文件内容格式如下：
1 2 3 4 5 6 &amp;lt;?php return array( &amp;#39;opt1&amp;#39; =&amp;gt; &amp;#39;val1&amp;#39;, // ... ); ?&amp;gt; 在文件中直接return一个关联数组的好处是，加载该文件时，include()函数的返回值就是该数组，代码更简洁，效率比解析其它格式配置文件高。
类的自动加载
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 &amp;lt;?php // ... class Flame { // .</description></item><item><title>PHP框架实战（零）：代码规范</title><link>http://0x3f.org/posts/flamework-code-spec/</link><pubDate>Thu, 26 Dec 2013 22:07:00 +0000</pubDate><guid>http://0x3f.org/posts/flamework-code-spec/</guid><description>类C语言语法风格最大的问题就是用花括号区分代码块，这导致源码排版容易混乱，对于我这种有代码洁癖的人来说非常痛苦，所以我最喜欢的语法风格是Python的，用缩进区分代码块，排版不规范直接判处语法错误。
命名规范 所有命名使用驼峰风格。
源码开头定义命名空间，Flamework框架入口类的命名空间为“org\x3f\flamework”，其余类的命名空间应在此基础上追加与所在目录路径匹配的内容。例如，框架源码目录下一级子目录“base”中的类文件的命名空间均为“org\x3f\flamework\base”。
类名必须是名词，不允许添加任何无意义的前缀或后缀，只允许使用大小写英文字母且首字母大写。
方法名必须是“动词+名词”的形式（如果动词意义明确且不需要宾语，可省略后者），只允许使用大小写英文字母及阿拉伯数字和下划线，首字母小写。
属性名分两种情况，对于存储普通数据的属性，名称必须是名词；对于布尔型属性，名称必须是“动词+名词”的形式。只允许使用大小写英文字母及阿拉伯数字和下划线，首字母小写。
源码文件名必须与类名相同，后缀统一使用“.php”。
注释规范 统一使用phpDocumenter的注释规范。
类注释必须注明@author、@since。
属性和方法的作者如果和类的创建者不同，必须注明@author，此外必须注明@since。
文件格式 所有文本文件统一使用UNIX格式和UTF-8编码。
严禁使用制表符缩进代码，必须使用4个空格替代制表符。
类、属性、方法、方法内部代码块都必须严格按照层级缩进。</description></item><item><title>PHP框架实战：Flamework</title><link>http://0x3f.org/posts/flamework/</link><pubDate>Thu, 26 Dec 2013 20:24:00 +0000</pubDate><guid>http://0x3f.org/posts/flamework/</guid><description>从今天开始，逐步实现一个PHP的MVC框架，以践行平时对这方面的一些想法。
项目信息 名称：Flamework (Flame Framework) 源码：https://github.com/xbot/flamework 框架特性 激进
用PHP高版本引入的新特性，不考虑向前兼容问题，没有历史包袱。
命名空间
PHP 5.3引入的命名空间可以有效避免类命名冲突，这样可以使类名看起来更自然，不用再在类名前面加难看的前缀了。
类的自动加载
手动include会增加维护的难度，因为经常会出现一个类被从源码中移除而它的include行还在的问题，这会拖慢程序执行速度、增加内存占用。
实现类的自动加载可以在类被引用时自动include相应的源码。
异常的自动处理
在设计程序时，一般应该把用户级的错误返回给页面显示，或者对一些HTTP错误显示个性化的页面（例如人民群众喜闻乐见的404页面），所以在业务逻辑、数据操作这些层一般应该逐级向上抛异常，然后在Controller里捕获并加工成页面可识别的格式（例如JSON）。这样做的缺点是Controller里每个Action都包含重复的try&amp;hellip;catch块。
异常的自动处理允许开发者指定自定义的异常处理逻辑，将异常处理与普通逻辑解耦，这样每个Action只需实现它所关注的功能即可。
过滤器
过滤器允许面向切面编程，是将横向逻辑与纵向逻辑解耦的重要工具。Flamework要实现针对Controller和Action两个级别的过滤器链，过滤器可在该级别逻辑前后执行，并能停止该级别逻辑及后续过滤器的执行。
懒加载
对尽可能多的资源实现懒加载，例如数据库连接、类、组件等，目的是提高效率、节约资源。
参数绑定
自动将请求中的参数与Action方法的参数绑定，从而避免在Action里出现通过$_POST、$_GET这些数组取参数的脏代码，也可以自动实现参数的校验和错误处理。
ActiveRecord
ORM是对关系模型和对象模型的阻抗不匹配问题的解决方案，ActiveRecord是目前最流行的一种ORM的实现方式。通过AR，可以以更对象化的方式操作关系数据库的数据。
依赖注入
依赖注入是个很好的解耦方法，也可以很优雅地实现懒加载。
目录 零：代码规范 一：框架入口与类的自动加载 二：错误和异常的自动处理 三：实现Controller和Filter 四：视图的模板与渲染 五：ORM与ActiveRecord 六：依赖注入 ∝：烈焰之终章</description></item><item><title>用 Dojo 实现拖放操作的最佳实践</title><link>http://0x3f.org/posts/practical-drag-and-drop-implementation-with-dojo/</link><pubDate>Tue, 05 Nov 2013 16:58:00 +0000</pubDate><guid>http://0x3f.org/posts/practical-drag-and-drop-implementation-with-dojo/</guid><description>在研究 Dojo 实现拖放操作时，我花了很多时间处理一些细节问题，比如创建自定义样式的拖拽物件以及将光标放置在拖拽开始位置等。这些细节在实现个性化的拖放操作时非常重要，但是我几乎没有找到直接相关的资料可供参考。
创建自定义样式的拖拽物件 Dojo 缺省的拖拽物件样式很丑，通过覆盖官方文档里列出的几个 CSS 的 class 可以有限地调整部分样式，如果需要更多个性化，就需要使用自定义的物件模板。
通过重载 Source 对象的 creator 方法可以实现这一点。这个方法会在创建拖拽物件的时候被调用，如果 hint 参数的值为“avatar”就表示将被创建的是被拖拽物件，此时可以使用预先定义好的模板 avatarTmpl 创建物件的 node 。
1 2 3 4 5 6 7 8 9 10 11 this.dndSrc = new Source(this.itemList.domNode, { copyOnly:true, selfAccept:true, creator: function(item, hint) { var n; if (hint == &amp;#39;avatar&amp;#39;) { n = domConstruct.toDom(lang.replace(avatarTmpl, item)); } return {node:n, data:item, type:[&amp;#39;text&amp;#39;]}; } }); 置光标位置于拖拽起始处 在拖拽开始后，Dojo 默认将光标置于被拖拽物件的左上角，而一般把光标置于拖拽开始时相对于物件的位置处显得比较自然。
实现方式是先记录拖拽开始时光标的位置，然后设置 dojo.dnd.Manager 的两个位移属性。
1 2 3 4 5 6 7 8 9 10 on(this.</description></item><item><title>IE中使用IFrame上传文件报错——TypeError:拒绝访问</title><link>http://0x3f.org/posts/typeerror-access-denied/</link><pubDate>Sat, 03 Aug 2013 01:03:00 +0000</pubDate><guid>http://0x3f.org/posts/typeerror-access-denied/</guid><description>场景为：
点击一个图标，打开文件选择对话框，选择好文件后即时上传。
之前的实现方式是在一个隐藏表单中放一个file类型的input元素，通过调用input.click()打开对话框，同时监听input.onchange，最后通过dojo/request/iframe上传文件。
这个实现方式在Chrome和Firefox里都没问题，但是在IE里报错：“TypeError:拒绝访问”。原因是IE要求必须通过点击file类型的input的按钮打开选择对话框，否则就报这个错误。
解决办法是修改input元素的样式，或者直接用dojox.form.Uploader替代。
因为这个破问题又血战到半夜，只支持IE9+的世界你们好吗，还支持IE7+的屌丝伤不起……不起……起……啊。IE不死，吾难未已！！！</description></item><item><title>Dojo DnD: Cannot read property 'type' of undefined</title><link>http://0x3f.org/posts/dojo-dnd-cannot-read-property-type-of-undefined/</link><pubDate>Thu, 11 Jul 2013 22:44:00 +0000</pubDate><guid>http://0x3f.org/posts/dojo-dnd-cannot-read-property-type-of-undefined/</guid><description>场景如下：
假设有两个Widget：ItemListWidget和ItemWidget，后者要被创建多份并追加到前者内部，同时ItemListWidget要作为dojo/dnd/Source，每个ItemWidget作为一个单元可被拖拽到另外一个dojo/dnd/Target容器中。
问题是，当Source被创建后，再添加到ItemListWidget的ItemWidget实例在被拖拽时会报如下错误：
Uncaught TypeError: Cannot read property &amp;rsquo;type&amp;rsquo; of undefined
在Chrome开发工具中点开这个错误，显示以下内容：
从方法的注释或API中可以看到，checkAcceptance()是用来判断当前拖拽对象是否在这个target接受的范围之内，接受规则用Source和Target的构造参数中的“accept”定义。在这个方法里通过Source.getItem()方法拿到的对象是null，上述错误就是从这儿报出来的。
接合API和Reference Guide发现，每个Source中的可拖拽项目在Source中都要有一个对应的对象，这个对象至少包括两个属性：“data”和“type”。在Reference Guide中，对这两个属性有详细说明，简言之，data是向Target传递的数据，type是被Target用来判断拖拽个体是否属于接受范围的依据。
当Source实例被创建时，已经存在于ItemListWidget中的ItemWidget实例会被自动创建对应的上述对象，但之后加入的不会。解决的办法是调用Source.setItem()方法为每一个新加入的ItemWidget关联相应的对象，或在ItemWidget中添加一个构造参数，用于指定Source，并在postCreate()方法中为当前ItemWidget实例关联相应的对象:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 define([ &amp;#34;dojo/_base/declare&amp;#34;, &amp;#34;dijit/_WidgetBase&amp;#34;, ], function(declare, _WidgetBase){ return declare(&amp;#34;ItemWidget&amp;#34;, [_WidgetBase], { // 本Widget实例所属的Source实例 dndSrc: null, postCreate: function() { this.inherited(arguments); // 不需要传递数据时，可忽略data参数 if (this.dndSrc !== null) this.dndSrc.setItem(this.id, {type:[&amp;#34;text&amp;#34;]}); } }); });</description></item><item><title>Take Sakura as My Primary Terminal</title><link>http://0x3f.org/posts/take-sakura-as-my-primary-terminal/</link><pubDate>Sun, 07 Jul 2013 12:07:00 +0000</pubDate><guid>http://0x3f.org/posts/take-sakura-as-my-primary-terminal/</guid><description>It&amp;rsquo;s a long time since I came across rxvt-unicode.
About seven years ago, when I switched from Windows XP to Ubuntu mainly for performance issues, I never be bored with searching for everything with a higher speed. To me, gnome-terminal is too much slow as a terminal being frequently opened and closed. Then, rxvt-unicode came through.
At first glance, rxvt-unicode was so ugly that I put it behind without the slightest bit of hesitation.</description></item><item><title>PySide: How to Get the Position of a Widget-Value-Changed Cell in QTableWidget</title><link>http://0x3f.org/posts/get-position-in-qtablewidget-for-changed-cellwidgets/</link><pubDate>Mon, 01 Jul 2013 00:57:00 +0000</pubDate><guid>http://0x3f.org/posts/get-position-in-qtablewidget-for-changed-cellwidgets/</guid><description>Assume we have created an instance of QTableWidget, in which cells are filled with widgets like QComboBox, QCheckBox, etc. When values are changed, we need to get the row and column indexes of the cells. But the QTableWidget.cellChanged() and QTableWidget.itemChanged() signals are only effective for cells containing QTableWidgetItem instances, for those in which widgets are filled in with QTableWidget.setCellWidget(), this doesn&amp;rsquo;t work.
This problem nearly made me crazy last weekend. So how can I make it ?</description></item><item><title>那些年我用过的鼠标</title><link>http://0x3f.org/posts/my-mouses-of-all-those-years/</link><pubDate>Sat, 29 Jun 2013 19:53:00 +0000</pubDate><guid>http://0x3f.org/posts/my-mouses-of-all-those-years/</guid><description>第四款，罗技M185，卖相不错，无光，一节五号电池驱动，据说很省电，握感不错，正在用。
第三款，惠普百灵，卖相不错，大小适中，左侧两个快捷按键在浏览网页时前进后退很方便。两节七号电池驱动，不太省电。先后买过两个，都是滚轮失灵，似乎这款的滚轮有问题，伤心了。
第二款，雷柏7100，形状较大，握感还可以，用一节五号电池，省电。最后按键失灵，壮烈牺牲。
第一款，Thinkpad 31P7410，先后买过两三个，比较小巧，按键易坏，不推荐。</description></item><item><title>How to Make YouCompleteMe Compatible with UltiSnips</title><link>http://0x3f.org/posts/make-youcompleteme-ultisnips-compatible/</link><pubDate>Thu, 23 May 2013 11:26:00 +0000</pubDate><guid>http://0x3f.org/posts/make-youcompleteme-ultisnips-compatible/</guid><description>I replaced NeoComplCache with YouCompleteMe today. The main reason is for the auto-complete feature and the fast speed. Besides, it seems that YCM provides more features than NCC.
Although NCC can also do auto-completions, it was so slow that I had to turn it off. For a long time, I have been doing completions by triggering the TAB key manually. YCM is much faster in most conditions, but I found it is also slow for C source files.</description></item><item><title>Vundle vs Pathogen</title><link>http://0x3f.org/posts/vundle-vs-pathogen/</link><pubDate>Wed, 22 May 2013 21:33:00 +0000</pubDate><guid>http://0x3f.org/posts/vundle-vs-pathogen/</guid><description>I have been using Pathogen for a long time and I am happy with it. But it seems that more and more Vim scripts are recommending to use Vundle in their install references. So I made a study today, the conclusion is, although almost all the articles I found from Google have a positive attitude on Vundle, I still prefer Pathogen.
Most supporters of Vundle praise it for one reason, that is, it can install and update scripts automatically, which is lacked by Pathogen.</description></item><item><title>解决ROX-Filer文件类型识别问题</title><link>http://0x3f.org/posts/fix-ms-office-mime-types-in-rox-filer/</link><pubDate>Fri, 17 May 2013 12:52:00 +0000</pubDate><guid>http://0x3f.org/posts/fix-ms-office-mime-types-in-rox-filer/</guid><description>默认情况下，ROX-Filer会将“*.docx”、“*.xlsx”、“*.pptx”文档识别为zip压缩包。由于ROX中与文件关联的行为实际上都是和文档类型挂钩的，所以对这些文档的操作会遇到很大麻烦，而且没有变通方法。
实际上，Linux对文件类型的识别比Windows灵活。Windows只能通过文件名的后缀判断文件类型，随便创建一个文本文件，然后将后缀“.txt”改成“.exe”，Win就会傻乎乎地认为这是个二进制的可执行程序。这种做法很傻，而且很不安全，试想，如果将一个病毒程序的后缀改成“.jpg”，就可以骗过大多数用户，然后通过某种手段执行它，后果会怎样？更傻的是，XP以上版本默认是隐藏后缀的，那攻击者连改后缀都可以省了。颤抖吧，神一样的Win！
Linux不但可以通过后缀识别文件类型，更重要的，还可以通过文件开头的几个字节实现这一点，这就比前一种方式精确、安全很多。当然，Linux还支持更多的文件类型识别方法。
前面说过，在ROX-Filer下，所有行为都绑定到文件类型上，也就是MIME Types，ROX通过这种方式实现了将可灵活自由定制的文件操作与自身解耦，从而在确保自身稳定的同时实现对高度灵活的自由定制的支持，这是一个很值得学习的实现方式。因此，既然文件的后缀没有问题，ROX仍将它们识别为ZIP格式，原因是什么？显然，最大的嫌疑集中在第二种识别方式上。
一个公开的秘密是，Office文档本身其实就是一个ZIP压缩包，里面包含了描述文档的XML、多媒体文件等成分，只不过MS贱贱地把压缩包的后缀改成了docx之类的东东，加上Windows只能通过后缀识别文件类型，所以很多人不知道这一点。了解了这个，问题的原因就跃然纸上了，既然都是ZIP压缩包，那第二种文件类型识别方式也就区分不出Office文件类型与ZIP压缩包了。
能号出病因，就有方子治病。
既然ROX使用多种文件类型识别方式，那必然有一个优先级的关系，否则就会乱套。打开ROX的MIME Editor：
找到MIME类型“application/zip”：
打开zip的属性对话框：
可以看到“Contents matching”这一块里，通过检查文件头部的几个字节是否为“PK\003\004”来判断，并且此项判断标准的优先级是40。下面所要做的，就是找到相应文件类型，添加一项条件相同的“Contents matching”，并把优先级设得大于40。</description></item><item><title>怎样为红帽系Linux发行版写系统服务脚本</title><link>http://0x3f.org/posts/how-to-write-service-scripts-for-redhat-distros/</link><pubDate>Tue, 19 Jun 2012 00:14:00 +0000</pubDate><guid>http://0x3f.org/posts/how-to-write-service-scripts-for-redhat-distros/</guid><description>##阅读说明
阅读本文要求有基本的Linux系统使用经验和Bash脚本编程能力。
本文所述的内容适用于RHEL、CentOS等红帽系Linux发行版。
##系统服务简介
###常用命令
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # 启动MySQL service mysqld start # 关闭MySQL service mysqld stop # 重启MySQL service mysqld restart # 查看MySQL服务运行状态 service mysqld status # 查看MySQL服务是否开机自动运行 chkconfig --list mysqld # 设置MySQL服务开机自动运行 chkconfig --level 345 mysqld on # 取消MySQL服务开机自动运行 chkconfig --level 345 mysqld off ###运行级别
泛UNIX派系操作系统使用运行级别标识使用何种模式初始化。理论上，不同的发行版各级别代表的意义不同。红帽系发行版使用以下七个运行级别：
0：关机 1：单用户模式 2：多用户模式，无网络服务 3：多用户模式，有网络服务 4：未使用/用户自定义 5：带图形界面的多用户模式 6：重启 最常用的是0、3、5、6四种模式。其中，0和6表示关闭和重启操作系统，所以，执行命令init 0和shutdown是一个效果，同样，执行命令init 6和reboot是一个效果。模式3即普通的命令行用户界面，模式5即普通的图形界面用户界面。</description></item><item><title>UltraBlog.vim: Ultimate Vim Blogging Plugin</title><link>http://0x3f.org/posts/ultrablog-as-an-ultimate-vim-blogging-plugin/</link><pubDate>Sat, 02 Apr 2011 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/ultrablog-as-an-ultimate-vim-blogging-plugin/</guid><description>Introduction UltraBlog.vim is yet another Vim blogging script for Wordpress.
The biggest difference between UB and other similar scripts is that UB is an ultimate client, which stores posts locally in an SQLite database, while others just operate remotely. In this way, many things can be done easily by the advantage of local storage and many other utilities, for example, you can search for posts stored in the database with a few keywords by typing a simple command, also you can preview drafts with any of your favorite templates as soon as you want to.</description></item><item><title>搭建自己的Twitter API</title><link>http://0x3f.org/posts/howto-setup-twitter-api-of-your-own/</link><pubDate>Fri, 01 Oct 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/howto-setup-twitter-api-of-your-own/</guid><description> 创建Twitter应用程序 从2010年9月起，twitter只支持第三方应用程序使用oauth方式登录。要使用第三方API程序，就必须先在twitter中创建应用程序。
申请地址如下：
https://twitter.com/apps/
填写信息时，Application Type应该选Browser，Default Access type应选Read &amp;amp; Write，User Twitter for login不选，其它随便。
创建成功后，该应用程序的Consumer key和Consumer secret在部署API时一般都要用到。
第三方API程序 gtap gtap使用python开发，可部署在appspot上。
部署前，先修改app.yaml，填写在appspot上创建的应用程序的ID，并使用符号#注释掉secure: always，因为GFW屏蔽了appspot的https。
然后修改main.py，填写Consumer key和Consumer secret。
最后安装App Engine SDK，使用其中的appcfg.py上传gtap文件夹：
1 appcfg.py update gtap 在浏览器中（此时应使用可以翻墙的代理）访问在appspot上创建的应用程序的URL地址（如：http://xxx.appspot.com ），在打开的页面中点击Sign in with Twitter，然后在跳转到的页面中点击Allow按钮。在跳转到的页面上修改API的密码（据说有些客户端要求API的密码与Twitter的密码一致）。
在客户端中使用API的地址如下：
http://xxx.appspot.com/ 其中，xxx是appspot应用程序的ID，末尾的斜杠必不可少。
twip twip使用php开发，应部署在支持PHP的服务器上。
首先将config-example.php改名为config.php，然后修改其中的OAUTH_KEY/OAUTH_SECRET/BASE_URL三项内容，前两项分别是Consumer key和Consumer secret，base_url应该是twip部署到服务器上后的URL地址（如http://myblog.com/twip/ ，最后的斜杠必不可少）。
然后在浏览器中访问上面的base_url，选择使用o模式，API地址会在最后的页面中输出。
补充说明 当前版本的Google App Engine SDK要求使用python 2.5，但如果只是用来上传应用程序到appspot，2.5以上版本的python也可以用，只是在上传时会报某些模块已不推荐使用。如果使用appcfg.py时报找不到2.5版本的python，可以强制使用已安装的新版本的python执行之，即：python appcfg.py update gtap</description></item><item><title>在Vim中检查语法和执行代码</title><link>http://0x3f.org/posts/syntax-checking-and-code-executing-in-vim/</link><pubDate>Sat, 17 Apr 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/syntax-checking-and-code-executing-in-vim/</guid><description>《The Pragmatic Programmer》是本好书，虽然中文译名极为恶俗。为践行书中提到的DRY原则，我开始反思平时编码时总是重复出现的问题，其中之一就是很低级的语法错误，有时忘了语句最后的分号，有时忘了声明变量，凡此种种，不一而足。
相对于IDE，我更喜欢Vim，这也是语法错误没有检查出来的原因。因此就产生了给Vim添加语法检查功能的需求。下面是检查PHP代码的vimrc内容：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 &amp;#34; Check the syntax of a PHP file function! CheckPHPSyntax() if &amp;amp;filetype != &amp;#39;php&amp;#39; echohl WarningMsg | echo &amp;#39;This is not a PHP file !&amp;#39; | echohl None return endif setlocal makeprg=php\ -l\ -n\ -d\ html_errors=off\ % setlocal errorformat=%m\ in\ %f\ on\ line\ %l echohl WarningMsg | echo &amp;#39;Syntax checking output:&amp;#39; | echohl None if &amp;amp;modified == 1 silent write endif silent make clist endfunction au filetype php map &amp;lt;F5&amp;gt; :call CheckPHPSyntax()&amp;lt;CR&amp;gt; au filetype php imap &amp;lt;F5&amp;gt; &amp;lt;ESC&amp;gt;:call CheckPHPSyntax()&amp;lt;CR&amp;gt; 以上脚本为Vim添加了一个检查PHP语法错误的函数和两个快捷键映射，此后可按F5键即时检查当前Buffer中的PHP当面的语法。和网上其它同类的函数相比，这个函数的优点在于改进了检查结果的显示，使用silent命令隐藏了所有不必要的输出。</description></item><item><title>Vim的终极自动补全插件：NeoComplCache</title><link>http://0x3f.org/posts/neocomplcache-vim/</link><pubDate>Sat, 27 Feb 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/neocomplcache-vim/</guid><description>
关于自动补全，最初用的是SuperTab，那个时候Vim的自动补全插件寥寥无几，也就SuperTab比较有名。不过实际使用过程中这个插件给我的体验不是很好，原因是补全的准确度不高。
后来出了一个新插件，AutoComplPop，功能和使用都很简单。但是很快我就又用回SuperTab，原因是AutoComplPop在输入的同时实时地查询匹配的关键词，导致输入极不流畅，效率很低。
一直就这么凑合着用着SuperTab，随着这个插件版本的更新，旧功能不断地完善，新功能也接二连三地引入，SuperTab在匹配关键词的准确度上有了一些改善，但是新的问题又出现了。SuperTab后来加入一个新功能，对于程序源文件，可以在其引入的文件以及API文件中匹配关键词。比如假设我当前正在编辑a.php，在a.php中有include 'b.php';这样的语句，当我输入array并按下Tab键时，SuperTab不但会在当前文件中查询所有匹配项，还会到b.php中查询，如果配置过vim、指定一个包含了php的API的文件，则SuperTab还会自动从这个文件中查询匹配项。按理说这个功能的理念很好，但问题就在于SuperTab做的是实时查询，如果源文件中包含的文件较多，各个文件又较大，问题就显而易见了。我不得不在写程序时小心地使用Tab键，否则有时就会出现按一下Tab键然后等着Vim在那狂搜的情况。
前两天发现了NeoComplCache，光看名字就让我有点儿兴奋，一般使用缓存的速度都很快。这个插件会在Vim打开文件的时候对上下文作一个索引，并把索引结果保存到缓存中。同时，文件更改的内容会在保存的时候被索引。此外，NeoComplCache支持多种关键词索引模式，例如它会判断当前路径下的文件或目录的名字是否匹配补全条件，也可以从缓存的程序语言API中匹配补全条件。到此为止，它就解决了SuperTab和AutoComplPop共同的效率问题，并具备它们各自的长处。看了一遍文档，发现这个插件的功能比较细致，大概有以下一些特点：
1、使用缓存，自动补全时效率高； 2、生成的关键词列表准确； 3、支持下划线分割的关键词，如apple_boy_cat，就可以只输入a_b_c，然后补全； 4、支持驼峰格式匹配关键词，如AppleBoyCat，就可以只输入ABC，然后补全； 5、既可以像AutoComplPop那样在Vim中输入的同时自动弹出补全列表，又可以自定义快捷键手动触发； 6、支持从文件名和目录名中匹配补全条件； 7、对于程序源文件，支持从语言API中匹配补全条件；
NeoComplCache的缺点是文档不全，虽然从只言片语中发现它还支持Snippet，但从文档中没有找到足够的有用信息。加之一直用SnipMate感觉不错，所以目前还是用它来实现snippet功能。
这就有个搭配问题：虽然NeoComplCache不存在补全时的效率问题，但我仍然打算只在需要补全时才用快捷键触发此功能，最主要的原因是我既希望用Tab键触发SnipMate的代码块补全功能，又希望修SuperTab那样用Tab选择补全列表中的选项。也就是要达到只用Tab键就可以完成打开自动补全列表、补全列表选项选择和SnipMate代码块替换的效果。但是，如果将Tab映射到触发自动补全，则补全列表选择和SnipMate均无法使用Tab，反之亦然。
所以我想如果能让NeoComplCache、SuperTab、SnipMate和谐共存，那问题就解决了，几经摸索，终于找到了办法：
1、设置NeoComplCache不自动弹出补全列表，即在vimrc中加入：
let g:NeoComplCache_DisableAutoComplete = 1
2、由于NeoComplCache在手工模式下使用快捷键组合&amp;lt;C-X&amp;gt;&amp;lt;C-U&amp;gt;打开补全列表，故设置SuperTab的默认补全操作为&amp;lt;C-X&amp;gt;&amp;lt;C-U&amp;gt;，即在vimrc中加入：
let g:SuperTabDefaultCompletionType = '&amp;lt;C-X&amp;gt;&amp;lt;C-U&amp;gt;'
这样，NeoComplCache只负责补全关键词缓存的生成，SuperTab控制Tab键的行为并在需要触发补全操作时打开补全列表、进而在列表中的选项间移动焦点，而当光标前的关键词是snippet时，SnipMate会被优先调用并完成代码块的替换。
就在写这篇文章的时候，我突然觉得NeoComplCache自动弹出补全列表+SnipMate的方式也挺好，只是这样就不能用Tab键选择列表中的选项了。
相关阅读： 用neocomplete换掉了YouCompleteMe How to Make YouCompleteMe Compatible with UltiSnips</description></item><item><title>立方体归来</title><link>http://0x3f.org/posts/cube-is-back/</link><pubDate>Tue, 24 Nov 2009 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/cube-is-back/</guid><description> 上次鼓捣出立方体还是几年前在学校的时候，Ubuntu+Beryl。 我那个时候的台式机，Celeron Tualatin+256M SDRAM+GForce 440，跑XP要了亲命，忍无可忍而投奔Linux，结果一不小心鼓捣出了立方体，捎带着Firefox、OpenOffice开了一大堆，屁事儿没有，我就是这么死心塌地地上了贼船，直至今天。 后来一直用Archlinux，习惯了Fluxbox和Openbox的简洁。买了X200后曾试图找寻一下旧日华丽的记忆，但却人是物非，新的X200、新的Archlinux、新的Compiz-fusion远不如当年的老牛破车那么搭调。虽说也搞出了立方体，但所有的窗口都没有边框，于是作罢。 上周六鬼使神差的进入GNOME并打开Fusion-icon，奇迹就这么出现了：</description></item><item><title>Windows下GVim的全屏</title><link>http://0x3f.org/posts/fullscreen-for-gvim-on-windows/</link><pubDate>Thu, 17 Sep 2009 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/fullscreen-for-gvim-on-windows/</guid><description>下载gvim的一个扩展“gvimfullscreen_win32”，并解压缩。 将gvimfullscreen.dll复制到gvim安装目录下，与gvim.exe同目录。 修改gvim配置文件_vimrc，在其中添加如下内容： ```vim if has('win32') map :call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0) endif ``` 此后，即可使用F11键开关gvim的全屏状态。</description></item><item><title>欧拉工程第十一解</title><link>http://0x3f.org/posts/project-euler-11/</link><pubDate>Tue, 12 May 2009 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-11/</guid><description>In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48</description></item><item><title>rxvt-unicode的真透明</title><link>http://0x3f.org/posts/true-transparent-of-rxvt-unicode/</link><pubDate>Sat, 28 Feb 2009 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/true-transparent-of-rxvt-unicode/</guid><description>nacre同学说，urxvt是可以实现真透明的。起初我以为是要用transset-df来实现，但这个东西一般需要手动操作，不具有太大的实用性，而且会把整个窗口透明化。不过后来发现真的不需要用它来画蛇添足，有xcompmgr足矣。
因为我用openbox，要实现窗口的阴影和动画效果，xcompmgr是必须的，我把它设成了开机自启动。比起xcompmgr默认的参数值，下面这条定制的命令实现了简洁的阴影和合理的渐隐渐显时间，因此提供了一个各方面都比较均衡、合理的桌面体验：
xcompmgr -Ss -n -Cc -fF -I-10 -O-10 -D1 -t-3 -l-4 -r4
然后在.Xresources中添加以下两行：
URxvt.depth:32 URxvt.background:rgba:0000/0000/0000/dddd
最后当然要执行一下：
xrdb ~/.Xresources
此后直接启动urxvt即可。
这里面最有意思的就是background项的配置，它有两种形式，一种是：
URxvt.background:[80]black
还有一种就是前面提到的形式。
第一种形式中，中括号里的数字表示半透明度对应的百分比，括号外是颜色名称；第二种形式提供了比第一种更多的色彩选择，四组数字都是十六进制数，前三组是RGB颜色值，最后一组是半透明度，数值越大，透明度越低。
在查阅“man urxvt”的时候，发现urxvt的man pages里的内容真是异常丰富，大部分功能都讲解得言简意赅。以往还抱怨这个东西在网上连个健全的文档都找不到，原来全在这儿呢，真不知道以往无数次地man的时候为什么没有注意到这些，难道man了rxvt了？
PS：这样实现urxvt的真半透明后，貌似xcompmgr实现的阴影在urxvt身上就消失了，求解中……</description></item><item><title>完美的终端模拟器：rxvt-unicode</title><link>http://0x3f.org/posts/rxvt-unicode-256color-is-perfect/</link><pubDate>Sun, 08 Feb 2009 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/rxvt-unicode-256color-is-perfect/</guid><description>urxvt（rxvt的unicode版本，支持多国语言，官方网站）。
具有以下特性：
支持真半透明 支持Unicode编码，支持多国语言 支持英文和非英文字符使用不同的字体 支持CS模式，节省系统资源 轻量，速度快 支持Perl扩展功能 但是urxvt有一个很影响情绪的缺陷，就是字符的间距过大，看起来很不舒服。不过已有补丁用来解决这个问题，例如Archlinux用户可以安装rxvt-unicode-chinese：
urxvt的配置选项可以参考其官方网站上的说明，另外这里有一份详细的配置文件。 更新日志： 2011-01-15 修改文章标题 重写文章内容 由于原来的rxvt-unicode-256color包已不存在，更换为rxvt-unicode-chinese 补充一份配置文件</description></item><item><title>欧拉工程第十解</title><link>http://0x3f.org/posts/project-euler-10/</link><pubDate>Tue, 18 Nov 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-10/</guid><description>The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
Find the sum of all the primes below two million.
题目越来越变态，开始好玩儿了。
第七解里的算法在这里算是废了，一万个素数都算得那么费劲，两百万以下的素数有十几万个，不得不用筛选法了。
普通的筛选效率也不行，当初就是因为这个原因才没用它。不过优化过的筛选法就很奇妙了，下面是Lua的实现：
```lua require('math') local limit = 2000000 local primes = {} for i=1,limit do table.insert(primes,true) end primes[0] = false primes[1] = false for i=0,math.floor(math.sqrt(limit)) do if primes[i] then for j=math.pow(i,2),limit,i do primes[j] = false end end end local sumVal = 0 for i,j in ipairs(primes) do if j then sumVal = sumVal + i end end print(sumVal) ``` 在我这里两秒半就出结果了，Python的表现也不错，四秒半出结果：</description></item><item><title>欧拉工程第九解</title><link>http://0x3f.org/posts/project-euler-9/</link><pubDate>Mon, 10 Nov 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-9/</guid><description> A Pythagorean triplet is a set of three natural numbers, a &lt; b &lt; c, for which,
a2 + b2 = c2
For example, 32 + 42 = 9 + 16 = 25 = 52.
There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product abc. 解：
```python flag = False for a in range(1,1000): for b in range(1,1000): if a ** 2 + b ** 2 == (1000 - a - b) ** 2: print a,b,(1000 - a - b) print a * b * (1000 - a - b) flag = True break if flag: break ```</description></item><item><title>欧拉工程第八解</title><link>http://0x3f.org/posts/project-euler-8/</link><pubDate>Sun, 09 Nov 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-8/</guid><description>Find the greatest product of five consecutive digits in the 1000-digit number.
73167176531330624919225119674426574742355349194934 96983520312774506326239578318016984801869478851843 85861560789112949495459501737958331952853208805511 12540698747158523863050715693290963295227443043557 66896648950445244523161731856403098711121722383113 62229893423380308135336276614282806444486645238749 30358907296290491560440772390713810515859307960866 70172427121883998797908792274921901699720888093776 65727333001053367881220235421809751254540594752243 52584907711670556013604839586446706324415722155397 53697817977846174064955149290862569321978468622482 83972241375657056057490261407972968652414535100474 82166370484403199890008895243450658541227588666881 16427171479924442928230863465674813919123162824586 17866458359124566529476545682848912883142607690042 24219022671055626321111109370544217506941658960408 07198403850962455444362981230987879927244284909188 84580156166097919133875499200524063689912560717606 05886116467109405077541002256983155200055935729725 71636269561882670428252483600823257530420752963450
穷举，解：
```python def MakeProduct(strNum): prod = 1 for char in strNum: prod = prod * int(char) return prod def GetTheFirstProduct(strNum): if len(strNum) &lt; 5: return 0,0 return MakeProduct(strNum[:5]),strNum[1:] num = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450' largestProduct = 0 while len(num) >= 5: tmp = GetTheFirstProduct(num) if tmp == (0,0): break num = tmp[1] if largestProduct &lt; tmp[0]: largestProduct = tmp[0] print largestProduct ``` 如果先找到下五个均不为零的连续整数，然后计算它们的积并以之参与比较，效率会更高：</description></item><item><title>欧拉工程第七解</title><link>http://0x3f.org/posts/project-euler-7/</link><pubDate>Fri, 31 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-7/</guid><description>第七解：
By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10001st prime number?
穷举，并加以最大程度的优化：对大于2的素数，只判断奇数；判断一个奇数是否素数时，只拿已经找到的素数中小于第这个数平方根的数来相除，如果均不能整除，就是素数。Python的实现：
```python def IsPrimeNum(num,feed): from math import sqrt tmp = feed[:] while tmp[-1] > int(sqrt(num)): tmp.pop() for i in tmp: if num % i == 0: return False return True limit = 10001 feed = [2,3,5,7] temp = 7 counter = 4 while counter &lt; limit : temp += 2 if IsPrimeNum(temp,feed): feed.</description></item><item><title>欧拉工程第六解</title><link>http://0x3f.org/posts/project-euler-6/</link><pubDate>Wed, 29 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-6/</guid><description>第六解：
The sum of the squares of the first ten natural numbers is, 12 + 22 + &amp;hellip; + 102 = 385
The square of the sum of the first ten natural numbers is, (1 + 2 + &amp;hellip; + 10)2 = 552 = 3025
Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 385 = 2640.</description></item><item><title>欧拉工程第五解</title><link>http://0x3f.org/posts/project-euler-5/</link><pubDate>Mon, 27 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-5/</guid><description>第五解：
2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder. What is the smallest number that is evenly divisible by all of the numbers from 1 to 20?
解：
```python #为简洁明了，此处不作校验 def GetGreatestCommonDivisor(min,max): '''辗转相除法求最大公约数''' while min > 0: tmp = min min = max % min max = tmp return max def GetLeastCommonMultiple(a,b): if a > b: max = a min = b else: max = b min = a div = GetGreatestCommonDivisor(min,max) return min * max / div temp = 1 for i in range(1,21): temp = GetLeastCommonMultiple(i,temp) print temp ``` 本题旨在求最小公倍数。此算法有意思的是，它的精华在于如何求解两个正整数的最大公约数，有点围魏救赵的意思。</description></item><item><title>欧拉工程第四解</title><link>http://0x3f.org/posts/project-euler-4/</link><pubDate>Wed, 22 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-4/</guid><description>第四解：
A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99. Find the largest palindrome made from the product of two 3-digit numbers.
解：
```python largestPalindrome = 0 for i in range(100,1000): for j in range(100,1000): product = i * j if int(str(product)[::-1]) == product and product > largestPalindrome: largestPalindrome = product print largestPalindrome ``` 穷举，有没有效率高的办法？</description></item><item><title>欧拉工程第三解</title><link>http://0x3f.org/posts/project-euler-3/</link><pubDate>Tue, 21 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-3/</guid><description>第三解：
The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143 ?
解：
```python feed = 600851475143 def GetFactor(feed,footmark): while footmark &lt; feed: footmark += 2 if feed % footmark == 0: print footmark GetFactor(feed / footmark,footmark) break GetFactor(feed,1) ```</description></item><item><title>欧拉工程第二解</title><link>http://0x3f.org/posts/project-euler-2/</link><pubDate>Sun, 19 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-2/</guid><description>第二解：
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, &amp;hellip; Find the sum of all the even-valued terms in the sequence which do not exceed four million.
解：
```python i = 1 j = 2 sum = 0 while j &lt; 4000000 : if j % 2 == 0 : sum = sum + j t = i i = j j = t + j print sum ```</description></item><item><title>欧拉工程第一解</title><link>http://0x3f.org/posts/project-euler-1/</link><pubDate>Mon, 06 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-1/</guid><description> “欧拉工程”是一个很有意思的网站，它每周会提供一道数学题，要求访问者使用任一种编程语言设计一个计算机程序求解。到现在为止已经出了二百一十一道题，当然，题的难度是依次递增的。几十个国家的程序员已参与了这个工程，截至目前，中国有四百多人参与，但是解决所有的二百多道题的只有一个人。 我觉得没事儿的时候做一道很有意思，下面是第一道，很简单： If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000. 最容易想到的一算法就是依次取出一到一千的整数，只要是三或五的倍数，就累加起来，最终的和就是结果： ```python sum = 0 for num in range(1,1000): if not (num % 3 != 0 and num % 5 != 0): sum += num print sum ``` 但是我觉得这个算法太普通了，从一到一千要做一千次循环，时间复杂度会比较高。所以我设想只取出三和五的倍数，然后相加就行了，所需要考虑的只是怎么处理三和五的公倍数的问题。下面是我的算法，只有三百多次循环： ```python def SumMultiple(feed,limit): threeMultiple = 3 * feed fiveMultiple = 5 * feed if threeMultiple >= limit: return None if fiveMultiple >= limit: return threeMultiple if fiveMultiple % 3 == 0: return threeMultiple return threeMultiple + fiveMultiple sum = 0 for feed in range(1,500): if SumMultiple(feed,1000) == None: break; sum += SumMultiple(feed,1000) print sum ``` 不过事与愿违，通过测试，这个算法的效率要比上一种低，我想应该是SumMultiple()函数中运算和比较次数较多导致的。 不管怎样，第一个问题已经顺利解决了：</description></item><item><title>为rxvt-unicode开启标签和链接支持</title><link>http://0x3f.org/posts/let-rxvt-unicode-support-tags-and-links/</link><pubDate>Thu, 20 Mar 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/let-rxvt-unicode-support-tags-and-links/</guid><description>写完urxvt-unicode快速上手，本以为已将urxvt的用法一网打尽，不料AndyWxy网友又找到了两个新的功能：使urxvt启用标签和在urxvt中打开网页链接。
标签功能很实用，一般为了达到复用终端窗口的目的会采用两种方式：一是配合screen使用，另一个就是启用标签。然而前者有一个缺点就是不直观，标签页恰好能弥补这个缺陷。urxvt不愧是个功能强大的终端工具，如果在编译时开启perl支持，则urxvt可启用多标签功能。用法如下：
一是在启动的时候加入命令行参数：
urxvt -pe tabbed
二是在配置文件“.Xresources”中添加如下配置信息：
URxvt.perl-ext-common: default,tabbed
则默认情况下执行urxvt就会打开多标签功能。urxvt的标签支持使用鼠标操作，同时可以使用Ctrl+Shift+左右箭头来切换标签页，使用Ctrl+Shift+向下箭头开启新标签。
另外一个功能就是可以通过在urxvt中的链接上点击鼠标左键来通过设定的浏览器打开之。首先在“.Xresources”文件中添加如下内容：
URxvt.urlLauncher: firefox URxvt.matcher.button: 1
然后使用如下命令打开urxvt：
urxvt -pe matcher
即可。也可以在配置文件中添加上述内容之后再添加一行：
URxvt.perl-ext-common: matcher
此后即默认开启在终端窗口中打开链接的功能。注意修改“.Xresources”文件后需要执行如下命令才能使修改后的配置文件生效：
xrdb ~/.Xresources</description></item><item><title>rxvt-unicode快速上手</title><link>http://0x3f.org/posts/quick-guide-for-rxvt-unicode/</link><pubDate>Fri, 07 Mar 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/quick-guide-for-rxvt-unicode/</guid><description> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rxvt是我最喜欢的虚拟终端，它有以下优点： &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;轻量：体积小，启动速度快，占用系统资源极低 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;美观：各种外观（如颜色、字体、半透明等）均可定制 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;功能强：具备一个终端工具应当有的各种实用功能 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;然而它很难被初学者接受，一是因为它的缺省外观很难看，而自身又不提供图形界面的配置工具，只能通过修改配置文件来设置，然而网上相关的资料却非常少；二是因为在rxvt中使用复制和粘贴非常“不方便”，它并不支持人们已经习惯的Ctrl+C和Ctrl+V的复制、粘贴方式，这也是网上关于rxvt问得最多的问题；最后一个门槛是它对中文等东亚文字的支持不好。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;其实rxvt以上三个所谓的门槛都是初学者对它的误解。首先rxvt的配置文件非常简单，只要学过英语的人都能看明白，通过简单的配置就可以使之变得非常漂亮，丝毫不逊色于Konsole、Gnome-terminal等主流终端。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;其次，rxvt虽然不支持Ctrl+C和Ctrl+V的复制、粘贴，但是它有自己的一套操作方式。Linux下普遍使用的图形界面均为X11，而X11支持一种独特的复制粘贴方式，即如果你在另一个程序比如文本编辑器中使用鼠标拖动来高亮一段文字后，不用进行任何操作，此时选中的内容已经复制到剪贴板中了，随后在rxvt中单击鼠标中键即可将选中内容粘贴到其中，此外，如果鼠标没有中键，可以同时按下左右键以达到同样的效果，还可以使用Shift+Insert组合键来完成粘贴；反之，从rxvt中向外复制内容同样如此。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最后，虽然rxvt对东亚文字支持不好，但是rxvt有几个修改版，其中一个就是rxvt-unicode。顾名思义，rxvt-unicode支持unicode编码，因此对东亚文字的支持完全没有问题。安装完成后，使用urxvt即可打开之。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;此外，rxvt-unicode还有一个很好的特性，它可以工作在C/S模式。使用urxvtd启动rxvt的后台程序，此后任何时候使用urxvtc即可打开一个rxvt终端，所有的rxvtc共用一个urxvtd，因此在同时运行的终端比较多的时候，在内存占用上要比全部使用urxvt少一些。不过据我粗略计算，如果打开的终端不是非常多（比如说几十个），那么使用普通模式和使用C/S模式对内存的占用没有太大的差距，因为普通模式下的urxvt占用内存本身就非常少。在我看来使用C/S模式的最大好处是启动速度比普通模式要快一些。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;关于rxvt的美化和设置，可以参看我以前写的一篇文章。下图是我现在使用的rxvt的截图： &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;以下是我当前的rxvt配置文件的内容： !Xft.dpi:96 !fontforge.FontView.FontFamily:wenquanyi bitmap song Rxvt.geometry:192×144 Rxvt.background:#2e2e2e Rxvt.foreground:antiquewhite Rxvt.colorBD:yellow Rxvt.colorUL:green Rxvt.multichar_encoding:utf-8 Rxvt.scrollBar:Fault Rxvt.scrollBar_right:True Rxvt.scrollBar_floating: True Rxvt.scrollstyle: next Rxvt.saveLines:10000 Rxvt.color0:black Rxvt.color1:red3 Rxvt.color2:springgreen Rxvt.color3:wheat3 Rxvt.color4:navy Rxvt.color5:magenta4 Rxvt.color6:steelblue1 Rxvt.color7:gray85 Rxvt.color8:gray10 Rxvt.color9:SkyBlue3 Rxvt.color10:chartreuse3 Rxvt.color11:lightgoldenrod2 Rxvt.color12:SkyBlue1 Rxvt.color13:pink1 Rxvt.color14:lightblue1 Rxvt.color15:#dbeff9 Rxvt.font:xft:Vera Sans YuanTi Mono :size=10,xft:Monospace:size=10 Rxvt.menu:/etc/X11/rxvt.menu Rxvt.preeditType:Root Rxvt.transparency:255</description></item><item><title>rxvt-unicode的半透明方案</title><link>http://0x3f.org/posts/half-transparent-for-rxvt-unicode/</link><pubDate>Tue, 16 Oct 2007 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/half-transparent-for-rxvt-unicode/</guid><description> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rxvt是个快速且节省内存的模拟终端，原版rxvt对中文等非字母语言的支持不好，所以它有许多修改版，rxvt-unicode-ml是比较适合中国人使用的rxvt修改版。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rxvt轻量但不简单，它有许多设置选项和启动参数，用户可以在命令行使用“rxvt -help”查看其常用启动参数，使用“rxvt --help”查看更为详细的启动参数。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;通过修改用户主目录下的“.Xresources”文件可以配置urxvt的行为，从而不必每次都加启动参数，我的".Xresources"文件内容如下：
Rxvt.background:white
Rxvt.foreground:black
Rxvt.colorBD:yellow
Rxvt.colorUL:green
Rxvt.multichar_encoding:gb2312
Rxvt.scrollBar:Fault
Rxvt.scrollBar_right:True
Rxvt.scrollBar_floating: True
Rxvt.scrollstyle: next
Rxvt.saveLines:10000
Rxvt.color0:black
Rxvt.color1:red3
Rxvt.color2:springgreen
Rxvt.color3:wheat3
Rxvt.color4:navy
Rxvt.color5:magenta4
Rxvt.color6:steelblue1
Rxvt.color7:gray85
Rxvt.color8:gray10
Rxvt.color9:SkyBlue3
Rxvt.color10:chartreuse3
Rxvt.color11:lightgoldenrod2
Rxvt.color12:SkyBlue1
Rxvt.color13:pink1
Rxvt.color14:lightblue1
Rxvt.color15:#dbeff9
Rxvt.font:xft:Vera Sans YuanTi Mono :size=10,xft:Monospace:size=10
Rxvt.menu:/etc/X11/rxvt.menu
Rxvt.preeditType:Root
Rxvt.geometry:192×174
Rxvt.transparency:255 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这个配置文件是白底黑字，当然可以修改为全透明或者半透明，不过，只要在启动时加入启动参数就可以实现全透明：
urxvt -tr &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;也可以实现半透明：
urxvt -fg lightgray -bg black -bc -tr -tint lightgray -sh 60 -sr</description></item><item><title>UBUNTU 6.10 Edgy Eft 入门全程导用</title><link>http://0x3f.org/posts/ubuntu-610-tutorial/</link><pubDate>Sun, 08 Apr 2007 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/ubuntu-610-tutorial/</guid><description>http://forum.ubuntu.org.cn/viewtopic.php?t=32798&amp;amp;amp;highlight=
目录 一、安装Edgy与硬盘的分区
（1）安装与分区&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;3
（2）多硬盘需要注意的一点&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;3
（3）Linux下硬盘分区的概念&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-4
二、改变账户操作理念&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-4
三、修改源并配置网络
（1）源及其使用方法&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-5
（2）配置ADSL网络&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-6
四、系统的中文化与输入法
（1）系统的中文化&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;6
（2）中文字体的美化&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-6
（3）中文输入法的安装与配置&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;8
（4）主要程序界面的汉化&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;11
（5）Abiword中文乱码的解决办法&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-11
五、多媒体播放器的安装与配置
（1）万能播放器 mplayer&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-12
（2）音频播放器 audacious 及 mp3 文件 tag 乱码的解决&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-12
（3）媒体解码库 gstreamer&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;13
六、网络工具的安装与配置
（1）Opera 的安装与配置及中文输入法问题的解决&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;13
（2）即时通讯程序&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;14
（a）集成即时通讯工具 gaim&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-14
（b）最逼真的 QQ 工具&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;15
（c）功能最强大的 QQ 工具 Eva&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;16
（d）多协议即时通讯工具 Kopete&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-16
（3）新闻阅读&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-16
（4）邮件客户端&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;17
（5）下载工具&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-17
（6）p2p 工具&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-17
七、编辑器、编译环境与词典
（1）编辑器&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;17
（2）编译环境&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-17
（3）词典&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;18
八、NVIDA 显卡驱动与 Beryl 的安装
（1）nvida 显卡驱动的安装&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;18
（2）安装 Beryl&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;20
（3）Splash Screen 的安装&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;22
九、Wine 的安装&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;22
十、虚拟机 Vmware&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;23
十一、磁盘分区的挂载
（1）挂载一个原先存在而没有挂载的分区&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;23
（2）新加入一块还没有分区的全新的硬盘&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;24</description></item></channel></rss>