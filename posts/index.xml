<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - 晴耕雨讀</title><link>http://0x3f.org/posts/</link><description>所有文章 | 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 28 Sep 2020 17:30:14 +0800</lastBuildDate><atom:link href="http://0x3f.org/posts/" rel="self" type="application/rss+xml"/><item><title>试用讯飞 A1 和 SR101 录音笔</title><link>http://0x3f.org/post/a-trial-on-iflytec-a1-and-sr101-voice-recorder/</link><pubDate>Mon, 28 Sep 2020 17:30:14 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/a-trial-on-iflytec-a1-and-sr101-voice-recorder/</guid><description><![CDATA[<p>讯飞的中文语音识别做得很好，十几年前在学校的一次讲座上就见识过讯飞的语音技术，印象深刻。录音笔结合语音识别是现在的一个趋势，把一个比较专业向的工具推向普及，做好了可以是个很有用的效率工具。我曾经跟一些产品经理讲过，如果我是他们，就买一个录音笔，无论是收集、讨论还是评审需求，都是个很好的工具，不至于丢三落四、误人误己。</p>
<p>讯飞的录音笔包含终身免费的转写服务，是个很吸引人的点。这次试用了 A1 和 SR101 两款，谈谈感受。</p>
<hr>
<h2 id="无处安放的-a1">无处安放的 A1</h2>
<p></p>
<h3 id="优点">优点</h3>
<ul>
<li>工业设计很有特点，外形模仿磁带，附带贴纸，既怀旧又酷炫，属于数码潮玩向的东西。</li>
<li>体积小巧，火柴盒大小。</li>
<li>录音效果明显好于 iPhone X。</li>
</ul>
<h3 id="特点">特点</h3>
<ul>
<li>通过蓝牙和手机传输数据，交互很流畅。</li>
</ul>
<h3 id="缺点">缺点</h3>
<ul>
<li>不支持待机，5分钟无操作自动关机，不适合做备忘。</li>
<li>录音过程中不支持做标记，所以不适合做会议记录。</li>
<li>有安全隐患，手机可以不经授权连接并读取录音笔里的数据。</li>
</ul>
<h3 id="总结">总结</h3>
<p>几乎完全不满足我的使用场景，所以无处安放。感觉如果能增加标记功能和实现一键录音就值得一用。</p>
<hr>
<h2 id="五脏具全但囿于软件的-sr101">五脏具全但囿于软件的 SR101</h2>
<p></p>
<h3 id="优点-1">优点</h3>
<ul>
<li>工业设计年轻时尚。</li>
<li>支持待机、标记、一键录音。</li>
<li>有屏幕，更方便。</li>
</ul>
<h3 id="缺点-1">缺点</h3>
<ul>
<li>通过触屏做标记，误操作的机率很大，影响效率。</li>
<li>待机状态下，一键录音有3秒左右的等待时间。</li>
<li>录音数据通过云盘和手机 APP 同步，等待时间超过 A1 很多，极其影响体验。</li>
<li>录音效果不如 A1。</li>
</ul>
<h3 id="总结-1">总结</h3>
<p>功能覆盖我的所有需求，但是体验总是离及格线差那么一点。</p>
<hr>
<p>讯飞在中文语音识别这个核心技术上的成就勿庸置疑，但是它的产品总是在体验上做得差一点。我用过的讯飞产品里，手机输入法是最接近满意分数线的，但是它的动图搜索功能真的是很反人类，交互很繁复。</p>
<p>这两款录音笔各自有独特的点、有吸引人的地方，但是最大的短板在软件的体验上，导致不太适合把它们当成效率工具。基于这个出发点，我云了几个设想：</p>
<ul>
<li>允许自动转写，目前只能逐条手工操作转写，如果录音较多，会不厌其烦。</li>
<li>做开放平台，和 IFTTT 之类的服务打通。</li>
<li>支持 iOS Shortcuts 之类的效率工具。</li>
</ul>
]]></description></item><item><title>MySQL 事务的一致性、隔离级别与幻读问题</title><link>http://0x3f.org/post/isolation-levels-and-phantom-reads-in-mysql/</link><pubDate>Tue, 21 Jul 2020 16:25:09 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/isolation-levels-and-phantom-reads-in-mysql/</guid><description><![CDATA[<h2 id="数据库事务的一致性">数据库事务的一致性</h2>
<p>数据库事务有四个特性：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability），简称“ACID”。</p>
<p>其中，“一致性”指的是数据库层面的一致性，与应用层面的一致性不同。</p>
<p>数据库层面的一致性是说，事务具备把数据库从一个正确的状态迁移到另一个正确的状态的特性。所谓正确的状态，是指任何写入数据库的数据都满足数据库既定的规则，这些规则包括各种约束、级联回滚、触发器以及任何它们的组合。</p>
<p>与数据库层面的一致性不同，应用层面的一致性要求保证结果的正确性。例如，当执行如下 SQL 语句时：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">update</span> <span class="n">accounts</span> <span class="k">set</span> <span class="n">balance</span> <span class="o">=</span> <span class="n">balance</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">where</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">3</span>
</code></pre></td></tr></table>
</div>
</div><p>我希望最终的结果是在事务开始时 id = 3 的这行数据 balance 列的值的基础上加一，否则，结果就是不正确的。</p>
<p>因此，只要写入的数据满足数据库的规则，就保证了数据库层面的一致性。<strong>数据库层面的一致性并不保证数据正确</strong><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>。</p>
<h2 id="mysql-事务的隔离级别与幻读问题">MySQL 事务的隔离级别与幻读问题</h2>
<h3 id="隔离级别">隔离级别</h3>
<p>隔离性是指：多个事务并发执行时，每个事务对数据库所做的更改必须与其它事务隔离。</p>
<p>隔离性是并发控制的主要目标<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>，并发控制用来实现在保证应用层面一致性的前提下，尽可能快地对并发请求做出响应。由此可见，隔离性和并发能力是一对此消彼长的关系。极端情况下，如果并发的请求按顺序执行，隔离性是最好的，但是响应最慢，反之亦然。</p>
<p>在此基础上，产生了四个隔离级别的划分。由低到高依次为：读未提交、读已提交、可重复读、序列化。据前所述，它们的并发能力是依次下降的。</p>
<p>因此，<strong>隔离级别的本质是通过适度地破坏隔离性来提高并发能力。</strong></p>
<h3 id="隔离级别的问题">隔离级别的问题</h3>
<p>隔离级别不同，存在的问题也不一样。</p>
<p>“读未提交”的级别最低、并发能力最高，存在的问题也最多，包括：脏读、不可重复读、幻读。其中，脏读是这个级别独有的，即事务 A 读取了并发事务 B 未提交的数据。</p>
<p>“读已提交”顾名思义，事务 A 不会读取并发事务 B 未提交的数据，但可以读取其已提交的。因此，这个级别存在不可重复读和幻读的问题。</p>
<p>在“可重复读”级别下，同一事务中两次同样的查询结果一致，不会受并发事务的影响，它因此也解决了不可重复读的问题。但还会存在幻读问题。</p>
<p>“序列化”级别要求对查询的对象加范围锁并保持到事务结束，因此，它避免了幻读的问题。</p>
<h3 id="幻读问题phantom-reads">幻读问题（Phantom Reads）</h3>
<p>幻读问题是个很 tricky 的问题，以至于网上找到的很多文章对它的理解都是不全面甚至是错误的。</p>
<p>幻读即同一事务中两次相同查询的结果集不一致。乍一看，好像和不可重复读是一样的。那它们的区别是什么呢？</p>
<p>事实上，幻读是不可重复读的一种特殊情况。换句话说，<strong>只要存在幻行（Phantom Rows），就是幻读问题</strong>。</p>
<p>所谓幻行，即同一事务中两次相同的查询结果集的非空差集里的元素，或者说第二次查询后发现不存在于前一次结果集中的行。</p>
<p>幻行产生的原因主要是除“序列化”之外的隔离级别不要求对查询结果加范围锁，导致并发事务在查询范围内插入新的行后被当前事务查到。</p>
<h4 id="mvcc">MVCC</h4>
<p>在此基础上，MySQL 的 InnoDB 引擎实现了“多版本并发控制”（MVCC: Multiversion Concurrency Control）。</p>
<p>简单地说，InnoDB 的表存在两个隐藏列，用于记录每行数据的版本信息。当插入一行数据时，InnoDB 将当前事务的版本信息一并写入。当修改一行数据时，InnoDB 先将该行做一次复制，并把当前版本信息写入进去。查询时，只返回版本小于等于当前事务版本的数据。通过这样保证一个事务中查询到的是事务开始前已经存在的数据或当前事务写入的数据。其它事务写入的数据则不会被读取。</p>
<p>从这个意义上讲，InnoDB 通过 MVCC 解决了这种幻读问题。</p>
<h4 id="next-key-lock">Next-Key Lock</h4>
<p>上述普通的 SELECT 查询属于 InnoDB 读操作的一种：快照读。此外，还存在一种“当前读”。快照读顾名思义读取的是快照中的内容，而当前读读取的是当前最新的数据。INSERT、DELETE、UPDATE、SELECT &hellip; FOR UPDATE 都是当前读。</p>
<p>因此，还存在一种特殊情况：</p>
<p><figure><a class="lightgallery" href="https://www.plantuml.com/plantuml/svg/dP91Inj15CVlyoaUUbWZQzaau26WQ9iA7Wf5Ul4uoRx4mTsPC3jRzIP5gTQqKL4KyQ8WtX8F8j7aspIp9gT-XRx482nuybtUpEFFx__Ucrc83DSc3WF6edKXQrpp4FoQWBpdCMQ42H3iuuDj7FMU3kolgwHnR7Tlx66zrzxkjJk3a-RpnKvoUfVyRjfMj__pdgxsiTDlTGPdpS7rEGkmYj9dGF52W6-RMUYr_r3EZT79_ct_glwlMnS-sBspv7BVdhJ8uFd-sdPF_sx_O8I0COdnib5wI64-Dxp48uJYnzTgZWInKJ8EIwWP6vhDpCoJeW0bh0h9XhRfIaeKOO1b0zDGqIg4E48TmSOQQWHgRWxoJ2g3e4LrpO2gZ8QPzBnFdulP0dYWrKO4GXB5i9IJa4Gob8mQGwU4xmAleWkIXvY1xpo8aSfvbtRlWkChAT39f2Xb5OR2Z9QPQlhzz3UcMLfQf2Z0LDQRpRamKOnhWIXpqg4qUWkSl0CLslKwqddazk7holANnPLLPoB3s08z4lsd_m00" title="并发事务插入同一主键的数据导致的幻读问题" data-thumbnail="https://www.plantuml.com/plantuml/svg/dP91Inj15CVlyoaUUbWZQzaau26WQ9iA7Wf5Ul4uoRx4mTsPC3jRzIP5gTQqKL4KyQ8WtX8F8j7aspIp9gT-XRx482nuybtUpEFFx__Ucrc83DSc3WF6edKXQrpp4FoQWBpdCMQ42H3iuuDj7FMU3kolgwHnR7Tlx66zrzxkjJk3a-RpnKvoUfVyRjfMj__pdgxsiTDlTGPdpS7rEGkmYj9dGF52W6-RMUYr_r3EZT79_ct_glwlMnS-sBspv7BVdhJ8uFd-sdPF_sx_O8I0COdnib5wI64-Dxp48uJYnzTgZWInKJ8EIwWP6vhDpCoJeW0bh0h9XhRfIaeKOO1b0zDGqIg4E48TmSOQQWHgRWxoJ2g3e4LrpO2gZ8QPzBnFdulP0dYWrKO4GXB5i9IJa4Gob8mQGwU4xmAleWkIXvY1xpo8aSfvbtRlWkChAT39f2Xb5OR2Z9QPQlhzz3UcMLfQf2Z0LDQRpRamKOnhWIXpqg4qUWkSl0CLslKwqddazk7holANnPLLPoB3s08z4lsd_m00" data-sub-html="<h2>并发事务插入同一主键的数据导致的幻读问题</h2><p>并发事务插入同一主键的数据导致的幻读问题</p>">
        
    </a><figcaption class="image-caption">并发事务插入同一主键的数据导致的幻读问题</figcaption>
    </figure></p>
<p>以及另一种特殊情况：</p>
<p><figure><a class="lightgallery" href="https://www.plantuml.com/plantuml/svg/pPBFJjj04CRl-nGZzP2c2fAJ2Acg14A5la5VO1DFaXNsRcIleOSUeWh4Vo8G0LIWKY9Lt0Y7g8AIjsdM9AU-GcTj2_2XTtpvTdTcV_jz8o-5cWSwyZt6mbKXsppWFhXj0LN7OKmBxI745wFuzDRS_pBTeydlFRFRZxl7PlFdu_UDk7SR7zoOuNYwDQAjkN-O3XzcPpUpmJdpi8dIPK1VUWi-Vod3vEwGj08fBjwvdlRt_uxtUHF1R9_5bpkpgn_cP3YvwpoE1cRS-zFvnWW36OtnkbQ19J6NQrxZ8SBAnwVJ2ZL4Mid8hs70c7rmRcwHEZv03Pj2Cljq_YJN5AA7TGtle14e7w8GWn3MMnWW29VwzJgYXB83d1ozTvXK6Y4GpPO6rKZYlN6SvKyhvIJrLtl9YWrdLN8_MMJLIYhpJggkaW9jrSQrP9PpAoIvqIHQPSRU2hTasQK4N8GrxaL8nzKICKjGI825OevILxulT68W5pngqpWn0uUeKwyBKD3ABsGZi34M2Frg9aRUu4Mr-f_gypoNQ4d_-Zy0" title="更新并发事务插入的数据导致的幻读问题" data-thumbnail="https://www.plantuml.com/plantuml/svg/pPBFJjj04CRl-nGZzP2c2fAJ2Acg14A5la5VO1DFaXNsRcIleOSUeWh4Vo8G0LIWKY9Lt0Y7g8AIjsdM9AU-GcTj2_2XTtpvTdTcV_jz8o-5cWSwyZt6mbKXsppWFhXj0LN7OKmBxI745wFuzDRS_pBTeydlFRFRZxl7PlFdu_UDk7SR7zoOuNYwDQAjkN-O3XzcPpUpmJdpi8dIPK1VUWi-Vod3vEwGj08fBjwvdlRt_uxtUHF1R9_5bpkpgn_cP3YvwpoE1cRS-zFvnWW36OtnkbQ19J6NQrxZ8SBAnwVJ2ZL4Mid8hs70c7rmRcwHEZv03Pj2Cljq_YJN5AA7TGtle14e7w8GWn3MMnWW29VwzJgYXB83d1ozTvXK6Y4GpPO6rKZYlN6SvKyhvIJrLtl9YWrdLN8_MMJLIYhpJggkaW9jrSQrP9PpAoIvqIHQPSRU2hTasQK4N8GrxaL8nzKICKjGI825OevILxulT68W5pngqpWn0uUeKwyBKD3ABsGZi34M2Frg9aRUu4Mr-f_gypoNQ4d_-Zy0" data-sub-html="<h2>更新并发事务插入的数据导致的幻读问题</h2><p>更新并发事务插入的数据导致的幻读问题</p>">
        
    </a><figcaption class="image-caption">更新并发事务插入的数据导致的幻读问题</figcaption>
    </figure></p>
<p>以上两种情况都是在有当前读操作时可能发生的幻读问题。这是 MVCC 无法解决的。</p>
<p>InnoDB 用 Next-Key Lock 解决这种幻读问题。</p>
<p>Next-Key Lock 实际上是记录锁（Record Lock）和间隙锁（Gap Lock）的结合。加锁规则如下：</p>
<ol>
<li>Next-Key Lock 的格式是左开右闭。例如：( 5, 9 ] 表示间隙 ( 5, 9 ) 的间隙锁和 9 的行锁。</li>
<li>对查询条件范围的“行和间隙”（如果存在）加锁。</li>
<li>对于等值查询：
<ol>
<li>对于唯一索引，Next-Key Lock 退化为行锁。</li>
<li>向右遍历至查询条件范围内最后一个值右侧节点时，若该节点不满足等值条件，Next-Key Lock 退化为间隙锁。</li>
</ol>
</li>
</ol>
<p>例如，users 表结构如下：</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>类型</th>
<th>索引</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>bigint</td>
<td>唯一</td>
</tr>
<tr>
<td>age</td>
<td>smallint</td>
<td>不唯一</td>
</tr>
</tbody>
</table>
<p>表中的数据：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>age</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>10</td>
</tr>
<tr>
<td>5</td>
<td>50</td>
</tr>
<tr>
<td>11</td>
<td>30</td>
</tr>
</tbody>
</table>
<p>对于上述第一种问题，事务 A 中通过任何一种当前读操作 id = 3 的行（例如 INSERT），都会自动给这个索引值加记录锁。此时，事务 B 中再插入 id = 3 的数据时就会被阻塞。从而避免了这种幻读问题。</p>
<p>对于第二种问题，事务 A 中对 age = 30 的数据加排他锁：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">30</span> <span class="k">for</span> <span class="k">update</span>
</code></pre></td></tr></table>
</div>
</div><p>数据库会加 ( (10, 1), (30, 11) ] 和 ( (30, 11), (50, 5) ] 两个 Next-Key Lock 。注意，由于 InnoDB 使用 B+ 树存储索引，且对于辅助索引， B+ 树叶子节点存储的是索引值和主键值，所以这里间隙用 <code>( ( 头节点索引值, 头节点主键值 ), ( 尾节点索引值, 尾节点主键值 ) )</code> 表示。而且，由于 (30, 11) 右侧间隙的尾结点 (50, 5) 不满足等值条件，所以这个 Next-Key Lock 退化为间隙锁 ( (30, 11), (50, 5) ) 。</p>
<p>此时，事务 B 更新 age = 30 的数据时将会被阻塞。也就避免了这种幻读问题。</p>
<h4 id="总结">总结</h4>
<p>InnoDB 通过 MVCC 解决了普通查询中的幻读问题，通过 Next-Key Lock 解决了当前读导致的幻读问题。</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://en.wikipedia.org/wiki/Consistency_(database_systems)">https://en.wikipedia.org/wiki/Consistency_(database_systems)</a> <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="https://en.wikipedia.org/wiki/ACID#Isolation">https://en.wikipedia.org/wiki/ACID#Isolation</a> <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></description></item><item><title>MacBook Pro 维修记</title><link>http://0x3f.org/post/story-of-repairing-macbook-pro/</link><pubDate>Fri, 26 Jun 2020 23:29:24 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/story-of-repairing-macbook-pro/</guid><description><![CDATA[<p></p>
<p>生平第一次修电脑。</p>
<p>17款的 MacBook Pro 13`，该有的问题全有——键盘随机连击或无反应、在桌面上放不平且触控板反馈很弱、疑似电池鼓包。</p>
<p>用过 ThinkPad X200 和 X220，虽然屏幕很渣，但从来没出过问题。上一台电脑是 15 款的 MacBook Air，用了三年，也没事儿。只能说这届苹果不行。</p>
<p>APP 上预约的三里屯店，时间下午两点多。太古里门口和店门口分别出示了一次健康码。虽然是工作日、而且在疫情期间，店里人不多也不少，还是等了一会儿。</p>
<p>常规的询问和联机检查，大概花了十几分钟，没有要求提供任何凭证。店员说因为键盘和电池都在一起，所以是要一块换的。时间上快则一天，慢则两三天，就能修好。</p>
<p>第二天晚上九点半，接到一个陌生座机号码打来的电话，以为是营销电话，而且之前看过有说换键盘用了一周时间的帖子，所以没往这上面想，就没接。</p>
<p>第三天晚上看手机电池健康状态的时候，偶然看到电脑的维修状态是已完成，才意识到，回电话过去果然是三里屯苹果商店，但是没人接。</p>
<p>今天早上九点多，再次打过去，说是十点才营业。于是决定直接过去。</p>
<p>交接需要出示身份证，花了几分钟验机，很快结束。期间问店员如果之后键盘再坏了怎么办，说是有一年保修期，而且因为批次不同的原因，换过的键盘不容易再出问题。暗笑，换个批次就能解决的话，新款何至于换回剪刀脚？！</p>
<p>回家后用了一会儿，新键盘和触控板体验很棒，没有打油的阻尼感沁人心脾，发了条 tweet 说：找回了初恋的感觉。</p>
]]></description></item><item><title>从 Hexo 到 Hugo</title><link>http://0x3f.org/post/migrate-from-hexo-to-hugo/</link><pubDate>Fri, 19 Jun 2020 17:41:52 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/migrate-from-hexo-to-hugo/</guid><description><![CDATA[<p>一切源于我这个颜党的喜新厌旧。</p>
<p>总想找到一个极简而不失现代感的主题，在这个过程中，发现越来越多比较贴近我口味的主题都是适配 Hugo 的。趁最近有时间，就换了过来。</p>
<hr>
<h2 id="创建一个空站点">创建一个空站点</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 安装 hugo</span>
brew install hugo

<span class="c1"># 创建空站点</span>
hugo new site Blog

<span class="c1"># 安装 LoveIt 主题</span>
<span class="nb">cd</span> Blog
git init
git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt
cp -f themes/LoveIt/exampleSite/config.toml .

<span class="c1"># 配置 config.toml</span>

<span class="c1"># 在本机预览效果</span>
hugo server -D
</code></pre></td></tr></table>
</div>
</div><h2 id="写一篇新文章">写一篇新文章</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">hugo new posts/test.md
</code></pre></td></tr></table>
</div>
</div><p>Hugo 需要自己指定文章的相对路径和文件名，这一点不如 Hexo 自动化程度高。</p>
<h2 id="迁移文章">迁移文章</h2>
<blockquote>
<p>注意：以下命令和脚本仅适用于本博客，不加判断地使用可能会修改不需要变动的内容。</p>
</blockquote>
<h3 id="统一文章后缀">统一文章后缀</h3>
<p>历史原因，用过的文件后缀不止一种，这次把<code>.mkd</code>和<code>.markdown</code>统一成<code>.md</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">rename -s .mkd .md -s .markdown .md *
</code></pre></td></tr></table>
</div>
</div><h3 id="删除不兼容的-front-matter">删除不兼容的 Front Matter</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">gsed -i <span class="s1">&#39;/^type:\s*post/d&#39;</span> *
</code></pre></td></tr></table>
</div>
</div><h3 id="修改不规范的-front-matter">修改不规范的 Front Matter</h3>
<p>我用单分类、多标签的方式管理文章，所以以前都是把分类名直接写在<code>categories:</code>后面了，Hugo 要求必须使用连接符前缀另起一行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">perl -pi -e <span class="s1">&#39;s/(?&lt;=^categories:)/\n-/g&#39;</span> *
</code></pre></td></tr></table>
</div>
</div><p>也是因为历史的原因，有的文章没有日期时间，有的格式也不统一。Hugo 对日期时间的格式要求比较严格。这里把所有没有秒的时间后补全。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">perl -pi -e <span class="s1">&#39;s/(?&lt;=^date:\s\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}$)/:00/g&#39;</span> *
</code></pre></td></tr></table>
</div>
</div><h3 id="替换文章摘要标签">替换文章摘要标签</h3>
<p>Hugo 不允许“more”两侧有空格：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">gsed -ri <span class="s1">&#39;s/!-- more --/!--more--/g&#39;</span> *
</code></pre></td></tr></table>
</div>
</div><h3 id="补充和转换复杂内容">补充和转换复杂内容</h3>
<p>此外还有诸如日期时间缺失、转换 Octopress 标签到 Markdown 格式等问题，另外为了保持 Permalink 不变，准备每篇文章都补充一个Front Matter <code>slug</code>。所以写了一个 PHP 脚本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">#!/usr/bin/env php
<span class="cp">&lt;?php</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">file_put_contents</span><span class="p">(</span><span class="s1">&#39;php://stderr&#39;</span><span class="p">,</span> <span class="s2">&#34;需输入一个合法的文件路径</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">);</span>
    <span class="k">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$argc</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">handle_file</span><span class="p">(</span><span class="nv">$argv</span><span class="p">[</span><span class="nv">$i</span><span class="p">]);</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">handle_file</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$content</span> <span class="o">=</span> <span class="nx">file_get_contents</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">);</span>
    <span class="nv">$lines</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nv">$content</span><span class="p">);</span>

    <span class="nv">$isDateMissing</span> <span class="o">=</span> <span class="k">empty</span><span class="p">(</span><span class="nx">preg_grep</span><span class="p">(</span><span class="s1">&#39;/^date:\s*/&#39;</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$isDateMissing</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">append_date</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nv">$isSlugMissing</span> <span class="o">=</span> <span class="k">empty</span><span class="p">(</span><span class="nx">preg_grep</span><span class="p">(</span><span class="s1">&#39;/^slug:\s/&#39;</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$isSlugMissing</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">append_slug</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">convert_hexo_tags</span><span class="p">(</span><span class="nv">$lines</span><span class="p">);</span>

    <span class="nx">file_put_contents</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">,</span> <span class="nx">implode</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">));</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">append_date</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$lines</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// 获取文件名中的日期
</span><span class="c1"></span>    <span class="nv">$arr</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/\d{4}-\d{2}-\d{2}/&#39;</span><span class="p">,</span> <span class="nx">basename</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">),</span> <span class="nv">$arr</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$arr</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">file_put_contents</span><span class="p">(</span><span class="s1">&#39;php://stderr&#39;</span><span class="p">,</span> <span class="s2">&#34;未能从文件名中找到日期</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">);</span>
        <span class="k">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$lines</span> <span class="k">as</span> <span class="nv">$idx</span> <span class="o">=&gt;</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">strpos</span><span class="p">(</span><span class="nv">$line</span><span class="p">,</span> <span class="s1">&#39;title:&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$lines</span> <span class="o">=</span> <span class="nx">array_merge</span><span class="p">(</span>
                <span class="nx">array_slice</span><span class="p">(</span><span class="nv">$lines</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">$idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
                <span class="p">[</span><span class="s2">&#34;date: </span><span class="si">{</span>$arr[0]<span class="si">}</span><span class="s2"> 00:00:00&#34;</span><span class="p">],</span>
                <span class="nx">array_slice</span><span class="p">(</span><span class="nv">$lines</span><span class="p">,</span> <span class="nv">$idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">append_slug</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$lines</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/(?&lt;=\d{4}-\d{2}-\d{2}-).*(?=\.)/&#39;</span><span class="p">,</span> <span class="nx">basename</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">),</span> <span class="nv">$matches</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">file_put_contents</span><span class="p">(</span><span class="s1">&#39;php://stderr&#39;</span><span class="p">,</span> <span class="s2">&#34;未能从文件名中找到slug</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">);</span>
        <span class="k">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$lines</span> <span class="k">as</span> <span class="nv">$idx</span> <span class="o">=&gt;</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">strpos</span><span class="p">(</span><span class="nv">$line</span><span class="p">,</span> <span class="s1">&#39;title:&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$lines</span> <span class="o">=</span> <span class="nx">array_merge</span><span class="p">(</span>
                <span class="nx">array_slice</span><span class="p">(</span><span class="nv">$lines</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">$idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
                <span class="p">[</span><span class="s2">&#34;slug: &#34;</span> <span class="o">.</span> <span class="nx">str_replace</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">[</span><span class="mi">0</span><span class="p">])],</span>
                <span class="nx">array_slice</span><span class="p">(</span><span class="nv">$lines</span><span class="p">,</span> <span class="nv">$idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">convert_hexo_tags</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$lines</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$lines</span> <span class="k">as</span> <span class="nv">$idx</span> <span class="o">=&gt;</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/(?&lt;={%\simg\s).*(?=\s\d+\s%})/&#39;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">)</span>
            <span class="o">||</span> <span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/(?&lt;={%\simg\s).*(?=\s%})/&#39;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">)</span>
        <span class="p">)</span> <span class="p">{</span>
            <span class="nv">$lines</span><span class="p">[</span><span class="nv">$idx</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;![](</span><span class="si">{</span>$matches[0]<span class="si">}</span><span class="s2">)&#34;</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/(?&lt;={%\scodeblock\slang:).*(?=\s[a-zA-Z0-9.]+\s%})/&#39;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">)</span>
            <span class="o">||</span> <span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/(?&lt;={%\scodeblock\slang:).*(?=\s%})/&#39;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">)</span>
            <span class="o">||</span> <span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/(?&lt;={%\scodeblock).*(?=\s%})/&#39;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">)</span>
        <span class="p">)</span> <span class="p">{</span>
            <span class="nv">$lines</span><span class="p">[</span><span class="nv">$idx</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;```</span><span class="si">{</span>$matches[0]<span class="si">}</span><span class="s2">&#34;</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/{%\sendcodeblock\s%}/&#39;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$lines</span><span class="p">[</span><span class="nv">$idx</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;```&#34;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">ls content/posts <span class="p">|</span> sed <span class="s2">&#34;s:^:`pwd`/content/posts/:&#34;</span> <span class="p">|</span> xargs ./convert.php
</code></pre></td></tr></table>
</div>
</div><h2 id="实现全文检索">实现全文检索</h2>
<p>默认的 Lunr 方式开箱即用，但速度较慢，而且中文分词做得不好。所以使用 <a href="https://www.algolia.com/" target="_blank" rel="noopener noreffer">Algolia</a> 实现。</p>
<p>注册账号并选用免费方案后，在“API Keys”页面复制“Application ID”、“Search-Only API Key”和“Admin API Key”。</p>
<p>在项目根目录下创建 <code>.env</code> 文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ini" data-lang="ini"><span class="na">ALGOLIA_APP_ID</span><span class="o">=</span><span class="s">XXXXXX</span>
<span class="na">ALGOLIA_ADMIN_KEY</span><span class="o">=</span><span class="s">XXXXXX</span>
<span class="na">ALGOLIA_INDEX_NAME</span><span class="o">=</span><span class="s">0x3f.org</span>
<span class="na">ALGOLIA_INDEX_FILE</span><span class="o">=</span><span class="s">public/index.json</span>
</code></pre></td></tr></table>
</div>
</div><p><code>APP_ID</code> 和 <code>ADMIN_KEY</code> 是前面复制的三项中的值，<code>INDEX_NAME</code> 是 Algolia 上的索引名称，随便起一个就行。<code>INDEX_FILE</code> 是生成站点时自动生成的索引文件的路径，一般不需要修改。</p>
<p>安装自动提交索引到 Algolia 的脚本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">npm install atomic-algolia -g
</code></pre></td></tr></table>
</div>
</div><p>执行提交：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">atomic-algolia
</code></pre></td></tr></table>
</div>
</div><p>因为我所用的主题是支持 Algolia 的，所以把 “Application ID”、“Search-Only Key”和索引名称填到配置文件中对应的项后就可以使用搜索了。</p>
<h2 id="添加评论功能">添加评论功能</h2>
<p>用了很多年 Disqus ，这次打算换用 Github Issues ，选择了 <a href="https://utteranc.es/" target="_blank" rel="noopener noreffer">Utterances</a> 。</p>
<p>主题原生支持，注册账号后简单配置即可。</p>
<h2 id="favicon">Favicon</h2>
<p>原来简单粗暴地用了唯一在的图标文件，这次改用 <a href="https://realfavicongenerator.net/" target="_blank" rel="noopener noreffer">Favicon Generator</a> 生成一套对多平台浏览器优化的图标。</p>
<p>把全套文件放到 <code>static/</code> 目录下即可。</p>
<h2 id="部署到-github-pages">部署到 Github Pages</h2>
<p>Github Pages 支持多种站点生成方式，由于 Hexo 默认使用 master 分支管理生成的静态资源，而站点源码存放在 source 分支，所以我打算沿用这个方案，在继续使用 master 分支存放静态资源的同时，新增一个 hugo 分支，管理源码。</p>
<h3 id="手动部署">手动部署</h3>
<p>Hugo 会将生成的静态资源存放在项目根目录下的<code>public</code>目录中，所以需要将 master 分支检出到该目录：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">git worktree add -B master public origin/master
</code></pre></td></tr></table>
</div>
</div><p>生成站点并部署：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">hugo
<span class="nb">cd</span> public <span class="o">&amp;&amp;</span> git add —all
git commit
git push -f origin master
</code></pre></td></tr></table>
</div>
</div><p>很快就能看到新网站了。</p>
<h3 id="自动部署">自动部署</h3>
<p>Hugo 并没有提供 Hexo 那样的自动部署命令，所以要么把上述手动部署的命令写成脚本，要么使用自动部署工具，恰好 Github Actions 可以很好地实现。</p>
<p>创建 <code>.github/workflows/main.yml</code> 文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="k">name</span><span class="p">:</span><span class="w"> </span>github<span class="w"> </span>pages<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- hugo<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">deploy</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">runs-on</span><span class="p">:</span><span class="w"> </span>ubuntu<span class="m">-18.04</span><span class="w">
</span><span class="w">    </span><span class="k">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="k">uses</span><span class="p">:</span><span class="w"> </span>actions/checkout@v2<span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  </span><span class="c"># Fetch Hugo themes (true OR recursive)</span><span class="w">
</span><span class="w">          </span><span class="k">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">    </span><span class="c"># Fetch all history for .GitInfo and .Lastmod</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Setup<span class="w"> </span>Hugo<span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>peaceiris/actions-hugo@v2<span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="c">#   hugo-version: &#39;0.71.1&#39;</span><span class="w">
</span><span class="w">          </span><span class="k">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;latest&#39;</span><span class="w">
</span><span class="w">          </span><span class="c"># extended: true</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Build<span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>hugo<span class="w"> </span>--minify<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Deploy<span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>peaceiris/actions-gh-pages@v3<span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">github_token</span><span class="p">:</span><span class="w"> </span>${{<span class="w"> </span>secrets.GITHUB_TOKEN<span class="w"> </span>}}<span class="w">
</span><span class="w">          </span><span class="k">publish_dir</span><span class="p">:</span><span class="w"> </span>./public<span class="w">
</span><span class="w">          </span><span class="k">publish_branch</span><span class="p">:</span><span class="w"> </span>master<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Update<span class="w"> </span>Algolia<span class="w"> </span>Index<span class="w">
</span><span class="w">        </span><span class="k">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">ALGOLIA_APP_ID</span><span class="p">:</span><span class="w"> </span>XXXXXX<span class="w">
</span><span class="w">          </span><span class="k">ALGOLIA_ADMIN_KEY</span><span class="p">:</span><span class="w"> </span>${{<span class="w"> </span>secrets.ALGOLIA_ADMIN_KEY<span class="w"> </span>}}<span class="w">
</span><span class="w">          </span><span class="k">ALGOLIA_INDEX_NAME</span><span class="p">:</span><span class="w"> </span><span class="m">0x3f</span>.org<span class="w">
</span><span class="w">          </span><span class="k">ALGOLIA_INDEX_FILE</span><span class="p">:</span><span class="w"> </span>public/index.json<span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span><span class="sd">|
</span><span class="sd">          sudo apt-get -yqq install npm</span><span class="w">
</span><span class="w">          </span>sudo<span class="w"> </span>npm<span class="w"> </span>install<span class="w"> </span>atomic-algolia<span class="w"> </span>-g<span class="w">
</span><span class="w">          </span>atomic-algolia<span class="w">
</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>注意替换 <code>ALGOLIA_APP_ID</code> 的真实值，并把 Algolia 的“Admin API Key”添加到 Github 项目设置中的“Secrets”里，名称为“ALGOLIA_ADMIN_KEY”。</p>
<p>以后再在 hugo 分支推送新的提交时，Github Actions 就会自动执行部署操作。</p>
<hr>
<p>从06年在中国博客网上开始写文章，到后来换到个人搭建并售卖的 Wordpress，五年颠沛流离的博客生涯终于在12年结束并<a href="/post/migrate-blog-to-octopress/" rel="">定居到 Github 上</a>，之后 Octopress 一用就又是五年。17年，因为 Octopress 转换速度太慢，<a href="/post/migrate-octopress-to-hexo/" rel="">换成了 Hexo</a>。</p>
<p>我想，这次折腾之后，应该能再安分五年吧。</p>]]></description></item><item><title>用 SSH 命令调试 Git 的连接问题</title><link>http://0x3f.org/post/debug-git-connection-with-ssh/</link><pubDate>Sat, 28 Mar 2020 23:17:45 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/debug-git-connection-with-ssh/</guid><description><![CDATA[<p>昨天执行<code>git pull</code>的时候发现会一直卡在那儿，排除了各种可能，而且 Github 上的项目也是可以正常拉取的，说明跟网络、代理等关系应该不大，git 命令本身也工作正常。</p>
<p>问题集中在公司的项目上，所有项目都无法拉取代码。起先怀疑是公司自建的 Gitlab 出了问题，但是其他人那里又是正常的，甚至跟我同一局域网的电脑上也是正常的。</p>
<p>也就是说问题应该出在我自己的电脑上。考虑到前两天还能正常使用，之后唯一一件相关的事就是升级 macOS 到 10.15.4 了。</p>
<p>然而用 Homebrew 重新安装 git 等相关的几个包也没能解决问题，于是用<code>ssh -T -v git@gitlab.xxx.com -p 8848</code>调试，输出如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">donie@Donies  ~  ssh -T -v git@gitlab.xxx.com -p 8848
OpenSSH_8.1p1, LibreSSL 2.7.3
debug1: Reading configuration data /Users/donie/.ssh/config
debug1: /Users/donie/.ssh/config line 9: Applying options for gitlab.xxx.com
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: /etc/ssh/ssh_config line 47: Applying options for *
debug1: Connecting to gitlab.xxx.com port 8848.
</code></pre></td></tr></table>
</div>
</div><p>卡在了“Connecting to gitlab.xxx.com port 8848”这一步，但是<code>telnet gitlab.xxx.com 8848</code>却是通的。</p>
<p>问题陷入僵局。</p>
<p>Google的过程中偶然注意到别人正常的调试信息中这一步的输出是有 IP 地址的，如下所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">debug1: Connecting to gitlab.xxx.com [xxx.xxx.xxx.xxx] port 8848.
</code></pre></td></tr></table>
</div>
</div><p>首先怀疑应该是主机名映射出了问题，但是无论是修改 Hosts 还是在 ~/.ssh/config 中指定都还是不行，ping 主机名也能正常解析出 IP 地址。</p>
<p>问题陷入绝境。</p>
<p>绝望之际，突然想到会不会是 SSH 自身出了问题呢？<code>which ssh</code>发现是系统自带的，所以装上 Homebrew 的版本试了一下，竟然好了！</p>
<p>bugOS !!!</p>
]]></description></item><item><title>改变 Vim 模式时自动切换输入法的方法</title><link>http://0x3f.org/post/auto-switch-input-method-while-changing-vim-mode/</link><pubDate>Wed, 19 Feb 2020 21:48:15 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/auto-switch-input-method-while-changing-vim-mode/</guid><description><![CDATA[<p>VS Code的Vim插件有个很贴心的功能，可以在切换到普通模式时自动切换到英文输入法，而当切换回插入模式时再换到此前的输入法。</p>
<p>设置的方法很简单。先安装<a href="https://github.com/daipeihust/im-select" target="_blank" rel="noopener noreffer">im-select</a>，然后配置如下（macOS）：</p>
<p></p>
<p>当然，在Vim里也可以利用im-select实现这个功能。</p>
]]></description></item><item><title>在 VS Code 中快速创建 PHPUnit 测试类的方法</title><link>http://0x3f.org/post/quickly-create-phpunit-test-cases-with-vscode/</link><pubDate>Tue, 18 Feb 2020 22:49:45 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/quickly-create-phpunit-test-cases-with-vscode/</guid><description><![CDATA[<p>通过单元测试解决问题或者调试代码，可以避开错综复杂的依赖关系、直击问题的核心，从而极大地节约时间、提高效率。</p>
<p>但是，当创建测试类成为一个经常发生的操作时，每次都手动创建类、引入基类、添加测试方法就显得很烦琐。我需要这样一个解决方案，让我可以立即开始着手写测试代码。</p>
<h2 id="方案一文件模板">方案一：文件模板</h2>
<p>通过VS Code的插件<a href="https://marketplace.visualstudio.com/items?itemName=yongwoo.template" target="_blank" rel="noopener noreffer">Template</a>，可以实现把事先准备好的一个测试类文件模板复制到工程目录下。</p>
<p>安装完后，第一次执行<code>Template: Create New</code>命令会在当前工程根目录下创建文件“template.config.js”和目录“.templates”。</p>
<p>在“.templates”中创建测试类模板文件，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>

<span class="k">namespace</span> <span class="nx">Tests</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Tests\TransactionalTestCase</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">AnyTest</span> <span class="k">extends</span> <span class="nx">TransactionalTestCase</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">testAnything</span><span class="p">()</span>
    <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>下次再执行Template的命令或者侧边栏文件管理器中的右键菜单项时，就可以选择该模板了。</p>
<p>Template有个很大的短板，目前的版本还不支持全局模板，每个工程下都维护一套模板还是很烦琐的。</p>
<h2 id="方案二代码片断">方案二：代码片断</h2>
<p>代码片断（以下统称Snippet）可能是VS Code做得最烂的一个功能，我曾无数次泪流满面地回想起有Vim和UltiSnips相伴的美好时光。</p>
<p>解决方案是这样的：</p>
<p>先通过插件<a href="https://marketplace.visualstudio.com/items?itemName=sleistner.vscode-fileutils" target="_blank" rel="noopener noreffer">File Utils</a>的<code>File: New File Relative to Project Root</code>命令在工程目录下创建一个空白文件（如AnyTest.php）。然后再通过Snippet快速插入测试类的脚手架代码。</p>
<p>这里有一个问题，VS Code的PHP Snippet只有在<code>&lt;?php</code>标签之内才能生效，所以如果创建一个针对PHP语言的Snippet，在上面创建的这个空白文件里是无法触发的。</p>
<p>VS Code的Snippet总体上分为工程和通用两类，所谓工程类（Project Snippet Scope），就是只对当前工程生效，存储在工程根目录下的“.vscode”目录中。通用类（Language Snippet Scope）是我们平时最常用的，对所有工程都会生效。它又分为语言和全局两种。语言类（Language Snippet File）是针对具体的语言定义的Snippet集合，文件名为语言名称，后缀是“.json”，如“php.json”。全局类（Global Snippet File）通常是不受限于语言的，当然也可以指定单个Snippet对哪些语言启用，文件名随意，后缀是“.code-snippets”。</p>
<p>因此，测试类脚手架代码的Snippet不能定义在“php.json”中，而应放在“global.code-snippets”里：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-JSON" data-lang="JSON"><span class="s2">&#34;PHPUnit：新测试类&#34;</span><span class="err">:</span> <span class="p">{</span>
    <span class="nt">&#34;prefix&#34;</span><span class="p">:</span> <span class="s2">&#34;newcase&#34;</span><span class="p">,</span>
    <span class="nt">&#34;body&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&#34;&lt;?php&#34;</span><span class="p">,</span>
        <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="s2">&#34;namespace Tests${1:\\\\${2:SubNameSpace}};&#34;</span><span class="p">,</span>
        <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="s2">&#34;use Tests\\\\${3|TransactionalTestCase,TestCase|};&#34;</span><span class="p">,</span>
        <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="s2">&#34;class ${TM_FILENAME_BASE} extends $3&#34;</span><span class="p">,</span>
        <span class="s2">&#34;{&#34;</span><span class="p">,</span>
        <span class="s2">&#34;    $0&#34;</span><span class="p">,</span>
        <span class="s2">&#34;}&#34;</span>
    <span class="p">],</span>
    <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;PHPUnit：新测试类&#34;</span><span class="p">,</span>
    <span class="nt">&#34;scope&#34;</span><span class="p">:</span> <span class="s2">&#34;html,php&#34;</span><span class="p">,</span>
<span class="p">}</span><span class="err">,</span>
</code></pre></td></tr></table>
</div>
</div><p>这里通过选项“scope”设定只对“html”和“php”两种语言生效，注意如果只设定“php”也是只能在<code>&lt;?php</code>标签内才能生效的。</p>]]></description></item><item><title>用Github当图床</title><link>http://0x3f.org/post/take-github-as-image-hosting-service/</link><pubDate>Thu, 06 Feb 2020 22:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/take-github-as-image-hosting-service/</guid><description><![CDATA[<p>微博图床的域名不知道什么时候改了，Google找不到相关信息，经过排查发现原域名中的“ws”改成了“wx”，浪费了不少时间。</p>
<p>于是打算换图床。</p>
<p>Github自从去年扩大免费账户享受的权利后，单个仓库的大小没有硬性限制，很适合做图床。</p>
<p>uPic是个很好用的图床辅助工具，支持Github。</p>
<p></p>
<p>同类工具还有PicGo。</p>]]></description></item><item><title>关于Lumen的Facade不支持引用传递的看法</title><link>http://0x3f.org/post/lumen-facade-doesnot-support-pass-by-reference-param/</link><pubDate>Tue, 04 Feb 2020 17:40:34 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/lumen-facade-doesnot-support-pass-by-reference-param/</guid><description><![CDATA[<p>今天遇到一个奇怪的问题，一次调用带引用传递形参的方法后，该形参对应的变量值没有按预期改变。</p>
<p>先后排除了方法声明、调用和被调方法内部逻辑的问题，唯一的可能应该是框架自身的某些因素导致的。由于该行代码的作者是通过Facade调用Service中的这个方法，所以怀疑问题可能出在Facade上。于是改用从容器中获取Service实例的方式，发现变量值是可以改变的，也进一步验证了这个猜测。</p>
<p>通过单步调试，发现<code>Illuminate\Support\Facades\Facade::__callStatic()</code>直接把所有参数的值作为一个一维数组传递给被调方法，导致被调方法中的引用传递参数在方法执行后没有被改变。</p>
<p>我个人的观点是，应该尽量避免使用引用传递、全局变量这种东西，所有方法和函数应该按标准的IO模型封装，甚至在Controller的方法中都不应该直接echo &amp; die，而是应该将结果返回并由框架处理对调用方的输出行为。</p>
<p>保持实现方式的简单统一，从长期看可以较好地降低开发和维护成本。大道至简。</p>]]></description></item><item><title>用C4-PlantUML画软件架构图</title><link>http://0x3f.org/post/design-software-architecture-with-c4-plantuml/</link><pubDate>Fri, 17 Jan 2020 17:29:24 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/design-software-architecture-with-c4-plantuml/</guid><description><![CDATA[<p><a href="https://c4model.com" target="_blank" rel="noopener noreffer">C4 Model</a>是一种简洁有序的架构模型，四个“C”分别表示“Context”、“Container”、“Component”和“Code”，是由上而下逐步细化的四个层级。</p>
<p>Contex即上下文，它表示我们正在构架的软件系统和用户、其它系统之间的关系。例如：</p>
<p><figure><a class="lightgallery" href="https://www.plantuml.com/plantuml/svg/0/TLHBRzim3BxxLt2vD0NIP8UTTceUnbeiZo8F53qPYaB7GcJ9a-IcmR3_FigE4xjrSeh8Z-H7ygCVhMF6vQaClWd5PRx3t4X8dClipy70i6D_BroIRtEBXclbKBa-r-bWAJWpEpqNcA4SZ7yyl4Yct6Os7QJCEZHaYiOU_-7wcKz_1xcYm9GIW4iGOYsbFWgr1oaK0bCxQBY5iVHF0nK6gJcJyaGvAfBmENrmDns-BJRhQBruYIQBr_d5C5n5gz_XUln4uMVJw_FwAPg6lyBv90YSS19XTIBMAKo9X-KiGzW9jZSi9Pu6Hc8F8wOEa4aU12zeh5PTdbkdKpGzw9GM9WkGRsbyzdN8EOGA2JekUjiIgWT7cYjaLQIt0UDSvyhPVkS-24BgpcH6M8n6PDqnS-hoxvImpgPp3ty3e5_9lxij2KIsU1BusMTHw2xKIc11p2_0NjXPF-rtWKSGYffEcHDQ0TlglDY8C4sElM9bAJiWPEpazrRIlfA9mW_NPSwp6AvdjohwCUn8Py2PJNo6JmbI9kIrdV31ly5UcbZJF4NH8mrn9hZHLiSEmW-UCBL7m7f06q5ogvWMZPHiLlrlcTRAQOCMI8VL6ZaPu3pmbfbTkkpLPkOCKvPn3wCNEdwXL6gee5H5HdHpxu9xPfMWO5MQOELO77VgdZCOhFSKOnNg8hTgiBKgMyOFaOxZii28Nh0eNjVSmrqgbB14kkoB5cxpBDF6tQxoBmYMAACvYdsorQPs9b-qkR5eASB3bpLSAPdNiovi8Gpw353e6Uovrl1DXQoGBlYyTYymFz_F5Le6FBG72tzojCLgV9mN5qhC4gsmIZBvSc2tYpSeByj3g8kjqNrBsZRWf4KRDw2Rve9RKC6KdIXZGQnPl-chIjuNnatp8g_EH-gTliJ_0G00" title="System Landscape diagram for Big Bank plc" data-thumbnail="https://www.plantuml.com/plantuml/svg/0/TLHBRzim3BxxLt2vD0NIP8UTTceUnbeiZo8F53qPYaB7GcJ9a-IcmR3_FigE4xjrSeh8Z-H7ygCVhMF6vQaClWd5PRx3t4X8dClipy70i6D_BroIRtEBXclbKBa-r-bWAJWpEpqNcA4SZ7yyl4Yct6Os7QJCEZHaYiOU_-7wcKz_1xcYm9GIW4iGOYsbFWgr1oaK0bCxQBY5iVHF0nK6gJcJyaGvAfBmENrmDns-BJRhQBruYIQBr_d5C5n5gz_XUln4uMVJw_FwAPg6lyBv90YSS19XTIBMAKo9X-KiGzW9jZSi9Pu6Hc8F8wOEa4aU12zeh5PTdbkdKpGzw9GM9WkGRsbyzdN8EOGA2JekUjiIgWT7cYjaLQIt0UDSvyhPVkS-24BgpcH6M8n6PDqnS-hoxvImpgPp3ty3e5_9lxij2KIsU1BusMTHw2xKIc11p2_0NjXPF-rtWKSGYffEcHDQ0TlglDY8C4sElM9bAJiWPEpazrRIlfA9mW_NPSwp6AvdjohwCUn8Py2PJNo6JmbI9kIrdV31ly5UcbZJF4NH8mrn9hZHLiSEmW-UCBL7m7f06q5ogvWMZPHiLlrlcTRAQOCMI8VL6ZaPu3pmbfbTkkpLPkOCKvPn3wCNEdwXL6gee5H5HdHpxu9xPfMWO5MQOELO77VgdZCOhFSKOnNg8hTgiBKgMyOFaOxZii28Nh0eNjVSmrqgbB14kkoB5cxpBDF6tQxoBmYMAACvYdsorQPs9b-qkR5eASB3bpLSAPdNiovi8Gpw353e6Uovrl1DXQoGBlYyTYymFz_F5Le6FBG72tzojCLgV9mN5qhC4gsmIZBvSc2tYpSeByj3g8kjqNrBsZRWf4KRDw2Rve9RKC6KdIXZGQnPl-chIjuNnatp8g_EH-gTliJ_0G00" data-sub-html="<h2>System Landscape diagram for Big Bank plc</h2><p>System Landscape diagram for Big Bank plc</p>">
        
    </a><figcaption class="image-caption">System Landscape diagram for Big Bank plc</figcaption>
    </figure></p>
<p>容器（Container）把关注点放在被架构的系统本身，显示组成系统的容器（例如：APP、Web端、API、微服务、数据库等）及彼此之间的关系。例如：</p>
<p><figure><a class="lightgallery" href="https://www.plantuml.com/plantuml/svg/0/bLN1Zjf84BtxAsh98KJo35ffJtiA0sXdae7nZfcTv6ILsmMqqkwskjiG5Es_RxMn0KEKP3dPHTMhrwzUjTyxZzRNfOf-argekg3QAjXuNxa_HoEBkzkrz9iwhnrPORGdxM-5AKVFKg0jp49IHMeq-UCcKQZzo_nnLABpP3cKJJWVfIPxMuK6Rw7MN5eo1FWDmSeePNPIhq5n4g0keFUtj8wV371hK4QWKdl6w6Z2TOFeSVpvwMMPBP-IRFhqkeZUje5ncgKVPyl9FTUteTU7vNtsEFjhjfX6aPTUCM271eN4jSMI6Lfuu3DRJHxkK7y9PDCzdw-CeeIiCteeQkTDIJQ6oV5fC8Ok36RLd2RdwXXsh2LKJI6g9WOeXAcrTuDtKNI0pkuuKA3T3yNlZ7L9OF0ElaN0loFVuOxo3AkAaryfXt5LAPwEbqOFEFG1jnX3Mjb0VlxF9CIcfEIMQJJKs05U2cYdsymXX8zzy-xWoPX9zZkxYh47AV-jw2R1DONkNTTKM5dv6CPwNIkq8PnOivK5EU1fVh_BYaqIgAEIVX_6B-f6I0TRYQ54Mk3pGcxDZZrvnQWqkLJKoZ5lNZfEapSnVC8IMOa-5pPWAJqLuEhSCPTsPh_2pLsHEn20WhPIq2MzQJuiq6EEZi8OsiV09ltx4NhltbZc5lOEBAsbynQvDKZDhYoRwSQmuUG2i6PN2Ki5Zq-YSd4m5Jd7MxFc5_BYzagc7CKNqWNh98DVauVlssPgECsUwdgw_KIV80a3S-j_ZzQUVVL3Ab6gp3K1XflTpFczNQk0lsJfPGFDEpANmXfdLXvcNyK6DJliKCcmPvWjWnCgO-eLxp1TxEsPjC62xQG51uwdE5COC3UrFuqvFgvh33mFxR0vxqdaw9dKsPLmMimNHoxqlbykavGJ-tc7DVfnJi_OJUgXNROWkTxavkmQEC1rIzuYDS7-sBk6wFPQnF0XVLgCpfkVj_nVbTaTPv-8dIpVHtacB1oih2cRMsTdUGdvJZ81kGMUtaswSmRCCpqkR9Goh0Ew2T46uqJamd5z3lswseKRzjW-dI-J5kXuc5xvbUywOKBzg5Nd4tyLEt7USob_g_u3" title="Container diagram for Internet Banking System" data-thumbnail="https://www.plantuml.com/plantuml/svg/0/bLN1Zjf84BtxAsh98KJo35ffJtiA0sXdae7nZfcTv6ILsmMqqkwskjiG5Es_RxMn0KEKP3dPHTMhrwzUjTyxZzRNfOf-argekg3QAjXuNxa_HoEBkzkrz9iwhnrPORGdxM-5AKVFKg0jp49IHMeq-UCcKQZzo_nnLABpP3cKJJWVfIPxMuK6Rw7MN5eo1FWDmSeePNPIhq5n4g0keFUtj8wV371hK4QWKdl6w6Z2TOFeSVpvwMMPBP-IRFhqkeZUje5ncgKVPyl9FTUteTU7vNtsEFjhjfX6aPTUCM271eN4jSMI6Lfuu3DRJHxkK7y9PDCzdw-CeeIiCteeQkTDIJQ6oV5fC8Ok36RLd2RdwXXsh2LKJI6g9WOeXAcrTuDtKNI0pkuuKA3T3yNlZ7L9OF0ElaN0loFVuOxo3AkAaryfXt5LAPwEbqOFEFG1jnX3Mjb0VlxF9CIcfEIMQJJKs05U2cYdsymXX8zzy-xWoPX9zZkxYh47AV-jw2R1DONkNTTKM5dv6CPwNIkq8PnOivK5EU1fVh_BYaqIgAEIVX_6B-f6I0TRYQ54Mk3pGcxDZZrvnQWqkLJKoZ5lNZfEapSnVC8IMOa-5pPWAJqLuEhSCPTsPh_2pLsHEn20WhPIq2MzQJuiq6EEZi8OsiV09ltx4NhltbZc5lOEBAsbynQvDKZDhYoRwSQmuUG2i6PN2Ki5Zq-YSd4m5Jd7MxFc5_BYzagc7CKNqWNh98DVauVlssPgECsUwdgw_KIV80a3S-j_ZzQUVVL3Ab6gp3K1XflTpFczNQk0lsJfPGFDEpANmXfdLXvcNyK6DJliKCcmPvWjWnCgO-eLxp1TxEsPjC62xQG51uwdE5COC3UrFuqvFgvh33mFxR0vxqdaw9dKsPLmMimNHoxqlbykavGJ-tc7DVfnJi_OJUgXNROWkTxavkmQEC1rIzuYDS7-sBk6wFPQnF0XVLgCpfkVj_nVbTaTPv-8dIpVHtacB1oih2cRMsTdUGdvJZ81kGMUtaswSmRCCpqkR9Goh0Ew2T46uqJamd5z3lswseKRzjW-dI-J5kXuc5xvbUywOKBzg5Nd4tyLEt7USob_g_u3" data-sub-html="<h2>Container diagram for Internet Banking System</h2><p>Container diagram for Internet Banking System</p>">
        
    </a><figcaption class="image-caption">Container diagram for Internet Banking System</figcaption>
    </figure></p>
<p>组件（Component）把一个容器放大，拆分成不同的抽象逻辑，这一层级已经涉及代码层面的内容。例如：</p>
<p><figure><a class="lightgallery" href="https://www.plantuml.com/plantuml/svg/0/fLLDRnen4BtlhvXoQ45AmgMddaf8sYJA1mBIZnEQzGwBMt-iR2yKLVtl7Nk1NPAeYjHSuXsFPzwyzsm--e0kr5fbRwGHgYweTWfM8LJ-mt3eS7DMoh2gyzgJ4zO4Ck5CM3sSIe6kiFUIAbB3yVlJYK8J7kzkXnfz8CUXnTZgoffueeeDta5j-AZc08GLmT8gPJVIbA2a8K1JmD6sT9vN5hWrA2jGgItNsCE4vmsosz7tXyVvuklr_6fnU_dvylwYFyYo88FYz7qk519BXvhxExZcYPoX0ETeVaOeiosZrt0AeyarZAfAyPn1MfDbOvuU6QZh-mfFe3VZTAuxmPAwYJtU-e5hzCB9AgIfq9IrGXTt9iwkPK4UU9eqfTm3o7S0banIh8DAXcqSNzG-M4tEmrfYF2CTR2Y7tDaDYtBM6tIWwOZipkPI9L2nvJVKwAGvxiwKQnce05_ddhlRy1zeTDDlzw-WjHHq1EiYxnSvzx_0W3bwYbYcfB2f3FimpCIADCRTMR2ESKRNWQDI-k1IDYDasNHQdy0A_Ofdm9fncB0J08IZ8dwYyYU0Gf3tx9-IFoY8YAlHU77vA_HrxYDXZ7B9bg0dDkWWYNhPPI99SE10K0SFO6xhq3AKcjlQ15unVECnKTdYQ0bQd7DUWMxRnqfoqoVcwmtWTmRyTp1ntylI91EMXaqCiPBZ-qJ9PNTVnZ0blZs7S8oEudLhEFLHobY2ySVbYzhxXeF1ayxjKBtHRWcpMhF9jg-2SJ1XQwKDFp7iISzLB5TfU6PZHIG74fy1yIHgnxQCDEoMxMwIhd9nZdF2O_SVczf58xAB4YEcR4Gz0R72vgD2xpVM5Qrknp3OGaiKMD0_Z0IVKiOBe4RG70QcgD517seS2v4S4rlppTd9ts7WqTEUeRZVYjI5zoIfFPvkvvImWBUmuH0n6n7TpSNvk7EWKwkvEAbWV6FutR-QpoSpJlwJPQbuV2HtBjsdtSmUxWzvXwIEeLvCJ9dw5TNqAufz95FmRyLV" title="Component diagram for Internet Banking System - API Application" data-thumbnail="https://www.plantuml.com/plantuml/svg/0/fLLDRnen4BtlhvXoQ45AmgMddaf8sYJA1mBIZnEQzGwBMt-iR2yKLVtl7Nk1NPAeYjHSuXsFPzwyzsm--e0kr5fbRwGHgYweTWfM8LJ-mt3eS7DMoh2gyzgJ4zO4Ck5CM3sSIe6kiFUIAbB3yVlJYK8J7kzkXnfz8CUXnTZgoffueeeDta5j-AZc08GLmT8gPJVIbA2a8K1JmD6sT9vN5hWrA2jGgItNsCE4vmsosz7tXyVvuklr_6fnU_dvylwYFyYo88FYz7qk519BXvhxExZcYPoX0ETeVaOeiosZrt0AeyarZAfAyPn1MfDbOvuU6QZh-mfFe3VZTAuxmPAwYJtU-e5hzCB9AgIfq9IrGXTt9iwkPK4UU9eqfTm3o7S0banIh8DAXcqSNzG-M4tEmrfYF2CTR2Y7tDaDYtBM6tIWwOZipkPI9L2nvJVKwAGvxiwKQnce05_ddhlRy1zeTDDlzw-WjHHq1EiYxnSvzx_0W3bwYbYcfB2f3FimpCIADCRTMR2ESKRNWQDI-k1IDYDasNHQdy0A_Ofdm9fncB0J08IZ8dwYyYU0Gf3tx9-IFoY8YAlHU77vA_HrxYDXZ7B9bg0dDkWWYNhPPI99SE10K0SFO6xhq3AKcjlQ15unVECnKTdYQ0bQd7DUWMxRnqfoqoVcwmtWTmRyTp1ntylI91EMXaqCiPBZ-qJ9PNTVnZ0blZs7S8oEudLhEFLHobY2ySVbYzhxXeF1ayxjKBtHRWcpMhF9jg-2SJ1XQwKDFp7iISzLB5TfU6PZHIG74fy1yIHgnxQCDEoMxMwIhd9nZdF2O_SVczf58xAB4YEcR4Gz0R72vgD2xpVM5Qrknp3OGaiKMD0_Z0IVKiOBe4RG70QcgD517seS2v4S4rlppTd9ts7WqTEUeRZVYjI5zoIfFPvkvvImWBUmuH0n6n7TpSNvk7EWKwkvEAbWV6FutR-QpoSpJlwJPQbuV2HtBjsdtSmUxWzvXwIEeLvCJ9dw5TNqAufz95FmRyLV" data-sub-html="<h2>Component diagram for Internet Banking System - API Application</h2><p>Component diagram for Internet Banking System - API Application</p>">
        
    </a><figcaption class="image-caption">Component diagram for Internet Banking System - API Application</figcaption>
    </figure></p>
<p>而抽象逻辑内部代码之间的关系由Code这一层展示。</p>
<p><a href="https://github.com/RicardoNiepel/C4-PlantUML" target="_blank" rel="noopener noreffer">C4-PlantUML</a>是为PlantUML封装的一套模板，用来画C4架构图既美观又方便。下面是我画的样子：</p>
<p><figure><a class="lightgallery" href="https://www.plantuml.com/plantuml/svg/0/jLXVJzjM57_Ff_3oKYAnvcLFUse7Q7Ib445GDMcIPHmRh3fsP3ljq5I9m4ef8v0MwDgDjGqjRRKL1rG68H7amyptElaMkzVNyP_43cPXUOXkxZs_txddt7FEFJStL8rHj7nMZCM-42HMp6SuQaxJSkhNoQJ2FBW-AsXp-PcyoYciB6cSf5rdvMnoKc0P9IEF2roE4vD3NtsP4Xb9cxupbimogiOfQ8eUGlAC877AzHoclqRb9GJD8WfAc-CeNXP5-O4WpL8Y4g8OAKFvbWL5HIEPGgefKMOPKPn77CuUknN4ncv-Fp6TfjCJANfuukuuahPdRaxHKxT7qaEZ0mbtykwjz2WzDlBjoFWmcevfWYPob57x03OBIQFs3hxOJ3QFTi5g6VvTCAg_uS6hO_ZgvrWinIcgB0ta53cJPpKwoqZCBASCsc2plc6MbXDjAJQlQdAMKsX6LGNaQqaRf82-2tUAtI8E4nPOEUbWObXMpak4WUoilKIF_AWvB6sqRp73gSAiX1UR-dbJBuFg2h9v11seabC4bQE_GTGPHfaVU20hzsOuYPqRfEBWPCyusm4R1_44zLECGf-fUNIwMLUwxGEMmrG8GdnWLFT1Oyb1uOzpM0CvbkOLAvOoMCUJelbN9Ov6tp7t6PLLX1ooxwQa3LjRZZiYhVAf-RiUJmGppZ3iFPkmj6uJfaPJWzHO7eLKt9c7wtjWusqGo_0Cviam6ZF3g5o7AN3x01PrKDl4JAqNZTRZDQFsr9qbV0zZWKvYbIn23KtU2N48MhzgZs3AAt499lBu11dHbojuGM8abdFZXGHoptZXhpnU-2kA5zuNBrvJeZhfON0Iec97eufxNs0v5M_bN4Vr0f67vg57k4FIRxajHzjvwqIv3UfsmigoULZ_Pw4mbPh6txUd0ntQfaMb6Nl2h3NCezqmJh9gwcLKt13d3n8ehS7zFVFJ9wFw13u_TMAifoevbvFHlIK9sZpUv_OotAc5Mc6jzglHBR1nKc53rP7gRQdhpOXc5COw1b1QmPiAOxHM-tQPaY4vf--2udQOBhAAj83z4Xdt9BKpsed_C5guLJ7gBu1UXc-gY1nk7SDFvwtDusPv3HJBZcbmesIk7pXYnjdBrkuVw0Q61qVeP-ljEbp_q7C_agm9F0u9nDHQVXRgqOsdhOM2-NhVQ9HxycdCB2PxyzZSFm-DQ6ltHCQi7u7QUso9zTCPW6The7BQF2o3Hv-RXItqRNwkzowMCkg355yTU7GCzAM01BUH-APNLHbB5hVDnLFpPHsSUO_FAsVRXpixRCBMHpUYUmAuB2E8kAejwaRzs8Umwjcr__n1lHdPXd7MG0E04lfbfH--IKxixjByxKTJRxH-rV4XZgRJgIba20O5DMqTj_G5G4TT99YtjUFPoyb7Kj2P7PvQHdA0P4k7j7tK7c7xq8E4szHkgnc1sYFSGTrV77bxjpuZY9xqTwo-PhDPEO67YrOtCZKndiGkjmtrOKXIskdO8UpgS6ZzVQYh8psKIjxoA700NdxufjpwSoraIowYgn7eQKeNpYuRyFLUix9hPoqwwaAboxo-pX5TRFqVdpz3_ArnkDL-L8GJz15tzCqXP-Y3H3j4FyJVTy7D8dglaVugCjRVI14AqZ15L-yM21jlTK3HyMuVPEEjVYUw2NPZGy1sqn8L73cIGndS728aTl6v78cdZ-ePabr0f-7njJHHqUtRd8193RxQ5FO-Y_hFPT_jo4ShnVmbIx6NbezIYlbBbsAUxIiBWk1E4bWnI9A0n21SUMuqTBXrIYRDrMEuK8XAUwdq23JBKnmi4b8SBaSI9Jk2S96J8mZy_-S6g2w1muK-EKxUeuT5wwo4_zfavkdXNlSy_lyJhgvwdpFeOU9zkS6jSx1oW5-MjJNqDeiHogvIvtaU9IwI8OTmeLWxK2uKj8F1jWMyUzvQ-cY_NwpDmvq5e_eBUXPt45bFkNR7cGXQTBVWEDEV1xxGI3X2dHK6uM-WSJuh_Wi0" title="产品 交易 财务流业务架构" data-thumbnail="https://www.plantuml.com/plantuml/svg/0/jLXVJzjM57_Ff_3oKYAnvcLFUse7Q7Ib445GDMcIPHmRh3fsP3ljq5I9m4ef8v0MwDgDjGqjRRKL1rG68H7amyptElaMkzVNyP_43cPXUOXkxZs_txddt7FEFJStL8rHj7nMZCM-42HMp6SuQaxJSkhNoQJ2FBW-AsXp-PcyoYciB6cSf5rdvMnoKc0P9IEF2roE4vD3NtsP4Xb9cxupbimogiOfQ8eUGlAC877AzHoclqRb9GJD8WfAc-CeNXP5-O4WpL8Y4g8OAKFvbWL5HIEPGgefKMOPKPn77CuUknN4ncv-Fp6TfjCJANfuukuuahPdRaxHKxT7qaEZ0mbtykwjz2WzDlBjoFWmcevfWYPob57x03OBIQFs3hxOJ3QFTi5g6VvTCAg_uS6hO_ZgvrWinIcgB0ta53cJPpKwoqZCBASCsc2plc6MbXDjAJQlQdAMKsX6LGNaQqaRf82-2tUAtI8E4nPOEUbWObXMpak4WUoilKIF_AWvB6sqRp73gSAiX1UR-dbJBuFg2h9v11seabC4bQE_GTGPHfaVU20hzsOuYPqRfEBWPCyusm4R1_44zLECGf-fUNIwMLUwxGEMmrG8GdnWLFT1Oyb1uOzpM0CvbkOLAvOoMCUJelbN9Ov6tp7t6PLLX1ooxwQa3LjRZZiYhVAf-RiUJmGppZ3iFPkmj6uJfaPJWzHO7eLKt9c7wtjWusqGo_0Cviam6ZF3g5o7AN3x01PrKDl4JAqNZTRZDQFsr9qbV0zZWKvYbIn23KtU2N48MhzgZs3AAt499lBu11dHbojuGM8abdFZXGHoptZXhpnU-2kA5zuNBrvJeZhfON0Iec97eufxNs0v5M_bN4Vr0f67vg57k4FIRxajHzjvwqIv3UfsmigoULZ_Pw4mbPh6txUd0ntQfaMb6Nl2h3NCezqmJh9gwcLKt13d3n8ehS7zFVFJ9wFw13u_TMAifoevbvFHlIK9sZpUv_OotAc5Mc6jzglHBR1nKc53rP7gRQdhpOXc5COw1b1QmPiAOxHM-tQPaY4vf--2udQOBhAAj83z4Xdt9BKpsed_C5guLJ7gBu1UXc-gY1nk7SDFvwtDusPv3HJBZcbmesIk7pXYnjdBrkuVw0Q61qVeP-ljEbp_q7C_agm9F0u9nDHQVXRgqOsdhOM2-NhVQ9HxycdCB2PxyzZSFm-DQ6ltHCQi7u7QUso9zTCPW6The7BQF2o3Hv-RXItqRNwkzowMCkg355yTU7GCzAM01BUH-APNLHbB5hVDnLFpPHsSUO_FAsVRXpixRCBMHpUYUmAuB2E8kAejwaRzs8Umwjcr__n1lHdPXd7MG0E04lfbfH--IKxixjByxKTJRxH-rV4XZgRJgIba20O5DMqTj_G5G4TT99YtjUFPoyb7Kj2P7PvQHdA0P4k7j7tK7c7xq8E4szHkgnc1sYFSGTrV77bxjpuZY9xqTwo-PhDPEO67YrOtCZKndiGkjmtrOKXIskdO8UpgS6ZzVQYh8psKIjxoA700NdxufjpwSoraIowYgn7eQKeNpYuRyFLUix9hPoqwwaAboxo-pX5TRFqVdpz3_ArnkDL-L8GJz15tzCqXP-Y3H3j4FyJVTy7D8dglaVugCjRVI14AqZ15L-yM21jlTK3HyMuVPEEjVYUw2NPZGy1sqn8L73cIGndS728aTl6v78cdZ-ePabr0f-7njJHHqUtRd8193RxQ5FO-Y_hFPT_jo4ShnVmbIx6NbezIYlbBbsAUxIiBWk1E4bWnI9A0n21SUMuqTBXrIYRDrMEuK8XAUwdq23JBKnmi4b8SBaSI9Jk2S96J8mZy_-S6g2w1muK-EKxUeuT5wwo4_zfavkdXNlSy_lyJhgvwdpFeOU9zkS6jSx1oW5-MjJNqDeiHogvIvtaU9IwI8OTmeLWxK2uKj8F1jWMyUzvQ-cY_NwpDmvq5e_eBUXPt45bFkNR7cGXQTBVWEDEV1xxGI3X2dHK6uM-WSJuh_Wi0" data-sub-html="<h2>产品 交易 财务流业务架构</h2><p>产品 交易 财务流业务架构</p>">
        
    </a><figcaption class="image-caption">产品 交易 财务流业务架构</figcaption>
    </figure></p>
<p>和上面的例子相比，好像不太适合画较复杂的架构，布局不太好处理，另外连线太多容易重叠在一块傻傻分不清楚。</p>]]></description></item></channel></rss>