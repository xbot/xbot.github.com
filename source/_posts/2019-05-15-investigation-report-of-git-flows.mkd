---
title: Git工作流調研報告
categories: 計算機
tags:
  - git
date: 2019-05-15 16:14:17
---


## 面臨的問題

1. 測試環境雜亂導緻的問題

   每個任務都要搭建測試環境，或者把閑置的測試環境切換到待測試分支。麻煩，而且容易出問題。

2. 搶占beta環境的問題

   每個任務部署到beta環境時都要和别人确認，同時其它任務都要等待。

3. 上線任務A把尚在測試中的任務B的部分代碼部署上線的問題

   先把feature分支合并到master分支，再部署到beta環境。

4. 任務A和B在邏輯上互斥或者代碼有沖突，導緻問題在上線後才發現

   測試階段是針對每個feature分支測試，而不是針對一個集成的分支。

5. 不能保證所有上線的代碼都經過測試

   直接把feature分支合并到master分支，不能保證所有代碼都經過測試。

## 原因分析

直接原因：

- 用feature分支部署測試，導緻有多套測試環境。
- 隻有一個beta環境，導緻搶占。
- 部署到beta環境前先把feature分支和master合并，導緻上線時把尚在beta環境測試的代碼帶上線。

根本原因是，**一個項目**同時有**多個任務并行**開發上線。

## 兩種發布模式

- 按版本發布 
  - 優點 
    - 可以有專門的分支跟蹤測試、beta環境，這兩個環境各自隻部署一個實例即可。
  - 缺點 
    - 存在版本發布周期，做完的任務不能馬上上線。
    - 要改變我們目前的發布模式，産品部門的規劃也要調整，業務部門的接受度也是個問題。
- 持續發布 
  - 優點 
    - 和我們目前的發布模式一緻，隻需要調整内部工作流即可，産品部門和業務部門無感。
  - 缺點 
    - 多任務并行開發和上線的問題很難解決。

## 選型的基本原則

- 要保證所有上線的代碼是經過測試的。
- 解決上述問題。
- 減少開發、測試、運維的負擔。

## 調研的工作流

### Git Flow

![](https://ws2.sinaimg.cn/large/006tNc79gy1g3221nqkh0j31470u0qa0.jpg)

Git Flow是個基于按版本發布模型的工作流：

1. 一方面，标準的git flow存在按版本打标簽的操作，版本号沖突處理起來很麻煩。當然，也可以不用标準的git flow命令，而是用基本的git命令，但是操作會複雜很多，要求用戶對git flow的原理有很強的掌握。
2. 另一方面，develop是其它分支的上遊，這意味着隻有當develop分支穩定之後才可以發布上線，而這一點對于多任務并行開發的場景來說，很難保證。
3. 需要和産品部門協商，統一規劃版本發布周期，每個版本包含的所有任務統一集中上線。
4. 能解決所有問題，但是結合我們自身的情況，再考慮到網站屬于持續發布的模型，改成按版本發布不現實。

### Github Flow

![Github_Flow-5c5cc2b5-db48-4868-a5f8-e598155c93c5](https://ws3.sinaimg.cn/large/006tNc79gy1g32227lrnsj320b0ou0ux.jpg)

Github Flow是基于持續發布模型的工作流。也和我們之前的方案大體一緻。

### Gitlab Flow

![Gitlab_Flow-d0abbf6d-e4e4-4b2e-8383-a402fa458776](https://ws3.sinaimg.cn/large/006tNc79gy1g3222i6ac2j328q0u0gps.jpg)

Gitlab Flow是在Github Flow的基礎上做的擴展：增加了用于跟蹤預發布環境和線上環境的分支，并約定由上遊到下遊的合并規則。即master分支是一切分支的上遊，所有分支必須基于master分支創建，并且由上遊向下遊合并。

同樣，Gitlab Flow也沒有解決以上問題。

### 其它方案（一）

在現有工作流的基礎上調整細節：

- 承認master分支和線上環境一緻，即合并到master分支的内容，默認立即上線。進一步地，可以實現自動化部署。
- 用feature分支實現開發、測試、beta的整個過程，上線前合并到master。
- 分别在提測、部署beta、上線節點前必須合并master分支的最新變更。
- 合并時如果有沖突，解決完後必須回歸測試相關功能。

存在的問題：

1. 能解決問題1、2、3，解決不了問題4和5。

2. 環境部署比較麻煩

   測試、beta環境的部署可以用自動化的方案減少部署的負擔。

3. 可能不能保證合并到master分支的内容都經過測試，例如feature分支和master分支合并出錯，或者合并到master前追加了一部分代碼。

   所以當feature分支進入beta階段時，就應該把它保護起來，隻允許改bug。如果和master分支出現了沖突，解決完沖突後要回歸測試。

   - 缺點 
     - 把臨時分支設成被保護狀态很麻煩。

4. 每個階段解決完與master的沖突後，都需要回歸測試。

### 其它方案（二）

![](https://ws3.sinaimg.cn/large/006tNc79gy1g3220wzigvj31pz0u0wiq.jpg)

存在的問題：

1. 能解決問題1、2、3、4，解決不了問題5。
2. 因爲在合并feature分支時，要在dev和beta中解決沖突，所以這兩個分支不能被保護，存在被濫用的可能性。可能影響測試和beta環境的穩定性。 
   - 也可以保護這兩個分支，當feature分支和它們存在沖突時，再從feature分支檢出新分支，在這個分支上合并沖突并通過MR合并到dev或beta分支。如果之後需要改bug，在原來的feature分支上開發，然後合并到新分支，再通過MR合并到dev或beta分支。
3. 可能存在部署測試、beta、上線每個階段都需要合并沖突的情況。

### 其它方案（三）

![其它方案（三）](https://ws2.sinaimg.cn/large/006tNc79gy1g32231qxa0j31sx0u0gtw.jpg)

存在的問題：

1. 本質上和前一種方案沒有區别。
2. 能解決問題1、2、3、4，解決不了問題5。
3. 能解決dev和beta分支沒有被保護導緻濫用的問題。
4. 同樣可能存在個人倉庫的永久分支被濫用的問題。
5. 操作比較複雜。

## 思考

- [ ]  我們的beta環境其實是第二個測試環境，是否真有必要？

## 總結

保證所有代碼都經過測試的原則和多任務并行開發上線的模式是一對矛盾。要保證前者，就必須使代碼在各分支間單向流動，比如feature分支合并到dev分支、dev合并到beta分支、beta分支再合并到master分支。要實現後者，單向流動就不可取，否則就會出現問題2和3。

Git Flow是最大程度能解決以上所有問題的方案，不過結合我們自身的情況很難實施。

“其它方案（二）”是個各方面比較均衡的方案，能解決大部分問題。前提是假設開發者會遵循提交标準：

- 隻在feature開發完成才合并到dev或beta分支
- 不直接在dev或beta分支上做提交
- 不對dev或beta分支做改變提交曆史等危險操作
- 不在上線前夾帶私貨（把未經測試的代碼合并到master分支）

沒有哪個工作流能完全解決我們的問題，最終還是要和團隊協作模式的調整配合。
