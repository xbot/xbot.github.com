<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晴耕雨讀</title>
  <subtitle>程序員，最佳實踐和閱讀愛好者，Vim、Archlinux、Mac、iOS擁躉，帝都低端人口。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://0x3f.org/"/>
  <updated>2018-02-18T04:46:53.509Z</updated>
  <id>http://0x3f.org/</id>
  
  <author>
    <name>晴耕雨讀</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>變形金剛真人電影系列被重置</title>
    <link href="http://0x3f.org/post/transformers-live-action-movie-series-reset/"/>
    <id>http://0x3f.org/post/transformers-live-action-movie-series-reset/</id>
    <published>2018-02-18T03:51:13.000Z</published>
    <updated>2018-02-18T04:46:53.509Z</updated>
    
    <content type="html"><![CDATA[<p>根據這條<a href="http://news.tfw2005.com/2018/02/16/transformers-cinematic-universe-current-movie-series-rebooted-358641" target="_blank" rel="external">消息</a>，變形金剛真人電影系列將會被新團隊重置，原定在明年的第6部被取消。也就是說，看完今年大黃蜂的電影後，2021年前都不會有變形金剛主題的新片了。</p>
<p>這種壯士斷腕的做法多少算是個好消息吧，經歷了變5的失敗，再讓麥克爾貝這麼折騰下去，變形金剛這個IP就完蛋了。</p>
<p>我對這件事是無可無不可的。作為一個八零後，我對變形金剛的情懷來自G1動畫，所以我的關注點主要是還原G1動畫風格的Master Piece系列。在MPM-3出來之前，我對電影系的玩具沒多大興趣。</p>
<p>當年變1上映的時候，我很難認同電影系的風格。但是後來從變1到變3，也逐漸地開始接受它，畢竟隨著技術的進步，審美風格也會發生變化，沒必要固守二、三十年前的東西。我對電影系最大的意見是劇情太爛，有句話很對，說一部戲好不好關鍵看反派角色，《蝙蝠俠之黑暗騎士崛起》之所以口碑不錯，主要是大反派小醜這個角色很立體。回頭說當年的G1動畫最成功的一點也是霸天虎尤其威震天這個角色塑造得比較成功。反觀電影系，相對於汽車人華麗的人形態和隱藏形態，霸天虎陣營就是一群猥瑣的低級生物，而且人物性格的塑造極其臉譜化。</p>
<p>直到後來變4的時候，風格進一步變化，加入大量騎士元素，機械元素的減少導致科技感進一步下降。最要命的是變4的玩具做得實在是一塌糊塗。至於變5，那真是電影做得和玩具一樣爛。</p>
<p>真是成也麥克爾貝，敗也麥克爾貝。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根據這條&lt;a href=&quot;http://news.tfw2005.com/2018/02/16/transformers-cinematic-universe-current-movie-series-rebooted-358641&quot; target=&quot;_blank&quot; rel
    
    </summary>
    
      <category term="青梅煮酒" scheme="http://0x3f.org/categories/%E9%9D%92%E6%A2%85%E7%85%AE%E9%85%92/"/>
    
    
      <category term="隨筆" scheme="http://0x3f.org/tags/%E9%9A%A8%E7%AD%86/"/>
    
      <category term="變形金剛" scheme="http://0x3f.org/tags/%E8%AE%8A%E5%BD%A2%E9%87%91%E5%89%9B/"/>
    
  </entry>
  
  <entry>
    <title>iQunix F60使用感受</title>
    <link href="http://0x3f.org/post/iqunix-f60/"/>
    <id>http://0x3f.org/post/iqunix-f60/</id>
    <published>2018-02-17T07:40:47.000Z</published>
    <updated>2018-02-17T09:18:20.043Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ou1l9js54.bkt.clouddn.com/2018-02-17-fullsizeoutput_392.jpeg" alt="fullsizeoutput_392"></p>
<p>我不喜歡冗余的東西。如果桌子足夠大，我能接受的極限是87鍵。然而我的Filco 87聖手二代黑茶已經吃灰很久了，之前的主力是Poker II白青。所以目前主要的關注點還是在60鍵上。</p>
<p>我對Poker整體上還是比較滿意的，尤其是按鍵編程的功能很方便。但是有兩點讓我很不滿意。一是做工一般，鍵帽的活動幅度較大，遠遠沒有Filco的扎實感。二是不支持藍牙，無線化是一個用了就回不去的東西。</p>
<p>iQunix F60就是這麼個東西，符合我對鍵盤所有的核心需求：支持藍牙、做工好、60%佈局、Cherry軸、PBT鍵帽。用了一段時間，整體是滿意的。</p>
<p>買的銀白色，收到的是側刻，算是個小驚喜吧，雖然不如無刻騷氣，至少不像正刻那麼平庸。鋁合金外框加白色PBT鍵帽的顏值很高，整體很有質感。</p>
<p>做工比Poker好很多，找回了Filco的扎實感。PBT的鍵帽不打油，這一點超過了Filco。</p>
<p>續航一般，輕度使用可以持續一周。信號強度也很一般，一米的距離，已能感受到明顯的延遲。不過這些在實際的使用中不是什麼大問題。</p>
<p>功能上，不支持鍵盤編程，這點不如Poker。但是可以用組合鍵交換左側WIN鍵和ALT鍵，對Mac很友好。代替方向鍵的組合鍵位也比Poker合理。此外，可以用組合鍵切換有線和無線模式，支持在3台設備之間切換。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ou1l9js54.bkt.clouddn.com/2018-02-17-fullsizeoutput_392.jpeg&quot; alt=&quot;fullsizeoutput_392&quot;&gt;&lt;/p&gt;
&lt;p&gt;我不喜歡冗余的東西。如果桌子足夠大，我能接受的極限
    
    </summary>
    
      <category term="青梅煮酒" scheme="http://0x3f.org/categories/%E9%9D%92%E6%A2%85%E7%85%AE%E9%85%92/"/>
    
    
      <category term="數碼" scheme="http://0x3f.org/tags/%E6%95%B8%E7%A2%BC/"/>
    
      <category term="最佳實踐" scheme="http://0x3f.org/tags/%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90/"/>
    
  </entry>
  
  <entry>
    <title>異地補卡下的北京中年</title>
    <link href="http://0x3f.org/post/story-of-changing-sim-card/"/>
    <id>http://0x3f.org/post/story-of-changing-sim-card/</id>
    <published>2018-02-16T09:24:59.000Z</published>
    <updated>2018-02-16T09:55:47.422Z</updated>
    
    <content type="html"><![CDATA[<p>我媽的老SIM卡不能用在iPhone里。因為我的卡就是從大卡剪過來的，所以騎車轉了一大圈，臨近年關，大部分修手機的店、合作營業廳都關了，最後一個賣手機的店里的老闆說這種老卡不能剪，只能換卡。</p>
<p>之前聽附近移動營業廳里的大堂經理說，換卡需要機主本人、身份證和服務密碼，而且異地補卡只能去部分較大的營業廳。這個可以在網上營業廳里查到。</p>
<p>事先在網上營業廳重置了服務密碼。第二天一早，去了最近的可以異地補卡的營業廳。工作人員給了張紙條，讓寫下手機號、服務密碼，他們查了一下，說是鑒權失敗，讓第二天再去。留了營業廳的電話，事先讓他們查一下，確認可以辦了再去。</p>
<p>第三天早上十點，打電話過去，說是辦異地補卡的人還沒來。十一點再打過去，查了一下，說是可以辦了。去之前差點沒帶手機，因為感覺就是辦張卡，回來裝也一樣。事實證明，不帶會後悔。</p>
<p>補卡也需要用手寫板簽字和人臉識別，因為是2d圖像識別，所以很傻，需要搖頭、點頭、眨眼、張嘴，在張嘴這一步重試了很多次都失敗……</p>
<p>補的第一張卡插到手機里不能識別，第二張才成功。</p>
<p>總結以上，異地補卡需要注意這些點：</p>
<ul>
<li>本人、身份證、服務密碼（服務密碼可以去網上營業廳重置，前提是卡還在，還能接到短信）</li>
<li>去能辦理異地補卡的營業廳（可以在網上營業廳查詢，或者打客服電話）</li>
<li>不要去太早，最好事先打電話讓他們查一下，確認可以辦了再去</li>
<li>一定要帶手機和開卡槽的工具，現場裝卡測試</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我媽的老SIM卡不能用在iPhone里。因為我的卡就是從大卡剪過來的，所以騎車轉了一大圈，臨近年關，大部分修手機的店、合作營業廳都關了，最後一個賣手機的店里的老闆說這種老卡不能剪，只能換卡。&lt;/p&gt;
&lt;p&gt;之前聽附近移動營業廳里的大堂經理說，換卡需要機主本人、身份證和服務密
    
    </summary>
    
      <category term="青梅煮酒" scheme="http://0x3f.org/categories/%E9%9D%92%E6%A2%85%E7%85%AE%E9%85%92/"/>
    
    
      <category term="隨筆" scheme="http://0x3f.org/tags/%E9%9A%A8%E7%AD%86/"/>
    
  </entry>
  
  <entry>
    <title>飛利浦電動牙刷HX9903/42使用感受</title>
    <link href="http://0x3f.org/post/philips-hx9903-42/"/>
    <id>http://0x3f.org/post/philips-hx9903-42/</id>
    <published>2018-02-10T09:23:15.000Z</published>
    <updated>2018-02-10T10:27:10.653Z</updated>
    
    <content type="html"><![CDATA[<p>效果雖說沒別人說的誇張，也的確刷得很乾淨，再就是緩解了胳膊的疲勞感。</p>
<p>有個問題。剛開始的幾天，雖然電池已經充滿，但是震動強度很一般，而且手柄底部的壓力警示燈一直閃，試過拔掉刷頭，問題還在，說明是手柄的問題。直到提示電量緊張後第二次充電，之後才恢復正常。</p>
<p>App、多種刷頭、多種模式、壓力警示和三級震動強度都是噱頭，刷個牙而已，HX6730足夠了，多交的幾百塊錢除了智商稅，也就顏值和無線充電有點價值了。</p>
<p>電動牙刷不是個用了就回不去的東西，不過體驗確實很好，刷牙不再是例行公事和負擔，而是件挺有意思的事。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;效果雖說沒別人說的誇張，也的確刷得很乾淨，再就是緩解了胳膊的疲勞感。&lt;/p&gt;
&lt;p&gt;有個問題。剛開始的幾天，雖然電池已經充滿，但是震動強度很一般，而且手柄底部的壓力警示燈一直閃，試過拔掉刷頭，問題還在，說明是手柄的問題。直到提示電量緊張後第二次充電，之後才恢復正常。&lt;/p&gt;
    
    </summary>
    
      <category term="青梅煮酒" scheme="http://0x3f.org/categories/%E9%9D%92%E6%A2%85%E7%85%AE%E9%85%92/"/>
    
    
      <category term="數碼" scheme="http://0x3f.org/tags/%E6%95%B8%E7%A2%BC/"/>
    
      <category term="最佳實踐" scheme="http://0x3f.org/tags/%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90/"/>
    
      <category term="器物" scheme="http://0x3f.org/tags/%E5%99%A8%E7%89%A9/"/>
    
  </entry>
  
  <entry>
    <title>用OTP Auth替換了Authy</title>
    <link href="http://0x3f.org/post/migrate-from-authy-to-otp-auth/"/>
    <id>http://0x3f.org/post/migrate-from-authy-to-otp-auth/</id>
    <published>2018-02-06T14:53:40.000Z</published>
    <updated>2018-02-06T15:02:22.476Z</updated>
    
    <content type="html"><![CDATA[<p>Authy的界面很花哨，但並不實用，管理多個兩步驗證賬號時查詢效率很低。OTP Auth採用更直觀的列表佈局，並且支持搜索，在用戶體驗和效率上有更大的優勢。兩者之間沒有批量遷移數據的方式，只能逐個手動添加，很麻煩。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Authy的界面很花哨，但並不實用，管理多個兩步驗證賬號時查詢效率很低。OTP Auth採用更直觀的列表佈局，並且支持搜索，在用戶體驗和效率上有更大的優勢。兩者之間沒有批量遷移數據的方式，只能逐個手動添加，很麻煩。&lt;/p&gt;

    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="安全" scheme="http://0x3f.org/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="最佳實踐" scheme="http://0x3f.org/tags/%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90/"/>
    
  </entry>
  
  <entry>
    <title>對XSS的防禦更適合放在前端</title>
    <link href="http://0x3f.org/post/better-to-do-defenses-against-xss-in-front-end/"/>
    <id>http://0x3f.org/post/better-to-do-defenses-against-xss-in-front-end/</id>
    <published>2018-02-06T07:13:17.000Z</published>
    <updated>2018-02-06T07:48:08.398Z</updated>
    
    <content type="html"><![CDATA[<p>很多項目會把轉義操作放在後端接口獲取參數的地方，從而忽略了這樣一個問題——為什麼主流框架都不在獲取參數的方法里實現這一點？</p>
<p>以Laravel為例，如果可以這樣獲取轉義後的參數：<code>$request-&gt;escape(&#39;content&#39;)</code>，代碼會顯得更優雅，而實際上只能用自己封裝的函數手工轉義：<code>my_escape($request-&gt;get(&#39;content&#39;))</code>，很醜陋的代碼。</p>
<p>事實上，主流框架並非沒有提供防禦XSS的封裝，只是都放在模板引擎里。這樣做的依據是，XSS的原理是在原本用於展示的數據里包含了可執行的文本，但不是所有展示的位置都不應該包含可執行的文本。從另一角度上說，後端應該校驗前端傳遞的數據，但不應該篡改它。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多項目會把轉義操作放在後端接口獲取參數的地方，從而忽略了這樣一個問題——為什麼主流框架都不在獲取參數的方法里實現這一點？&lt;/p&gt;
&lt;p&gt;以Laravel為例，如果可以這樣獲取轉義後的參數：&lt;code&gt;$request-&amp;gt;escape(&amp;#39;content&amp;#39
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="編程" scheme="http://0x3f.org/tags/%E7%B7%A8%E7%A8%8B/"/>
    
      <category term="架構" scheme="http://0x3f.org/tags/%E6%9E%B6%E6%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>十公里租房補貼是個天才的福利制度</title>
    <link href="http://0x3f.org/post/rent-subsides-within-10km-is-wise/"/>
    <id>http://0x3f.org/post/rent-subsides-within-10km-is-wise/</id>
    <published>2018-02-06T03:12:23.000Z</published>
    <updated>2018-02-06T03:31:30.714Z</updated>
    
    <content type="html"><![CDATA[<p>十公里以內是個很適合通勤的距離，以任何一種公共交通方式都可以把時間控制在半小時左右。</p>
<p>通勤時間每增加半小時，生活質量都會下降一個量級，而生活質量是會直接影響一個人的工作質量和穩定性的。所以有些公司有十公里內租房補貼的福利，這項制度天才的地方在於，如果把這些補貼以工資的形式發放，員工可能仍然會因為住得遠導致幸福感很差，所以增加了很多不穩定的因素。這項制度間接地強制員工把自己收入的一部分用在提高自己生活質量上面，記得那個朝三暮四、朝四暮三的故事嗎？公司花同樣的錢，卻得到了更大的價值。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;十公里以內是個很適合通勤的距離，以任何一種公共交通方式都可以把時間控制在半小時左右。&lt;/p&gt;
&lt;p&gt;通勤時間每增加半小時，生活質量都會下降一個量級，而生活質量是會直接影響一個人的工作質量和穩定性的。所以有些公司有十公里內租房補貼的福利，這項制度天才的地方在於，如果把這些補貼
    
    </summary>
    
      <category term="青梅煮酒" scheme="http://0x3f.org/categories/%E9%9D%92%E6%A2%85%E7%85%AE%E9%85%92/"/>
    
    
      <category term="隨筆" scheme="http://0x3f.org/tags/%E9%9A%A8%E7%AD%86/"/>
    
  </entry>
  
  <entry>
    <title>癸醜望，月有食之</title>
    <link href="http://0x3f.org/post/lunar-eclipse/"/>
    <id>http://0x3f.org/post/lunar-eclipse/</id>
    <published>2018-01-31T15:54:41.000Z</published>
    <updated>2018-01-31T16:24:24.228Z</updated>
    
    <content type="html"><![CDATA[<p>大概這是我第一次看月全食，暗紅色，挺大個兒，但是拍出來就顯得很小。論效果，iPhone X還不如幾年前的LX5。</p>
<p><img src="http://ou1l9js54.bkt.clouddn.com/2018-01-31-P1030593.JPG" alt="P1030593"><br><img src="http://ou1l9js54.bkt.clouddn.com/2018-01-31-P1030594.JPG" alt="P1030594"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大概這是我第一次看月全食，暗紅色，挺大個兒，但是拍出來就顯得很小。論效果，iPhone X還不如幾年前的LX5。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ou1l9js54.bkt.clouddn.com/2018-01-31-P1030593.JPG&quot; alt=&quot;
    
    </summary>
    
      <category term="青梅煮酒" scheme="http://0x3f.org/categories/%E9%9D%92%E6%A2%85%E7%85%AE%E9%85%92/"/>
    
    
      <category term="隨筆" scheme="http://0x3f.org/tags/%E9%9A%A8%E7%AD%86/"/>
    
      <category term="圖片" scheme="http://0x3f.org/tags/%E5%9C%96%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>解決Laravel的Facade在被Mock時不自動注入依賴的一種方法</title>
    <link href="http://0x3f.org/post/manual-dependency-injection-with-laravel/"/>
    <id>http://0x3f.org/post/manual-dependency-injection-with-laravel/</id>
    <published>2018-01-30T07:41:16.000Z</published>
    <updated>2018-01-30T08:16:36.776Z</updated>
    
    <content type="html"><![CDATA[<p>由於集成了Mockery，Laravel的Facade對單元測試非常友好，只需要一行代碼就能實現mocking。</p>
<p>例如，測試目標方法中調用了訂單工具類的一個方法，在使用依賴注入的方式時，需要用三行代碼實現對這個方法的mocking：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$fakeOrderTool = m::mock(\App\Tool\Order::class);</div><div class="line">$fakeOrderTool-&gt;shouldReceive(<span class="string">'getById'</span>)-&gt;once()-&gt;with($id)-&gt;andReturn($fakeOrder);</div><div class="line"><span class="keyword">$this</span>-&gt;app-&gt;instance(\App\Tool\Order::class, $fakeOrderTool);</div></pre></td></tr></table></figure>
<p>而用Facade是這樣的：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OrderFacade::shouldReceive(<span class="string">'getById'</span>)-&gt;once()-&gt;with($id)-&gt;andReturn($fakeOrder);</div></pre></td></tr></table></figure>
<p>當測試目標方法也屬於訂單工具類時，需要部分mock這個類，所以還要加上一行：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">OrderFacade::makePartial();</div></pre></td></tr></table></figure>
<p>但如果訂單工具類的構造方法里有需要注入的依賴關係，這里並不會被執行。所以我在工具類基類里封裝了一個方法，用反射機制實現手工注入依賴關係：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 注入依赖，用于单元测试</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span>  void</div><div class="line"> * <span class="doctag">@author</span>  donieli</div><div class="line"> * <span class="doctag">@since</span>   5</div><div class="line"> * <span class="doctag">@version</span> 5</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">injectDependencies</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    $reflector = <span class="keyword">new</span> \ReflectionClass(get_class(<span class="keyword">$this</span>));</div><div class="line">    $params    = $reflector-&gt;getConstructor()-&gt;getParameters();</div><div class="line">    $args      = [];</div><div class="line">    <span class="keyword">foreach</span> ($params <span class="keyword">as</span> $param) &#123;</div><div class="line">        $paramClass = $param-&gt;getClass();</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($paramClass)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'Dependency named '</span>.$param-&gt;getName().<span class="string">' cannot be injected.'</span>);</div><div class="line">        &#125;</div><div class="line">        $instance  = app()-&gt;make($paramClass-&gt;getName());</div><div class="line">        $args[] = $instance;</div><div class="line">    &#125;</div><div class="line">    call_user_func_array([<span class="keyword">$this</span>, <span class="string">'__construct'</span>], $args);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然後就可以這樣處理：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">OrderFacade::shouldReceive(<span class="string">'getById'</span>)-&gt;with($id)-&gt;once()-&gt;andReturn($fakeOrder);</div><div class="line">OrderFacade::makePartial();</div><div class="line">OrderFacade::injectDependencies();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由於集成了Mockery，Laravel的Facade對單元測試非常友好，只需要一行代碼就能實現mocking。&lt;/p&gt;
&lt;p&gt;例如，測試目標方法中調用了訂單工具類的一個方法，在使用依賴注入的方式時，需要用三行代碼實現對這個方法的mocking：&lt;/p&gt;
&lt;figure c
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="編程" scheme="http://0x3f.org/tags/%E7%B7%A8%E7%A8%8B/"/>
    
      <category term="php" scheme="http://0x3f.org/tags/php/"/>
    
      <category term="laravel" scheme="http://0x3f.org/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>從Vultr新加坡遷移到洛杉磯</title>
    <link href="http://0x3f.org/post/migrate-vultr-from-singapore-to-los-angeles/"/>
    <id>http://0x3f.org/post/migrate-vultr-from-singapore-to-los-angeles/</id>
    <published>2018-01-28T06:15:57.000Z</published>
    <updated>2018-01-28T06:46:55.991Z</updated>
    
    <content type="html"><![CDATA[<p>Vultr新加坡節點掛了兩天了，不能翻牆簡直什麼都乾不了。早上用CloudSpeed看了下，洛杉磯機房的響應速度還不錯，就遷移了過去。</p>
<h2 id="ShadowsocksR"><a href="#ShadowsocksR" class="headerlink" title="ShadowsocksR"></a>ShadowsocksR</h2><p>這個很簡單，用<a href="https://github.com/91yun/shadowsocks_install" target="_blank" rel="external">一鍵安裝腳本</a>。</p>
<h2 id="網絡加速"><a href="#網絡加速" class="headerlink" title="網絡加速"></a>網絡加速</h2><p>用BBR，<a href="https://teddysun.com/489.html" target="_blank" rel="external">一鍵安裝腳本</a>。</p>
<h2 id="Tiny-Tiny-RSS"><a href="#Tiny-Tiny-RSS" class="headerlink" title="Tiny Tiny RSS"></a>Tiny Tiny RSS</h2><p>先按照之前的<a href="/post/ttrss/">筆記</a>安裝ttrss。</p>
<p>然後重建一個空的ttrss的數據庫：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> f6d92ad8efba /usr/bin/psql -c <span class="string">"drop database ttrss"</span></div><div class="line">docker <span class="built_in">exec</span> f6d92ad8efba /usr/bin/psql -c <span class="string">"create database ttrss"</span></div></pre></td></tr></table></figure>
<p>把數據庫的備份複製到容器里並導入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker cp ttrss.sql f6d92ad8efba:/tmp/ttrss.sql</div><div class="line">docker <span class="built_in">exec</span> f6d92ad8efba /usr/bin/psql -d ttrss -f /tmp/ttrss.sql postgres</div></pre></td></tr></table></figure>
<p>以root身份登錄容器並刪除備份文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker <span class="built_in">exec</span> -it --user root f6d92ad8efba /bin/sh</div><div class="line">rm /tmp/ttrss.sql</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vultr新加坡節點掛了兩天了，不能翻牆簡直什麼都乾不了。早上用CloudSpeed看了下，洛杉磯機房的響應速度還不錯，就遷移了過去。&lt;/p&gt;
&lt;h2 id=&quot;ShadowsocksR&quot;&gt;&lt;a href=&quot;#ShadowsocksR&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="筆記" scheme="http://0x3f.org/tags/%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>Unlox：兼顧安全和體驗的東西深得我心</title>
    <link href="http://0x3f.org/post/unlox/"/>
    <id>http://0x3f.org/post/unlox/</id>
    <published>2018-01-14T08:52:11.000Z</published>
    <updated>2018-01-14T09:42:07.406Z</updated>
    
    <content type="html"><![CDATA[<p>買了Unlox。早就知道MacID，陰差陽錯一直沒買，所以這又是一次後知後覺的行為。</p>
<p>曾經用過一段時間ControlPlane，通過多種條件自動判斷場景以啓用或關閉鎖屏密碼。後來在一次系統升級之後就不能用了。因為這個東西本身體驗也不是很好，免費的東西折騰起來太耗費精力，所以付費買體驗也是個不錯的選擇。</p>
<p>有三個功能對我來說很有用。</p>
<p>首先是用Face ID解鎖Mac。在Mac被喚醒後，iPhone X自動彈出解鎖的通知，點擊後Unlox被打開並自動調用Face ID，驗證通過後Mac即被解鎖。不過兩次Face ID驗證稍顯繁瑣，如果在iPhone鎖屏界面驗證通過後就自動解鎖，體驗會更好。不過我猜應該是iOS在這個地方不會通知到App。</p>
<p>其次是Tap解鎖。用手指點擊觸摸板，點擊次數和每次用的手指數目可以自定義。這個方式確實很方便。為了加強安全性，還可以設置當手機斷開時禁用Tap解鎖。</p>
<p>第三是離開時自動鎖屏。可以設置當手機和Mac之間的藍牙連接信號減弱多少時自動鎖屏。雖然對於Macbook用處不大，也不失為忘記合上屏幕時的一種補救手段。</p>
<p>此外還有其它一些功能，例如通過手機鎖定或解鎖Mac、靠近時自動喚醒Mac等。</p>
<p>今年Apple應該會全系支持Face ID，所以這只是一個過渡方案。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;買了Unlox。早就知道MacID，陰差陽錯一直沒買，所以這又是一次後知後覺的行為。&lt;/p&gt;
&lt;p&gt;曾經用過一段時間ControlPlane，通過多種條件自動判斷場景以啓用或關閉鎖屏密碼。後來在一次系統升級之後就不能用了。因為這個東西本身體驗也不是很好，免費的東西折騰起來太
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="最佳實踐" scheme="http://0x3f.org/tags/%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90/"/>
    
      <category term="app" scheme="http://0x3f.org/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>密碼管理的最佳實踐</title>
    <link href="http://0x3f.org/post/the-best-practice-of-password-management/"/>
    <id>http://0x3f.org/post/the-best-practice-of-password-management/</id>
    <published>2017-12-27T09:26:17.000Z</published>
    <updated>2018-02-06T14:51:07.950Z</updated>
    
    <content type="html"><![CDATA[<p>通密之所以不應該被過分指責，是因為有其存在的道理，沒有哪種方案的管理成本比它更低，它不需要購買昂貴的1password，不需要擔心臨時用的時候突然想不起來，而且，只要這個密碼足夠強壯並且使用環境足夠安全，大多數情況下也不會有什麼問題。通密的問題在於它的風險成本太高，一旦一處洩漏，所有使用這個密碼的地方都不安全。</p>
<p>另一個極端是，使用很複雜的密碼，每個賬號都不同，甚至用密碼生成工具生成完全沒有規律的隨機字符串。這種方案的安全性很高，高到連你自己都記不住。</p>
<p>所以我需要這樣一套好的方案，它應該在安全性和易用性之間取得一個比較好的平衡，並且隨著方法論和工具鏈的進化，這個平衡可以無限逼近黃金分割點。</p>
<p>首先，密碼應該是複雜但容易記住的。密碼的複雜度和記憶負擔並不成正比，例如如果你實在記不住“ppnn13%,dkstFeb1st”，那麼這樣呢——“娉娉裊裊十三余，豆蔻梢頭二月初”。密碼只是一個字符串，如果不去死記最終的值，而是字符串背後的規律，記憶的壓力就會小很多。</p>
<p>但考慮到每個賬號都想一個這樣的密碼是不現實的，而且怎麼解決記憶密碼和賬號的對應關係的問題？所以進一步，可以用這樣的密碼當前綴，每個密碼的前綴都一樣，然後針對每個賬號創造一個後綴，這個後綴應該是每個賬號都不同的，且和賬號有某種只有你自己才知道的關聯，這樣你可以隨時根據賬號計算出它的後綴。例如，可以用賬號拼音首字母（<em>當然，實際的規則應該更複雜一點</em>）。</p>
<p>這樣你就有了足夠複雜、每個賬號都不同並且很容易記住的密碼。進一步地，在私有設備上可以利用文本替換功能（<em>例如：Alfred for Mac的Snippets功能</em>）快速輸入通用前綴，某些支持按鍵編程的機械鍵盤會有更好的體驗。</p>
<p>不過好記性不如爛筆頭，為防萬一，還是需要一個Plan B。主流的密碼管理工具主要有這麼幾種：</p>
<ul>
<li>瀏覽器的賬號記憶功能</li>
<li>操作系統的keychain</li>
<li>在線密碼管理工具</li>
<li>離線密碼管理工具</li>
</ul>
<p>瀏覽器一般是把密碼以明文存儲在本地的，firefox雖然有個主密碼，但只是個幌子，別人仍然可以拿到它記錄密碼的數據庫文件。這種做法的邏輯在於，設備上存儲的數據的安全性由操作系統和用戶負責，換句話說，用戶不應該允許他人用自己的權限登錄設備。但實際上很難避免這種情況，而且還要考慮到系統被入侵的可能。所以，只應該讓瀏覽器記住那些最不重要的賬號。</p>
<p>相對來說，操作系統的keychain一般有自動鎖定的功能，會更安全一些。但是仍無法完全避免上述問題。而且keychain只能記錄賬號和密碼，無法存儲更多的附加信息。所以這種工具也只應該存儲一些不重要的賬號。</p>
<p>最著名的在線密碼管理工具應該是Lastpass。關於它的安全性有很多種說法，不過我覺得但凡是敏感數據都不要存儲到線上，所以這種方式不予考慮。</p>
<p>我傾向於使用離線的密碼管理工具。1password據說很好用，但是太貴了，而且開源免費的keepass已經完全夠用了。我在Mac上用KeePassXC，在iOS中用MiniKeePass，私鑰文件離線存儲，然後數據庫文件用Dropbox同步就可以了。</p>
<p>此外，對於重要的賬號，如果支持兩步驗證，一定要開啓，然後用OTP Auth管理即可。</p>
<p>最終的方案是：</p>
<ul>
<li>方法論：統一的複雜但有規律的前綴+根據賬號計算出來的後綴</li>
<li>工具鏈：KeePass + OTP Auth + Dropbox</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通密之所以不應該被過分指責，是因為有其存在的道理，沒有哪種方案的管理成本比它更低，它不需要購買昂貴的1password，不需要擔心臨時用的時候突然想不起來，而且，只要這個密碼足夠強壯並且使用環境足夠安全，大多數情況下也不會有什麼問題。通密的問題在於它的風險成本太高，一旦一處
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="最佳實踐" scheme="http://0x3f.org/tags/%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90/"/>
    
  </entry>
  
  <entry>
    <title>Laravel單元測試錯誤：1205 Lock wait timeout exceeded</title>
    <link href="http://0x3f.org/post/1205-lock-wait-timeout-exceeded/"/>
    <id>http://0x3f.org/post/1205-lock-wait-timeout-exceeded/</id>
    <published>2017-12-22T07:47:32.000Z</published>
    <updated>2017-12-22T08:00:11.108Z</updated>
    
    <content type="html"><![CDATA[<p>錯誤信息：</p>
<blockquote>
<p>1205 Lock wait timeout exceeded; try restarting transaction</p>
</blockquote>
<p>原因之一是測試用例里重寫的tearDown()方法中沒有調用父類的該方法。因為DatabaseTransaction這個trait自動開啓了事務，對應的回滾方法在測試用例基類的tearDown()中執行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;錯誤信息：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1205 Lock wait timeout exceeded; try restarting transaction&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原因之一是測試用例里重寫的tearDown()方法中沒有調用
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="laravel" scheme="http://0x3f.org/tags/laravel/"/>
    
      <category term="單元測試" scheme="http://0x3f.org/tags/%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6/"/>
    
  </entry>
  
  <entry>
    <title>用Charles攔截iOS APP HTTPS請求</title>
    <link href="http://0x3f.org/post/ios-app-intercepting-using-charles/"/>
    <id>http://0x3f.org/post/ios-app-intercepting-using-charles/</id>
    <published>2017-12-22T07:17:04.000Z</published>
    <updated>2017-12-22T07:44:56.834Z</updated>
    
    <content type="html"><![CDATA[<h2 id="實踐環境"><a href="#實踐環境" class="headerlink" title="實踐環境"></a>實踐環境</h2><ul>
<li>Charles 4.2</li>
<li>iOS 11.2.1</li>
</ul>
<h2 id="安裝證書"><a href="#安裝證書" class="headerlink" title="安裝證書"></a>安裝證書</h2><p>按照Charles菜單（Help -&gt; SSL Proxying -&gt; Install Charles Root Certificate on a Mobile Device or Remote Browser）的指示，設置iOS的系統代理。</p>
<p>為了以後使用方便，可以在代理工具（如ShadowRocket）里設置，注意使用時應配置代理工具對全部流量使用代理，如果使用PAC之類動態代理可能會攔截不到。</p>
<p>在iOS的Safari中訪問上面提示中的網址，會彈出提示安裝證書。iOS 10.3以後還要設置信任該證書（設置-&gt;通用-&gt;關於本機-&gt;證書信任設置）。</p>
<h2 id="配置Charles攔截HTTPS請求"><a href="#配置Charles攔截HTTPS請求" class="headerlink" title="配置Charles攔截HTTPS請求"></a>配置Charles攔截HTTPS請求</h2><p>路徑為：Proxy -&gt; SSL Proxying Settings</p>
<p>可以設置對特定的主機名和端口攔截，也可以直接保存，此時對所有請求均會攔截。</p>
<h2 id="攔截"><a href="#攔截" class="headerlink" title="攔截"></a>攔截</h2><p>iOS中打開上述代理，APP中發送的請求就會在Charles里列出來。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;實踐環境&quot;&gt;&lt;a href=&quot;#實踐環境&quot; class=&quot;headerlink&quot; title=&quot;實踐環境&quot;&gt;&lt;/a&gt;實踐環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Charles 4.2&lt;/li&gt;
&lt;li&gt;iOS 11.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安裝證書&quot;
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="編程" scheme="http://0x3f.org/tags/%E7%B7%A8%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>測試驅動開發的實際收益</title>
    <link href="http://0x3f.org/post/the-real-income-of-tdd/"/>
    <id>http://0x3f.org/post/the-real-income-of-tdd/</id>
    <published>2017-12-17T06:20:02.000Z</published>
    <updated>2017-12-17T07:33:50.135Z</updated>
    
    <content type="html"><![CDATA[<p>我並不試圖系統地談TDD，因為我在這方面的經驗還不足以做到這一點。但是TDD的一些方法論和工具確實解決了我在實際開發過程中遇到的一些問題。</p>
<p>第一個問題是健壯性。尤其是對於我這樣思維發散、容易迷失又喜歡重構的人，TDD給了我一個明確的目標，在一切剛開始的時候，我要做的只是滿足測試用例，讓它們由紅變綠。到了重構階段，我就可以把精力放到優化代碼上面，且不必對健壯性有過多的擔心。在此之前，由於手動測試比較麻煩，很多時候惰性會說服潛意識告訴自己這部分邏輯很簡單、不會有什麼bug，結果提交測試後卻一再地發生問題。</p>
<p>第二個問題是效率。曾經只有不忙的時候才會寫測試用例，但是現在一般都會寫，因為確實可以提高開發效率，而不只是保證重構的健壯性。可能對於所有對單元測試不熟悉的人來說，這都是匪夷所思的，我也曾認為單元測試只是用來保證健壯性的，必然和開發效率是一對矛盾，因為要花很多時間寫測試代碼。這種想法首先是因為對單元測試不熟悉，所以才需要花很多時間在上面。其次是沒有看到它所帶來的好處。</p>
<p>例如你要實現一整套退款單的功能，退款單是依賴訂單的，這意味著你需要不只一條符合條件的訂單數據。但是訂單是有狀態的，隨著時間的推移、人為的操作或者開發過程中程序的影響，狀態會變得不再符合你的要求，這時候你就必須停下來去做更多符合要求的訂單。而創建訂單也存在很多麻煩，你需要找到有庫存的商品，有時候還要去庫管系統中補充庫存，然後下單並支付。最後花了很多時間做出來的訂單，因為正在開發的退款單的程序出現的一個小問題變得不能使用！時間被大量浪費在創建所依賴的上游數據上。</p>
<p>這時候如果用單元測試並mock出依賴關係，就可以隨時隨地、無限制地執行相關的業務邏輯。對效率的提高不言而喻。</p>
<p>特別的，mock並不是隨時可以抓起的救命稻草，它的原罪在於：不負責任地濫用mock會導致很多問題被掩蓋。因此，對mock的使用應該是節制的、目標明確的。</p>
<p>當然，這並不包括單純地為了提高代碼覆蓋率而使用mock，只所以這是個在很多強制TDD的團隊里的普遍現象，歸根結底是因為KPI是萬惡之源，任何好的方法論，一旦淪為KPI，就離死不遠了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我並不試圖系統地談TDD，因為我在這方面的經驗還不足以做到這一點。但是TDD的一些方法論和工具確實解決了我在實際開發過程中遇到的一些問題。&lt;/p&gt;
&lt;p&gt;第一個問題是健壯性。尤其是對於我這樣思維發散、容易迷失又喜歡重構的人，TDD給了我一個明確的目標，在一切剛開始的時候，我
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="隨筆" scheme="http://0x3f.org/tags/%E9%9A%A8%E7%AD%86/"/>
    
      <category term="編程" scheme="http://0x3f.org/tags/%E7%B7%A8%E7%A8%8B/"/>
    
      <category term="最佳實踐" scheme="http://0x3f.org/tags/%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90/"/>
    
  </entry>
  
  <entry>
    <title>BaiduPCS：當前最好用的百度網盤下載工具</title>
    <link href="http://0x3f.org/post/baidupcs/"/>
    <id>http://0x3f.org/post/baidupcs/</id>
    <published>2017-12-12T13:21:16.000Z</published>
    <updated>2017-12-12T13:28:26.983Z</updated>
    
    <content type="html"><![CDATA[<p>BaiduPCS是個命令行工具，用於下載百度網盤中的資源。之前用的是瀏覽器插件，需要先創建分享，再拿到下載鏈接，最後用下載工具下載。這個工具可以直接執行一條命令下載指定的資源，非常方便。</p>
<p><a href="https://github.com/GangZhuo/BaiduPCS/blob/master/README.md" target="_blank" rel="external">這里</a>有安裝說明，然後按照<a href="https://github.com/GangZhuo/BaiduPCS/wiki/BaiduPCS-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8" target="_blank" rel="external">使用說明</a>操作即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BaiduPCS是個命令行工具，用於下載百度網盤中的資源。之前用的是瀏覽器插件，需要先創建分享，再拿到下載鏈接，最後用下載工具下載。這個工具可以直接執行一條命令下載指定的資源，非常方便。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/GangZhuo
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="最佳實踐" scheme="http://0x3f.org/tags/%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90/"/>
    
      <category term="app" scheme="http://0x3f.org/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>iOS垃圾短信過濾器：熊貓吃短信</title>
    <link href="http://0x3f.org/post/panda-eats-sms/"/>
    <id>http://0x3f.org/post/panda-eats-sms/</id>
    <published>2017-12-10T04:08:47.000Z</published>
    <updated>2017-12-10T04:48:47.776Z</updated>
    
    <content type="html"><![CDATA[<p>“熊貓吃短信”是個新上架的App，用於過濾垃圾短信。據說是基於機器學習訓練出來的，用了一周，識別得非常準確。</p>
<p>之前用的騰訊手機管家，即使把“精准識別”、“上傳到雲端”等選項都打開，還會有漏網之魚，而且會犧牲隱私。這個App聲稱不會主動上傳短信。最重要的是，這一周里所有不關心的短信都被過濾掉了，而且沒有失誤。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“熊貓吃短信”是個新上架的App，用於過濾垃圾短信。據說是基於機器學習訓練出來的，用了一周，識別得非常準確。&lt;/p&gt;
&lt;p&gt;之前用的騰訊手機管家，即使把“精准識別”、“上傳到雲端”等選項都打開，還會有漏網之魚，而且會犧牲隱私。這個App聲稱不會主動上傳短信。最重要的是，這一
    
    </summary>
    
      <category term="晴耕雨讀" scheme="http://0x3f.org/categories/%E6%99%B4%E8%80%95%E9%9B%A8%E8%AE%80/"/>
    
    
      <category term="最佳實踐" scheme="http://0x3f.org/tags/%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90/"/>
    
      <category term="app" scheme="http://0x3f.org/tags/app/"/>
    
  </entry>
  
  <entry>
    <title>全新Kindle Oasis使用感受</title>
    <link href="http://0x3f.org/post/the-all-new-kindle-oasis/"/>
    <id>http://0x3f.org/post/the-all-new-kindle-oasis/</id>
    <published>2017-12-09T06:03:08.000Z</published>
    <updated>2017-12-09T07:47:45.719Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ou1l9js54.bkt.clouddn.com/2017-12-09-fullsizeoutput_358.jpeg" alt="fullsizeoutput_358"></p>
<p>早在Paperwhite 1的時候我就不喜歡它的工業設計：邊框太寬，屏幕內陷。此外，非人體工學設計和沒有實體翻頁鍵導致單手握持體驗很差。再有就是做工的問題，機身表面接縫處縫隙明顯而不均勻、通體強烈的塑料感。然而還是從一代用到了三代，除了kpw是kindle全系列里性價比最高的產品線之外，還有就是沒有其它任何一款產品解決了kpw的主要問題。</p>
<p>例如Voage，雖然屏幕不內陷了、楔形機身優化了握持感、增加了翻頁鍵，但整體的設計只算是在kpw基礎上的優化，何況各項硬件配置和kpw3幾乎無差。</p>
<p>後來當第一代Oasis發佈的時候，看了第一眼就瞬間失掉了興趣。捆綁的充電保護殼絕對是體驗殺手，裝上殼比kpw還要厚重，不裝的話本體的續航又很差，頻繁拆裝也很不方便，這樣的體驗連kpw都不如。所以我很不看好它，果然很快在今年六月就下架了。</p>
<p>十月剛看到新Oasis的消息時，馬上覺得這回終於有買的價值了。</p>
<p>首先是7寸的屏幕，瞬間和其它產品線拉開了距離。更大的屏幕意味著能展示更多內容，增加了寬度後也更接近實體書的觀感。</p>
<p>工業設計相對於我的kpw3當然是有了質的改變。玻璃材質的純平表面，金屬背殼，沒有了kpw的塑料感，顯得更精緻。得益於窄邊框，7寸屏的機身長度比6寸的kpw還短。雖然因為加寬了屏幕和增加了單手握持的邊框導致機身寬度超過kpw很多，不過在平時攜帶中並沒有造成很多困擾。</p>
<p>單手握持是ko系列的主要賣點，實際使用體驗當然很好。為握持設計的寬邊框加上實體翻頁鍵非常方便。雖然因為加大屏幕和增加續航導致194g的重量遠遠超過1代的131g，但還是比kpw輕了10g，而且主要重量集中在單手握持的一邊，槓桿效應很小。配合重力感應，隨時換手可以有效緩解疲勞。當然，作為長時間單手握持的閱讀設備，重量自然越輕越好，這一點上，ko還有很大優化的空間。</p>
<p>此外，新ko的做工遠遠好於kpw，沒有了廉價感。12顆背光燈使得背光的均勻度比kpw強了很多，幾乎不會有kpw上明顯的光影。性能上是現在kindle全系列里最高的，翻頁時雖然還會看到閃屏，但比以前已經快了很多。自動亮度調節算是個聊勝於無的功能吧。至於防水和有聲書，我沒有這方面的需求。</p>
<p>如果說缺點的話，還是續航。雖然相對於1代本體，續航已經達到可用的水平，但是對於被其它產品線慣壞的我們來說，新ko電量的消耗還是快了點。我沒有精確的對比，但是能明顯地感覺到比kpw掉得快不少。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ou1l9js54.bkt.clouddn.com/2017-12-09-fullsizeoutput_358.jpeg&quot; alt=&quot;fullsizeoutput_358&quot;&gt;&lt;/p&gt;
&lt;p&gt;早在Paperwhite 1的時候我就不喜歡它的工
    
    </summary>
    
      <category term="青梅煮酒" scheme="http://0x3f.org/categories/%E9%9D%92%E6%A2%85%E7%85%AE%E9%85%92/"/>
    
    
      <category term="kindle" scheme="http://0x3f.org/tags/kindle/"/>
    
      <category term="數碼" scheme="http://0x3f.org/tags/%E6%95%B8%E7%A2%BC/"/>
    
      <category term="最佳實踐" scheme="http://0x3f.org/tags/%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90/"/>
    
  </entry>
  
  <entry>
    <title>清潔手機的最佳實踐</title>
    <link href="http://0x3f.org/post/how-to-clean-a-phone/"/>
    <id>http://0x3f.org/post/how-to-clean-a-phone/</id>
    <published>2017-12-03T14:51:42.000Z</published>
    <updated>2017-12-03T15:10:51.357Z</updated>
    
    <content type="html"><![CDATA[<p>以前的做法是先用濕巾清理，再用紙巾擦乾。後來屏幕的觸感逐漸不如開始時順滑，也更容易沾指紋和灰塵，而且不容易清除。估計應該是濕巾的酒精會腐蝕屏幕的塗層，紙巾粗糙的表面也會造成磨損。</p>
<p>現在先用軟毛刷掃除灰塵，然後用3M魔布擦拭。效果應該會更好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前的做法是先用濕巾清理，再用紙巾擦乾。後來屏幕的觸感逐漸不如開始時順滑，也更容易沾指紋和灰塵，而且不容易清除。估計應該是濕巾的酒精會腐蝕屏幕的塗層，紙巾粗糙的表面也會造成磨損。&lt;/p&gt;
&lt;p&gt;現在先用軟毛刷掃除灰塵，然後用3M魔布擦拭。效果應該會更好。&lt;/p&gt;

    
    </summary>
    
      <category term="青梅煮酒" scheme="http://0x3f.org/categories/%E9%9D%92%E6%A2%85%E7%85%AE%E9%85%92/"/>
    
    
      <category term="數碼" scheme="http://0x3f.org/tags/%E6%95%B8%E7%A2%BC/"/>
    
      <category term="最佳實踐" scheme="http://0x3f.org/tags/%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90/"/>
    
  </entry>
  
  <entry>
    <title>Firefox Quantum：狐狸的反擊</title>
    <link href="http://0x3f.org/post/firefox-quantum/"/>
    <id>http://0x3f.org/post/firefox-quantum/</id>
    <published>2017-12-03T13:53:18.000Z</published>
    <updated>2017-12-09T06:08:27.615Z</updated>
    
    <content type="html"><![CDATA[<p>不知不覺已經很多年沒有用過Firefox了。在Chrome發佈之前，這只狐狸以一己之力扛著互聯網承前啓後的大旗。後來被Chrome在網頁加載速度上吊打，逐漸式微。之後還在用Firefox的人一般也只是因為受不了Chrome的內存佔用。</p>
<p>Firefox Quantum剛發佈的時候我就安裝了，以為是個全新的項目，新項目初期往往特性不健全，所以就沒有太多關注。</p>
<p>然後發現版本號接續了舊版，也兼容原Firefox的插件，所以就裝上幾個必要的插件，嘗試了一下。新的UI借鑒了Chrome，不像原來那麼過時。最重要的是內存佔用和網頁打開速度比Chrome有優勢。如官方宣傳語所說——快而不俗。</p>
<p>準備把默認瀏覽器改成FQ，用一段時間看看。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知不覺已經很多年沒有用過Firefox了。在Chrome發佈之前，這只狐狸以一己之力扛著互聯網承前啓後的大旗。後來被Chrome在網頁加載速度上吊打，逐漸式微。之後還在用Firefox的人一般也只是因為受不了Chrome的內存佔用。&lt;/p&gt;
&lt;p&gt;Firefox Quan
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="app" scheme="http://0x3f.org/tags/app/"/>
    
      <category term="瀏覽器" scheme="http://0x3f.org/tags/%E7%80%8F%E8%A6%BD%E5%99%A8/"/>
    
  </entry>
  
</feed>
