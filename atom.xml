<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晴耕雨讀</title>
  <subtitle>程序員，最佳實踐和閱讀愛好者，Vim和Archlinux擁躉，果粉。性本愛丘山，但現居北京。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://0x3f.org/"/>
  <updated>2017-10-22T14:21:26.358Z</updated>
  <id>http://0x3f.org/</id>
  
  <author>
    <name>丘山</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>過度優化和過度設計</title>
    <link href="http://0x3f.org/post/talk-about-excessive-design/"/>
    <id>http://0x3f.org/post/talk-about-excessive-design/</id>
    <published>2017-10-22T13:38:08.000Z</published>
    <updated>2017-10-22T14:21:26.358Z</updated>
    
    <content type="html"><![CDATA[<p>我見過兩種程序員，一種是想做事的，一種是混飯吃的。</p>
<p>第一種人最容易犯兩個錯誤，一是過度優化，二是過度設計。兩種錯誤共同的原因是經驗不足，不同的地方是過度優化往往出於知其然不知其所以然，而過度設計一般是想得太遠從而脫離實際。</p>
<p>比如我見過的一個人，凡是聯表的語句，都要拆開來寫，完全不考慮這些聯表語句實際會不會發生性能問題。<strong>這就是過度優化，只記住一些成例和範式，不從實際出發，膠柱鼓瑟，刻舟求劍。</strong>聯表當然會造成數據量以笛卡爾積的形式增長，但如果所聯表的數據量並不大，或者通過限制條件過濾後的數據量不大，並不會出現性能問題，而拆開SQL語句會導致代碼量增大、可讀性下降，是得不償失的。</p>
<p>至於過度設計，我自己就是個很好的反面教材。剛工作的時候，我在寫程序之前和過程中會不斷地冒出新的想法，設想到很多種可能，為了照顧到這些可能性，我會不斷地重構程序，導致出活很慢。多數人並不會認真瞭解別人，只是從結果上武斷地下結論。所以關於我寫程序太慢的說法就悄悄流傳開，而那些程序寫得很爛、混飯吃但出活很快的人反而獲利頗豐。最可笑的是過了很長時間後回顧曾經設想到的可能性，幾乎全部沒有發生。<strong>為一些將來可能發生而實際沒有發生的可能性，在一開始就花費更多的成本，這就是過度設計。</strong></p>
<p>不過經驗作為知識存量，是不值錢的，假以時間，有一定認知水平、不甘於庸俗的人總可以積累得到。所以相對於第二種人，我寧願和第一種共事。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我見過兩種程序員，一種是想做事的，一種是混飯吃的。&lt;/p&gt;
&lt;p&gt;第一種人最容易犯兩個錯誤，一是過度優化，二是過度設計。兩種錯誤共同的原因是經驗不足，不同的地方是過度優化往往出於知其然不知其所以然，而過度設計一般是想得太遠從而脫離實際。&lt;/p&gt;
&lt;p&gt;比如我見過的一個人，凡
    
    </summary>
    
      <category term="晴耕雨讀" scheme="http://0x3f.org/categories/%E6%99%B4%E8%80%95%E9%9B%A8%E8%AE%80/"/>
    
    
      <category term="隨筆" scheme="http://0x3f.org/tags/%E9%9A%A8%E7%AD%86/"/>
    
  </entry>
  
  <entry>
    <title>搭好了SSR</title>
    <link href="http://0x3f.org/post/ready-for-ssr/"/>
    <id>http://0x3f.org/post/ready-for-ssr/</id>
    <published>2017-10-18T07:34:33.000Z</published>
    <updated>2017-10-22T13:37:09.982Z</updated>
    
    <content type="html"><![CDATA[<p>搭在vultr東京節點的SS在家裏的網絡上已經不能用了，lantern和大殺器也不穩定到基本沒有可用性的程度。短短幾天時間，三把梯子挂了仨。</p>
<p>搭好了SSR，等着晚上回去測試。</p>
<ul>
<li>SSR一鍵部署腳本：<a href="https://github.com/91yun/shadowsocks_install" target="_blank" rel="external">https://github.com/91yun/shadowsocks_install</a></li>
<li>Mac的SSR客戶端：<a href="https://github.com/qinyuhang/ShadowsocksX-NG-R/releases" target="_blank" rel="external">https://github.com/qinyuhang/ShadowsocksX-NG-R/releases</a></li>
<li>iOS的SSR客戶端：ShadowRocket</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭在vultr東京節點的SS在家裏的網絡上已經不能用了，lantern和大殺器也不穩定到基本沒有可用性的程度。短短幾天時間，三把梯子挂了仨。&lt;/p&gt;
&lt;p&gt;搭好了SSR，等着晚上回去測試。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSR一鍵部署腳本：&lt;a href=&quot;https://gi
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="翻牆" scheme="http://0x3f.org/tags/%E7%BF%BB%E7%89%86/"/>
    
  </entry>
  
  <entry>
    <title>用gv.vim查看git提交歷史</title>
    <link href="http://0x3f.org/post/gv-vim/"/>
    <id>http://0x3f.org/post/gv-vim/</id>
    <published>2017-10-18T05:28:16.000Z</published>
    <updated>2017-10-22T13:37:09.982Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/junegunn/gv.vim" target="_blank" rel="external">gv.vim</a>是fugitive的插件，用於查看git提交歷史，特點是速度快、好用。我现在用它做code review。</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>gll :GV --<span class="keyword">no</span>-merges<span class="symbol">&lt;CR&gt;</span></div><div class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>glc :GV!<span class="symbol">&lt;CR&gt;</span></div><div class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>gla :GV --<span class="keyword">no</span>-merges --author<span class="symbol">&lt;space&gt;</span></div><div class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;leader&gt;</span>glg :GV --<span class="keyword">no</span>-merges --<span class="keyword">grep</span><span class="symbol">&lt;space&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/junegunn/gv.vim&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gv.vim&lt;/a&gt;是fugitive的插件，用於查看git提交歷史，特點是速度快、好用。我现在用它做code revie
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="git" scheme="http://0x3f.org/tags/git/"/>
    
      <category term="vim" scheme="http://0x3f.org/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>解決phpqa和fugitive不兼容的問題</title>
    <link href="http://0x3f.org/post/solve-the-incompatablility-between-fugitive-and-phpqa/"/>
    <id>http://0x3f.org/post/solve-the-incompatablility-between-fugitive-and-phpqa/</id>
    <published>2017-10-18T03:05:12.000Z</published>
    <updated>2017-10-22T13:37:09.982Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>:Gstatus</code>中查看diff時，報錯：</p>
<blockquote>
<p>Error detected while processing function Phpqa#PhpLint:<br>line    8:<br>E684: list index out of range: 0<br>E116: Invalid arguments for function match(l:php_list[0],”No syntax errors”) == -1<br>E15: Invalid expression: 0 != v:shell_error &amp;&amp; match(l:php_list[0],”No syntax errors”) == -1</p>
</blockquote>
<p>這是phpqa的bug，有人創建了PR，但作者沒有合併，需要手工合併：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L https://github.com/joonty/vim-phpqa/pull/43.patch | git am</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;code&gt;:Gstatus&lt;/code&gt;中查看diff時，報錯：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Error detected while processing function Phpqa#PhpLint:&lt;br&gt;line    8:&lt;br&gt;E684: lis
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="vim" scheme="http://0x3f.org/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>讀完《美的歷程》</title>
    <link href="http://0x3f.org/post/after-reading-historical-evolution-of-aesthetics/"/>
    <id>http://0x3f.org/post/after-reading-historical-evolution-of-aesthetics/</id>
    <published>2017-09-25T08:43:08.000Z</published>
    <updated>2017-09-26T14:40:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>這是我讀過的第一本美學書。梳理了中國文藝和審美髮展的歷史脈絡，淺顯易懂。</p>
<p>多讀點美學還是很有必要的，能減少點俗氣，那就最好了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;這是我讀過的第一本美學書。梳理了中國文藝和審美髮展的歷史脈絡，淺顯易懂。&lt;/p&gt;
&lt;p&gt;多讀點美學還是很有必要的，能減少點俗氣，那就最好了。&lt;/p&gt;

    
    </summary>
    
      <category term="青梅煮酒" scheme="http://0x3f.org/categories/%E9%9D%92%E6%A2%85%E7%85%AE%E9%85%92/"/>
    
    
      <category term="讀書" scheme="http://0x3f.org/tags/%E8%AE%80%E6%9B%B8/"/>
    
      <category term="美學" scheme="http://0x3f.org/tags/%E7%BE%8E%E5%AD%B8/"/>
    
  </entry>
  
  <entry>
    <title>為什麼不應該給表名加前綴</title>
    <link href="http://0x3f.org/post/why-prefixes-are-not-needed-for-table-names/"/>
    <id>http://0x3f.org/post/why-prefixes-are-not-needed-for-table-names/</id>
    <published>2017-09-25T06:12:41.000Z</published>
    <updated>2017-09-26T14:40:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>表前綴是個過時的東西。在計算機資源比較昂貴的時代，出於節約成本的需要，會把多個系統的數據放在同一個數據庫實例里，所以才會用前綴區分。如今各種雲的普及，使這個問題早已經不存在，大家的資源都是冗余的，沒有人會把多個系統的表放到同一個庫里，這會給運維帶來不必要的麻煩。</p>
<p>然而身邊總是會遇到膠柱鼓瑟的人，知其然而不知其所以然。表前綴既非必要，又會導致一些問題。</p>
<p>其一是寫代碼時的困擾。比如我經常會在用查詢構造器時忘了給表別名加前綴，直到程序報錯才突然想起來。</p>
<p>其二是代碼重構的問題。在構造SQL語句的過程中，總是免不了會寫原生的語句，這時就得寫死表前綴。如果將來表前綴發生變化，重構代碼時會麻煩而容易出錯。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;表前綴是個過時的東西。在計算機資源比較昂貴的時代，出於節約成本的需要，會把多個系統的數據放在同一個數據庫實例里，所以才會用前綴區分。如今各種雲的普及，使這個問題早已經不存在，大家的資源都是冗余的，沒有人會把多個系統的表放到同一個庫里，這會給運維帶來不必要的麻煩。&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="隨筆" scheme="http://0x3f.org/tags/%E9%9A%A8%E7%AD%86/"/>
    
  </entry>
  
  <entry>
    <title>用AlfredTweet發推</title>
    <link href="http://0x3f.org/post/tweet-with-alfredtweet/"/>
    <id>http://0x3f.org/post/tweet-with-alfredtweet/</id>
    <published>2017-09-17T01:26:41.000Z</published>
    <updated>2017-09-17T01:35:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>AlfredTweet是用來解決“最後一公里”問題的東西，有了它就可以隨時發推了。</p>
<p>需要修改源碼指定代理：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// twitteroauth.php</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">http</span><span class="params">($url, $method, $postfields = NULL)</span> </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    curl_setopt($ci, CURLOPT_HTTPPROXYTUNNEL, <span class="keyword">TRUE</span>);</div><div class="line">    curl_setopt($ci, CURLOPT_PROXY, <span class="string">'127.0.0.1:1086'</span>);</div><div class="line">    curl_setopt($ci, CURLOPT_PROXYTYPE, CURLPROXY_SOCKS5);</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AlfredTweet是用來解決“最後一公里”問題的東西，有了它就可以隨時發推了。&lt;/p&gt;
&lt;p&gt;需要修改源碼指定代理：&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div cl
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="最佳實踐" scheme="http://0x3f.org/tags/%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90/"/>
    
      <category term="mac" scheme="http://0x3f.org/tags/mac/"/>
    
      <category term="工具" scheme="http://0x3f.org/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>讀完《漢書》</title>
    <link href="http://0x3f.org/post/after-reading-han-shu/"/>
    <id>http://0x3f.org/post/after-reading-han-shu/</id>
    <published>2017-09-10T15:34:19.000Z</published>
    <updated>2017-09-18T00:26:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>一周前讀完了《漢書》。</p>
<p>因為<a href="/post/after-reading-tong-jian/">讀過《資治通鑒》</a>，這次並沒有發現太多新鮮的東西，印象最深的是班氏父子的嚴謹，超過了兩個司馬。比如對於成帝的死，作為通史的《通鑒》居然寫得比斷代的《漢書》還詳細，對於史書，詳和實似乎是一對矛盾，前者自然更好看，而後者顯然更嚴謹。</p>
<p>秦漢之際，中國先後完成了兩次宏大的社會實踐。一次是秦的法家實踐，一次是王莽的儒家改制。歷史先後把機會給了構成中國日後民族性格最主要的兩個思想流派，又用殘酷的現實給這兩個處處針鋒相對的對頭以當頭棒喝。兩家對對方缺陷的研究都在對方的失敗里得到印證，而同時對自身的問題又都視而不見。這是非常戲劇性的一幕，儒法之爭作為中國兩千年政治的基本矛盾和規律，在一開始就被證明誰都不能獨力承擔給這個國家指明出路的責任。</p>
<p>按照錢穆在《中國歷代政治得失》里的說法，昂揚向上的知識分子在先秦百家爭鳴最大成就的儒法兩家全部失敗後就頹了，懷疑和茫然蔓延開來，第一帝國也由此走向衰亡。而從另一角度，李泽厚在《美的歷程》里卻認為，社會實踐的失敗引發了思想的解放和自我意識的覺醒，第一帝國在政治上的失敗並沒有影響其文化向心力，胡塵狼煙中的北方仍以文弱江南為衣冠正朔所在。</p>
<p>對於接下來的《後漢書》，我的期待不高，憑借門閥起家的光武帝一改前漢打壓豪強的政策，章帝之後再無中興，然後是在無休止的宦戚之爭、鮮卑盜邊和羌亂中回響的桓靈的嘆息。</p>
<p>第一帝國在巔峰中死去。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一周前讀完了《漢書》。&lt;/p&gt;
&lt;p&gt;因為&lt;a href=&quot;/post/after-reading-tong-jian/&quot;&gt;讀過《資治通鑒》&lt;/a&gt;，這次並沒有發現太多新鮮的東西，印象最深的是班氏父子的嚴謹，超過了兩個司馬。比如對於成帝的死，作為通史的《通鑒》居然寫得比斷代
    
    </summary>
    
      <category term="青梅煮酒" scheme="http://0x3f.org/categories/%E9%9D%92%E6%A2%85%E7%85%AE%E9%85%92/"/>
    
    
      <category term="讀書" scheme="http://0x3f.org/tags/%E8%AE%80%E6%9B%B8/"/>
    
      <category term="歷史" scheme="http://0x3f.org/tags/%E6%AD%B7%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>什麼是docker</title>
    <link href="http://0x3f.org/post/what-is-docker/"/>
    <id>http://0x3f.org/post/what-is-docker/</id>
    <published>2017-09-07T07:31:11.000Z</published>
    <updated>2017-09-10T15:32:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什麼是docker"><a href="#什麼是docker" class="headerlink" title="什麼是docker"></a>什麼是docker</h2><p>docker是一種容器，<a href="http://www.infoq.com/cn/articles/container-landscape-2016" target="_blank" rel="external">這篇文章</a>對容器的定義是：</p>
<blockquote>
<p>容器是一組運行在Linux操作系統上並使用命名空間進程進行分隔的進程，有了容器就無需再啓動和維護虛擬機。與虛擬機技術相比，容器的最大不同之處在於打包格式和可移植性。構建容器的目的在於為現代基礎設施降低佔用空間和啓動時間、提供重用性、更好地利用服務器資源，並更好地集成到整個開發生態系統中（例如持續集成和交付生命週期）。</p>
</blockquote>
<p>容器相對於虛擬機有以下優點：</p>
<ul>
<li>更高效地利用系統資源</li>
<li>更快的啓動速度</li>
<li>一致的運行環境</li>
<li>持續的交付和部署</li>
<li>更輕鬆的遷移</li>
<li>維護和擴展的便利性</li>
</ul>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="鏡像"><a href="#鏡像" class="headerlink" title="鏡像"></a>鏡像</h3><p>Docker 鏡像是一個特殊的文件系統，除了提供容器運行時所需的程序、庫、資源、配置等文件外，還包含了一些為運行時準備的一些配置參數（如匿名卷、環境變量、用戶等）。鏡像不包含任何動態數據，其內容在構建之後也不會被改變。</p>
<p>鏡像分為黑箱鏡像和dockerfile。</p>
<p>前者通過實際創建和配置docker容器並通過<code>docker commit</code>記錄每個版本的變更，優點是簡單直觀，缺點是不能記錄在基礎鏡像上做了哪些操作，並且在多次修改之後，鏡像會變得很臃腫。</p>
<p>dockerfile是鏡像的配置文件，部署時docker根據配置內容生成容器，優點是可以清楚地記錄每次修改的內容、鏡像體積很小，缺點是編寫時比較複雜。</p>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>容器是鏡像運行的實體。</p>
<h3 id="倉庫"><a href="#倉庫" class="headerlink" title="倉庫"></a>倉庫</h3><p>分發鏡像的服務。</p>
<h3 id="編排"><a href="#編排" class="headerlink" title="編排"></a>編排</h3><p>容器的編排包含如下一系列任務：</p>
<ul>
<li>調度（包括部署、複製、擴展、復活、重新調度、升級、降級等）</li>
<li>資源管理（內存、CPU、存儲空間、端口、IP、鏡像等）</li>
<li>服務管理（即使用標籤、分組、命名空間、負載均衡和準備就緒檢查將多個容器編排在一起）</li>
</ul>
<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>我在黑蘋果下安裝。Mac下安裝docker有兩種方式：Docker for Mac或Docker Toolbox。前者最簡單，後者在前者的系統要求不能被滿足的情況下使用。後者的卸載比較麻煩，具體參照<a href="https://github.com/widuu/chinese_docker/blob/master/installation/mac.md" target="_blank" rel="external">這裡</a>。</p>
<p>我用前種方式安裝，啓動時報錯：</p>
<blockquote>
<p>com.docker.osx.hyperkit.linux failed to start</p>
</blockquote>
<p>解決方法是到BIOS里打開VT特性，有說法說黑蘋果不支持VT，我這裡是可以的。</p>
<h3 id="鏡像加速器"><a href="#鏡像加速器" class="headerlink" title="鏡像加速器"></a>鏡像加速器</h3><p>一般用阿里雲的鏡像服務。</p>
<h2 id="docker的使用"><a href="#docker的使用" class="headerlink" title="docker的使用"></a>docker的使用</h2><h3 id="拉取鏡像"><a href="#拉取鏡像" class="headerlink" title="拉取鏡像"></a>拉取鏡像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull base/archlinux</div></pre></td></tr></table></figure>
<h3 id="列出鏡像"><a href="#列出鏡像" class="headerlink" title="列出鏡像"></a>列出鏡像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker images</div></pre></td></tr></table></figure>
<h3 id="創建容器"><a href="#創建容器" class="headerlink" title="創建容器"></a>創建容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name arch --it base/archlinux bash</div></pre></td></tr></table></figure>
<h3 id="終止容器"><a href="#終止容器" class="headerlink" title="終止容器"></a>終止容器</h3><p><code>exit</code>或<code>ctrl-d</code></p>
<h3 id="啓動已終止容器"><a href="#啓動已終止容器" class="headerlink" title="啓動已終止容器"></a>啓動已終止容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker start arch</div></pre></td></tr></table></figure>
<h3 id="attach運行中的容器"><a href="#attach運行中的容器" class="headerlink" title="attach運行中的容器"></a>attach運行中的容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker attach arch</div></pre></td></tr></table></figure>
<h3 id="detach運行中的容器"><a href="#detach運行中的容器" class="headerlink" title="detach運行中的容器"></a>detach運行中的容器</h3><p><code>ctrl+p ctrl+q</code>或者：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker detach arch</div></pre></td></tr></table></figure>
<h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看運行中的容器</span></div><div class="line">docker ps -q</div><div class="line"></div><div class="line"><span class="comment"># 查看所有，包括已終止的</span></div><div class="line">docker ps -a</div></pre></td></tr></table></figure>
<h3 id="刪除已終止容器"><a href="#刪除已終止容器" class="headerlink" title="刪除已終止容器"></a>刪除已終止容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker rm arch</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什麼是docker&quot;&gt;&lt;a href=&quot;#什麼是docker&quot; class=&quot;headerlink&quot; title=&quot;什麼是docker&quot;&gt;&lt;/a&gt;什麼是docker&lt;/h2&gt;&lt;p&gt;docker是一種容器，&lt;a href=&quot;http://www.infoq.com/
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="筆記" scheme="http://0x3f.org/tags/%E7%AD%86%E8%A8%98/"/>
    
      <category term="容器" scheme="http://0x3f.org/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="docker" scheme="http://0x3f.org/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>讓hexo使用小寫文件名</title>
    <link href="http://0x3f.org/post/let-hexo-use-lowercase-filename/"/>
    <id>http://0x3f.org/post/let-hexo-use-lowercase-filename/</id>
    <published>2017-08-15T05:25:50.000Z</published>
    <updated>2017-08-16T13:23:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>hexo在生成tag目錄時默認保持大小寫，如果tag名稱摻雜了大小寫，會導致用tag索引文章的鏈接無法訪問。解決的辦法是強制hexo使用小寫的文件或目錄名，修改<code>_config.yml</code>：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">filename_case:</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<p>即便如此，還要把之前生成的結果從托管服務器上刪除，不過在Mac這樣的不區分大小寫的文件系統中，直接部署新生成的結果是無效的，這時需要刪除hexo目錄下的<code>.deploy_git</code>目錄並重新部署：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rm -rf .deploy_git</div><div class="line"></div><div class="line">hexo clean</div><div class="line">hexo d -g</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo在生成tag目錄時默認保持大小寫，如果tag名稱摻雜了大小寫，會導致用tag索引文章的鏈接無法訪問。解決的辦法是強制hexo使用小寫的文件或目錄名，修改&lt;code&gt;_config.yml&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight ym
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="hexo" scheme="http://0x3f.org/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>用vim-test簡化單元測試的編寫</title>
    <link href="http://0x3f.org/post/make-writing-unit-tests-easier-with-vim-test/"/>
    <id>http://0x3f.org/post/make-writing-unit-tests-easier-with-vim-test/</id>
    <published>2017-08-14T08:43:59.000Z</published>
    <updated>2017-08-14T13:55:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>vim-test允許在Vim中直接執行一個或多個單元測試，並使用預設的或自定義的執行策略。</p>
<p>例如，命令<code>:TestNearest</code>可以執行當前測試文件中離光標最近的一個測試方法。而<code>:TestFile</code>、<code>:TestSuite</code>和<code>:TestLast</code>分別執行整個測試文件、測試項目和最近一次執行過的測試。這在編寫測試代碼時能很大地提高效率。</p>
<p>執行策略是執行測試的方式和環境。例如缺省狀態下，將使用<code>:!</code>執行測試命令，這會從Vim切換回終端。而在MacVim下，可以選擇在iTerm或者系統自帶的Terminal中執行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vim-test允許在Vim中直接執行一個或多個單元測試，並使用預設的或自定義的執行策略。&lt;/p&gt;
&lt;p&gt;例如，命令&lt;code&gt;:TestNearest&lt;/code&gt;可以執行當前測試文件中離光標最近的一個測試方法。而&lt;code&gt;:TestFile&lt;/code&gt;、&lt;code&gt;
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="編程" scheme="http://0x3f.org/tags/%E7%B7%A8%E7%A8%8B/"/>
    
      <category term="php" scheme="http://0x3f.org/tags/php/"/>
    
      <category term="vim" scheme="http://0x3f.org/tags/vim/"/>
    
      <category term="單元測試" scheme="http://0x3f.org/tags/%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6/"/>
    
  </entry>
  
  <entry>
    <title>把博客字體改成了方正北魏楷書</title>
    <link href="http://0x3f.org/post/set-blog-webfont-to-fzbeiweikaishu/"/>
    <id>http://0x3f.org/post/set-blog-webfont-to-fzbeiweikaishu/</id>
    <published>2017-08-14T08:05:30.000Z</published>
    <updated>2017-08-14T13:55:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>我曾說過<a href="/post/best-practices-of-calibre-on-formatting/">方正北魏楷書是最佳的閱讀字體</a>，不過後來感覺長時間閱讀的體驗還是普通的楷體更好。但這並不妨礙在Reeder、博客這種短時閱讀場合突出頁面的設計感。</p>
<p>今天把博客（hexo）的webfont改成了方正北魏楷書，用font-spider壓縮後，從13M縮減到1.4M。方法是這樣的：</p>
<p>首先把完整的字體複製到主題的字體目錄中（themes/crisp/source/fonts），文件名為<code>FZBeiWeiKaiShu-full.ttf</code>。</p>
<p>在CSS中加入webfont配置：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">font-face</span> &#123;</div><div class="line">  	<span class="attribute">font-family</span>: <span class="string">'FZBeiWeiKaiShu'</span>;</div><div class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'../fonts/FZBeiWeiKaiShu.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>),</div><div class="line">         <span class="built_in">url</span>(<span class="string">'../fonts/FZBeiWeiKaiShu-full.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>FZBeiWeiKaiShu.ttf</code>是壓縮後的字體文件名，這樣訪問時瀏覽器會優先下載壓縮後的字體。</p>
<p>然後把CSS中使用字體的地方都指定為<code>FZBeiWeiKaiShu</code>。</p>
<p>在博客根目錄下創建腳本<code>update_fonts.sh</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"></div><div class="line">hexo clean</div><div class="line">hexo g</div><div class="line"></div><div class="line">find public -name <span class="string">"*.html"</span> |xargs sed -i <span class="string">''</span> <span class="string">"s#/styles/crisp.css#<span class="variable">$HOME</span>/Projects/blog/public/styles/crisp.css#g"</span></div><div class="line">find public -name <span class="string">"*.html"</span>|xargs font-spider</div><div class="line"></div><div class="line">cp -f public/fonts/FZBeiWeiKaiShu.ttf themes/crisp/<span class="built_in">source</span>/fonts/FZBeiWeiKaiShu.ttf</div><div class="line"></div><div class="line">hexo clean</div><div class="line">hexo s -g</div></pre></td></tr></table></figure>
<p>除非用到新的字符，否則不需要經常更新字體。</p>
<p>font-spider會提示一共使用了多少種字符，我這麼多年也只用到三千多種，真是太沒文化了。🤥</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我曾說過&lt;a href=&quot;/post/best-practices-of-calibre-on-formatting/&quot;&gt;方正北魏楷書是最佳的閱讀字體&lt;/a&gt;，不過後來感覺長時間閱讀的體驗還是普通的楷體更好。但這並不妨礙在Reeder、博客這種短時閱讀場合突出頁面的設計感。
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="筆記" scheme="http://0x3f.org/tags/%E7%AD%86%E8%A8%98/"/>
    
      <category term="博客" scheme="http://0x3f.org/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Mock Laravel的DB Facade的方法</title>
    <link href="http://0x3f.org/post/how-to-mock-the-db-facade-of-laravel/"/>
    <id>http://0x3f.org/post/how-to-mock-the-db-facade-of-laravel/</id>
    <published>2017-08-14T07:51:41.000Z</published>
    <updated>2017-08-14T13:55:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>關於數據庫操作是否應該mock的問題，我認為查詢一般不應該mock，可以避免一些問題，但如果查詢的結果可能影響到斷言，就應該mock了。</p>
<p>Laravel的DB facade完整的mock實例是這樣的：</p>
<script src="//gist.github.com/d0ace9c1ebdb161adf229c9a9c62f2bf.js"></script>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;關於數據庫操作是否應該mock的問題，我認為查詢一般不應該mock，可以避免一些問題，但如果查詢的結果可能影響到斷言，就應該mock了。&lt;/p&gt;
&lt;p&gt;Laravel的DB facade完整的mock實例是這樣的：&lt;/p&gt;
&lt;script src=&quot;//gist.githu
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="編程" scheme="http://0x3f.org/tags/%E7%B7%A8%E7%A8%8B/"/>
    
      <category term="php" scheme="http://0x3f.org/tags/php/"/>
    
      <category term="laravel" scheme="http://0x3f.org/tags/laravel/"/>
    
      <category term="單元測試" scheme="http://0x3f.org/tags/%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6/"/>
    
  </entry>
  
  <entry>
    <title>用vim-laravel簡化laravel下的開發</title>
    <link href="http://0x3f.org/post/speed-up-artisan-with-vim-laravel/"/>
    <id>http://0x3f.org/post/speed-up-artisan-with-vim-laravel/</id>
    <published>2017-08-11T07:05:30.000Z</published>
    <updated>2017-08-11T13:41:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>vim-laravel是個極簡而實用的插件，只提供一個<code>:Artisan</code>命令。但它並不僅僅是<code>artisan</code>的一個wrapper，還可以實現一些貼心的自動化，利如自動打開<code>artisan make:*</code>創建的文件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vim-laravel是個極簡而實用的插件，只提供一個&lt;code&gt;:Artisan&lt;/code&gt;命令。但它並不僅僅是&lt;code&gt;artisan&lt;/code&gt;的一個wrapper，還可以實現一些貼心的自動化，利如自動打開&lt;code&gt;artisan make:*&lt;/code&gt;創
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="vim" scheme="http://0x3f.org/tags/vim/"/>
    
      <category term="最佳實踐" scheme="http://0x3f.org/tags/%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90/"/>
    
  </entry>
  
  <entry>
    <title>用vim-php-namespace管理PHP的命名空間</title>
    <link href="http://0x3f.org/post/manage-php-namespaces-with-vim-php-namespace/"/>
    <id>http://0x3f.org/post/manage-php-namespaces-with-vim-php-namespace/</id>
    <published>2017-08-11T06:56:12.000Z</published>
    <updated>2017-08-11T13:41:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>vim-php-namespace是個簡單實用的插件，提供三種功能：</p>
<ul>
<li>自動用use語句導入光標下的類</li>
<li>自動把光標下的類名擴展成完整命名空間的格式</li>
<li>自動排序use語句</li>
</ul>
<p>此外，還提供一個選項控制是否在導入類後自動排序use語句。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vim-php-namespace是個簡單實用的插件，提供三種功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自動用use語句導入光標下的類&lt;/li&gt;
&lt;li&gt;自動把光標下的類名擴展成完整命名空間的格式&lt;/li&gt;
&lt;li&gt;自動排序use語句&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，還提供一個選
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="vim" scheme="http://0x3f.org/tags/vim/"/>
    
      <category term="最佳實踐" scheme="http://0x3f.org/tags/%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90/"/>
    
  </entry>
  
  <entry>
    <title>使neocomplete和ultisnips共用tab鍵的方法</title>
    <link href="http://0x3f.org/post/reconcile-neocomplete-with-ultisnips/"/>
    <id>http://0x3f.org/post/reconcile-neocomplete-with-ultisnips/</id>
    <published>2017-08-11T06:43:14.000Z</published>
    <updated>2017-08-11T13:41:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天用vim-clevertab換掉了supertab，但是實際使用中總是出莫名其妙的問題。看了一下插件源碼，使用全局變量判斷狀態，這是個很不靠譜的方案，所以還是卸掉了。</p>
<p>下面的配置可以很好的解決問題：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="variable">g:UltiSnipsExpandTrigger</span>=<span class="string">"&lt;c-tab&gt;"</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:UltiSnipsJumpForwardTrigger</span>=<span class="string">"&lt;c-tab&gt;"</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:UltiSnipsJumpBackwardTrigger</span>=<span class="string">"&lt;s-tab&gt;"</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:UltiSnipsSnippetsDir</span>=<span class="string">'~/.vim/UltiSnips'</span></div><div class="line"><span class="keyword">let</span> <span class="variable">g:ulti_expand_or_jump_res</span> = <span class="number">0</span></div><div class="line"><span class="function"><span class="keyword">function</span>! <span class="title">CleverTab</span><span class="params">()</span>"&#123;&#123;&#123;</span></div><div class="line">    <span class="keyword">call</span> UltiSnips#ExpandSnippetOrJump()</div><div class="line">    <span class="keyword">if</span> <span class="variable">g:ulti_expand_or_jump_res</span></div><div class="line">        <span class="keyword">return</span> <span class="string">""</span></div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">if</span> <span class="built_in">pumvisible</span>()</div><div class="line">            <span class="keyword">return</span> <span class="string">"\&lt;c-n&gt;"</span></div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> neocomplete#start_manual_complete()</div><div class="line">        <span class="keyword">endif</span></div><div class="line">    <span class="keyword">endif</span></div><div class="line"><span class="keyword">endfunction</span><span class="comment">"&#125;&#125;&#125;</span></div><div class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;silent&gt;</span> <span class="symbol">&lt;tab&gt;</span> <span class="symbol">&lt;c-r&gt;</span>=CleverTab()<span class="symbol">&lt;cr&gt;</span></div><div class="line"><span class="keyword">snoremap</span> <span class="symbol">&lt;silent&gt;</span> <span class="symbol">&lt;tab&gt;</span> <span class="symbol">&lt;esc&gt;</span>:<span class="keyword">call</span> UltiSnips#ExpandSnippetOrJump()<span class="symbol">&lt;cr&gt;</span></div></pre></td></tr></table></figure>
<p>ultisnips沒有禁用按鍵映射的開關，而默認的映射會干擾上述配置，所以這裡把默認的映射改成了<code>&lt;c-tab&gt;</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天用vim-clevertab換掉了supertab，但是實際使用中總是出莫名其妙的問題。看了一下插件源碼，使用全局變量判斷狀態，這是個很不靠譜的方案，所以還是卸掉了。&lt;/p&gt;
&lt;p&gt;下面的配置可以很好的解決問題：&lt;/p&gt;
&lt;figure class=&quot;highlight
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="vim" scheme="http://0x3f.org/tags/vim/"/>
    
      <category term="最佳實踐" scheme="http://0x3f.org/tags/%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL：RESTful之外的接口實現方案</title>
    <link href="http://0x3f.org/post/graphql-vs-restful/"/>
    <id>http://0x3f.org/post/graphql-vs-restful/</id>
    <published>2017-08-01T09:36:27.000Z</published>
    <updated>2017-09-01T00:10:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>和RESTfull一樣，GraphQL也是一種基於HTTP的接口實現方式。它區別於前者的主要有兩點：數據格式的自定義和請求的合併。</p>
<p>本質上，GraphQL是為了解決RESTful中前後端在業務邏輯上的耦合關係。在RESTful中，接口是為前端具體的業務需求定制的，從實現什麼樣的功能，到返回哪些數據，都是既定的，所以很難被其它業務邏輯共用，即使可以共用，前端也必須發送多個請求到後端，因而造成資源浪費、效率下降。</p>
<p>GraphQL實現的是一套邏輯積木，每個封裝好的業務邏輯都是原子的，前端可以自由選擇使用哪些，也可以定制返回數據的格式。並且這一切，都可以通過一次請求實現。</p>
<p>當然，GraphQL也有一些短板。比如緩存，對於RESTfull接口，可以根據操作的冪等性實現負載均衡層面的緩存，而對於GraphQL，由於請求數據格式靈活且可能很大，請求會用POST方式發送，這樣就必須改變緩存的實現方式。再一點是嵌套的層級問題，GraphQL的靈活性允許查詢類型之間彼此嵌套，如果層級過多，可能導致嚴重的性能和可用性問題，因此需要注意限制嵌套的層級。還有就是GraphQL的實現複雜度比RESTful要高，需要權衡使用哪種實現方案。</p>
<p>GraphQL用schema管理接口，可以根據業務等因素劃分schema，例如需要權限驗證的和公開的。每個schema包含兩類接口：query和mutation，分別用來查詢和變更數據。</p>
<p>下面在Laravel中簡單實現一個query接口。</p>
<p>先安裝<a href="https://github.com/Folkloreatelier/laravel-graphql" target="_blank" rel="external">folklore/graphql</a>庫。</p>
<p>實現文章類型：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">GraphQL</span>\<span class="title">Type</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">GraphQL</span>\<span class="title">Type</span>\<span class="title">Definition</span>\<span class="title">Type</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Folklore</span>\<span class="title">GraphQL</span>\<span class="title">Support</span>\<span class="title">Type</span> <span class="title">as</span> <span class="title">GraphQLType</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostType</span> <span class="keyword">extends</span> <span class="title">GraphQLType</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fields</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> [</div><div class="line">			<span class="string">'id'</span> =&gt; [</div><div class="line">				<span class="string">'type'</span> =&gt; Type::nonNull(Type::string()),</div><div class="line">				<span class="string">'description'</span> =&gt; <span class="string">'The id of the post'</span></div><div class="line">			],</div><div class="line">			<span class="string">'title'</span> =&gt; [</div><div class="line">				<span class="string">'type'</span> =&gt; Type::string(),</div><div class="line">				<span class="string">'description'</span> =&gt; <span class="string">'Post title'</span></div><div class="line">			]</div><div class="line">		];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveTitleField</span><span class="params">($root, $args)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> $root-&gt;post_title;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>實現文章的查詢邏輯：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">GraphQL</span>\<span class="title">Query</span>;</div><div class="line"></div><div class="line"><span class="keyword">use</span> <span class="title">GraphQL</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">GraphQL</span>\<span class="title">Type</span>\<span class="title">Definition</span>\<span class="title">Type</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">Folklore</span>\<span class="title">GraphQL</span>\<span class="title">Support</span>\<span class="title">Query</span>;</div><div class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Models</span>\<span class="title">Post</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostQuery</span> <span class="keyword">extends</span> <span class="title">Query</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">type</span><span class="params">()</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">return</span> Type::listOf(GraphQL::type(<span class="string">'Post'</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">resolve</span><span class="params">($root, $args)</span></span></div><div class="line">	&#123;</div><div class="line">		<span class="keyword">if</span>(<span class="keyword">isset</span>($args[<span class="string">'id'</span>])) &#123;</div><div class="line">			<span class="keyword">return</span> Post::where(<span class="string">'id'</span> , $args[<span class="string">'id'</span>])-&gt;get();</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">return</span> Post::all();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>config/graphql.php</code>中註冊類型和邏輯：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="string">'schemas'</span> =&gt; [</div><div class="line">   <span class="string">'default'</span> =&gt; [</div><div class="line">       <span class="string">'query'</span> =&gt; [</div><div class="line">           <span class="string">'posts'</span> =&gt; <span class="string">'App\GraphQL\Query\PostQuery'</span></div><div class="line">       ],</div><div class="line">       <span class="string">'mutation'</span> =&gt; [</div><div class="line"></div><div class="line">       ]</div><div class="line">   ],</div><div class="line">],</div><div class="line"></div><div class="line"><span class="string">'types'</span> =&gt; [</div><div class="line">   <span class="string">'Post'</span> =&gt; <span class="string">'App\GraphQL\Type\PostType'</span>,</div><div class="line">],</div></pre></td></tr></table></figure>
<p>請求及結果如下：</p>
<p><img src="http://ou1l9js54.bkt.clouddn.com/2017-08-02-15016540828445.jpg" alt=""></p>
<p>GraphQL並不是RESTful的替代方案，是否用前者替代後者，取決於是否願意為了靈活性而增加複雜度。兩者有各自的適用領域，GraphQL更適合用來實現開放接口。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;和RESTfull一樣，GraphQL也是一種基於HTTP的接口實現方式。它區別於前者的主要有兩點：數據格式的自定義和請求的合併。&lt;/p&gt;
&lt;p&gt;本質上，GraphQL是為了解決RESTful中前後端在業務邏輯上的耦合關係。在RESTful中，接口是為前端具體的業務需求定制
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="編程" scheme="http://0x3f.org/tags/%E7%B7%A8%E7%A8%8B/"/>
    
      <category term="php" scheme="http://0x3f.org/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>用vim-plug換掉了vim-addon-manager</title>
    <link href="http://0x3f.org/post/replaced-vam-with-vim-plug/"/>
    <id>http://0x3f.org/post/replaced-vam-with-vim-plug/</id>
    <published>2017-07-31T14:44:16.000Z</published>
    <updated>2017-07-31T15:36:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>四年零兩個月前，我在Vim的郵件組中<a href="https://groups.google.com/forum/#!topic/vim_use/P3xpaHr8-do" target="_blank" rel="external">徵詢pathogen和vundle的優劣</a>。一個人建議我試試VAM，語氣幽怨——他是它的作者。</p>
<p>試過之後就從pathogen遷移到了VAM，因為它兼有前者和vundle的優點，在當時，這是最好的插件管理器。就這樣用了很久，期間還寫了點腳本<a href="/post/simplify-vim-addon-installation-issues/">簡化插件的管理</a>，VAM工作得很好。</p>
<p>最近發現越來越多的插件的文檔里提到vim-plug，亮點是支持並行安裝和更新，這真是解決了VAM最大的痛點：我疊代了十年的vimrc里用了很多插件，串行的VAM每次更新都讓我很痛苦。</p>
<p>另外，vim-plug較VAM的另一個優勢是簡單。這倒不是說後者很難用，只是作者過於追求靈活性，導致有些工作實現起來相對更複雜。例如，有的插件安裝之後需要做一些額外的操作，VAM需要自己實現回調函數，然後掛到post-install鈎子上。而對於vim-plug，只需要在註冊插件的地方增加一個選項。對於插件的懶加載，也是同樣。</p>
<p>VAM也有自己的優勢。其中之一是可以自動處理依賴關係：當一個要被安裝的插件依賴別的插件時，相應的依賴也會被自動安裝。還有就是對多源的支持：既可以拉取github上的插件，也可以從vim.org或其它源安裝。而vim-plug就只支持github。</p>
<p>所以，vim-plug並沒有全面超過VAM，只是沒有明顯的短板、功能又剛剛夠用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;四年零兩個月前，我在Vim的郵件組中&lt;a href=&quot;https://groups.google.com/forum/#!topic/vim_use/P3xpaHr8-do&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;徵詢pathogen和vundle的
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="vim" scheme="http://0x3f.org/tags/vim/"/>
    
      <category term="最佳實踐" scheme="http://0x3f.org/tags/%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90/"/>
    
  </entry>
  
  <entry>
    <title>用choosewin.vim切換窗口</title>
    <link href="http://0x3f.org/post/choosewin-vim/"/>
    <id>http://0x3f.org/post/choosewin-vim/</id>
    <published>2017-07-30T12:48:46.000Z</published>
    <updated>2017-07-30T12:52:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>輸入<code>-</code>顯示每個窗口的hint，輸入hint跳轉，簡單而高效：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fi277jmdyqj30or0gatby.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;輸入&lt;code&gt;-&lt;/code&gt;顯示每個窗口的hint，輸入hint跳轉，簡單而高效：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcly1fi277jmdyqj30or0gatby.jpg&quot; alt=&quot;&quot;&gt;&lt;/
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="vim" scheme="http://0x3f.org/tags/vim/"/>
    
      <category term="最佳實踐" scheme="http://0x3f.org/tags/%E6%9C%80%E4%BD%B3%E5%AF%A6%E8%B8%90/"/>
    
  </entry>
  
  <entry>
    <title>Python 2還是3是個糾結的問題</title>
    <link href="http://0x3f.org/post/bothered-by-python-2-vs-3/"/>
    <id>http://0x3f.org/post/bothered-by-python-2-vs-3/</id>
    <published>2017-07-30T00:40:11.000Z</published>
    <updated>2017-07-30T02:38:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>前些天用denite取代unite，用<code>--with-python3</code>重裝了vim，結果發現vdebug只支持python 2。</p>
<p>vim同時只能在py2和py3中選一個，據說可以通過重新編譯python實現共存，但是我在編譯py3的時候失敗。</p>
<p>neovim同時支持兩個版本，但是嘗試deoplete失敗，報「Invalid Channel」的錯誤，似乎是python-neovim的鍋。而且由於neovim內建lua、不支持<code>has(&#39;lua&#39;)</code>，所以不能fall back到neocomplete。</p>
<p>萬般無奈，只好換回unite。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前些天用denite取代unite，用&lt;code&gt;--with-python3&lt;/code&gt;重裝了vim，結果發現vdebug只支持python 2。&lt;/p&gt;
&lt;p&gt;vim同時只能在py2和py3中選一個，據說可以通過重新編譯python實現共存，但是我在編譯py3的時候失
    
    </summary>
    
      <category term="計算機" scheme="http://0x3f.org/categories/%E8%A8%88%E7%AE%97%E6%A9%9F/"/>
    
    
      <category term="隨筆" scheme="http://0x3f.org/tags/%E9%9A%A8%E7%AD%86/"/>
    
      <category term="python" scheme="http://0x3f.org/tags/python/"/>
    
      <category term="vim" scheme="http://0x3f.org/tags/vim/"/>
    
  </entry>
  
</feed>
