<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>晴耕雨讀</title><link>http://0x3f.org/</link><description>Donie's blog.</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 10 Oct 2021 21:50:12 +0800</lastBuildDate><atom:link href="http://0x3f.org/index.xml" rel="self" type="application/rss+xml"/><item><title>我的第一台 NAS</title><link>http://0x3f.org/post/my-first-nas/</link><pubDate>Sun, 10 Oct 2021 21:50:12 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/my-first-nas/</guid><description><![CDATA[<p></p>
<p>年初终于攒了一台 NAS 。</p>
<p>之前用一块 1T 的 Buffalo 外置硬盘，但是多年之后，我开始担心这头老水牛还能活多久，况且它的剩余空间也已经不多了。与此同时，手机和电脑的存储空间也像油腻大叔的头发一样越来越少，我必须把沉淀的冷数据迁移出去。身边像有一群饥饿的东西拼命向我伸手。</p>
<p>而且，随着数码设备的增加，尤其在添了一台 Apple TV 后，出于看 YouTube 的目的，我更需要通过软路由的方式改善家庭网络的翻墙体验。</p>
<p>再者，以前看影剧都是把 U 盘插到电视或者微投上，或者通过电脑串流，多少也有点麻烦。</p>
<p>于是打算用一台 All-in-one 解决所有问题。</p>
<h2 id="硬件规格">硬件规格</h2>
<p>最初考虑过群晖、威联通之类的品牌 NAS ，如果能得到更好的使用体验，多花点钱也是可以的。但是看过硬件规格后，感觉我要是以这个价格买了，那就算人生的污点了。</p>
<p>所以开始准备攒机，按优先级列举一下要求：</p>
<ol>
<li>美观，不要傻大黑粗的直男风。</li>
<li>体积小。</li>
<li>兼顾功耗和性能。</li>
<li>内存大（16 ~ 32 G）。</li>
</ol>
<p>先后拟了 4 套配置，和某淘宝店的套装做了一下对比：</p>
<table>
<thead>
<tr>
<th align="center">-</th>
<th>淘宝店方案</th>
<th>价格</th>
<th>方案 1</th>
<th>价格</th>
<th>方案 2</th>
<th>价格</th>
<th>方案 3</th>
<th>价格</th>
<th>方案 4</th>
<th>价格</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">机箱</td>
<td>万由 410</td>
<td>-</td>
<td>万由 410</td>
<td>680</td>
<td>迎广 MS04</td>
<td>930</td>
<td>蜗牛星际B涂装改风扇</td>
<td>275</td>
<td>蜗牛星际B涂装改风扇</td>
<td>275</td>
</tr>
<tr>
<td align="center">电源</td>
<td>益衡 200W</td>
<td>-</td>
<td>益衡 7025B</td>
<td>236</td>
<td>机箱内置</td>
<td>-</td>
<td>益衡 7025B</td>
<td>236</td>
<td>益衡 7025B</td>
<td>236</td>
</tr>
<tr>
<td align="center">主板</td>
<td>B365-ITX 定制工控板</td>
<td>-</td>
<td>华擎 Z390M-ITX/ac</td>
<td>1199</td>
<td>华擎 Z390M-ITX/ac</td>
<td>1199</td>
<td>华擎 Z390M-ITX/ac</td>
<td>1199</td>
<td>华擎 Z390M-ITX/ac（二）</td>
<td>700</td>
</tr>
<tr>
<td align="center">CPU</td>
<td>I5-8600T</td>
<td>-</td>
<td>I5-8600T</td>
<td>825</td>
<td>I5-8600T</td>
<td>825</td>
<td>I5-8600T</td>
<td>825</td>
<td>I5-8600T</td>
<td>825</td>
</tr>
<tr>
<td align="center">散热器</td>
<td>-</td>
<td>-</td>
<td>AVC 28mm 115X</td>
<td>23</td>
<td>AVC 28mm 115X</td>
<td>23</td>
<td>AVC 28mm 115X</td>
<td>23</td>
<td>AVC 28mm 115X</td>
<td>23</td>
</tr>
<tr>
<td align="center">内存</td>
<td>镁光 DDR4 16G 2666</td>
<td>-</td>
<td>光威 DDR4 2666 16G</td>
<td>379</td>
<td>光威 DDR4 2666 16G</td>
<td>379</td>
<td>光威 DDR4 2666 16G</td>
<td>379</td>
<td>海盗船 DDR4 3000 16G×2（二）</td>
<td>700</td>
</tr>
<tr>
<td align="center">总计</td>
<td>-</td>
<td>2999</td>
<td>-</td>
<td>3342</td>
<td>-</td>
<td>3356</td>
<td>-</td>
<td>2937</td>
<td>-</td>
<td>2759</td>
</tr>
</tbody>
</table>
<p>最后选了第 4 种。</p>
<p>其实最难挑的是机箱，专门给 NAS 用的本来就少，大多数还都是没有设计感的商务风，所以最终选了个人喷涂改装的蜗牛星际 B 款机箱。喷涂质量一般，细节粗糙，远看还行。内部空间很逼仄，费了半天功夫也没装上主板，只好用钳子把主板支架的一角掰弯才搞定。</p>
<p>主板只能用 ITX 小板，比 ATX 板贵很多，买的二手，降低成本。</p>
<p>CPU 用当时比较热门的 i5-8600T ，散片刚从 1k+ 降到 800+ 。6 核， T 系列，兼顾性能和功耗。</p>
<p>主板卖家同时也在卖两条海盗船的 16 G 内存，就打包一起买了。</p>
<p>硬盘用了 4 块 4T 的酷狼，后来又加了一条 500G 的 M.2 SSD 当缓存盘，实现硬盘自动休眠。</p>
<h2 id="软件平台">软件平台</h2>
<p>选系统的时候纠结了一阵子，一旦选定了可能会用相当长的时间，不想因为换系统倒腾数据。</p>
<p>列了一下需求，按优先级依次是：</p>
<ol>
<li>稳定、安全。</li>
<li>使用方便，功能完善，体验好。</li>
<li>支持 Docker 和虚拟机，性能损失小。</li>
<li>界面美观。</li>
<li>可以方便地实现硬件直通和硬盘自动休眠。</li>
</ol>
<p>对比了几种常见的 NAS 系统。虽然群晖的系统如雷贯耳，但是对黑群的稳定性有顾虑。ESXi 是商业软件，据说用户体验不错，不过是纯粹的虚拟机平台，不是基于 Linux 的，所以不支持原生的 Docker 。 PVE 基于 Debian ，但是可视化界面比较简陋，需要大量命令行操作和配置。 TrueNAS 以健壮性和 ZFS 著称，但是基于 BSD ，不原生支持 Docker 。</p>
<p>剩下一对瑜亮，OVM 和 Unraid 。 OVM 基于 Debian ，界面简洁易用 ，功能较完善，开源免费，如果没有后者，我肯定就用它了。 Unraid 是商业软件，功能的完备程度、界面的美观程度和易用性都要好于 OVM ，通过校验盘实现冗余备份的方式可以较简单地增减硬盘。</p>
<p>最后买了 Unraid 的 Basic Plan 。</p>
<p></p>
<h2 id="使用感受">使用感受</h2>
<p>目前主要使用以下功能：</p>
<table>
<thead>
<tr>
<th>服务</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>AdGuard Home</td>
<td>DNS 缓存、广告过滤</td>
</tr>
<tr>
<td>Archlinux VM + Redis + MySQL</td>
<td>开发环境</td>
</tr>
<tr>
<td>Cloudflare-DDNS</td>
<td>DDNS</td>
</tr>
<tr>
<td>DDNSTO</td>
<td>备用内网穿透</td>
</tr>
<tr>
<td>DokuWiki</td>
<td>个人维基</td>
</tr>
<tr>
<td>Heimdall</td>
<td>导航页</td>
</tr>
<tr>
<td>Jellyfin</td>
<td>媒体中心</td>
</tr>
<tr>
<td>NAS</td>
<td>存储个人数据、监控视频、 Calibre Library</td>
</tr>
<tr>
<td>OpenWrt</td>
<td>旁路网关</td>
</tr>
<tr>
<td>PhotoPrism</td>
<td>照片管理</td>
</tr>
<tr>
<td>SWAG</td>
<td>Let&rsquo;s Encrypt 证书申请/维护、反向代理</td>
</tr>
<tr>
<td>Time Machine</td>
<td>备份 Macbook Pro</td>
</tr>
<tr>
<td>VaultWarden</td>
<td>密码管理</td>
</tr>
<tr>
<td>WireGuard</td>
<td>VPN</td>
</tr>
<tr>
<td>ZeroTier</td>
<td>内网穿透</td>
</tr>
<tr>
<td>qBittorrent</td>
<td>P2P 下载。</td>
</tr>
<tr>
<td>tinyMediaManager</td>
<td>影视信息刮削</td>
</tr>
<tr>
<td>微力同步</td>
<td>替代 Dropbox 、传输照片到 PhotoPrism</td>
</tr>
</tbody>
</table>
<p>NAS 是我用得最多的功能，平时冷数据全往里扔，减少心理负担。</p>
<p>用 OpenWrt 做旁路网关实现家庭网络翻墙，体验总体还好。为了让 Unraid 的各项功能正常工作，也需要走旁路网关，所以把 OpenWrt 部署到另一台小主机上了。</p>
<p>我那 17 年 8 G 内存的丐版 Macbook Pro 最近越来越显得力不从心，所以时隔多年之后，重新在虚拟机上用回了 Archlinux ， AUR 依然好用，Linux 依然飞快。把开发环境迁移过去，我可以一边流畅地写代码，一边追忆 good old days ，很开心。</p>
<p>虽然没有摄影的爱好，多年积攒的照片也不是我那基础款的 iCloud 和免费的 Google Photos 能放下的，所以一直在外置硬盘里扔着，很少再看。PhotoPrism 有机器学习的能力，可以通过图像识别给照片打标签，也可以实现人脸识别，不过准确度比较一般，算是勉强可用的图片管理系统，总算让我有动力偶尔翻翻旧照片了。</p>
<p>在调研同步照片到 PhotoPrism 的方法的过程中，如果不是注意到了微力同步，我可能就买 PhotoSync 了，在同步照片这个事上，它已经做得足够好了。然而前者不但可以解决这个场景的需求，还可以替代我那只有三个设备限制的免费 Plan 的 Dropbox ，在增加了一台 iMac 之后，早就已经被退出一台设备再登录另一台弄得心碎了。</p>
<p>关于密码管理，在我的 Linux 时代，用了多年 Keepass ，前几年换到 Mac 一段时间后迁移到了 1Password ，虽然它是体验最好的工具，但是在发现 Bitwarden 已经能达到它百分之八九十的体验后，还是想着能省则省吧，好歹一年也有 35$ 。由于早年管理粗犷，且经过多次迁移，累积了很多需要整理的数据，但是免费版的 Bitwarden 账户弱化了这方面的功能。于是我自建了 Vaultwarden 。</p>
<p>在启用了越来越多的服务后，就不能只局限在内网使用了。有两个选择，一个是内网穿透，一个是 DDNS 。ZeroTier 做内网穿透体验很好。不过最近开通了公网 IP 、配置了 DDNS ，开始用 WireGuard ，暂时把 ZeroTier 当作备用线路了。</p>
<p>服务增加后另一个大问题是记忆的压力。反向代理可以实现通过域名访问各种 Docker 服务，避免记忆一堆端口号。SWAG 集成了 ACME 工具和 NGINX ，可以很方便地自动申请和更新 SSL 证书，提供了大量的反向代理模板，稍加修改就可以通过 HTTPS 访问各种内网服务。由于当前版本的 SWAG 的 ACME 默认并不支持小众的 namesilo ，我只好把域名的 DNS 解析服务迁移到了 Cloudflare ，并通过 Cloudflare-DDNS 自动更新 DNS 记录。</p>
<p>随大流搭了 Adguard Home ，众所周知的目的是 DNS 缓存、防污染和过滤广告，而我暂时还没有什么体会。</p>
<p>Jellyfin 也是随大流搭的，这年头好像不上个媒体中心都不叫 NAS 了，在我看来，这种东西唯一的作用就是在移动端看电影，所以应该是个很小众的需求。</p>
<p>不管是用媒体中心还是在电视上的播放器里展示 NAS 中电影的海报墙，都需要刮削工具。桌面版 tinyMediaManager 的体验很好，但是在 Docker 里部署的会有一些我暂时没能解决的问题，而且还显示效果不好、输入中文麻烦。</p>
<p>我很在意硬盘的自动休眠，当然暂时也不打算挂 PT ，目前大部分资源都通过阿里云盘下载，有些优先级不高或者云盘里找不到的也会扔到 qBittorrent 里慢慢下。qBittorrent 是在我这里唯一可用性还可以接受的 BT 下载工具，当然也需要经常更新 trackers 。</p>
<p>为了方便在移动端访问家庭网络里的服务，我用 Heimdall 搭建了一个导航页，有很美观的 UI ，而且对移动端很友好。</p>
<p>最后算笔有意思的账吧，攒这台 All-in-one 软硬件花了大概 7k ，替代 Dropbox Plus 119.88$/y 、 iCloud 200G 252￥/y 、 Google One 200G 29.99$/y 、 1Password 35$/y ，每年省 1.5k ，大约 5 年回本。而如果考虑到省了一台 32G 、 1TB 的 M1 Max ，那真是感觉赚了一个亿……</p>
]]></description></item><item><title>用微力同步换掉了 Dropbox</title><link>http://0x3f.org/post/replace-dropbox-with-verysync/</link><pubDate>Wed, 06 Oct 2021 01:24:41 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/replace-dropbox-with-verysync/</guid><description><![CDATA[<p>我希望找到一种体验较好的方式，把两部手机和索尼黑卡上的照片集中同步到 NAS 上交由 PhotoPrism 托管。</p>
<p>需求如下：</p>
<ol>
<li>可以方便地发送多平台照片到 NAS 。</li>
<li>可以单向同步手机到 NAS 并忽略手机的删除操作，以节省手机的存储空间。</li>
<li>可以实现内网穿透且简单稳定。</li>
<li>便宜。</li>
</ol>
<p>对比了 PhotoSync 、 Resilio Sync 、 Syncthing 和微力同步（verysync）。</p>
<p>PhotoSync 作为专门针对同步照片的场景设计的 APP ，完美覆盖前两点，第三点可以借助 NAS 已经配置好的内网穿透实现，但是需要购买相应的 Plan ，而且 Android 和 iOS 平台要各自单独购买。</p>
<p>Resilio Sync 实现内网穿透需要引入新的依赖关系，不完全满足第三点。</p>
<p>Syncthing 看起来不错，但是没有官方的 iOS 客户端。</p>
<p>微力同步据说是基于 Syncthing 的，且补上了后者缺失的一环。各平台免费，只有 iOS 上需要花 12￥ 买 APP 。</p>
<p>我的 NAS 运行的是 Unraid ， Community Applications 里没有微力同步，在<a href="https://github.com/shuosiw/unraid" target="_blank" rel="noopener noreffer">这里</a>找到了别人配置好的模板，部署很方便。</p>
<p>试用后因为太好用，干脆把 Dropbox 目录也放到微力同步里，卸载了会占用很多内存且免费方案 3 个端的限制早已捉襟见肘的 Dropbox 。</p>
]]></description></item><item><title>使用 Remote Torrent Adder 做 qBittorrent 的客户端</title><link>http://0x3f.org/post/take-remote-torrent-adder-as-client-of-qbittorrent/</link><pubDate>Fri, 20 Aug 2021 00:03:28 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/take-remote-torrent-adder-as-client-of-qbittorrent/</guid><description><![CDATA[<p>我使用部署在 NAS 中的 qBittorrent 下载资源，每次手动复制磁力链链接到 qBittorrent 的 WebUI 很麻烦。</p>
<p><a href="https://chrome.google.com/webstore/detail/remote-torrent-adder/oabphaconndgibllomdcjbfdghcmenci?hl=zh-CN" target="_blank" rel="noopener noreffer">Remote Torrent Adder</a> 是 Chrome 的扩展，可以通过右键菜单把 magnet 等协议的链接发送到多种下载工具，其中就包括 qBittorrent 。</p>
<p>安装过程不是那么顺利，这个开源小工具并没有对用户体验做更多的优化。</p>
<p>首先初次安装后，配置界面会有一个初始的、针对 Vuze SwingUI 的配置，需要把它删掉，再添加针对 qBittorrent v4.1+ WebUI 的配置，填好各项配置后选中 <strong>Label/Directory
interactivity</strong> 复选框。因为我把电影和剧集分目录存放，开始下载前需要指定存储目录。</p>
<p>第一次点菜单的时候没有反应，后来刷新页面后就好了。但是弹出来的指定下载目录的对话框没有选项，经测试发现第一次需要手工填写，之后有了缓存就可以选了。</p>
]]></description></item><item><title>用 zsh-autoenv 实现目录级别的 zshrc</title><link>http://0x3f.org/post/implement-directory-specific-zshrc-with-zsh-autoenv/</link><pubDate>Thu, 19 Aug 2021 23:34:25 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/implement-directory-specific-zshrc-with-zsh-autoenv/</guid><description><![CDATA[<p><a href="https://github.com/Tarrasch/zsh-autoenv" target="_blank" rel="noopener noreffer">zsh-autoenv</a> 可以实现当进入特定的目录时加载特定的 zshrc 文件，并当切换到其它目录时取消其中的变更。后者在当前的版本下，对环境变量、命令别名和函数有效。</p>
<p>使用方法为：</p>
<p>在目录（如 <code>~/project</code> ）下创建文件 <code>.autoenv.zsh</code> :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-zsh" data-lang="zsh">autostash <span class="nv">TEST_VAR</span><span class="o">=</span><span class="s1">&#39;This is a test variable.&#39;</span>

autostash <span class="nb">alias</span> <span class="nv">test_cmd</span><span class="o">=</span><span class="s1">&#39;echo &#34;This is a test alias.&#34;&#39;</span>

autostash test_func
test_func<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">&#34;This is a test function.&#34;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>出于安全考虑， zsh-autoenv 会对 <code>.autoenv.zsh</code> 做哈希校验，所以第一次或者做变动后进入该目录时，都会要求确认是否接受此文件最新的内容。</p>
<p>此外，如果进入的目录不存在 <code>.autoenv.zsh</code>， zsh-autoenv 会自动向上查找最近的同名文件并加载，上溯的层级可以通过配置项定义。</p>
<p>最后，它提供了一个命令 <code>autoenv-edit</code> 用来快速打开和编辑 <code>.autoenv.zsh</code> 文件。</p>
]]></description></item><item><title>PHPUnit 9.x 性能分析的方法</title><link>http://0x3f.org/post/method-for-phpunit-9.x-performance-analysis/</link><pubDate>Tue, 17 Aug 2021 14:48:12 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/method-for-phpunit-9.x-performance-analysis/</guid><description><![CDATA[<p>利用 PHPUnit 9.x 的 extension 特性，可以记录每个测试用例的耗时并存储到 CSV 文件中。</p>
<p>Extension 代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="nx">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="k">namespace</span> <span class="nx">Tests</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">PHPUnit\Runner\AfterTestHook</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">LongRunningTestsLogger</span> <span class="k">implements</span> <span class="nx">AfterTestHook</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="k">private</span> <span class="nx">string</span> <span class="nv">$log_file</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">executeAfterTest</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$test</span><span class="p">,</span> <span class="nx">float</span> <span class="nv">$time</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$fp</span> <span class="o">=</span> <span class="nx">fopen</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">log_file</span> <span class="o">.</span> <span class="s1">&#39;.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">);</span>
        <span class="nx">fputcsv</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="p">[</span><span class="nv">$test</span><span class="p">,</span> <span class="nv">$time</span><span class="p">]);</span>
        <span class="nx">fclose</span><span class="p">(</span><span class="nv">$fp</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>phpunit.xml 的配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">    <span class="nt">&lt;extensions&gt;</span>
        <span class="nt">&lt;extension</span> <span class="na">class=</span><span class="s">&#34;Tests\LongRunningTestsLogger&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;arguments&gt;</span>
                <span class="nt">&lt;string&gt;</span>profiling<span class="nt">&lt;/string&gt;</span>
            <span class="nt">&lt;/arguments&gt;</span>
        <span class="nt">&lt;/extension&gt;</span>
    <span class="nt">&lt;/extensions&gt;</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Archlinux 下 PHP 不能读取 /tmp 下文件的问题</title><link>http://0x3f.org/post/php-failed-to-open-stream-under-tmp-in-archlinux/</link><pubDate>Mon, 09 Aug 2021 15:27:58 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/php-failed-to-open-stream-under-tmp-in-archlinux/</guid><description><![CDATA[<p>问题的场景是，以 http 用户运行的 FPM 进程访问 <code>/tmp</code> 下由普通用户运行的 CLI 进程创建的文件时，报如下错误：</p>
<blockquote>
<p>Failed to open stream.</p>
</blockquote>
<p>原因是 PHP-FPM 的 systemd 配置中默认对 FPM 进程单独挂载 <code>/tmp</code> 目录。</p>
<p>具体对应：</p>
<p><code>/usr/lib/systemd/system/php-fpm.service</code></p>
<p>中的：</p>
<p><code>PrivateTmp=true</code></p>
]]></description></item><item><title>Archlinux 下在 /var/run 下创建目录的方法</title><link>http://0x3f.org/post/create-directory-under-/var/run-in-archlinux/</link><pubDate>Sun, 08 Aug 2021 23:30:18 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/create-directory-under-/var/run-in-archlinux/</guid><description><![CDATA[<p>Archlinux 使用 <a href="https://wiki.archlinux.org/title/systemd#systemd-tmpfiles_-_temporary_files" target="_blank" rel="noopener noreffer">systemd-tmpfiles</a> 管理 <code>/var/run</code> 下的临时目录。这意味着如果我手动创建 <code>/var/run/php</code> 目录，在系统重启后将不复存在。</p>
<p>解决的办法是修改 <code>/usr/lib/tmpfiles.d/php-fpm.conf</code> 文件，把默认的目录名 <code>php-fpm</code> 改成 <code>php</code>。</p>
<p>但这会带来另一个问题，当 PHP 被重装或升级后，该文件会被覆盖。所以，解决的方法是复制后再修改。</p>
]]></description></item><item><title>给 Bose QC35 更换新耳罩</title><link>http://0x3f.org/post/change-muffs-for-bose-qc35/</link><pubDate>Sun, 04 Oct 2020 18:43:16 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/change-muffs-for-bose-qc35/</guid><description><![CDATA[<p>尽管我用东西很爱惜，QC35 的耳罩表面在前年也开始了剥落，并终于在今年早些时候裂开了。</p>
<p>了解到官方耳罩太贵（380￥左右），而且就这四年的使用情况而言，质量一般。所以打算买第三方的自己换。最终在淘宝上买了排序靠前、35包邮的蛋白皮款。</p>
<p>安装过程比较简单（<a href="https://www.bose.cn/zh_cn/support/article/ear-cushion-replacement-qc25.html" target="_blank" rel="noopener noreffer">官方说明</a>），把旧耳罩扯下来，再把新的耳罩的包边逐个塞到耳机的卡扣里就行，就是容易边塞边松脱。</p>
<p>替换前后：</p>
<p></p>
<p>用了两天，不管是外观还是材质，和原装没有区别。</p>
<p>作为易耗品，以后可以考虑在阿里巴巴上买，更便宜。</p>
]]></description></item><item><title>使用 Homebrew 安装旧版程序</title><link>http://0x3f.org/post/rollback-to-old-version-with-homebrew/</link><pubDate>Sun, 04 Oct 2020 18:21:04 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/rollback-to-old-version-with-homebrew/</guid><description><![CDATA[<p>前几天发现因为 Hugo 的不兼容更新导致我在用的主题在部署时报错，所以打算装回旧版。但是网上找到的 Homebrew 回滚方法已过时，新的方法更简单，但找到具体说明也费了点功夫。</p>
<p>以回滚 Hugo 到 0.74.3 为例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">brew uninstall hugo
brew tap-new donie/hugo-0-74-3
brew extract --version 0.74.3 hugo donie/hugo-0-74-3
brew install hugo@0.74.3
</code></pre></td></tr></table>
</div>
</div><p>即：先创建一个名为“donie/hugo-0-74-3”的 tap ，然后通过 extract 命令把相应版本的数据放到里面，就可以安装了。</p>
]]></description></item><item><title>买了个升降台，开始站立办公</title><link>http://0x3f.org/post/a-trial-on-standing-desk/</link><pubDate>Fri, 02 Oct 2020 20:31:17 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/a-trial-on-standing-desk/</guid><description><![CDATA[<p>久坐疲劳，所以打算买个升降台。</p>
<hr>
<h2 id="乐歌-m3s">乐歌 M3S</h2>
<p>我是个颜党，在所有有白色款的型号里，先选中了造型简约的乐歌 M3S。</p>
<p></p>
<p>实物很重，虽然有些地方稍显粗糙（比如平板插槽底部很粗犷地用热熔胶粘合），但是整体上做工扎实。</p>
<p>但是试用之后发现一个很严重的问题，Z 形结构虽然美观，但是不够稳定，敲键盘时用力一点就会有明显晃动。</p>
<h2 id="乐歌-m9s">乐歌 M9S</h2>
<p>一开始没有把 X 形结构当做首选是因为感觉不太好看。重新审视后感觉 M9S 观感尚可。</p>
<p></p>
<p>实物证明，虽然 X 形结构的美感不如 Z 形，但是稳定性远胜后者。</p>
<p>M9S 的另一个优点是可以把笔记本电脑放在键盘托上使用。</p>
<hr>
<p>当然家里使用还是电动升降桌更好，毕竟桌子上摆这么个庞然大物显得很突兀，而且丧失了其它功能。升降台更适合办公室。</p>
]]></description></item></channel></rss>