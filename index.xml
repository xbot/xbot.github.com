<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>晴耕雨讀</title><link>http://0x3f.org/</link><description>Donie's blog.</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 20 Aug 2021 00:03:28 +0800</lastBuildDate><atom:link href="http://0x3f.org/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Remote Torrent Adder 做 qBittorrent 的客户端</title><link>http://0x3f.org/post/take-remote-torrent-adder-as-client-of-qbittorrent/</link><pubDate>Fri, 20 Aug 2021 00:03:28 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/take-remote-torrent-adder-as-client-of-qbittorrent/</guid><description><![CDATA[<p>我使用部署在 NAS 中的 qBittorrent 下载资源，每次手动复制磁力链链接到 qBittorrent 的 WebUI 很麻烦。</p>
<p><a href="https://chrome.google.com/webstore/detail/remote-torrent-adder/oabphaconndgibllomdcjbfdghcmenci?hl=zh-CN" target="_blank" rel="noopener noreffer">Remote Torrent Adder</a> 是 Chrome 的扩展，可以通过右键菜单把 magnet 等协议的链接发送到多种下载工具，其中就包括 qBittorrent 。</p>
<p>安装过程不是那么顺利，这个开源小工具并没有对用户体验做更多的优化。</p>
<p>首先初次安装后，配置界面会有一个初始的、针对 Vuze SwingUI 的配置，需要把它删掉，再添加针对 qBittorrent v4.1+ WebUI 的配置，填好各项配置后选中 <strong>Label/Directory
interactivity</strong> 复选框。因为我把电影和剧集分目录存放，开始下载前需要指定存储目录。</p>
<p>第一次点菜单的时候没有反应，后来刷新页面后就好了。但是弹出来的指定下载目录的对话框没有选项，经测试发现第一次需要手工填写，之后有了缓存就可以选了。</p>
]]></description></item><item><title>用 zsh-autoenv 实现目录级别的 zshrc</title><link>http://0x3f.org/post/implement-directory-specific-zshrc-with-zsh-autoenv/</link><pubDate>Thu, 19 Aug 2021 23:34:25 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/implement-directory-specific-zshrc-with-zsh-autoenv/</guid><description><![CDATA[<p><a href="https://github.com/Tarrasch/zsh-autoenv" target="_blank" rel="noopener noreffer">zsh-autoenv</a> 可以实现当进入特定的目录时加载特定的 zshrc 文件，并当切换到其它目录时取消其中的变更。后者在当前的版本下，对环境变量、命令别名和函数有效。</p>
<p>使用方法为：</p>
<p>在目录（如 <code>~/project</code> ）下创建文件 <code>.autoenv.zsh</code> :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-zsh" data-lang="zsh">autostash <span class="nv">TEST_VAR</span><span class="o">=</span><span class="s1">&#39;This is a test variable.&#39;</span>

autostash <span class="nb">alias</span> <span class="nv">test_cmd</span><span class="o">=</span><span class="s1">&#39;echo &#34;This is a test alias.&#34;&#39;</span>

autostash test_func
test_func<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">&#34;This is a test function.&#34;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>出于安全考虑， zsh-autoenv 会对 <code>.autoenv.zsh</code> 做哈希校验，所以第一次或者做变动后进入该目录时，都会要求确认是否接受此文件最新的内容。</p>
<p>此外，如果进入的目录不存在 <code>.autoenv.zsh</code>， zsh-autoenv 会自动向上查找最近的同名文件并加载，上溯的层级可以通过配置项定义。</p>
<p>最后，它提供了一个命令 <code>autoenv-edit</code> 用来快速打开和编辑 <code>.autoenv.zsh</code> 文件。</p>
]]></description></item><item><title>PHPUnit 9.x 性能分析的方法</title><link>http://0x3f.org/post/method-for-phpunit-9.x-performance-analysis/</link><pubDate>Tue, 17 Aug 2021 14:48:12 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/method-for-phpunit-9.x-performance-analysis/</guid><description><![CDATA[<p>利用 PHPUnit 9.x 的 extension 特性，可以记录每个测试用例的耗时并存储到 CSV 文件中。</p>
<p>Extension 代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>

<span class="k">declare</span><span class="p">(</span><span class="nx">strict_types</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span>

<span class="k">namespace</span> <span class="nx">Tests</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">PHPUnit\Runner\AfterTestHook</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">LongRunningTestsLogger</span> <span class="k">implements</span> <span class="nx">AfterTestHook</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="k">private</span> <span class="nx">string</span> <span class="nv">$log_file</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">executeAfterTest</span><span class="p">(</span><span class="nx">string</span> <span class="nv">$test</span><span class="p">,</span> <span class="nx">float</span> <span class="nv">$time</span><span class="p">)</span><span class="o">:</span> <span class="nx">void</span>
    <span class="p">{</span>
        <span class="nv">$fp</span> <span class="o">=</span> <span class="nx">fopen</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">log_file</span> <span class="o">.</span> <span class="s1">&#39;.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">);</span>
        <span class="nx">fputcsv</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span> <span class="p">[</span><span class="nv">$test</span><span class="p">,</span> <span class="nv">$time</span><span class="p">]);</span>
        <span class="nx">fclose</span><span class="p">(</span><span class="nv">$fp</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>phpunit.xml 的配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml">    <span class="nt">&lt;extensions&gt;</span>
        <span class="nt">&lt;extension</span> <span class="na">class=</span><span class="s">&#34;Tests\LongRunningTestsLogger&#34;</span><span class="nt">&gt;</span>
            <span class="nt">&lt;arguments&gt;</span>
                <span class="nt">&lt;string&gt;</span>profiling<span class="nt">&lt;/string&gt;</span>
            <span class="nt">&lt;/arguments&gt;</span>
        <span class="nt">&lt;/extension&gt;</span>
    <span class="nt">&lt;/extensions&gt;</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Archlinux 下 PHP 不能读取 /tmp 下文件的问题</title><link>http://0x3f.org/post/php-failed-to-open-stream-under-tmp-in-archlinux/</link><pubDate>Mon, 09 Aug 2021 15:27:58 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/php-failed-to-open-stream-under-tmp-in-archlinux/</guid><description><![CDATA[<p>问题的场景是，以 http 用户运行的 FPM 进程访问 <code>/tmp</code> 下由普通用户运行的 CLI 进程创建的文件时，报如下错误：</p>
<blockquote>
<p>Failed to open stream.</p>
</blockquote>
<p>原因是 PHP-FPM 的 systemd 配置中默认对 FPM 进程单独挂载 <code>/tmp</code> 目录。</p>
<p>具体对应：</p>
<p><code>/usr/lib/systemd/system/php-fpm.service</code></p>
<p>中的：</p>
<p><code>PrivateTmp=true</code></p>
]]></description></item><item><title>Archlinux 下在 /var/run 下创建目录的方法</title><link>http://0x3f.org/post/create-directory-under-/var/run-in-archlinux/</link><pubDate>Sun, 08 Aug 2021 23:30:18 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/create-directory-under-/var/run-in-archlinux/</guid><description><![CDATA[<p>Archlinux 使用 <a href="https://wiki.archlinux.org/title/systemd#systemd-tmpfiles_-_temporary_files" target="_blank" rel="noopener noreffer">systemd-tmpfiles</a> 管理 <code>/var/run</code> 下的临时目录。这意味着如果我手动创建 <code>/var/run/php</code> 目录，在系统重启后将不复存在。</p>
<p>解决的办法是修改 <code>/usr/lib/tmpfiles.d/php-fpm.conf</code> 文件，把默认的目录名 <code>php-fpm</code> 改成 <code>php</code>。</p>
<p>但这会带来另一个问题，当 PHP 被重装或升级后，该文件会被覆盖。所以，解决的方法是复制后再修改。</p>
]]></description></item><item><title>给 Bose QC35 更换新耳罩</title><link>http://0x3f.org/post/change-muffs-for-bose-qc35/</link><pubDate>Sun, 04 Oct 2020 18:43:16 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/change-muffs-for-bose-qc35/</guid><description><![CDATA[<p>尽管我用东西很爱惜，QC35 的耳罩表面在前年也开始了剥落，并终于在今年早些时候裂开了。</p>
<p>了解到官方耳罩太贵（380￥左右），而且就这四年的使用情况而言，质量一般。所以打算买第三方的自己换。最终在淘宝上买了排序靠前、35包邮的蛋白皮款。</p>
<p>安装过程比较简单（<a href="https://www.bose.cn/zh_cn/support/article/ear-cushion-replacement-qc25.html" target="_blank" rel="noopener noreffer">官方说明</a>），把旧耳罩扯下来，再把新的耳罩的包边逐个塞到耳机的卡扣里就行，就是容易边塞边松脱。</p>
<p>替换前后：</p>
<p></p>
<p>用了两天，不管是外观还是材质，和原装没有区别。</p>
<p>作为易耗品，以后可以考虑在阿里巴巴上买，更便宜。</p>
]]></description></item><item><title>使用 Homebrew 安装旧版程序</title><link>http://0x3f.org/post/rollback-to-old-version-with-homebrew/</link><pubDate>Sun, 04 Oct 2020 18:21:04 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/rollback-to-old-version-with-homebrew/</guid><description><![CDATA[<p>前几天发现因为 Hugo 的不兼容更新导致我在用的主题在部署时报错，所以打算装回旧版。但是网上找到的 Homebrew 回滚方法已过时，新的方法更简单，但找到具体说明也费了点功夫。</p>
<p>以回滚 Hugo 到 0.74.3 为例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">brew uninstall hugo
brew tap-new donie/hugo-0-74-3
brew extract --version 0.74.3 hugo donie/hugo-0-74-3
brew install hugo@0.74.3
</code></pre></td></tr></table>
</div>
</div><p>即：先创建一个名为“donie/hugo-0-74-3”的 tap ，然后通过 extract 命令把相应版本的数据放到里面，就可以安装了。</p>
]]></description></item><item><title>买了个升降台，开始站立办公</title><link>http://0x3f.org/post/a-trial-on-standing-desk/</link><pubDate>Fri, 02 Oct 2020 20:31:17 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/a-trial-on-standing-desk/</guid><description><![CDATA[<p>久坐疲劳，所以打算买个升降台。</p>
<hr>
<h2 id="乐歌-m3s">乐歌 M3S</h2>
<p>我是个颜党，在所有有白色款的型号里，先选中了造型简约的乐歌 M3S。</p>
<p></p>
<p>实物很重，虽然有些地方稍显粗糙（比如平板插槽底部很粗犷地用热熔胶粘合），但是整体上做工扎实。</p>
<p>但是试用之后发现一个很严重的问题，Z 形结构虽然美观，但是不够稳定，敲键盘时用力一点就会有明显晃动。</p>
<h2 id="乐歌-m9s">乐歌 M9S</h2>
<p>一开始没有把 X 形结构当做首选是因为感觉不太好看。重新审视后感觉 M9S 观感尚可。</p>
<p></p>
<p>实物证明，虽然 X 形结构的美感不如 Z 形，但是稳定性远胜后者。</p>
<p>M9S 的另一个优点是可以把笔记本电脑放在键盘托上使用。</p>
<hr>
<p>当然家里使用还是电动升降桌更好，毕竟桌子上摆这么个庞然大物显得很突兀，而且丧失了其它功能。升降台更适合办公室。</p>
]]></description></item><item><title>试用讯飞 A1 和 SR101 录音笔</title><link>http://0x3f.org/post/a-trial-on-iflytec-a1-and-sr101-voice-recorder/</link><pubDate>Mon, 28 Sep 2020 17:30:14 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/a-trial-on-iflytec-a1-and-sr101-voice-recorder/</guid><description><![CDATA[<p>讯飞的中文语音识别做得很好，十几年前在学校的一次讲座上就见识过讯飞的语音技术，印象深刻。录音笔结合语音识别是现在的一个趋势，把一个比较专业向的工具推向普及，做好了可以是个很有用的效率工具。我曾经跟一些产品经理讲过，如果我是他们，就买一个录音笔，无论是收集、讨论还是评审需求，都是个很好的工具，不至于丢三落四、误人误己。</p>
<p>讯飞的录音笔包含终身免费的转写服务，是个很吸引人的点。这次试用了 A1 和 SR101 两款，谈谈感受。</p>
<hr>
<h2 id="无处安放的-a1">无处安放的 A1</h2>
<p></p>
<h3 id="优点">优点</h3>
<ul>
<li>工业设计很有特点，外形模仿磁带，附带贴纸，既怀旧又酷炫，属于数码潮玩向的东西。</li>
<li>体积小巧，火柴盒大小。</li>
<li>录音效果明显好于 iPhone X。</li>
</ul>
<h3 id="特点">特点</h3>
<ul>
<li>通过蓝牙和手机传输数据，交互很流畅。</li>
</ul>
<h3 id="缺点">缺点</h3>
<ul>
<li>不支持待机，5分钟无操作自动关机，不适合做备忘。</li>
<li>录音过程中不支持做标记，所以不适合做会议记录。</li>
<li>有安全隐患，手机可以不经授权连接并读取录音笔里的数据。</li>
</ul>
<h3 id="总结">总结</h3>
<p>几乎完全不满足我的使用场景，所以无处安放。感觉如果能增加标记功能和实现一键录音就值得一用。</p>
<hr>
<h2 id="五脏俱全但囿于软件的-sr101">五脏俱全但囿于软件的 SR101</h2>
<p></p>
<h3 id="优点-1">优点</h3>
<ul>
<li>工业设计年轻时尚。</li>
<li>支持待机、标记、一键录音。</li>
<li>有屏幕，更方便。</li>
</ul>
<h3 id="缺点-1">缺点</h3>
<ul>
<li>通过触屏做标记，误操作的机率很大，影响效率。</li>
<li>待机状态下，一键录音有3秒左右的等待时间。</li>
<li>录音数据通过云盘和手机 APP 同步，等待时间超过 A1 很多，极其影响体验。</li>
<li>录音效果不如 A1。</li>
</ul>
<h3 id="总结-1">总结</h3>
<p>功能覆盖我的所有需求，但是体验总是离及格线差那么一点。</p>
<hr>
<p>讯飞在中文语音识别这个核心技术上的成就勿庸置疑，但是它的产品总是在体验上做得差一点。我用过的讯飞产品里，手机输入法是最接近满意分数线的，但是它的动图搜索功能真的是很反人类，交互很繁复。</p>
<p>这两款录音笔各自有独特的点、有吸引人的地方，但是最大的短板在软件的体验上，导致不太适合把它们当成效率工具。基于这个出发点，我云了几个设想：</p>
<ul>
<li>允许自动转写，目前只能逐条手工操作转写，如果录音较多，会不厌其烦。</li>
<li>做开放平台，和 IFTTT 之类的服务打通。</li>
<li>支持 iOS Shortcuts 之类的效率工具。</li>
</ul>
]]></description></item><item><title>MySQL 事务的一致性、隔离级别与幻读问题</title><link>http://0x3f.org/post/isolation-levels-and-phantom-reads-in-mysql/</link><pubDate>Tue, 21 Jul 2020 16:25:09 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/isolation-levels-and-phantom-reads-in-mysql/</guid><description><![CDATA[<h2 id="数据库事务的一致性">数据库事务的一致性</h2>
<p>数据库事务有四个特性：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability），简称“ACID”。</p>
<p>其中，“一致性”指的是数据库层面的一致性，与应用层面的一致性不同。</p>
<p>数据库层面的一致性是说，事务具备把数据库从一个正确的状态迁移到另一个正确的状态的特性。所谓正确的状态，是指任何写入数据库的数据都满足数据库既定的规则，这些规则包括各种约束、级联回滚、触发器以及任何它们的组合。</p>
<p>与数据库层面的一致性不同，应用层面的一致性要求保证结果的正确性。例如，当执行如下 SQL 语句时：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">update</span> <span class="n">accounts</span> <span class="k">set</span> <span class="n">balance</span> <span class="o">=</span> <span class="n">balance</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">where</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">3</span>
</code></pre></td></tr></table>
</div>
</div><p>我希望最终的结果是在事务开始时 id = 3 的这行数据 balance 列的值的基础上加一，否则，结果就是不正确的。</p>
<p>因此，只要写入的数据满足数据库的规则，就保证了数据库层面的一致性。<strong>数据库层面的一致性并不保证数据正确</strong><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>。</p>
<h2 id="mysql-事务的隔离级别与幻读问题">MySQL 事务的隔离级别与幻读问题</h2>
<h3 id="隔离级别">隔离级别</h3>
<p>隔离性是指：多个事务并发执行时，每个事务对数据库所做的更改必须与其它事务隔离。</p>
<p>隔离性是并发控制的主要目标<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>，并发控制用来实现在保证应用层面一致性的前提下，尽可能快地对并发请求做出响应。由此可见，隔离性和并发能力是一对此消彼长的关系。极端情况下，如果并发的请求按顺序执行，隔离性是最好的，但是响应最慢，反之亦然。</p>
<p>在此基础上，产生了四个隔离级别的划分。由低到高依次为：读未提交、读已提交、可重复读、序列化。据前所述，它们的并发能力是依次下降的。</p>
<p>因此，<strong>隔离级别的本质是通过适度地破坏隔离性来提高并发能力。</strong></p>
<h3 id="隔离级别的问题">隔离级别的问题</h3>
<p>隔离级别不同，存在的问题也不一样。</p>
<p>“读未提交”的级别最低、并发能力最高，存在的问题也最多，包括：脏读、不可重复读、幻读。其中，脏读是这个级别独有的，即事务 A 读取了并发事务 B 未提交的数据。</p>
<p>“读已提交”顾名思义，事务 A 不会读取并发事务 B 未提交的数据，但可以读取其已提交的。因此，这个级别存在不可重复读和幻读的问题。</p>
<p>在“可重复读”级别下，同一事务中两次同样的查询结果一致，不会受并发事务的影响，它因此也解决了不可重复读的问题。但还会存在幻读问题。</p>
<p>“序列化”级别要求对查询的对象加范围锁并保持到事务结束，因此，它避免了幻读的问题。</p>
<h3 id="幻读问题phantom-reads">幻读问题（Phantom Reads）</h3>
<p>幻读问题是个很 tricky 的问题，以至于网上找到的很多文章对它的理解都是不全面甚至是错误的。</p>
<p>幻读即同一事务中两次相同查询的结果集不一致。乍一看，好像和不可重复读是一样的。那它们的区别是什么呢？</p>
<p>事实上，幻读是不可重复读的一种特殊情况。换句话说，<strong>只要存在幻行（Phantom Rows），就是幻读问题</strong>。</p>
<p>所谓幻行，即同一事务中两次相同的查询结果集的非空差集里的元素，或者说第二次查询后发现不存在于前一次结果集中的行。</p>
<p>幻行产生的原因主要是除“序列化”之外的隔离级别不要求对查询结果加范围锁，导致并发事务在查询范围内插入新的行后被当前事务查到。</p>
<h4 id="mvcc">MVCC</h4>
<p>在此基础上，MySQL 的 InnoDB 引擎实现了“多版本并发控制”（MVCC: Multiversion Concurrency Control）。</p>
<p>简单地说，InnoDB 的表存在两个隐藏列，用于记录每行数据的版本信息。当插入一行数据时，InnoDB 将当前事务的版本信息一并写入。当修改一行数据时，InnoDB 先将该行做一次复制，并把当前版本信息写入进去。查询时，只返回版本小于等于当前事务版本的数据。通过这样保证一个事务中查询到的是事务开始前已经存在的数据或当前事务写入的数据。其它事务写入的数据则不会被读取。</p>
<p>从这个意义上讲，InnoDB 通过 MVCC 解决了这种幻读问题。</p>
<h4 id="next-key-lock">Next-Key Lock</h4>
<p>上述普通的 SELECT 查询属于 InnoDB 读操作的一种：快照读。此外，还存在一种“当前读”。快照读顾名思义读取的是快照中的内容，而当前读读取的是当前最新的数据。INSERT、DELETE、UPDATE、SELECT &hellip; FOR UPDATE 都是当前读。</p>
<p>因此，还存在一种特殊情况：</p>
<p><figure><a class="lightgallery" href="https://www.plantuml.com/plantuml/svg/dP91Inj15CVlyoaUUbWZQzaau26WQ9iA7Wf5Ul4uoRx4mTsPC3jRzIP5gTQqKL4KyQ8WtX8F8j7aspIp9gT-XRx482nuybtUpEFFx__Ucrc83DSc3WF6edKXQrpp4FoQWBpdCMQ42H3iuuDj7FMU3kolgwHnR7Tlx66zrzxkjJk3a-RpnKvoUfVyRjfMj__pdgxsiTDlTGPdpS7rEGkmYj9dGF52W6-RMUYr_r3EZT79_ct_glwlMnS-sBspv7BVdhJ8uFd-sdPF_sx_O8I0COdnib5wI64-Dxp48uJYnzTgZWInKJ8EIwWP6vhDpCoJeW0bh0h9XhRfIaeKOO1b0zDGqIg4E48TmSOQQWHgRWxoJ2g3e4LrpO2gZ8QPzBnFdulP0dYWrKO4GXB5i9IJa4Gob8mQGwU4xmAleWkIXvY1xpo8aSfvbtRlWkChAT39f2Xb5OR2Z9QPQlhzz3UcMLfQf2Z0LDQRpRamKOnhWIXpqg4qUWkSl0CLslKwqddazk7holANnPLLPoB3s08z4lsd_m00" title="并发事务插入同一主键的数据导致的幻读问题" data-thumbnail="https://www.plantuml.com/plantuml/svg/dP91Inj15CVlyoaUUbWZQzaau26WQ9iA7Wf5Ul4uoRx4mTsPC3jRzIP5gTQqKL4KyQ8WtX8F8j7aspIp9gT-XRx482nuybtUpEFFx__Ucrc83DSc3WF6edKXQrpp4FoQWBpdCMQ42H3iuuDj7FMU3kolgwHnR7Tlx66zrzxkjJk3a-RpnKvoUfVyRjfMj__pdgxsiTDlTGPdpS7rEGkmYj9dGF52W6-RMUYr_r3EZT79_ct_glwlMnS-sBspv7BVdhJ8uFd-sdPF_sx_O8I0COdnib5wI64-Dxp48uJYnzTgZWInKJ8EIwWP6vhDpCoJeW0bh0h9XhRfIaeKOO1b0zDGqIg4E48TmSOQQWHgRWxoJ2g3e4LrpO2gZ8QPzBnFdulP0dYWrKO4GXB5i9IJa4Gob8mQGwU4xmAleWkIXvY1xpo8aSfvbtRlWkChAT39f2Xb5OR2Z9QPQlhzz3UcMLfQf2Z0LDQRpRamKOnhWIXpqg4qUWkSl0CLslKwqddazk7holANnPLLPoB3s08z4lsd_m00" data-sub-html="<h2>并发事务插入同一主键的数据导致的幻读问题</h2><p>并发事务插入同一主键的数据导致的幻读问题</p>">
        
    </a><figcaption class="image-caption">并发事务插入同一主键的数据导致的幻读问题</figcaption>
    </figure></p>
<p>以及另一种特殊情况：</p>
<p><figure><a class="lightgallery" href="https://www.plantuml.com/plantuml/svg/pPBFJjj04CRl-nGZzP2c2fAJ2Acg14A5la5VO1DFaXNsRcIleOSUeWh4Vo8G0LIWKY9Lt0Y7g8AIjsdM9AU-GcTj2_2XTtpvTdTcV_jz8o-5cWSwyZt6mbKXsppWFhXj0LN7OKmBxI745wFuzDRS_pBTeydlFRFRZxl7PlFdu_UDk7SR7zoOuNYwDQAjkN-O3XzcPpUpmJdpi8dIPK1VUWi-Vod3vEwGj08fBjwvdlRt_uxtUHF1R9_5bpkpgn_cP3YvwpoE1cRS-zFvnWW36OtnkbQ19J6NQrxZ8SBAnwVJ2ZL4Mid8hs70c7rmRcwHEZv03Pj2Cljq_YJN5AA7TGtle14e7w8GWn3MMnWW29VwzJgYXB83d1ozTvXK6Y4GpPO6rKZYlN6SvKyhvIJrLtl9YWrdLN8_MMJLIYhpJggkaW9jrSQrP9PpAoIvqIHQPSRU2hTasQK4N8GrxaL8nzKICKjGI825OevILxulT68W5pngqpWn0uUeKwyBKD3ABsGZi34M2Frg9aRUu4Mr-f_gypoNQ4d_-Zy0" title="更新并发事务插入的数据导致的幻读问题" data-thumbnail="https://www.plantuml.com/plantuml/svg/pPBFJjj04CRl-nGZzP2c2fAJ2Acg14A5la5VO1DFaXNsRcIleOSUeWh4Vo8G0LIWKY9Lt0Y7g8AIjsdM9AU-GcTj2_2XTtpvTdTcV_jz8o-5cWSwyZt6mbKXsppWFhXj0LN7OKmBxI745wFuzDRS_pBTeydlFRFRZxl7PlFdu_UDk7SR7zoOuNYwDQAjkN-O3XzcPpUpmJdpi8dIPK1VUWi-Vod3vEwGj08fBjwvdlRt_uxtUHF1R9_5bpkpgn_cP3YvwpoE1cRS-zFvnWW36OtnkbQ19J6NQrxZ8SBAnwVJ2ZL4Mid8hs70c7rmRcwHEZv03Pj2Cljq_YJN5AA7TGtle14e7w8GWn3MMnWW29VwzJgYXB83d1ozTvXK6Y4GpPO6rKZYlN6SvKyhvIJrLtl9YWrdLN8_MMJLIYhpJggkaW9jrSQrP9PpAoIvqIHQPSRU2hTasQK4N8GrxaL8nzKICKjGI825OevILxulT68W5pngqpWn0uUeKwyBKD3ABsGZi34M2Frg9aRUu4Mr-f_gypoNQ4d_-Zy0" data-sub-html="<h2>更新并发事务插入的数据导致的幻读问题</h2><p>更新并发事务插入的数据导致的幻读问题</p>">
        
    </a><figcaption class="image-caption">更新并发事务插入的数据导致的幻读问题</figcaption>
    </figure></p>
<p>以上两种情况都是在有当前读操作时可能发生的幻读问题。这是 MVCC 无法解决的。</p>
<p>InnoDB 用 Next-Key Lock 解决这种幻读问题。</p>
<p>Next-Key Lock 实际上是记录锁（Record Lock）和间隙锁（Gap Lock）的结合。加锁规则如下：</p>
<ol>
<li>Next-Key Lock 的格式是左开右闭。例如：( 5, 9 ] 表示间隙 ( 5, 9 ) 的间隙锁和 9 的行锁。</li>
<li>对查询条件范围的“行和间隙”（如果存在）加锁。</li>
<li>对于等值查询：
<ol>
<li>对于唯一索引，Next-Key Lock 退化为行锁。</li>
<li>向右遍历至查询条件范围内最后一个值右侧节点时，若该节点不满足等值条件，Next-Key Lock 退化为间隙锁。</li>
</ol>
</li>
</ol>
<p>例如，users 表结构如下：</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>类型</th>
<th>索引</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>bigint</td>
<td>唯一</td>
</tr>
<tr>
<td>age</td>
<td>smallint</td>
<td>不唯一</td>
</tr>
</tbody>
</table>
<p>表中的数据：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>age</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>10</td>
</tr>
<tr>
<td>5</td>
<td>50</td>
</tr>
<tr>
<td>11</td>
<td>30</td>
</tr>
</tbody>
</table>
<p>对于上述第一种问题，事务 A 中通过任何一种当前读操作 id = 3 的行（例如 INSERT），都会自动给这个索引值加记录锁。此时，事务 B 中再插入 id = 3 的数据时就会被阻塞。从而避免了这种幻读问题。</p>
<p>对于第二种问题，事务 A 中对 age = 30 的数据加排他锁：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">30</span> <span class="k">for</span> <span class="k">update</span>
</code></pre></td></tr></table>
</div>
</div><p>数据库会加 ( (10, 1), (30, 11) ] 和 ( (30, 11), (50, 5) ] 两个 Next-Key Lock 。注意，由于 InnoDB 使用 B+ 树存储索引，且对于辅助索引， B+ 树叶子节点存储的是索引值和主键值，所以这里间隙用 <code>( ( 头节点索引值, 头节点主键值 ), ( 尾节点索引值, 尾节点主键值 ) )</code> 表示。而且，由于 (30, 11) 右侧间隙的尾结点 (50, 5) 不满足等值条件，所以这个 Next-Key Lock 退化为间隙锁 ( (30, 11), (50, 5) ) 。</p>
<p>此时，事务 B 更新 age = 30 的数据时将会被阻塞。也就避免了这种幻读问题。</p>
<h4 id="总结">总结</h4>
<p>InnoDB 通过 MVCC 解决了普通查询中的幻读问题，通过 Next-Key Lock 解决了当前读导致的幻读问题。</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://en.wikipedia.org/wiki/Consistency_(database_systems)">https://en.wikipedia.org/wiki/Consistency_(database_systems)</a> <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="https://en.wikipedia.org/wiki/ACID#Isolation">https://en.wikipedia.org/wiki/ACID#Isolation</a> <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></description></item></channel></rss>