<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>数学 - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/%E6%95%B0%E5%AD%A6/</link><description>数学 - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 12 May 2009 00:00:00 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/%E6%95%B0%E5%AD%A6/" rel="self" type="application/rss+xml"/><item><title>欧拉工程第十一解</title><link>http://0x3f.org/post/project-euler-11/</link><pubDate>Tue, 12 May 2009 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/project-euler-11/</guid><description><![CDATA[<blockquote>
  <p>In the 20×20 grid below, four numbers along a diagonal line have been marked in red.</p>
  
  <p>08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
  49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
  81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
  52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
  22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
  24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
  32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
  67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
  24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
  21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
  78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
  16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
  86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
  19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
  04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
  88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
  04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
  20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
  20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
  01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48</p>
  
  <p>The product of these numbers is 26 × 63 × 78 × 14 = 1788696.</p>
  
  <p>What is the greatest product of four adjacent numbers in any direction (up, down, left, right, or diagonally) in the 20×20 grid?</p>
</blockquote>

<p>这道题最难的地方在于将上面400个数输入到程序中的矩阵里，嘿嘿，后来看别人的解，真有这么干的，饿滴神呀。</p>

<p>我直接把这个矩阵复制到一个文本文件里，然后在程序里解析：</p>

<p>
```python
#!/bin/python
# -*- coding: utf-8 -*-

matrix = []
products = []

metaFile = open('c:/matrix.txt', 'rb')
for line in metaFile.readlines():
    matrix.append(line.split())
metaFile.close()

for row in range(20):
    for col in range(20):
        if col+3 < 20:
            products.append( int(matrix[row][col]) * int(matrix[row][col+1]) * int(matrix[row][col+2]) * int(matrix[row][col+3]) )
        if row+3 < 20:
            products.append( int(matrix[row][col]) * int(matrix[row+1][col]) * int(matrix[row+2][col]) * int(matrix[row+3][col]) )
        if col+3 < 20 and row+3 < 20:
            products.append( int(matrix[row][col]) * int(matrix[row+1][col+1]) * int(matrix[row+2][col+2]) * int(matrix[row+3][col+3]) )
        if row+3 < 20 and col-3 > 0:
            products.append( int(matrix[row][col]) * int(matrix[row+1][col-1]) * int(matrix[row+2][col-2]) * int(matrix[row+3][col-3]) )
products.sort()

print products
```
</p>

<p><a href="http://picasaweb.google.com/lh/photo/6GIcY8wcBjsfMJJVvTErFg?feat=embedwebsite"></a></p>
]]></description></item><item><title>欧拉工程第十解</title><link>http://0x3f.org/post/project-euler-10/</link><pubDate>Tue, 18 Nov 2008 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/project-euler-10/</guid><description><![CDATA[<blockquote><p>The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.</p>

<p>Find the sum of all the primes below two million.</p></blockquote>

<p>题目越来越变态，开始好玩儿了。</p>

<p><a href="http://0x3f.org/?p=753">第七解</a>里的算法在这里算是废了，一万个素数都算得那么费劲，两百万以下的素数有十几万个，不得不用筛选法了。</p>

<p>普通的筛选效率也不行，当初就是因为这个原因才没用它。不过优化过的筛选法就很奇妙了，下面是Lua的实现：</p>

<p>
```lua
require('math')

local limit = 2000000

local primes = {}
for i=1,limit do
    table.insert(primes,true)
end
primes[0] = false
primes[1] = false

for i=0,math.floor(math.sqrt(limit)) do
    if primes[i] then
        for j=math.pow(i,2),limit,i do
            primes[j] = false
        end
    end
end

local sumVal = 0
for i,j in ipairs(primes) do
    if j then
        sumVal = sumVal + i
    end
end

print(sumVal)
```
</p>


<p>在我这里两秒半就出结果了，Python的表现也不错，四秒半出结果：</p>

<p>
```python
from math import sqrt

limit = 2000000
primes = [True for i in range(0,limit)]
primes[0] = False
primes[1] = False

for i in range(1,int(sqrt(limit))+1):
    if primes[i]:
        for j in range(i**2,limit,i):
            primes[j] = False

sumVal = 0
for i in range(len(primes)):
    if primes[i]:
        sumVal += i

print sumVal
```
</p>


<p><a href="http://picasaweb.google.com/lh/photo/va8CeXPxRtCojlNw4qpmBQ"></a></p>
]]></description></item><item><title>欧拉工程第九解</title><link>http://0x3f.org/post/project-euler-9/</link><pubDate>Mon, 10 Nov 2008 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/project-euler-9/</guid><description><![CDATA[<blockquote>
<p>A Pythagorean triplet is a set of three natural numbers, <b><em>a</em></b> < <b><em>b</em></b> < <b><em>c</em></b>, for which,</p>

<p><b><em>a</em></b><sup>2</sup> + <b><em>b</em></b><sup>2</sup> = <b><em>c</em></b><sup>2</sup></p>

<p>For example, 3<sup>2</sup> + 4<sup>2</sup> = 9 + 16 = 25 = 5<sup>2</sup>.</p>

<p>There exists exactly one Pythagorean triplet for which <b><em>a</em></b> + <b><em>b</em></b> + <b><em>c</em></b> = 1000.
Find the product <b><em>abc</em></b>.
</blockquote>


<p>解：</p>

<p>
```python
flag = False
for a in range(1,1000):
    for b in range(1,1000):
        if a ** 2 + b ** 2 == (1000 - a - b) ** 2:
            print a,b,(1000 - a - b)
            print a * b * (1000 - a - b)
            flag = True
            break
    if flag:
        break
```
</p>


<p><a href="http://picasaweb.google.com/lh/photo/klDX8mgZYS4EiKJ3qCQBKA"></a></p>
]]></description></item><item><title>欧拉工程第八解</title><link>http://0x3f.org/post/project-euler-8/</link><pubDate>Sun, 09 Nov 2008 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/project-euler-8/</guid><description><![CDATA[<blockquote><p>Find the greatest product of five consecutive digits in the 1000-digit number.</p>

<p>73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450</p></blockquote>

<p>穷举，解：</p>

<p>
```python
def MakeProduct(strNum):
    prod = 1
    for char in strNum:
        prod = prod * int(char)
    return prod
    
def GetTheFirstProduct(strNum):
    if len(strNum) < 5:
        return 0,0
    return MakeProduct(strNum[:5]),strNum[1:]

num = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'

largestProduct = 0
while len(num) >= 5:
    tmp = GetTheFirstProduct(num)
    if tmp == (0,0):
        break
    num = tmp[1]
    if largestProduct < tmp[0]:
        largestProduct = tmp[0]
print largestProduct
```
</p>


<p>如果先找到下五个均不为零的连续整数，然后计算它们的积并以之参与比较，效率会更高：</p>

<p>
```python
def MakeProduct(strNum):
    prod = 1
    for char in strNum:
        prod = prod * int(char)
    return prod

def GetTheFirstProduct(strNum):
    if len(strNum) < 5:
        return 0,0
    subStr = strNum[:5]
    index = subStr.rfind('0')
    if index == -1:
        return MakeProduct(subStr),strNum[1:]
    else:
        return GetTheFirstProduct(strNum[index+1:])

num = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'

largestProduct = 0
while len(num) >= 5:
    tmp = GetTheFirstProduct(num)
    if tmp == (0,0):
        break
    num = tmp[1]
    if largestProduct < tmp[0]:
        largestProduct = tmp[0]
print largestProduct
```
</p>


<p><a href="http://picasaweb.google.com/lh/photo/Vn9LGTrybisNKHkZlt3xyg"></a></p>
]]></description></item><item><title>欧拉工程第七解</title><link>http://0x3f.org/post/project-euler-7/</link><pubDate>Fri, 31 Oct 2008 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/project-euler-7/</guid><description><![CDATA[<p>第七解：</p>

<blockquote><p>By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.</p>

<p>What is the 10001st prime number?</p></blockquote>

<p>穷举，并加以最大程度的优化：对大于2的素数，只判断奇数；判断一个奇数是否素数时，只拿已经找到的素数中小于第这个数平方根的数来相除，如果均不能整除，就是素数。Python的实现：</p>

<p>
```python
def IsPrimeNum(num,feed):
    from math import sqrt
    tmp = feed[:]
    while tmp[-1] > int(sqrt(num)):
        tmp.pop()
    for i in tmp:
        if num % i == 0:
            return False
    return True

limit = 10001
feed = [2,3,5,7]
temp = 7
counter = 4
while counter < limit :
    temp += 2
    if IsPrimeNum(temp,feed):
        feed.append(temp)
        counter += 1
print temp
```
</p>


<p>执行了一下，在我这里居然用了五百秒才出结果，神啊，差不多十分钟啊。想到PHP号称速度很快，于是用PHP重新实现了一下：</p>

<p>
```php
function IsPrimeNum($num,$feed){
    $base = floor(sqrt($num));
    foreach($feed as $i=>$v){
        if($v > $base){
            return true;
        }
        if($num % $v == 0){
            return false;
        }
    }
}

$limit = 10001;
$feed = array(2,3,5,7);
$counter = 4;
$tmp = 7;
while($counter < $limit){
    $tmp += 2;
    if(IsPrimeNum($tmp,$feed)){
        $counter++;
        $feed[] = $tmp;
    }
}

echo $tmp;
```
</p>


<p>还好，七十四秒出结果，看来PHP的牛皮不是吹的。当然，Lua会更快：</p>

<p>
```lua
function IsPrimeNum(num,feed)
    require('math')
    local limit = math.floor(math.sqrt(num))
    for i,v in ipairs(feed) do
        if v > limit then
            return true
        end
        if num % v == 0 then
            return false
        end
    end
end

local limit = 10001
local feed = {2,3,5,7}
local counter = 4
local tmp = 7
while counter < limit do
    tmp = tmp + 2
    if IsPrimeNum(tmp,feed) then
        counter = counter + 1
        table.insert(feed,tmp)
    end
end

print(tmp)
```
</p>


<p>执行完后还是吓了一跳，0.3秒，同样是语言，效率的差别咋就那么大呢？！我在想用Java会不会算到2009去。</p>

<p>我不相信这道题用Python就那么难解，下面是用递归实现的程序：</p>

<p>
```python
from math import sqrt

def GuessPrime(feed,limit):
    if feed == 2 :
        return [2]
    elif feed == 3 :
        return [2,3]
    
    tmp = int(sqrt(feed))
    primes = GuessPrime(tmp,limit)
    
    base = 0
    if tmp % 2 == 0:
        base = tmp + 1
    else:
        base = tmp
    for i in range(base,feed,2):
        flag = 0
        for j in primes:
            if i % j == 0:
                flag = 1
                break
        if flag == 0:
            primes.append(i)
            if len(primes) == limit:
                return primes
    
    return primes

limit = 10001
feed = 1000000
primes = GuessPrime(feed,limit)
print primes[limit-1]
```
</p>


<p>11秒就出了结果，说到底，算法的改进才是硬道理！</p>

<p><a href="http://picasaweb.google.com/lh/photo/Uqg0Cu8ZWv5tlQ84nbVGZw"></a></p>
]]></description></item><item><title>欧拉工程第六解</title><link>http://0x3f.org/post/project-euler-6/</link><pubDate>Wed, 29 Oct 2008 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/project-euler-6/</guid><description><![CDATA[<p>第六解：</p>

<blockquote><p>The sum of the squares of the first ten natural numbers is,
12 + 22 + &hellip; + 102 = 385</p>

<p>The square of the sum of the first ten natural numbers is,
(1 + 2 + &hellip; + 10)2 = 552 = 3025</p>

<p>Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025  385 = 2640.
Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.</p></blockquote>

<p>解：</p>

<p>
```python
sumSquare = 0
sum = 0
for i in range(1,101):
    sumSquare += i**2
    sum += i
print sum**2 - sumSquare
```
</p>


<p><a href="http://picasaweb.google.com/lh/photo/z7HPhLCtbrXymzF80GLxwQ"></a></p>
]]></description></item><item><title>欧拉工程第五解</title><link>http://0x3f.org/post/project-euler-5/</link><pubDate>Mon, 27 Oct 2008 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/project-euler-5/</guid><description><![CDATA[<p>第五解：</p>

<blockquote><p>2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest number that is evenly divisible by all of the numbers from 1 to 20?</p></blockquote>

<p>解：</p>

<p>
```python
#为简洁明了，此处不作校验
def GetGreatestCommonDivisor(min,max):
    '''辗转相除法求最大公约数'''
    while min > 0:
        tmp = min
        min = max % min
        max = tmp
    return max

def GetLeastCommonMultiple(a,b):
    if a > b:
        max = a
        min = b
    else:
        max = b
        min = a
    div = GetGreatestCommonDivisor(min,max)
    return min * max / div

temp = 1
for i in range(1,21):
    temp = GetLeastCommonMultiple(i,temp)
print temp
```
</p>


<p>本题旨在求最小公倍数。此算法有意思的是，它的精华在于如何求解两个正整数的最大公约数，有点<a href="http://zh.wikipedia.org/wiki/桂陵之战">围魏救赵</a>的意思。</p>

<p>在<a href="http://w5qy.blog.sohu.com/70238826.html">这里</a>可以找到另外一些求解最小公倍数的方法。</p>

<p><a href="http://picasaweb.google.com/lh/photo/3qs_t5dw-36_1G8wU1jAsQ"></a></p>
]]></description></item><item><title>欧拉工程第四解</title><link>http://0x3f.org/post/project-euler-4/</link><pubDate>Wed, 22 Oct 2008 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/project-euler-4/</guid><description><![CDATA[<p>第四解：</p>

<blockquote><p>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.</p></blockquote>

<p>解：</p>

<p>
```python
largestPalindrome = 0
for i in range(100,1000):
    for j in range(100,1000):
        product = i * j
        if int(str(product)[::-1]) == product and product > largestPalindrome:
            largestPalindrome = product
print largestPalindrome
```
</p>


<p>穷举，有没有效率高的办法？</p>

<p><a href="http://picasaweb.google.com/lh/photo/L1O4_C06B1wqUYys6WdzjQ"></a></p>
]]></description></item><item><title>欧拉工程第三解</title><link>http://0x3f.org/post/project-euler-3/</link><pubDate>Tue, 21 Oct 2008 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/project-euler-3/</guid><description><![CDATA[<p>第三解：</p>

<blockquote><p>The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?</p></blockquote>

<p>解：</p>

<p>
```python
feed = 600851475143

def GetFactor(feed,footmark):
    while footmark < feed:
        footmark += 2
        if feed % footmark == 0:
            print footmark
            GetFactor(feed / footmark,footmark)
            break

GetFactor(feed,1)
```
</p>

<p><a href="http://picasaweb.google.com/lh/photo/CQ25Wrocadk-dyd7sOiRUA"></a></p>
]]></description></item><item><title>欧拉工程第二解</title><link>http://0x3f.org/post/project-euler-2/</link><pubDate>Sun, 19 Oct 2008 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/project-euler-2/</guid><description><![CDATA[<p>第二解：</p>

<blockquote><p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, &hellip;
Find the sum of all the even-valued terms in the sequence which do not exceed four million.</p></blockquote>

<p>解：</p>

<p>
```python
i = 1
j = 2
sum = 0
while j < 4000000 :
    if j % 2 == 0 :
        sum = sum + j
    t = i
    i = j
    j = t + j
print sum
```
</p>


<p><a href="http://picasaweb.google.com/lh/photo/hFwGEgy5zPFOgWFUSsv22w"></a></p>
]]></description></item></channel></rss>