<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>评测 on 晴耕雨讀</title><link>http://0x3f.org/tags/%E8%AF%84%E6%B5%8B/</link><description>Recent content in 评测 on 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>© 淘气 2022</copyright><lastBuildDate>Sat, 19 Aug 2023 18:25:50 +0800</lastBuildDate><atom:link href="http://0x3f.org/tags/%E8%AF%84%E6%B5%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>文石 Poke5S 的使用感受</title><link>http://0x3f.org/posts/hands-on-boox-poke5s/</link><pubDate>Sat, 19 Aug 2023 18:25:50 +0800</pubDate><guid>http://0x3f.org/posts/hands-on-boox-poke5s/</guid><description>之前提到想挑一个便携美观的微信读书载体，第一眼就被文石 Poke5S 的白色机身吸引了。
试用了一段时间，总结了一些比较戳我的优点：
便携：可能是长宽最小的 6 寸阅读器。 美观：白色，做工质感还可以。 屏幕：Carta 1100 （销售宣传诈称 Carta 1200）。 操作：日常操作、翻页速度较快。 配件：支持磁吸保护壳，自动休眠、唤醒。 还有缺点：
屏幕：像素密度 212 PPI 。 残影：图片显示有明显残影。 背光：有明显的灯箱效果。 购买：白色版捆绑销售保护壳，价格太贵。 鉴于 212 PPI 和背光的灯箱效果降低了阅读体验，考虑到这个价格，最后还是退货了。</description></item><item><title>翰林阅 Read6 Pro 的使用感受</title><link>http://0x3f.org/posts/hands-on-hanlinyue-read6-pro/</link><pubDate>Sat, 12 Aug 2023 15:29:09 +0800</pubDate><guid>http://0x3f.org/posts/hands-on-hanlinyue-read6-pro/</guid><description>虽然 Kindle 退出中国对我影响不大，但是近期想看的一些特定版本的书在其它地方没有找到、却在微信读书里垂手可得，所以想着挑个方便的阅读器。先是尝试了文石的 Poke5S ，各方面都挺好，就是屏幕分辨率只有 212 PPI 。然后正好看到了翰林阅 Read6 Pro 预售的消息，看配置非常符合我的想象：
便携美观：6 英寸、白色。 显示效果好：Carta 1200、300 PPI、无盖板。 运行流畅：4G 运存、4核×1.5GHz CPU 。 微信读书友好：入口在一级菜单。 但是到手后很失望。
最大的问题是背光效果很差，泛蓝、不均匀，看着很难受，到了完全无法接受的程度。
另外前面板边缝很明显，让当年的 Kindle Paperwhite 都自叹不如，按压有咔哒声。第三个问题是字体墨迹不均匀，升级固件后好了点，但还是能看出来。虽然有 4G 运存，但是翻页速度的表现不好。最后就是送了一堆非常差的配件：翻页器做工很差，按键手感难以言表；支架质感极差，有股呛人的味儿；保护套没看，没有开盒的心情了，把印象分直接拉到谷底。
没想到这都 2023 年了，挑个中意的阅读器还是那么难！</description></item><item><title>APC、文件和Memcached效率对比</title><link>http://0x3f.org/posts/comparison-of-efficiency-for-apc-file-memcached/</link><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/comparison-of-efficiency-for-apc-file-memcached/</guid><description>对一个保存了100个对象实例的数组进行300次读写，该数组序列化后大小为232KB。
测试环境 网络服务器 PHP版本 操作系统 硬件配置 NGINX v1.0.4 PHP-FPM v5.3.6
APC启用 Archlinux 32bit Intel(R) Core(TM)2 Duo CPU T9400 @ 2.53GHz
Mem: 3G DDR3
Disk: 5400r/s 测试脚本 测试数据：
```php &lt;?php /* * @file data.php */ class XTest { var $x0; var $x1; var $x2; var $x3; var $x4; var $x5; var $x6; var $x7; var $x8; var $x9; var $x10; var $x11; var $x12; var $x13; var $x14; var $x15; var $x16; var $x17; var $x18; var $x19; var $x20; var $x21; var $x22; var $x23; var $x24; var $x25; var $x26; var $x27; var $x28; var $x29; var $x30; var $x31; var $x32; var $x33; var $x34; var $x35; var $x36; var $x37; var $x38; var $x39; var $x40; var $x41; var $x42; var $x43; var $x44; var $x45; var $x46; var $x47; var $x48; var $x49; var $x50; var $x51; var $x52; var $x53; var $x54; var $x55; var $x56; var $x57; var $x58; var $x59; var $x60; var $x61; var $x62; var $x63; var $x64; var $x65; var $x66; var $x67; var $x68; var $x69; var $x70; var $x71; var $x72; var $x73; var $x74; var $x75; var $x76; var $x77; var $x78; var $x79; var $x80; var $x81; var $x82; var $x83; var $x84; var $x85; var $x86; var $x87; var $x88; var $x89; var $x90; var $x91; var $x92; var $x93; var $x94; var $x95; var $x96; var $x97; var $x98; var $x99; function __construct() { $this->x0 = 1234567890; $this->x1 = 1234567890; $this->x2 = 1234567890; $this->x3 = 1234567890; $this->x4 = 1234567890; $this->x5 = 1234567890; $this->x6 = 1234567890; $this->x7 = 1234567890; $this->x8 = 1234567890; $this->x9 = 1234567890; $this->x10 = 1234567890; $this->x11 = 1234567890; $this->x12 = 1234567890; $this->x13 = 1234567890; $this->x14 = 1234567890; $this->x15 = 1234567890; $this->x16 = 1234567890; $this->x17 = 1234567890; $this->x18 = 1234567890; $this->x19 = 1234567890; $this->x20 = 1234567890; $this->x21 = 1234567890; $this->x22 = 1234567890; $this->x23 = 1234567890; $this->x24 = 1234567890; $this->x25 = 1234567890; $this->x26 = 1234567890; $this->x27 = 1234567890; $this->x28 = 1234567890; $this->x29 = 1234567890; $this->x30 = 1234567890; $this->x31 = 1234567890; $this->x32 = 1234567890; $this->x33 = 1234567890; $this->x34 = 1234567890; $this->x35 = 1234567890; $this->x36 = 1234567890; $this->x37 = 1234567890; $this->x38 = 1234567890; $this->x39 = 1234567890; $this->x40 = 1234567890; $this->x41 = 1234567890; $this->x42 = 1234567890; $this->x43 = 1234567890; $this->x44 = 1234567890; $this->x45 = 1234567890; $this->x46 = 1234567890; $this->x47 = 1234567890; $this->x48 = 1234567890; $this->x49 = 1234567890; $this->x50 = 1234567890; $this->x51 = 1234567890; $this->x52 = 1234567890; $this->x53 = 1234567890; $this->x54 = 1234567890; $this->x55 = 1234567890; $this->x56 = 1234567890; $this->x57 = 1234567890; $this->x58 = 1234567890; $this->x59 = 1234567890; $this->x60 = 1234567890; $this->x61 = 1234567890; $this->x62 = 1234567890; $this->x63 = 1234567890; $this->x64 = 1234567890; $this->x65 = 1234567890; $this->x66 = 1234567890; $this->x67 = 1234567890; $this->x68 = 1234567890; $this->x69 = 1234567890; $this->x70 = 1234567890; $this->x71 = 1234567890; $this->x72 = 1234567890; $this->x73 = 1234567890; $this->x74 = 1234567890; $this->x75 = 1234567890; $this->x76 = 1234567890; $this->x77 = 1234567890; $this->x78 = 1234567890; $this->x79 = 1234567890; $this->x80 = 1234567890; $this->x81 = 1234567890; $this->x82 = 1234567890; $this->x83 = 1234567890; $this->x84 = 1234567890; $this->x85 = 1234567890; $this->x86 = 1234567890; $this->x87 = 1234567890; $this->x88 = 1234567890; $this->x89 = 1234567890; $this->x90 = 1234567890; $this->x91 = 1234567890; $this->x92 = 1234567890; $this->x93 = 1234567890; $this->x94 = 1234567890; $this->x95 = 1234567890; $this->x96 = 1234567890; $this->x97 = 1234567890; $this->x98 = 1234567890; $this->x99 = 1234567890; } } $repeat = 300; $arr = array(); for ($i = 0; $i &lt; 100; $i++) { $arr[] = new XTest; } ?</description></item></channel></rss>