<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Vim - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/vim/</link><description>Vim - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 19 Feb 2020 21:48:15 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/vim/" rel="self" type="application/rss+xml"/><item><title>改变 Vim 模式时自动切换输入法的方法</title><link>http://0x3f.org/post/auto-switch-input-method-while-changing-vim-mode/</link><pubDate>Wed, 19 Feb 2020 21:48:15 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/auto-switch-input-method-while-changing-vim-mode/</guid><description><![CDATA[<p>VS Code的Vim插件有个很贴心的功能，可以在切换到普通模式时自动切换到英文输入法，而当切换回插入模式时再换到此前的输入法。</p>
<p>设置的方法很简单。先安装<a href="https://github.com/daipeihust/im-select" target="_blank" rel="noopener noreffer">im-select</a>，然后配置如下（macOS）：</p>
<p></p>
<p>当然，在Vim里也可以利用im-select实现这个功能。</p>
]]></description></item><item><title>用ALE替换了Syntastic</title><link>http://0x3f.org/post/replace-syntastic-with-ale/</link><pubDate>Wed, 12 Dec 2018 20:42:10 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/replace-syntastic-with-ale/</guid><description><![CDATA[<p>习惯频繁地保存源码，但是每次保存都有明显的卡顿，于是用Vim自己的调优功能跟踪了一下。</p>
<p>依次执行以下命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">:profile start profile.log
:profile file *
:profile func *
</code></pre></td></tr></table>
</div>
</div><p>然后执行保存操作，再执行以下命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">:profile pause
:noautocmd qall!
</code></pre></td></tr></table>
</div>
</div><p>在当前目录下生成的文件profile.log里，看到执行时间最长的是Syntastic的函数，禁用这个扩展后保存果然比原来快多了。</p>
<p>但是Syntastic是个很有用的扩展，所以Google一下有没有异步执行的方法，偶然发现了ALE，主要特性就是异步执行。试用之后觉得很好用，就把前者卸了。</p>
<p>ALE的初始配置如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="c">&#34; ALE</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ale_sign_column_always</span> <span class="p">=</span> <span class="m">1</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ale_set_highlights</span> <span class="p">=</span> <span class="m">0</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">airline</span>#<span class="nx">extensions</span>#<span class="nx">ale</span>#<span class="nx">enabled</span> <span class="p">=</span> <span class="m">1</span><span class="err">
</span><span class="err"></span><span class="c">&#34;自定义error和warning图标</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ale_sign_error</span> <span class="p">=</span> <span class="s1">&#39;✗&#39;</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ale_sign_warning</span> <span class="p">=</span> <span class="s1">&#39;⚠&#39;</span><span class="err">
</span><span class="err"></span><span class="c">&#34; 显示Linter名称,出错或警告等相关信息</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ale_echo_msg_error_str</span> <span class="p">=</span> <span class="s1">&#39;E&#39;</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ale_echo_msg_warning_str</span> <span class="p">=</span> <span class="s1">&#39;W&#39;</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ale_echo_msg_format</span> <span class="p">=</span> <span class="s1">&#39;[%linter%] %s [%severity%]&#39;</span><span class="err">
</span><span class="err"></span><span class="c">&#34; PHP</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ale_php_phpcs_standard</span> <span class="p">=</span> <span class="s1">&#39;PSR2&#39;</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ale_php_phpmd_ruleset</span> <span class="p">=</span> <span class="s1">&#39;~/.phpmd.xml&#39;</span><span class="err">
</span><span class="err"></span><span class="c">&#34; 普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告</span><span class="err">
</span><span class="err"></span><span class="nx">nmap</span> <span class="nx">sp</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">ale_previous_wrap</span><span class="p">)</span><span class="err">
</span><span class="err"></span><span class="nx">nmap</span> <span class="nx">sn</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">ale_next_wrap</span><span class="p">)</span><span class="err">
</span><span class="err"></span><span class="c">&#34; 触发/关闭语法检查</span><span class="err">
</span><span class="err"></span><span class="nx">nmap</span> <span class="p">&lt;</span><span class="nx">Leader</span><span class="p">&gt;</span><span class="nx">at</span> :<span class="nx">ALEToggle</span><span class="p">&lt;</span><span class="nx">CR</span><span class="p">&gt;</span><span class="err">
</span><span class="err"></span><span class="c">&#34; 查看错误或警告的详细信息</span><span class="err">
</span><span class="err"></span><span class="nx">nmap</span> <span class="p">&lt;</span><span class="nx">Leader</span><span class="p">&gt;</span><span class="nx">ad</span> :<span class="nx">ALEDetail</span><span class="p">&lt;</span><span class="nx">CR</span><span class="p">&gt;</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Vim最好的PHP语法高亮插件</title><link>http://0x3f.org/post/the-best-php-syntax-file-of-vim/</link><pubDate>Tue, 28 Nov 2017 15:55:59 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/the-best-php-syntax-file-of-vim/</guid><description><![CDATA[<p><a href="https://github.com/StanAngeloff/php.vim" target="_blank" rel="noopener noreffer">StanAngeloff/php.vim</a>应该是目前最新、最全的PHP语法高亮插件了，它解决了旧版本无法高亮<code>@throws</code>的问题。</p>
<p>默认会把方法注释全部当做普通注释显示，也就是没有高亮，需要专门做配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="k">function</span><span class="p">!</span> <span class="nx">PhpSyntaxOverride</span><span class="p">()</span><span class="err">
</span><span class="err"></span>    <span class="nx">hi</span><span class="p">!</span> <span class="nx">def</span> <span class="nx">link</span> <span class="nx">phpDocTags</span>  <span class="nx">phpDefine</span><span class="err">
</span><span class="err"></span>    <span class="nx">hi</span><span class="p">!</span> <span class="nx">def</span> <span class="nx">link</span> <span class="nx">phpDocParam</span> <span class="nx">phpType</span><span class="err">
</span><span class="err"></span><span class="k">endfunction</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="nx">augroup</span> <span class="nx">phpSyntaxOverride</span><span class="err">
</span><span class="err"></span>    <span class="nx">autocmd</span><span class="p">!</span><span class="err">
</span><span class="err"></span>    <span class="nx">autocmd</span> <span class="nx">FileType</span> <span class="nx">php</span> <span class="nx">call</span> <span class="nx">PhpSyntaxOverride</span><span class="p">()</span><span class="err">
</span><span class="err"></span><span class="nx">augroup</span> <span class="nx">END</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>用gv.vim查看git提交历史</title><link>http://0x3f.org/post/gv-vim/</link><pubDate>Wed, 18 Oct 2017 13:28:16 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/gv-vim/</guid><description><![CDATA[<p><a href="https://github.com/junegunn/gv.vim" target="_blank" rel="noopener noreffer">gv.vim</a>是fugitive的插件，用于查看git提交历史，特点是速度快、好用。我现在用它做code review。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">leader</span><span class="p">&gt;</span><span class="nx">gll</span> :<span class="nx">GV</span> <span class="p">--</span><span class="nx">no</span><span class="p">-</span><span class="nx">merges</span><span class="p">&lt;</span><span class="nx">CR</span><span class="p">&gt;</span><span class="err">
</span><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">leader</span><span class="p">&gt;</span><span class="nx">glc</span> :<span class="nx">GV</span><span class="p">!&lt;</span><span class="nx">CR</span><span class="p">&gt;</span><span class="err">
</span><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">leader</span><span class="p">&gt;</span><span class="nx">gla</span> :<span class="nx">GV</span> <span class="p">--</span><span class="nx">no</span><span class="p">-</span><span class="nx">merges</span> <span class="p">--</span><span class="nx">author</span><span class="p">&lt;</span><span class="nx">space</span><span class="p">&gt;</span><span class="err">
</span><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">leader</span><span class="p">&gt;</span><span class="nx">glg</span> :<span class="nx">GV</span> <span class="p">--</span><span class="nx">no</span><span class="p">-</span><span class="nx">merges</span> <span class="p">--</span><span class="nx">grep</span><span class="p">&lt;</span><span class="nx">space</span><span class="p">&gt;</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>解决phpqa和fugitive不兼容的问题</title><link>http://0x3f.org/post/solve-the-incompatablility-between-fugitive-and-phpqa/</link><pubDate>Wed, 18 Oct 2017 11:05:12 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/solve-the-incompatablility-between-fugitive-and-phpqa/</guid><description><![CDATA[<p>在<code>:Gstatus</code>中查看diff时，报错：</p>
<blockquote>
<p>Error detected while processing function Phpqa#PhpLint:                                                                                                                                    <br>
line    8:                                                                                                                                                                                 <br>
E684: list index out of range: 0                                                                                                                                                           <br>
E116: Invalid arguments for function match(l:php_list[0],&ldquo;No syntax errors&rdquo;) == -1                                                                                                         <br>
E15: Invalid expression: 0 != v:shell_error &amp;&amp; match(l:php_list[0],&ldquo;No syntax errors&rdquo;) == -1</p>
</blockquote>
<p>这是phpqa的bug，有人创建了PR，但作者没有合并，需要手工合并：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">curl -L https://github.com/joonty/vim-phpqa/pull/43.patch <span class="p">|</span> git am
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>用vim-test简化单元测试的编写</title><link>http://0x3f.org/post/make-writing-unit-tests-easier-with-vim-test/</link><pubDate>Mon, 14 Aug 2017 16:43:59 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/make-writing-unit-tests-easier-with-vim-test/</guid><description><![CDATA[<p>vim-test允许在Vim中直接执行一个或多个单元测试，并使用预设的或自定义的执行策略。</p>
<p>例如，命令<code>:TestNearest</code>可以执行当前测试文件中离光标最近的一个测试方法。而<code>:TestFile</code>、<code>:TestSuite</code>和<code>:TestLast</code>分别执行整个测试文件、测试项目和最近一次执行过的测试。这在编写测试代码时能很大地提高效率。</p>
<p>执行策略是执行测试的方式和环境。例如缺省状态下，将使用<code>:!</code>执行测试命令，这会从Vim切换回终端。而在MacVim下，可以选择在iTerm或者系统自带的Terminal中执行。</p>
]]></description></item><item><title>用vim-laravel简化laravel下的开发</title><link>http://0x3f.org/post/speed-up-artisan-with-vim-laravel/</link><pubDate>Fri, 11 Aug 2017 15:05:30 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/speed-up-artisan-with-vim-laravel/</guid><description><![CDATA[<p>vim-laravel是个极简而实用的插件，只提供一个<code>:Artisan</code>命令。但它并不仅仅是<code>artisan</code>的一个wrapper，还可以实现一些贴心的自动化，利如自动打开<code>artisan make:*</code>创建的文件。</p>
]]></description></item><item><title>用vim-php-namespace管理PHP的命名空间</title><link>http://0x3f.org/post/manage-php-namespaces-with-vim-php-namespace/</link><pubDate>Fri, 11 Aug 2017 14:56:12 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/manage-php-namespaces-with-vim-php-namespace/</guid><description><![CDATA[<p>vim-php-namespace是个简单实用的插件，提供三种功能：</p>
<ul>
<li>自动用use语句导入光标下的类</li>
<li>自动把光标下的类名扩展成完整命名空间的格式</li>
<li>自动排序use语句</li>
</ul>
<p>此外，还提供一个选项控制是否在导入类后自动排序use语句。</p>
]]></description></item><item><title>使neocomplete和ultisnips共用tab键的方法</title><link>http://0x3f.org/post/reconcile-neocomplete-with-ultisnips/</link><pubDate>Fri, 11 Aug 2017 14:43:14 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/reconcile-neocomplete-with-ultisnips/</guid><description><![CDATA[<p>昨天用vim-clevertab换掉了supertab，但是实际使用中总是出莫名其妙的问题。看了一下插件源码，使用全局变量判断状态，这是个很不靠谱的方案，所以还是卸掉了。</p>
<p>下面的配置可以很好的解决问题：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="k">let</span> <span class="nx">g</span>:<span class="nx">UltiSnipsExpandTrigger</span><span class="p">=</span><span class="s2">&#34;&lt;c-tab&gt;&#34;</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">UltiSnipsJumpForwardTrigger</span><span class="p">=</span><span class="s2">&#34;&lt;c-tab&gt;&#34;</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">UltiSnipsJumpBackwardTrigger</span><span class="p">=</span><span class="s2">&#34;&lt;s-tab&gt;&#34;</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">UltiSnipsSnippetsDir</span><span class="p">=</span><span class="s1">&#39;~/.vim/UltiSnips&#39;</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ulti_expand_or_jump_res</span> <span class="p">=</span> <span class="m">0</span><span class="err">
</span><span class="err"></span><span class="k">function</span><span class="p">!</span> <span class="nx">CleverTab</span><span class="p">()</span>&#34;{{{<span class="err">
</span><span class="err"></span>    <span class="nx">call</span> <span class="nx">UltiSnips</span>#<span class="nx">ExpandSnippetOrJump</span><span class="p">()</span><span class="err">
</span><span class="err"></span>    <span class="k">if</span> <span class="nx">g</span>:<span class="nx">ulti_expand_or_jump_res</span><span class="err">
</span><span class="err"></span>        <span class="nx">return</span> <span class="s2">&#34;&#34;</span><span class="err">
</span><span class="err"></span>    <span class="k">else</span><span class="err">
</span><span class="err"></span>        <span class="k">if</span> <span class="nx">pumvisible</span><span class="p">()</span><span class="err">
</span><span class="err"></span>            <span class="nx">return</span> <span class="s2">&#34;\&lt;c-n&gt;&#34;</span><span class="err">
</span><span class="err"></span>        <span class="k">else</span><span class="err">
</span><span class="err"></span>            <span class="nx">return</span> <span class="nx">neocomplete</span>#<span class="nx">start_manual_complete</span><span class="p">()</span><span class="err">
</span><span class="err"></span>        <span class="k">endif</span><span class="err">
</span><span class="err"></span>    <span class="k">endif</span><span class="err">
</span><span class="err"></span><span class="k">endfunction</span>&#34;}}}<span class="err">
</span><span class="err"></span><span class="nx">inoremap</span> <span class="p">&lt;</span><span class="nx">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">tab</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">c</span><span class="p">-</span><span class="nx">r</span><span class="p">&gt;=</span><span class="nx">CleverTab</span><span class="p">()&lt;</span><span class="nx">cr</span><span class="p">&gt;</span><span class="err">
</span><span class="err"></span><span class="nx">snoremap</span> <span class="p">&lt;</span><span class="nx">silent</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">tab</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">esc</span><span class="p">&gt;</span>:<span class="nx">call</span> <span class="nx">UltiSnips</span>#<span class="nx">ExpandSnippetOrJump</span><span class="p">()&lt;</span><span class="nx">cr</span><span class="p">&gt;</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>ultisnips没有禁用按键映射的开关，而默认的映射会干扰上述配置，所以这里把默认的映射改成了<code>&lt;c-tab&gt;</code>。</p>
]]></description></item><item><title>用vim-plug换掉了vim-addon-manager</title><link>http://0x3f.org/post/replaced-vam-with-vim-plug/</link><pubDate>Mon, 31 Jul 2017 22:44:16 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/replaced-vam-with-vim-plug/</guid><description><![CDATA[<p>四年零两个月前，我在Vim的邮件组中<a href="https://groups.google.com/forum/#!topic/vim_use/P3xpaHr8-do" target="_blank" rel="noopener noreffer">征询pathogen和vundle的优劣</a>。一个人建议我试试VAM，语气幽怨——他是它的作者。</p>
<p>试过之后就从pathogen迁移到了VAM，因为它兼有前者和vundle的优点，在当时，这是最好的插件管理器。就这样用了很久，期间还写了点脚本<a href="/post/simplify-vim-addon-installation-issues/" rel="">简化插件的管理</a>，VAM工作得很好。</p>
<p>最近发现越来越多的插件的文档里提到vim-plug，亮点是支持并行安装和更新，这真是解决了VAM最大的痛点：我叠代了十年的vimrc里用了很多插件，串行的VAM每次更新都让我很痛苦。</p>
<p>另外，vim-plug较VAM的另一个优势是简单。这倒不是说后者很难用，只是作者过于追求灵活性，导致有些工作实现起来相对更复杂。例如，有的插件安装之后需要做一些额外的操作，VAM需要自己实现回调函数，然后挂到post-install钩子上。而对于vim-plug，只需要在注册插件的地方增加一个选项。对于插件的懒加载，也是同样。</p>
<p>VAM也有自己的优势。其中之一是可以自动处理依赖关系：当一个要被安装的插件依赖别的插件时，相应的依赖也会被自动安装。还有就是对多源的支持：既可以拉取github上的插件，也可以从vim.org或其它源安装。而vim-plug就只支持github。</p>
<p>所以，vim-plug并没有全面超过VAM，只是没有明显的短板、功能又刚刚够用。</p>
]]></description></item></channel></rss>