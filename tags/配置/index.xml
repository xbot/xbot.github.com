<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>配置 on 晴耕雨讀</title><link>http://0x3f.org/tags/%E9%85%8D%E7%BD%AE/</link><description>Recent content in 配置 on 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>© 淘气 2022</copyright><lastBuildDate>Thu, 04 Aug 2011 00:00:00 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/%E9%85%8D%E7%BD%AE/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux下双屏显示的设置</title><link>http://0x3f.org/posts/dualhead-display-on-linux/</link><pubDate>Thu, 04 Aug 2011 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/dualhead-display-on-linux/</guid><description>RandR是对X11的一个扩展协议，允许在不重启X的情况下修改输出的一些参数并使之生效，xrandr是该协议的命令行界面，它的功能之一就是用来设置双屏显示。
缺省情况下，外接显示器后启用的是屏幕复制模式，即两个屏幕显示完全相同的内容。使用命令xrandr -q查看当前的输出状态：
Screen 0: minimum 320 x 200, current 1920 x 1080, maximum 8192 x 8192 LVDS1 connected 1280x800+0+0 (normal left inverted right x axis y axis) 261mm x 163mm 1280x800 60.0+ 60.0 50.0 1024x768 75.1 70.1 60.0 800x600 72.2 75.0 60.3 56.2 768x576 75.0 72.0 60.0 640x480 72.8 75.0 60.0 59.9 VGA1 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 509mm x 286mm 1920x1080 60.0+ 1680x1050 60.</description></item><item><title>人性化Vim的预览窗口</title><link>http://0x3f.org/posts/humanize-preview-window-in-vim/</link><pubDate>Sun, 29 May 2011 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/humanize-preview-window-in-vim/</guid><description>Vim的预览窗口由 :ptag 等命令触发，可用于预览函数定义。但在缺省情况下，预览窗口的高度是固定的，对于注释信息较多的函数，往往不能完全显示注释，而对于注释较少的函数，又会有多余的行浪费屏幕空间。
下面的函数用于解决这个问题：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 &amp;#34; 调用:ptag命令预览光标所在&amp;lt;word&amp;gt;的定义 &amp;#34; 对类C语言风格的函数/方法定义和注释有效，对其余情况仍沿用:ptag的原有效果 function! PTagIt() exec &amp;#34;ptag &amp;#34;.expand(&amp;#34;&amp;lt;cword&amp;gt;&amp;#34;) let cwin = winnr() silent! wincmd P let lnr = line(&amp;#39;.&amp;#39;) if lnr &amp;lt; 3 return endif if foldlevel(&amp;#39;.</description></item><item><title>Dokan SSHFS：Windows下通过SSH挂载Linux主机为本地分区</title><link>http://0x3f.org/posts/mount-linux-dirs-as-windows-local-partitions/</link><pubDate>Thu, 20 Jan 2011 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/mount-linux-dirs-as-windows-local-partitions/</guid><description>Linux一般使用Samba向Windows共享资源。另一个办法就是使用SSH。
Dokan是一个为Windows提供实现新文件系统的开发库，而Dokan SSHFS是在此基础上实现的挂载SSH通道为本地分区的文件系统。必须先安装Dokan，然后再安装Dokan SSHFS。
如果从安装SSH服务做起，步骤是：
在Linux主机上安装openssh 修改Linux主机的/etc/hosts.allow，加入sshd: ALL，以允许外部访问 启动sshd守护进程 在Windows主机上安装Dokan和Dokan SSHFS 通过SSHFS的图形配置工具挂载SSH通道 这种方式的好处是简单，但是存在安全隐患，不管怎样，公布SSH连接绝非好事，这意味著接入用户可以远程控制Linux主机，尤其是当SSH账户的权限较高时。因此，这种方式只适用于虚拟机或家庭网络，例如对Host-Guests共享支持不佳的KVM虚拟机来说就是个好的选择。即便如此，也要注意相应的Windows主机的安全防范，否则，入侵者可以通过Windows主机做跳板来进入Linux主机。</description></item><item><title>darkstat: 网络流量监测工具</title><link>http://0x3f.org/posts/darkstat-as-a-network-discharge-meter/</link><pubDate>Sun, 26 Dec 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/darkstat-as-a-network-discharge-meter/</guid><description>darkstat是一个跨平台的网络流量监测工具，可显示最大一个月内操作系统的各项网络流量指标。
具有以下特性：
以守护进程方式运行，提供Web用户界面，零配置，易于使用 可显示较为详细的网络流量指标 性能表现好，占用资源少 跨平台，支持多个UNIX、类UNIX操作系统，并有非官方的Windows移植版 具有以下不足：
功能较为简单，以易用性换灵活性 日志记录功能比较单薄，需要编写辅助脚本并设置定时任务 darkstat启动时需要手工指定监视的网络接口，因此需要用根权限启动：
1 sudo darkstat -i eth0 darkstat默认使用667端口提供Web访问，可以用-p参数指定端口：
1 sudo darkstat -i eth0 -p 8080 darkstat的Web用户界面分为Graph、Hosts和Host三部分。Graph是缺省主页，用于显示最近一分钟、一小时、一天和一个月的流量统计直方图，将光标置于任何一个直方条上可查看对应时刻的流量指标：
Hosts界面按主机显示各自的流量统计指标的值：
单击Hosts界面上的IP进入对应主机的Host界面，此界面按TCP/UDP类型显示对应的主机的各端口的网络流量指标的值：
可通过如下命令查看占用指定端口的进程：
[lenin@archer ~]$ lsof -i tcp:58062 -n COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME mlnet 18660 lenin 74u IPv4 251788 0t0 TCP 192.168.1.3:58062->122.116.212.89:http (ESTABLISHED) darkstat区别于其它流量监测工具的最大的优点就是简单易用，非常适合对流量监测应用不复杂的场景。前段时间公司的一台RHEL服务器因为流量过大多次被网管拔线，后来用darkstat监测到大部分流量被几个UDP端口占去，进而发现原来是服务器被入侵并被安装了一个扫描器SIPVicious。</description></item><item><title>Vim中设置关键词识别规则的方法</title><link>http://0x3f.org/posts/howto-set-keyword-identification-in-vim/</link><pubDate>Wed, 22 Dec 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/howto-set-keyword-identification-in-vim/</guid><description>在Vim中，关键词是一个至关重要的概念。合理地利用关键词，可以快速地对光标下有特殊含义的字符串进行一系列的操作，例如通过快捷键复制关键词、查询函数定义或文档、在项目中查询所有引用当前函数的地方等等。这对工作效率的提升有极大的帮助。
但我的Vim对PHP文件的关键词识别有问题，在选择函数名的时候总是将函数名后的小括弧一起选入。
Vim使用选项iskeyword设定关键词的匹配规则，使用如下命令查看当前文件类型的关键词规则：
1 set iskeyword 我这里查看PHP文件的规则结果如下：
iskeyword=@,48-57,_,192-255,$,( 不明白为什么缺省设置中会有左括弧，在vimrc中加入如下配置取消之：
1 au FileType php set iskeyword-=(</description></item><item><title>Vim保存文件时移除尾行换行符的方法</title><link>http://0x3f.org/posts/howto-remove-eof-in-vim/</link><pubDate>Sun, 05 Dec 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/howto-remove-eof-in-vim/</guid><description>Vim认为一个文本文件的每一行都应该由一换行符结束，即使文件的最后一行也不例外。这就使得Vim保存过的文本文件在其它文本编辑器中查看时可能会在文件末尾多出一个空行。一般来说，这不是个问题，但对于程序员来说，有时候一些不规范的运行环境或其它组件就要求文件的最后一行不能有换行符，否则就会出莫名其妙的问题，尤其是在Windows环境下最常见。
要在保存文件时不在最后一行添加换行符，最常见、最简单的方法就是：
1 2 :set binary :set noendofline 但是这样做有一个问题，就是会把DOS格式的文件自动转换成UNIX格式，WinSlave们肯定不希望这么做。
因此，可在vimrc中加入如下内容：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &amp;#34; Save the current buffer as a file with no EOF sign. function! SaveAsNOEOF(filename) let a=getline(1,line(&amp;#39;$&amp;#39;)-1) let b=map(a, &amp;#39;iconv(v:val,&amp;#34;&amp;#39;.&amp;amp;enc.&amp;#39;&amp;#34;,&amp;#34;&amp;#39;.&amp;amp;fenc.&amp;#39;&amp;#34;) . nr2char(13)&amp;#39;) call extend(b, getline(&amp;#39;$&amp;#39;, &amp;#39;$&amp;#39;)) call writefile(b,a:filename, &amp;#39;b&amp;#39;) if a:filename == bufname(&amp;#39;%&amp;#39;) set nomodified endif endfunction &amp;#34; Save the current buffer and get rid of the EOF sign.</description></item><item><title>开启自定义GTK程序菜单快捷键的方法</title><link>http://0x3f.org/posts/howto-enable-hotkey-for-gtk-menus/</link><pubDate>Sat, 04 Dec 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/howto-enable-hotkey-for-gtk-menus/</guid><description>基于GTK的程序菜单本身支持通过在焦点所在的菜单项上按下组合键来定义该菜单项的快捷键，但默认并不开启。
一般来说，对于支持X的会话管理的桌面环境，可以通过修改相应的设置来开启这个功能：
GNOME中该设置项所在的路径是：主选单 > 桌面 > 偏好设定 > 选单及功具列 > 可编辑选单捷径键 XFCE中该设置项所在的路径是：主选单 > 设置 > 外观 > 设置 > 开启可编辑快捷键 对于不支持会话管理的桌面环境，可在~/.gtkrc-2.0中添加如下配置内容：
gtk-can-change-accels = 1</description></item><item><title>启动GVim时自动最大化窗口的方法</title><link>http://0x3f.org/posts/howto-auto-maximize-gvim-at-startup/</link><pubDate>Wed, 25 Aug 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/howto-auto-maximize-gvim-at-startup/</guid><description>根据帮助文档，gvim在windows下的最大化是通过模拟打开窗口菜单并点击最大化菜单项实现的，而在Linux下的方法较为灵活。
下面的方法是在vim中通过调用wmctrl实现最大化的方法：
1 2 3 4 5 6 7 8 9 if has(&amp;#39;win32&amp;#39;) au GUIEnter * simalt ~x else au GUIEnter * call MaximizeWindow() endif function! MaximizeWindow() silent !wmctrl -r :ACTIVE: -b add,maximized_vert,maximized_horz endfunction 当然也可以通过配置窗口管理器规则实现自动最大化，但上面的方法更灵活。</description></item><item><title>Linux下pppoe连接建立后仍不能上网的问题</title><link>http://0x3f.org/posts/problem-on-pppoe-connections-on-linux/</link><pubDate>Sat, 10 Jul 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/problem-on-pppoe-connections-on-linux/</guid><description>问题描述
pppoe可以连接，ifconfig可以看到ppp0接口，一切正常，只是不能上网。
解决办法
使用如下命令查看路由表：
1 route 正常情况下返回的结果中应该有如下内容：
default * 0.0.0.0 U 0 0 0 ppp0 如果没有，可手工添加：
1 route add default dev ppp0 如果可以上网，就成功了。
使用如下脚本在pppoe连接成功时自动添加路由表项：
1 2 3 4 5 6 #!/bin/sh if ifconfig ppp0 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 ; then route del default route add default dev ppp0 fi 将上述内容保存成名为01-route.sh的文件，权限755，放到/etc/ppp/ip-up.d目录下。
然后创建以下两个脚本：
1 2 3 4 5 6 7 8 9 10 11 12 #!/bin/bash if ifconfig ppp0 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 ; then echo &amp;#39;PPPOE has already been switched on !</description></item><item><title>Vim的终极自动补全插件：NeoComplCache</title><link>http://0x3f.org/posts/neocomplcache-vim/</link><pubDate>Sat, 27 Feb 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/neocomplcache-vim/</guid><description>
关于自动补全，最初用的是SuperTab，那个时候Vim的自动补全插件寥寥无几，也就SuperTab比较有名。不过实际使用过程中这个插件给我的体验不是很好，原因是补全的准确度不高。
后来出了一个新插件，AutoComplPop，功能和使用都很简单。但是很快我就又用回SuperTab，原因是AutoComplPop在输入的同时实时地查询匹配的关键词，导致输入极不流畅，效率很低。
一直就这么凑合着用着SuperTab，随着这个插件版本的更新，旧功能不断地完善，新功能也接二连三地引入，SuperTab在匹配关键词的准确度上有了一些改善，但是新的问题又出现了。SuperTab后来加入一个新功能，对于程序源文件，可以在其引入的文件以及API文件中匹配关键词。比如假设我当前正在编辑a.php，在a.php中有include 'b.php';这样的语句，当我输入array并按下Tab键时，SuperTab不但会在当前文件中查询所有匹配项，还会到b.php中查询，如果配置过vim、指定一个包含了php的API的文件，则SuperTab还会自动从这个文件中查询匹配项。按理说这个功能的理念很好，但问题就在于SuperTab做的是实时查询，如果源文件中包含的文件较多，各个文件又较大，问题就显而易见了。我不得不在写程序时小心地使用Tab键，否则有时就会出现按一下Tab键然后等着Vim在那狂搜的情况。
前两天发现了NeoComplCache，光看名字就让我有点儿兴奋，一般使用缓存的速度都很快。这个插件会在Vim打开文件的时候对上下文作一个索引，并把索引结果保存到缓存中。同时，文件更改的内容会在保存的时候被索引。此外，NeoComplCache支持多种关键词索引模式，例如它会判断当前路径下的文件或目录的名字是否匹配补全条件，也可以从缓存的程序语言API中匹配补全条件。到此为止，它就解决了SuperTab和AutoComplPop共同的效率问题，并具备它们各自的长处。看了一遍文档，发现这个插件的功能比较细致，大概有以下一些特点：
1、使用缓存，自动补全时效率高； 2、生成的关键词列表准确； 3、支持下划线分割的关键词，如apple_boy_cat，就可以只输入a_b_c，然后补全； 4、支持驼峰格式匹配关键词，如AppleBoyCat，就可以只输入ABC，然后补全； 5、既可以像AutoComplPop那样在Vim中输入的同时自动弹出补全列表，又可以自定义快捷键手动触发； 6、支持从文件名和目录名中匹配补全条件； 7、对于程序源文件，支持从语言API中匹配补全条件；
NeoComplCache的缺点是文档不全，虽然从只言片语中发现它还支持Snippet，但从文档中没有找到足够的有用信息。加之一直用SnipMate感觉不错，所以目前还是用它来实现snippet功能。
这就有个搭配问题：虽然NeoComplCache不存在补全时的效率问题，但我仍然打算只在需要补全时才用快捷键触发此功能，最主要的原因是我既希望用Tab键触发SnipMate的代码块补全功能，又希望修SuperTab那样用Tab选择补全列表中的选项。也就是要达到只用Tab键就可以完成打开自动补全列表、补全列表选项选择和SnipMate代码块替换的效果。但是，如果将Tab映射到触发自动补全，则补全列表选择和SnipMate均无法使用Tab，反之亦然。
所以我想如果能让NeoComplCache、SuperTab、SnipMate和谐共存，那问题就解决了，几经摸索，终于找到了办法：
1、设置NeoComplCache不自动弹出补全列表，即在vimrc中加入：
let g:NeoComplCache_DisableAutoComplete = 1
2、由于NeoComplCache在手工模式下使用快捷键组合&amp;lt;C-X&amp;gt;&amp;lt;C-U&amp;gt;打开补全列表，故设置SuperTab的默认补全操作为&amp;lt;C-X&amp;gt;&amp;lt;C-U&amp;gt;，即在vimrc中加入：
let g:SuperTabDefaultCompletionType = '&amp;lt;C-X&amp;gt;&amp;lt;C-U&amp;gt;'
这样，NeoComplCache只负责补全关键词缓存的生成，SuperTab控制Tab键的行为并在需要触发补全操作时打开补全列表、进而在列表中的选项间移动焦点，而当光标前的关键词是snippet时，SnipMate会被优先调用并完成代码块的替换。
就在写这篇文章的时候，我突然觉得NeoComplCache自动弹出补全列表+SnipMate的方式也挺好，只是这样就不能用Tab键选择列表中的选项了。
相关阅读： 用neocomplete换掉了YouCompleteMe How to Make YouCompleteMe Compatible with UltiSnips</description></item><item><title>被迫弃UMS而用KMS</title><link>http://0x3f.org/posts/switching-from-ums-to-kms/</link><pubDate>Sat, 13 Feb 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/switching-from-ums-to-kms/</guid><description>昨天更新了一下系统，今天开机就白屏了。于是先关掉Compiz，看了一下Archlinux的新闻，发现新的xf86-video-intel中已经移除了UMS，也就意味着只能使用KMS做3D加速了。
UMS的全称是User Mode-Setting，是一种传统的图形界面初始化方案，即在X加载之后由它初始化图形界面。这种方案的弊端是虚拟终端不具备显示和处理图形的能力，同时虚拟终端和图形界面之间的切换显得缓慢并带有闪烁。
KMS的全称是Kernel Mode-Setting，是新一代图形界面初始化方案，它将图形界面的初始化由X加载之后由X负责进行改为在内核初始化时由内核进行。KMS的好处不仅仅是解决了上面UMS的问题，同时也使得Linux具备了在启动时显示漂亮的开机图示的能力。另外，在3D加速性能和低功耗方面，KMS也较UMS更胜一筹。
我的Thinkpad X200使用的是Intel GMA 945的芯片组，而Archlinux的Wiki上仍以915为例，所以尝试着做如下内容：
一、去除/boot/grub/menu.lst中Kernel启动参数中的vga参数；
二、加入以下内容到/etc/modprobe.d/modprobe.conf：
options i945 modeset=1
三、在/etc/rc.conf中的MODULES行加入intel_agp和i945；
重启系统后，Compiz白屏问题解决，3D加速性能似乎有所上升。</description></item><item><title>VirtualBox的Host Interface网络接入方式的配置</title><link>http://0x3f.org/posts/virtualbox-host-interface/</link><pubDate>Sun, 31 Jan 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/virtualbox-host-interface/</guid><description>VirtualBox安装后默认的网络接入方式是NAT，也是最简单的一种。但NAT网络中的虚拟机系统不具有和主机同一网段的IP地址，不能和主机直接通信。这对于开发者来说是不适用的。
Host Interface网络接入方式可以使虚拟机系统获得与主机同一网段的IP地址，因此也使得虚拟机系统像主机所在的局域网中的一台真实的计算机一样，可以和其它计算机通信。
对于Linux平台的VirtualBox，可以有两种方式实现Host Interface网络。一是使用系统网桥，二是使用VirtualBox内建的机制。
第一种方式复杂但通用，尤其是对于2.1.0以前的版本来说，这是唯一的途径。从2.1.0开始，VirtuaBox内建了支持Host Interface的机制，这极大地简化了此类型网络的配置。
首先，加载vboxnetflt模块：
sudo modprobe vboxnetflt
然后在VirtualBox中配置虚拟机的网络连接方式，选择“Bridged Adapter”。
最后启动虚拟机即可。
另外，若虚拟机系统是精简版的Windows，网卡驱动可能不会自动安装，这时需要另外下载网卡的驱动并安装。
为方便起见，可将vboxnetflt模块加入到开机自动启动的模块列表中，每种发行版设置自启动模块的位置和方法不一样，在Archlinux下，是在/etc/rc.conf文件中的modules行中设置。
参考文章：Archlinux Wiki: VirtualBox</description></item><item><title>rxvt-unicode的真透明</title><link>http://0x3f.org/posts/true-transparent-of-rxvt-unicode/</link><pubDate>Sat, 28 Feb 2009 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/true-transparent-of-rxvt-unicode/</guid><description>nacre同学说，urxvt是可以实现真透明的。起初我以为是要用transset-df来实现，但这个东西一般需要手动操作，不具有太大的实用性，而且会把整个窗口透明化。不过后来发现真的不需要用它来画蛇添足，有xcompmgr足矣。
因为我用openbox，要实现窗口的阴影和动画效果，xcompmgr是必须的，我把它设成了开机自启动。比起xcompmgr默认的参数值，下面这条定制的命令实现了简洁的阴影和合理的渐隐渐显时间，因此提供了一个各方面都比较均衡、合理的桌面体验：
xcompmgr -Ss -n -Cc -fF -I-10 -O-10 -D1 -t-3 -l-4 -r4
然后在.Xresources中添加以下两行：
URxvt.depth:32 URxvt.background:rgba:0000/0000/0000/dddd
最后当然要执行一下：
xrdb ~/.Xresources
此后直接启动urxvt即可。
这里面最有意思的就是background项的配置，它有两种形式，一种是：
URxvt.background:[80]black
还有一种就是前面提到的形式。
第一种形式中，中括号里的数字表示半透明度对应的百分比，括号外是颜色名称；第二种形式提供了比第一种更多的色彩选择，四组数字都是十六进制数，前三组是RGB颜色值，最后一组是半透明度，数值越大，透明度越低。
在查阅“man urxvt”的时候，发现urxvt的man pages里的内容真是异常丰富，大部分功能都讲解得言简意赅。以往还抱怨这个东西在网上连个健全的文档都找不到，原来全在这儿呢，真不知道以往无数次地man的时候为什么没有注意到这些，难道man了rxvt了？
PS：这样实现urxvt的真半透明后，貌似xcompmgr实现的阴影在urxvt身上就消失了，求解中……</description></item><item><title>为rxvt-unicode开启标签和链接支持</title><link>http://0x3f.org/posts/let-rxvt-unicode-support-tags-and-links/</link><pubDate>Thu, 20 Mar 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/let-rxvt-unicode-support-tags-and-links/</guid><description>写完urxvt-unicode快速上手，本以为已将urxvt的用法一网打尽，不料AndyWxy网友又找到了两个新的功能：使urxvt启用标签和在urxvt中打开网页链接。
标签功能很实用，一般为了达到复用终端窗口的目的会采用两种方式：一是配合screen使用，另一个就是启用标签。然而前者有一个缺点就是不直观，标签页恰好能弥补这个缺陷。urxvt不愧是个功能强大的终端工具，如果在编译时开启perl支持，则urxvt可启用多标签功能。用法如下：
一是在启动的时候加入命令行参数：
urxvt -pe tabbed
二是在配置文件“.Xresources”中添加如下配置信息：
URxvt.perl-ext-common: default,tabbed
则默认情况下执行urxvt就会打开多标签功能。urxvt的标签支持使用鼠标操作，同时可以使用Ctrl+Shift+左右箭头来切换标签页，使用Ctrl+Shift+向下箭头开启新标签。
另外一个功能就是可以通过在urxvt中的链接上点击鼠标左键来通过设定的浏览器打开之。首先在“.Xresources”文件中添加如下内容：
URxvt.urlLauncher: firefox URxvt.matcher.button: 1
然后使用如下命令打开urxvt：
urxvt -pe matcher
即可。也可以在配置文件中添加上述内容之后再添加一行：
URxvt.perl-ext-common: matcher
此后即默认开启在终端窗口中打开链接的功能。注意修改“.Xresources”文件后需要执行如下命令才能使修改后的配置文件生效：
xrdb ~/.Xresources</description></item><item><title>rxvt-unicode快速上手</title><link>http://0x3f.org/posts/quick-guide-for-rxvt-unicode/</link><pubDate>Fri, 07 Mar 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/quick-guide-for-rxvt-unicode/</guid><description> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rxvt是我最喜欢的虚拟终端，它有以下优点： &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;轻量：体积小，启动速度快，占用系统资源极低 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;美观：各种外观（如颜色、字体、半透明等）均可定制 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;功能强：具备一个终端工具应当有的各种实用功能 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;然而它很难被初学者接受，一是因为它的缺省外观很难看，而自身又不提供图形界面的配置工具，只能通过修改配置文件来设置，然而网上相关的资料却非常少；二是因为在rxvt中使用复制和粘贴非常“不方便”，它并不支持人们已经习惯的Ctrl+C和Ctrl+V的复制、粘贴方式，这也是网上关于rxvt问得最多的问题；最后一个门槛是它对中文等东亚文字的支持不好。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;其实rxvt以上三个所谓的门槛都是初学者对它的误解。首先rxvt的配置文件非常简单，只要学过英语的人都能看明白，通过简单的配置就可以使之变得非常漂亮，丝毫不逊色于Konsole、Gnome-terminal等主流终端。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;其次，rxvt虽然不支持Ctrl+C和Ctrl+V的复制、粘贴，但是它有自己的一套操作方式。Linux下普遍使用的图形界面均为X11，而X11支持一种独特的复制粘贴方式，即如果你在另一个程序比如文本编辑器中使用鼠标拖动来高亮一段文字后，不用进行任何操作，此时选中的内容已经复制到剪贴板中了，随后在rxvt中单击鼠标中键即可将选中内容粘贴到其中，此外，如果鼠标没有中键，可以同时按下左右键以达到同样的效果，还可以使用Shift+Insert组合键来完成粘贴；反之，从rxvt中向外复制内容同样如此。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最后，虽然rxvt对东亚文字支持不好，但是rxvt有几个修改版，其中一个就是rxvt-unicode。顾名思义，rxvt-unicode支持unicode编码，因此对东亚文字的支持完全没有问题。安装完成后，使用urxvt即可打开之。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;此外，rxvt-unicode还有一个很好的特性，它可以工作在C/S模式。使用urxvtd启动rxvt的后台程序，此后任何时候使用urxvtc即可打开一个rxvt终端，所有的rxvtc共用一个urxvtd，因此在同时运行的终端比较多的时候，在内存占用上要比全部使用urxvt少一些。不过据我粗略计算，如果打开的终端不是非常多（比如说几十个），那么使用普通模式和使用C/S模式对内存的占用没有太大的差距，因为普通模式下的urxvt占用内存本身就非常少。在我看来使用C/S模式的最大好处是启动速度比普通模式要快一些。 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;关于rxvt的美化和设置，可以参看我以前写的一篇文章。下图是我现在使用的rxvt的截图： &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;以下是我当前的rxvt配置文件的内容： !Xft.dpi:96 !fontforge.FontView.FontFamily:wenquanyi bitmap song Rxvt.geometry:192×144 Rxvt.background:#2e2e2e Rxvt.foreground:antiquewhite Rxvt.colorBD:yellow Rxvt.colorUL:green Rxvt.multichar_encoding:utf-8 Rxvt.scrollBar:Fault Rxvt.scrollBar_right:True Rxvt.scrollBar_floating: True Rxvt.scrollstyle: next Rxvt.saveLines:10000 Rxvt.color0:black Rxvt.color1:red3 Rxvt.color2:springgreen Rxvt.color3:wheat3 Rxvt.color4:navy Rxvt.color5:magenta4 Rxvt.color6:steelblue1 Rxvt.color7:gray85 Rxvt.color8:gray10 Rxvt.color9:SkyBlue3 Rxvt.color10:chartreuse3 Rxvt.color11:lightgoldenrod2 Rxvt.color12:SkyBlue1 Rxvt.color13:pink1 Rxvt.color14:lightblue1 Rxvt.color15:#dbeff9 Rxvt.font:xft:Vera Sans YuanTi Mono :size=10,xft:Monospace:size=10 Rxvt.menu:/etc/X11/rxvt.menu Rxvt.preeditType:Root Rxvt.transparency:255</description></item><item><title>rxvt-unicode的半透明方案</title><link>http://0x3f.org/posts/half-transparent-for-rxvt-unicode/</link><pubDate>Tue, 16 Oct 2007 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/half-transparent-for-rxvt-unicode/</guid><description> &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rxvt是个快速且节省内存的模拟终端，原版rxvt对中文等非字母语言的支持不好，所以它有许多修改版，rxvt-unicode-ml是比较适合中国人使用的rxvt修改版。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rxvt轻量但不简单，它有许多设置选项和启动参数，用户可以在命令行使用“rxvt -help”查看其常用启动参数，使用“rxvt --help”查看更为详细的启动参数。
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;通过修改用户主目录下的“.Xresources”文件可以配置urxvt的行为，从而不必每次都加启动参数，我的".Xresources"文件内容如下：
Rxvt.background:white
Rxvt.foreground:black
Rxvt.colorBD:yellow
Rxvt.colorUL:green
Rxvt.multichar_encoding:gb2312
Rxvt.scrollBar:Fault
Rxvt.scrollBar_right:True
Rxvt.scrollBar_floating: True
Rxvt.scrollstyle: next
Rxvt.saveLines:10000
Rxvt.color0:black
Rxvt.color1:red3
Rxvt.color2:springgreen
Rxvt.color3:wheat3
Rxvt.color4:navy
Rxvt.color5:magenta4
Rxvt.color6:steelblue1
Rxvt.color7:gray85
Rxvt.color8:gray10
Rxvt.color9:SkyBlue3
Rxvt.color10:chartreuse3
Rxvt.color11:lightgoldenrod2
Rxvt.color12:SkyBlue1
Rxvt.color13:pink1
Rxvt.color14:lightblue1
Rxvt.color15:#dbeff9
Rxvt.font:xft:Vera Sans YuanTi Mono :size=10,xft:Monospace:size=10
Rxvt.menu:/etc/X11/rxvt.menu
Rxvt.preeditType:Root
Rxvt.geometry:192×174
Rxvt.transparency:255 &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这个配置文件是白底黑字，当然可以修改为全透明或者半透明，不过，只要在启动时加入启动参数就可以实现全透明：
urxvt -tr &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;也可以实现半透明：
urxvt -fg lightgray -bg black -bc -tr -tint lightgray -sh 60 -sr</description></item></channel></rss>