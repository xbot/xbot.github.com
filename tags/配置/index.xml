<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>配置 - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/%E9%85%8D%E7%BD%AE/</link><description>配置 - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 04 Aug 2011 00:00:00 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/%E9%85%8D%E7%BD%AE/" rel="self" type="application/rss+xml"/><item><title>Linux下双屏显示的设置</title><link>http://0x3f.org/post/dualhead-display-on-linux/</link><pubDate>Thu, 04 Aug 2011 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/dualhead-display-on-linux/</guid><description><![CDATA[<p>RandR是对X11的一个扩展协议，允许在不重启X的情况下修改输出的一些参数并使之生效，xrandr是该协议的命令行界面，它的功能之一就是用来设置双屏显示。</p>

<p>缺省情况下，外接显示器后启用的是屏幕复制模式，即两个屏幕显示完全相同的内容。使用命令<code>xrandr -q</code>查看当前的输出状态：</p>

<blockquote>
  <p>Screen 0: minimum 320 x 200, current 1920 x 1080, maximum 8192 x 8192
  LVDS1 connected 1280x800+0+0 (normal left inverted right x axis y axis) 261mm x 163mm
    1280x800       60.0<em>+   60.0     50.0 <br />
    1024x768       75.1     70.1     60.0 <br />
    800x600        72.2     75.0     60.3     56.2 <br />
    768x576        75.0     72.0     60.0 <br />
    640x480        72.8     75.0     60.0     59.9 <br />
  VGA1 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 509mm x 286mm
    1920x1080      60.0</em>+
    1680x1050      60.0 <br />
    1280x1024      75.0     60.0 <br />
    1440x900       59.9 <br />
    1280x960       60.0 <br />
    1024x768       75.1     70.1     60.0 <br />
    832x624        74.6 <br />
    800x600        72.2     75.0     60.3     56.2 <br />
    640x480        72.8     75.0     66.7     60.0 <br />
    720x400        70.1 <br />
  HDMI1 disconnected (normal left inverted right x axis y axis)
  DP1 disconnected (normal left inverted right x axis y axis)
  HDMI2 disconnected (normal left inverted right x axis y axis)
  DP2 disconnected (normal left inverted right x axis y axis)
  DP3 disconnected (normal left inverted right x axis y axis)</p>
</blockquote>

<p>可见，笔记本电脑的屏幕输出（<em>LVDS1</em>）的显示分辨率是1280x800，外接显示器的输出（<em>VGA1</em>）的分辨率是1920x1080。两个输出在整个虚拟屏幕（<em>名称：Screen 0；当前大小：1920x1080；最大：8192x8192</em>）上的坐标都是+0+0。所以在外接显示器中可以看到屏幕左上角有一个1280x800分辨率的小屏幕。</p>

<p>屏幕复制模式最常用于外接投影仪，现在我需要两个屏幕分别显示在各自的显示器中，并在两个屏幕中显示不同的内容（<em>也就是Windows下设置双屏显示时选择的扩展模式</em>）。</p>

<p>由于我将笔记本电脑放在外接显示器的左边，所以为了操作的自然，使用命令<code>xrandr --output VGA1 --right-of LVDS1</code>将外接显示器的输出在虚拟屏幕上的位置设置在笔记本电脑的输出的右边，示意图如下：</p>

<p><a href="https://picasaweb.google.com/lh/photo/twh2zzOQbv1YrOA_WPPxMg?feat=embedwebsite"></a></p>

<p>这样，两个显示器中就可以显示不同的内容了。由于属于同一个虚拟屏幕，当然也可以将一个窗口跨过边界从一个显示器拖到另一个显示器中。再使用命令<code>xrandr -q</code>查看现在的输出状态：</p>

<blockquote>
  <p>Screen 0: minimum 320 x 200, current 3200 x 1080, maximum 8192 x 8192
  LVDS1 connected 1280x800+0+0 (normal left inverted right x axis y axis) 261mm x 163mm
    1280x800       60.0<em>+   60.0     50.0 <br />
    1024x768       75.1     70.1     60.0 <br />
    800x600        72.2     75.0     60.3     56.2 <br />
    768x576        75.0     72.0     60.0 <br />
    640x480        72.8     75.0     60.0     59.9 <br />
  VGA1 connected 1920x1080+1280+0 (normal left inverted right x axis y axis) 509mm x 286mm
    1920x1080      60.0</em>+
    1680x1050      60.0 <br />
    1280x1024      75.0     60.0 <br />
    1440x900       59.9 <br />
    1280x960       60.0 <br />
    1024x768       75.1     70.1     60.0 <br />
    832x624        74.6 <br />
    800x600        72.2     75.0     60.3     56.2 <br />
    640x480        72.8     75.0     66.7     60.0 <br />
    720x400        70.1 <br />
  HDMI1 disconnected (normal left inverted right x axis y axis)
  DP1 disconnected (normal left inverted right x axis y axis)
  HDMI2 disconnected (normal left inverted right x axis y axis)
  DP2 disconnected (normal left inverted right x axis y axis)
  DP3 disconnected (normal left inverted right x axis y axis)</p>
</blockquote>

<p>使用xrandr做的设置只对当前的X会话有效，重启后恢复原样。使设置持久化的方法为修改xorg.conf或设置自动执行命令。据说有一些图形界面封装的xrandr的前端，完善的桌面环境如GNOME和KDE应该也是可以在图形界面中设置的，不过我所使用的XFCE目前似乎只能启用/禁用复制模式，而不支持在图形界面中设置扩展模式。</p>

<p>下面的脚本用来简化双屏显示的设置：</p>

```bash
#!/bin/bash

# Restart trayer and cairo-dock which I use on my desktop
restart_widget()
{
    killall trayer
    killall cairo-dock

    # Another script which starts trayer and set some options
    mytrayer
    cairo-dock &
}

set_dualhead()
{
    xrandr --output LVDS1 --auto
    xrandr --output VGA1 --auto
    xrandr --output VGA1 --right-of LVDS1
    restart_widget
}

set_lvds()
{
    xrandr --output VGA1 --off
    xrandr --output LVDS1 --auto
    restart_widget
}

set_vga()
{
    xrandr --output LVDS1 --off
    xrandr --output VGA1 --auto
    restart_widget
}

if [ $# -eq 0 ]; then
    set_dualhead
    exit
fi

case "$1x" in
    "lvdsx") set_lvds;;
    "vgax") set_vga;;
    *) echo 'Unknown parameter !';;
esac
```

<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item><item><title>人性化Vim的预览窗口</title><link>http://0x3f.org/post/humanize-preview-window-in-vim/</link><pubDate>Sun, 29 May 2011 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/humanize-preview-window-in-vim/</guid><description><![CDATA[<p>Vim的预览窗口由<code>:ptag</code>等命令触发，可用于预览函数定义。但在缺省情况下，预览窗口的高度是固定的，对于注释信息较多的函数，往往不能完全显示注释，而对于注释较少的函数，又会有多余的行浪费屏幕空间。</p>

<p>下面的函数用于解决这个问题：</p>

```vim
" 调用:ptag命令预览光标所在<word>的定义
" 对类C语言风格的函数/方法定义和注释有效，对其余情况仍沿用:ptag的原有效果
function! PTagIt()
    exec "ptag ".expand("<cword>")
    let cwin = winnr()
    silent! wincmd P
    let lnr = line('.')
    if lnr < 3
        return
    endif

    if foldlevel('.')>0
        normal zo
    endif

    let chead = 0
    let linestr = getline(lnr-1)
    if linestr =~ '^\s*\*/'
        let ptr = lnr-2
        while ptr>0
            let linestr = getline(ptr)
            if linestr =~ '^\s*/\*'
                let chead = ptr
                break
            endif
            let ptr = ptr-1
        endwhile
    endif

    if chead>0
        exec 'resize '.(lnr-chead+1)
        exec 'normal '.chead."z\<CR>"
        exec 'normal '.lnr.'G'
    endif

    exec cwin.'wincmd w'  
endfunction
nmap <leader>pp :call PTagIt()<CR>
nmap <leader>pc :pclose<CR>
```

<p>例如对于如下的函数定义：</p>

```php
/*
 * 我是一个测试函数
 * @param int 我是整型形参
 * @param string 我是字符串形参
 * @param array 我是返回值
 */
function foo($bar1, $bar2) {...}
```

<p>实际效果为打开的预览窗口将完全显示并只显示以上内容。</p>

<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item><item><title>Dokan SSHFS：Windows下通过SSH挂载Linux主机为本地分区</title><link>http://0x3f.org/post/mount-linux-dirs-as-windows-local-partitions/</link><pubDate>Thu, 20 Jan 2011 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/mount-linux-dirs-as-windows-local-partitions/</guid><description><![CDATA[<p>Linux一般使用Samba向Windows共享资源。另一个办法就是使用SSH。</p>

<p><a href="http://dokan-dev.net/en/">Dokan</a>是一个为Windows提供实现新文件系统的开发库，而<a href="http://dokan-dev.net/en/download/#sshfs">Dokan SSHFS</a>是在此基础上实现的挂载SSH通道为本地分区的文件系统。必须先安装Dokan，然后再安装Dokan SSHFS。</p>

<p><a href="http://picasaweb.google.com/lh/photo/d6J9vTU8cvK2KEplEo0ZaQ?feat=embedwebsite"></a></p>

<p>如果从安装SSH服务做起，步骤是：</p>

<ol>
<li>在Linux主机上安装openssh</li>
<li>修改Linux主机的<strong>/etc/hosts.allow</strong>，加入<code>sshd: ALL</code>，以允许外部访问</li>
<li>启动sshd守护进程</li>
<li>在Windows主机上安装Dokan和Dokan SSHFS</li>
<li>通过SSHFS的图形配置工具挂载SSH通道</li>
</ol>

<p>这种方式的好处是简单，但是存在安全隐患，不管怎样，公布SSH连接绝非好事，这意味著接入用户可以远程控制Linux主机，尤其是当SSH账户的权限较高时。因此，这种方式只适用于虚拟机或家庭网络，例如对Host-Guests共享支持不佳的KVM虚拟机来说就是个好的选择。即便如此，也要注意相应的Windows主机的安全防范，否则，入侵者可以通过Windows主机做跳板来进入Linux主机。</p>
]]></description></item><item><title>darkstat: 网络流量监测工具</title><link>http://0x3f.org/post/darkstat-as-a-network-discharge-meter/</link><pubDate>Sun, 26 Dec 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/darkstat-as-a-network-discharge-meter/</guid><description><![CDATA[<p><a href="http://dmr.ath.cx/net/darkstat/">darkstat</a>是一个跨平台的网络流量监测工具，可显示最大一个月内操作系统的各项网络流量指标。</p>
<p>具有以下特性：</p>
<ol>
	<li>以守护进程方式运行，提供Web用户界面，零配置，易于使用</li>
	<li>可显示较为详细的网络流量指标</li>
	<li>性能表现好，占用资源少</li>
	<li>跨平台，支持多个UNIX、类UNIX操作系统，并有非官方的Windows移植版</li>
</ol>
<p>具有以下不足：</p>
<ol>
	<li>功能较为简单，以易用性换灵活性</li>
	<li>日志记录功能比较单薄，需要编写辅助脚本并设置定时任务</li>
</ol>
<p>darkstat启动时需要手工指定监视的网络接口，因此需要用根权限启动：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo darkstat -i eth0
</code></pre></td></tr></table>
</div>
</div><p>darkstat默认使用<strong>667</strong>端口提供Web访问，可以用<strong>-p</strong>参数指定端口：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo darkstat -i eth0 -p <span class="m">8080</span>
</code></pre></td></tr></table>
</div>
</div><p>darkstat的Web用户界面分为Graph、Hosts和Host三部分。Graph是缺省主页，用于显示最近一分钟、一小时、一天和一个月的流量统计直方图，将光标置于任何一个直方条上可查看对应时刻的流量指标：</p>
<p><a href="http://picasaweb.google.com/lh/photo/NAB3_2TtnezdM45HoNd5pQ?feat=embedwebsite"></a></p>
<p>Hosts界面按主机显示各自的流量统计指标的值：</p>
<p><a href="http://picasaweb.google.com/lh/photo/kG1J2j2eecaLUnhDL-fArA?feat=embedwebsite"></a></p>
<p>单击Hosts界面上的IP进入对应主机的Host界面，此界面按TCP/UDP类型显示对应的主机的各端口的网络流量指标的值：</p>
<p><a href="http://picasaweb.google.com/lh/photo/XBNQWty4lp63OWwyAFm_BA?feat=embedwebsite"></a></p>
<p>可通过如下命令查看占用指定端口的进程：</p>
<blockquote>
[lenin@archer ~]$ lsof -i tcp:58062 -n
COMMAND   PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
mlnet   18660 lenin   74u  IPv4 251788      0t0  TCP 192.168.1.3:58062->122.116.212.89:http (ESTABLISHED)
</blockquote>
<p>darkstat区别于其它流量监测工具的最大的优点就是简单易用，非常适合对流量监测应用不复杂的场景。前段时间公司的一台RHEL服务器因为流量过大多次被网管拔线，后来用darkstat监测到大部分流量被几个UDP端口占去，进而发现原来是服务器被入侵并被安装了一个扫描器<a href="http://code.google.com/p/sipvicious/">SIPVicious</a>。</p>
]]></description></item><item><title>Vim中设置关键词识别规则的方法</title><link>http://0x3f.org/post/howto-set-keyword-identification-in-vim/</link><pubDate>Wed, 22 Dec 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/howto-set-keyword-identification-in-vim/</guid><description><![CDATA[<p>在Vim中，关键词是一个至关重要的概念。合理地利用关键词，可以快速地对光标下有特殊含义的字符串进行一系列的操作，例如通过快捷键复制关键词、查询函数定义或文档、在项目中查询所有引用当前函数的地方等等。这对工作效率的提升有极大的帮助。</p>
<p>但我的Vim对PHP文件的关键词识别有问题，在选择函数名的时候总是将函数名后的小括弧一起选入。</p>
<p>Vim使用选项iskeyword设定关键词的匹配规则，使用如下命令查看当前文件类型的关键词规则：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="nx">set</span> <span class="nx">iskeyword</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>我这里查看PHP文件的规则结果如下：</p>
<blockquote>
iskeyword=@,48-57,_,192-255,$,(
</blockquote>
<p>不明白为什么缺省设置中会有左括弧，在vimrc中加入如下配置取消之：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="nx">au</span> <span class="nx">FileType</span> <span class="nx">php</span> <span class="nx">set</span> <span class="nx">iskeyword</span><span class="p">-=(</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Vim保存文件时移除尾行换行符的方法</title><link>http://0x3f.org/post/howto-remove-eof-in-vim/</link><pubDate>Sun, 05 Dec 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/howto-remove-eof-in-vim/</guid><description><![CDATA[<p>Vim认为一个文本文件的每一行都应该由一换行符结束，即使文件的最后一行也不例外。这就使得Vim保存过的文本文件在其它文本编辑器中查看时可能会在文件末尾多出一个空行。一般来说，这不是个问题，但对于程序员来说，有时候一些不规范的运行环境或其它组件就要求文件的最后一行不能有换行符，否则就会出莫名其妙的问题，尤其是在Windows环境下最常见。</p>
<p>要在保存文件时不在最后一行添加换行符，最常见、最简单的方法就是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="p">:</span><span class="nx">set</span> <span class="nx">binary</span><span class="err">
</span><span class="err"></span><span class="p">:</span><span class="nx">set</span> <span class="nx">noendofline</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>但是这样做有一个问题，就是会把DOS格式的文件自动转换成UNIX格式，WinSlave们肯定不希望这么做。</p>
<p>因此，可在vimrc中加入如下内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="c">&#34; Save the current buffer as a file with no EOF sign.</span><span class="err">
</span><span class="err"></span><span class="k">function</span><span class="p">!</span> <span class="nx">SaveAsNOEOF</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span><span class="err">
</span><span class="err"></span>    <span class="k">let</span> <span class="nx">a</span><span class="p">=</span><span class="nx">getline</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="nx">line</span><span class="p">(</span><span class="s1">&#39;$&#39;</span><span class="p">)</span><span class="m">-1</span><span class="p">)</span><span class="err">
</span><span class="err"></span>    <span class="k">let</span> <span class="nx">b</span><span class="p">=</span><span class="nx">map</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="s1">&#39;iconv(v:val,&#34;&#39;</span>.&amp;<span class="nx">enc</span>.<span class="s1">&#39;&#34;,&#34;&#39;</span>.&amp;<span class="nx">fenc</span>.<span class="s1">&#39;&#34;) . nr2char(13)&#39;</span><span class="p">)</span><span class="err">
</span><span class="err"></span>    <span class="nx">call</span> <span class="nx">extend</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="nx">getline</span><span class="p">(</span><span class="s1">&#39;$&#39;</span><span class="p">,</span> <span class="s1">&#39;$&#39;</span><span class="p">))</span><span class="err">
</span><span class="err"></span>    <span class="nx">call</span> <span class="nx">writefile</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span>:<span class="nx">filename</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">)</span><span class="err">
</span><span class="err"></span>    <span class="k">if</span> <span class="nx">a</span>:<span class="nx">filename</span> <span class="p">==</span> <span class="nx">bufname</span><span class="p">(</span><span class="s1">&#39;%&#39;</span><span class="p">)</span><span class="err">
</span><span class="err"></span>        <span class="nx">set</span> <span class="nx">nomodified</span><span class="err">
</span><span class="err"></span>    <span class="k">endif</span><span class="err">
</span><span class="err"></span><span class="k">endfunction</span><span class="err">
</span><span class="err"></span><span class="c">&#34; Save the current buffer and get rid of the EOF sign.</span><span class="err">
</span><span class="err"></span><span class="k">function</span><span class="p">!</span> <span class="nx">SaveNOEOF</span><span class="p">()</span><span class="err">
</span><span class="err"></span>    <span class="nx">call</span> <span class="nx">SaveAsNOEOF</span><span class="p">(</span><span class="nx">bufname</span><span class="p">(</span><span class="s1">&#39;%&#39;</span><span class="p">))</span><span class="err">
</span><span class="err"></span><span class="k">endfunction</span><span class="err">
</span><span class="err"></span><span class="nx">command</span><span class="p">!</span> <span class="p">-</span><span class="nx">complete</span><span class="p">=</span><span class="nx">file</span> <span class="p">-</span><span class="nx">nargs</span><span class="p">=</span><span class="m">0</span> <span class="nx">SaveNOEOF</span> :<span class="nx">call</span> <span class="nx">SaveNOEOF</span><span class="p">()</span><span class="err">
</span><span class="err"></span><span class="nx">command</span><span class="p">!</span> <span class="p">-</span><span class="nx">complete</span><span class="p">=</span><span class="nx">file</span> <span class="p">-</span><span class="nx">nargs</span><span class="p">=</span><span class="m">1</span> <span class="nx">SaveAsNOEOF</span> :<span class="nx">call</span> <span class="nx">SaveAsNOEOF</span><span class="p">(&lt;</span><span class="nx">q</span><span class="p">-</span><span class="nx">args</span><span class="p">&gt;)</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>然后就可以使用SaveNOEOF和SaveAsNOEOF两条命令去保存没有EOF的文件了。</p>
<p><em>说明：本文的目的在于保存文件时移除最后一行的换行符，而并非移除EOF，上述配置中使用EOF只为记忆更容易起见。</em></p>
<p><strong>更新：</strong></p>
<blockquote>
<strong>2010-12-15</strong>
<ol>
	<li>修正SaveNOEOF命令报缺少参数的错误的问题</li>
	<li>修正保存当前buffer后没有变更文档修改状态的问题</li>
	<li>修正保存文件后总是将编码转换成encoding选项的值的问题</li>
</ol>
</blockquote>
]]></description></item><item><title>开启自定义GTK程序菜单快捷键的方法</title><link>http://0x3f.org/post/howto-enable-hotkey-for-gtk-menus/</link><pubDate>Sat, 04 Dec 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/howto-enable-hotkey-for-gtk-menus/</guid><description><![CDATA[<p>基于GTK的程序菜单本身支持通过在焦点所在的菜单项上按下组合键来定义该菜单项的快捷键，但默认并不开启。</p>
<p>一般来说，对于支持X的会话管理的桌面环境，可以通过修改相应的设置来开启这个功能：</p>
<ol>
	<li>GNOME中该设置项所在的路径是：主选单 > 桌面 > 偏好设定 > 选单及功具列 > 可编辑选单捷径键</li>
	<li>XFCE中该设置项所在的路径是：主选单 > 设置 > 外观 > 设置 > 开启可编辑快捷键</li>
</ol>
<p>对于不支持会话管理的桌面环境，可在~/.gtkrc-2.0中添加如下配置内容：</p>
<blockquote>
gtk-can-change-accels = 1
</blockquote>
]]></description></item><item><title>启动GVim时自动最大化窗口的方法</title><link>http://0x3f.org/post/howto-auto-maximize-gvim-at-startup/</link><pubDate>Wed, 25 Aug 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/howto-auto-maximize-gvim-at-startup/</guid><description><![CDATA[<p>根据帮助文档，gvim在windows下的最大化是通过模拟打开窗口菜单并点击最大化菜单项实现的，而在Linux下的方法较为灵活。</p>
<p>下面的方法是在vim中通过调用wmctrl实现最大化的方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="k">if</span> <span class="nx">has</span><span class="p">(</span><span class="s1">&#39;win32&#39;</span><span class="p">)</span><span class="err">
</span><span class="err"></span>    <span class="nx">au</span> <span class="nx">GUIEnter</span> * <span class="nx">simalt</span> <span class="p">~</span><span class="nx">x</span><span class="err">
</span><span class="err"></span><span class="k">else</span><span class="err">
</span><span class="err"></span>    <span class="nx">au</span> <span class="nx">GUIEnter</span> * <span class="nx">call</span> <span class="nx">MaximizeWindow</span><span class="p">()</span><span class="err">
</span><span class="err"></span><span class="k">endif</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">function</span><span class="p">!</span> <span class="nx">MaximizeWindow</span><span class="p">()</span><span class="err">
</span><span class="err"></span>    <span class="nx">silent</span> <span class="p">!</span><span class="nx">wmctrl</span> <span class="p">-</span><span class="nx">r</span> :<span class="nx">ACTIVE</span>: <span class="p">-</span><span class="nx">b</span> <span class="nx">add</span><span class="p">,</span><span class="nx">maximized_vert</span><span class="p">,</span><span class="nx">maximized_horz</span><span class="err">
</span><span class="err"></span><span class="k">endfunction</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>当然也可以通过配置窗口管理器规则实现自动最大化，但上面的方法更灵活。</p>
]]></description></item><item><title>Linux下pppoe连接建立后仍不能上网的问题</title><link>http://0x3f.org/post/problem-on-pppoe-connections-on-linux/</link><pubDate>Sat, 10 Jul 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/problem-on-pppoe-connections-on-linux/</guid><description><![CDATA[<p><strong>问题描述</strong></p>
<p>pppoe可以连接，ifconfig可以看到ppp0接口，一切正常，只是不能上网。</p>
<p><strong>解决办法</strong></p>
<p>使用如下命令查看路由表：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">route
</code></pre></td></tr></table>
</div>
</div><p>正常情况下返回的结果中应该有如下内容：</p>
<blockquote>
default  *  0.0.0.0   U   0   0  0 ppp0
</blockquote>
<p>如果没有，可手工添加：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">route add default dev ppp0
</code></pre></td></tr></table>
</div>
</div><p>如果可以上网，就成功了。</p>
<p>使用如下脚本在pppoe连接成功时自动添加路由表项：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/sh
</span><span class="cp"></span> 
<span class="k">if</span> ifconfig ppp0  &gt; /dev/null 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">;</span> <span class="k">then</span>
    route del default
    route add default dev ppp0
<span class="k">fi</span>
</code></pre></td></tr></table>
</div>
</div><p>将上述内容保存成名为<strong>01-route.sh</strong>的文件，权限<strong>755</strong>，放到<strong>/etc/ppp/ip-up.d</strong>目录下。</p>
<p>然后创建以下两个脚本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span> 
<span class="k">if</span> ifconfig ppp0  &gt; /dev/null 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="s1">&#39;PPPOE has already been switched on !&#39;</span>
    <span class="nb">exit</span> <span class="m">0</span>
<span class="k">fi</span>
 
off
 
sudo pon
sleep <span class="m">5</span>
sudo /etc/ppp/ip-up
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span> 
<span class="k">if</span> ! ifconfig ppp0  &gt; /dev/null 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="s1">&#39;PPPOE has already been switched off !&#39;</span>
    <span class="nb">exit</span> <span class="m">0</span>
<span class="k">fi</span>
 
sudo poff
sudo /etc/ppp/ip-down
</code></pre></td></tr></table>
</div>
</div><p>分别命名为<strong>on</strong>和<strong>off</strong>并复制到环境变量PATH下，以后即可使用这两个脚本建立和注销pppoe连接。</p>
<p><strong>原因分析</strong></p>
<p>问题的原因是pppoe连接建立时，没有自动往路由表中添加相关路由项。</p>
<p>一般情况下，如果使用的是<strong>ppp</strong>做pppoe连接，其配置文件中默认会开启<strong>defaultroute</strong>选项，该选项的作用就是在pppoe连接建立时自动添加路由表项，但在路由表中已经存在<strong>default</strong>项时，该操作将不会进行。</p>
<p>一般有两种情况会使路由表中在pppoe连接建立前就存在default项。一种情况是网络接口配置中设置了route，如在archlinux下，就是rc.conf文件中的gateway项。如果使用的是静态地址，则需要做这种配置，但对于大多数使用DHCP动态分配IP地址的情况，这项配置则不需要。另一种情况就是ADSL Modem自带路由功能，在分配IP给计算机时也会自动添加一条路由表项。</p>
]]></description></item><item><title>Vim的终极自动补全插件：NeoComplCache</title><link>http://0x3f.org/post/neocomplcache-vim/</link><pubDate>Sat, 27 Feb 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/neocomplcache-vim/</guid><description><![CDATA[<p></p>
<p>关于自动补全，最初用的是<a href="http://www.vim.org/scripts/script.php?script_id=1643">SuperTab</a>，那个时候Vim的自动补全插件寥寥无几，也就SuperTab比较有名。不过实际使用过程中这个插件给我的体验不是很好，原因是补全的准确度不高。</p>
<p>后来出了一个新插件，<a href="http://www.vim.org/scripts/script.php?script_id=1879">AutoComplPop</a>，功能和使用都很简单。但是很快我就又用回SuperTab，原因是AutoComplPop在输入的同时实时地查询匹配的关键词，导致输入极不流畅，效率很低。</p>
<p>一直就这么凑合着用着SuperTab，随着这个插件版本的更新，旧功能不断地完善，新功能也接二连三地引入，SuperTab在匹配关键词的准确度上有了一些改善，但是新的问题又出现了。SuperTab后来加入一个新功能，对于程序源文件，可以在其引入的文件以及API文件中匹配关键词。比如假设我当前正在编辑a.php，在a.php中有<strong>include 'b.php';</strong>这样的语句，当我输入<strong>array</strong>并按下Tab键时，SuperTab不但会在当前文件中查询所有匹配项，还会到b.php中查询，如果配置过vim、指定一个包含了php的API的文件，则SuperTab还会自动从这个文件中查询匹配项。按理说这个功能的理念很好，但问题就在于SuperTab做的是实时查询，如果源文件中包含的文件较多，各个文件又较大，问题就显而易见了。我不得不在写程序时小心地使用Tab键，否则有时就会出现按一下Tab键然后等着Vim在那狂搜的情况。</p>
<p>前两天发现了<a href="http://www.vim.org/scripts/script.php?script_id=2620">NeoComplCache</a>，光看名字就让我有点儿兴奋，一般使用缓存的速度都很快。这个插件会在Vim打开文件的时候对上下文作一个索引，并把索引结果保存到缓存中。同时，文件更改的内容会在保存的时候被索引。此外，NeoComplCache支持多种关键词索引模式，例如它会判断当前路径下的文件或目录的名字是否匹配补全条件，也可以从缓存的程序语言API中匹配补全条件。到此为止，它就解决了SuperTab和AutoComplPop共同的效率问题，并具备它们各自的长处。看了一遍文档，发现这个插件的功能比较细致，大概有以下一些特点：</p>
<p>1、使用缓存，自动补全时效率高；
2、生成的关键词列表准确；
3、支持下划线分割的关键词，如apple_boy_cat，就可以只输入a_b_c，然后补全；
4、支持驼峰格式匹配关键词，如AppleBoyCat，就可以只输入ABC，然后补全；
5、既可以像AutoComplPop那样在Vim中输入的同时自动弹出补全列表，又可以自定义快捷键手动触发；
6、支持从文件名和目录名中匹配补全条件；
7、对于程序源文件，支持从语言API中匹配补全条件；</p>
<p>NeoComplCache的缺点是文档不全，虽然从只言片语中发现它还支持Snippet，但从文档中没有找到足够的有用信息。加之一直用<a href="http://www.vim.org/scripts/script.php?script_id=2540">SnipMate</a>感觉不错，所以目前还是用它来实现snippet功能。</p>
<p>这就有个搭配问题：虽然NeoComplCache不存在补全时的效率问题，但我仍然打算只在需要补全时才用快捷键触发此功能，最主要的原因是我既希望用Tab键触发SnipMate的代码块补全功能，又希望修SuperTab那样用Tab选择补全列表中的选项。也就是要达到只用Tab键就可以完成打开自动补全列表、补全列表选项选择和SnipMate代码块替换的效果。但是，如果将Tab映射到触发自动补全，则补全列表选择和SnipMate均无法使用Tab，反之亦然。</p>
<p>所以我想如果能让NeoComplCache、SuperTab、SnipMate和谐共存，那问题就解决了，几经摸索，终于找到了办法：</p>
<p>1、设置NeoComplCache不自动弹出补全列表，即在vimrc中加入：</p>
<blockquote>
  <p>let g:NeoComplCache_DisableAutoComplete = 1</p>
</blockquote>
<p>2、由于NeoComplCache在手工模式下使用快捷键组合<code>&lt;C-X&gt;&lt;C-U&gt;</code>打开补全列表，故设置SuperTab的默认补全操作为<code>&lt;C-X&gt;&lt;C-U&gt;</code>，即在vimrc中加入：</p>
<blockquote>
  <p>let g:SuperTabDefaultCompletionType = '<code>&lt;C-X&gt;&lt;C-U&gt;</code>'</p>
</blockquote>
<p>这样，NeoComplCache只负责补全关键词缓存的生成，SuperTab控制Tab键的行为并在需要触发补全操作时打开补全列表、进而在列表中的选项间移动焦点，而当光标前的关键词是snippet时，SnipMate会被优先调用并完成代码块的替换。</p>
<p>就在写这篇文章的时候，我突然觉得NeoComplCache自动弹出补全列表+SnipMate的方式也挺好，只是这样就不能用Tab键选择列表中的选项了。</p>
<h3 id="相关阅读">相关阅读：</h3>
<ul>
<li><a href="/post/replace-youcompleteme-with-neocomplete/" rel="">用neocomplete换掉了YouCompleteMe</a></li>
<li><a href="/post/make-youcompleteme-ultisnips-compatible/" rel="">How to Make YouCompleteMe Compatible with UltiSnips</a></li>
</ul>
]]></description></item></channel></rss>