<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>编程 - 标签 - 晴耕雨讀</title>
        <link>http://0x3f.org/tags/%E7%BC%96%E7%A8%8B/</link>
        <description>编程 - 标签 - 晴耕雨讀</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 18 Feb 2020 22:49:45 &#43;0000</lastBuildDate><atom:link href="http://0x3f.org/tags/%E7%BC%96%E7%A8%8B/" rel="self" type="application/rss+xml" /><item>
    <title>在VS Code中快速创建PHPUnit测试类的方法</title>
    <link>http://0x3f.org/post/quickly-create-phpunit-test-cases-with-vscode/</link>
    <pubDate>Tue, 18 Feb 2020 22:49:45 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://0x3f.org/post/quickly-create-phpunit-test-cases-with-vscode/</guid>
    <description><![CDATA[<p>通过单元测试解决问题或者调试代码，可以避开错综复杂的依赖关系、直击问题的核心，从而极大地节约时间、提高效率。</p>
<p>但是，当创建测试类成为一个经常发生的操作时，每次都手动创建类、引入基类、添加测试方法就显得很烦琐。我需要这样一个解决方案，让我可以立即开始着手写测试代码。</p>]]></description>
</item><item>
    <title>关于Lumen的Facade不支持引用传递的看法</title>
    <link>http://0x3f.org/post/lumen-facade-doesnot-support-pass-by-reference-param/</link>
    <pubDate>Tue, 04 Feb 2020 17:40:34 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://0x3f.org/post/lumen-facade-doesnot-support-pass-by-reference-param/</guid>
    <description><![CDATA[<p>今天遇到一个奇怪的问题，一次调用带引用传递形参的方法后，该形参对应的变量值没有按预期改变。</p>]]></description>
</item><item>
    <title>用C4-PlantUML画软件架构图</title>
    <link>http://0x3f.org/post/design-software-architecture-with-c4-plantuml/</link>
    <pubDate>Fri, 17 Jan 2020 17:29:24 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://0x3f.org/post/design-software-architecture-with-c4-plantuml/</guid>
    <description><![CDATA[<p><a href="https://c4model.com" target="_blank" rel="noopener noreffer">C4 Model</a>是一种简洁有序的架构模型，四个“C”分别表示“Context”、“Container”、“Component”和“Code”，是由上而下逐步细化的四个层级。</p>]]></description>
</item><item>
    <title>用PlantUML实现ERD</title>
    <link>http://0x3f.org/post/plantuml-erd/</link>
    <pubDate>Fri, 03 Jan 2020 17:01:41 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://0x3f.org/post/plantuml-erd/</guid>
    <description><![CDATA[<p>很长一段时间，我们都在用MySQLWorkbench画ER图。但是这个东西有一些缺陷，导致体验很不好。</p>
<p>首先它生成的文件是二进制的，做不了版本控制。这意味着在版本迭代的过程中做数据结构评审的体验很糟糕。其次，离线文件难以管理，不利于团队协作。第三，图形界面虽然简单，但并不等价于高效。用它画图的成本还是比较高的。</p>
<p>PlantUML是个基于文本、灵活且强大的UML画图工具，高度可定制，而且可以集成到多种开发工具中。主流的IDE、文本编辑器都可以集成PlantUML，以便用自己最熟悉的工具画图并实时预览。基于文本的特性使得版本控制和Code Review很容易实现。如果VCS用的是Gitlab，可以更进一步，借助PlantUML Server实现实时预览。即使对于像Github这种暂时没有提供支持的Web平台，也有变通的解决方案。</p>]]></description>
</item><item>
    <title>解决Laravel中makeWith()无法取到被mock的实例的问题</title>
    <link>http://0x3f.org/post/mocking-objects-made-by-laravel-container-with-parameters/</link>
    <pubDate>Fri, 16 Aug 2019 10:55:40 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://0x3f.org/post/mocking-objects-made-by-laravel-container-with-parameters/</guid>
    <description><![CDATA[<p>被测单元有一行实例化一个类的代码，而且该类的构造方法需要参数。基于面向单元测试编程的原则，通过容器的makeWith()方法实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">$api = app()-&gt;makeWith(Api::class, [&#39;config&#39; =&gt; $config]);
</code></pre></td></tr></table>
</div>
</div><p>但是在执行单元测试时发现，虽然测试代码中已经mock了这个类且注入到容器，但在被测单元中取到的还是原类的实例。</p>]]></description>
</item><item>
    <title>利用单元测试为开发提效</title>
    <link>http://0x3f.org/post/use-unit-test-as-an-efficiency-tool/</link>
    <pubDate>Tue, 13 Aug 2019 16:38:02 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://0x3f.org/post/use-unit-test-as-an-efficiency-tool/</guid>
    <description><![CDATA[<p>单元测试可以方便地伪造和回滚测试数据，这个特性决定了它其实是一个效率工具。</p>
<p>例如在开发退款单、发票的时候，由于这种后置的功能依赖订单、支付、库存等前置的数据，因此需要频繁地创建这些测试数据，这就导致开发的效率极低，有时甚至需要切换多个系统做诸如增加库存、下单、支付等操作。虽然在开发环境可以通过直接修改数据使之恢复可被测试的状态，但仍然存在效率很低、遗留垃圾数据和存在隐患等问题。</p>
<p>单元测试可以完美地解决这些问题。</p>]]></description>
</item><item>
    <title>面向单元测试编程</title>
    <link>http://0x3f.org/post/unit-test-oriented-programming/</link>
    <pubDate>Tue, 13 Aug 2019 16:35:15 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://0x3f.org/post/unit-test-oriented-programming/</guid>
    <description><![CDATA[<p>同一逻辑可以有多种实现方式，选择对单元测试友好的方式可以提高写测试代码的效率。</p>]]></description>
</item><item>
    <title>PHP单元测试的技巧</title>
    <link>http://0x3f.org/post/phpunit-tips/</link>
    <pubDate>Tue, 13 Aug 2019 14:21:48 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://0x3f.org/post/phpunit-tips/</guid>
    <description><![CDATA[<p>以下是我平时写单元测试时总结的一些最佳实践，有些是和具体的框架强相关的。</p>]]></description>
</item><item>
    <title>Lumen单元测试提示自定义校验规则不存在的问题</title>
    <link>http://0x3f.org/post/unit-test-in-laravel-complains-validation-rule-not-exist/</link>
    <pubDate>Fri, 02 Aug 2019 15:12:17 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://0x3f.org/post/unit-test-in-laravel-complains-validation-rule-not-exist/</guid>
    <description><![CDATA[<p>执行单元测试时遇到报错：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">BadMethodCallException: Method [validateIdList] does not exist.
</code></pre></td></tr></table>
</div>
</div>]]></description>
</item><item>
    <title>对比Laravel Excel和Spout的读写性能</title>
    <link>http://0x3f.org/post/performance-comparation-for-laravel-excel-and-spout/</link>
    <pubDate>Sun, 07 Jul 2019 20:23:26 &#43;0000</pubDate>
    <author>作者</author>
    <guid>http://0x3f.org/post/performance-comparation-for-laravel-excel-and-spout/</guid>
    <description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 ./artisan excel:write --driver=spout --amount=100000 写入数据100000行。 用时：156秒。 最大使用内存：2750.5106964111 M。 ./artisan excel:write --driver=laravel-excel]]></description>
</item></channel>
</rss>
