<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Plugin - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/plugin/</link><description>Plugin - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 20 Apr 2014 22:50:00 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/plugin/" rel="self" type="application/rss+xml"/><item><title>UltraBlog.vim v3.6.1: 文章分类自动补全</title><link>http://0x3f.org/post/ultrablog-v361-released/</link><pubDate>Sun, 20 Apr 2014 22:50:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/ultrablog-v361-released/</guid><description><![CDATA[<p>春节期间收到两个issue，一直拖到今天才有时间完成。</p>
<p>增加了一个功能，在文章编辑视图的元数据中分类那行，使用热键&lt;C-X&gt;&lt;C-U&gt;自动完成文章的分类。在配置数组<strong>ub_blog</strong>中增加键值对“categories”，默认使用这一项的值实现自动完成，如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="k">let</span> <span class="nx">ub_blog</span> <span class="p">=</span> {<span class="s1">&#39;login_name&#39;</span>:<span class="s1">&#39;admin&#39;</span><span class="p">,</span><span class="err">
</span><span class="err"></span>            \<span class="s1">&#39;password&#39;</span>:<span class="s1">&#39;pass2011&#39;</span><span class="p">,</span><span class="err">
</span><span class="err"></span>            \<span class="s1">&#39;url&#39;</span>:<span class="s1">&#39;http://www.sample.com/&#39;</span><span class="p">,</span><span class="err">
</span><span class="err"></span>            \<span class="s1">&#39;xmlrpc_uri&#39;</span>:<span class="s1">&#39;xmlrpc.php&#39;</span><span class="p">,</span><span class="err">
</span><span class="err"></span>            \<span class="s1">&#39;db&#39;</span>:<span class="s1">&#39;$VIM/UltraBlog.db&#39;</span><span class="p">,</span><span class="err">
</span><span class="err"></span>            \<span class="s1">&#39;categories&#39;</span>: <span class="s1">&#39;News|Computer|Image&#39;</span><span class="err">
</span><span class="err"></span>            \}<span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>如果这一项不存在，将从博客中拉取分类数据。</p>
<p>自从迁移到Octopress，有两年不用Wordpress了，没想到居然还有人在用<a href="/post/ultrablog-as-an-ultimate-vim-blogging-plugin/" rel="">UltraBlog.vim</a>。</p>
]]></description></item><item><title>UltraBlog.vim v3.5.0: 内建浏览器</title><link>http://0x3f.org/post/ultrablog-v350-released/</link><pubDate>Mon, 30 Apr 2012 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/ultrablog-v350-released/</guid><description><![CDATA[<p>此前预览文章是通过调用系统默认的网络浏览器实现的，缺点是这些功能完备的浏览器启动速度不甚理想，尤其是火狐，谁用谁知道。</p>
<p>前两天看了TuxRadar的一个Podcast，几分钟内就可以用pywebkitgtk拼装出一个五脏俱全的网络浏览器，pywebkitgtk这个东西实在是非常的好用。不过我实测后发现这东西加载页面的速度比较慢，而且貌似是单线程的，因为图片都是放在最后才加载，不知道是这个绑定本身的问题，还是有API可以实现的。于是突然想到拿这个东西实现一个简单的浏览器，很适合在UB里预览文章。</p>
<p>增加了一个选项<strong>“ub_use_ubviewer”</strong>，默认值是1，即默认使用这个内建的浏览器预览文章。当这个选项的值被设为0时，仍然使用系统的默认浏览器，并且在Vim启动时不会加载内建的浏览器。这样做一是为了多一种选择，再一个也可以避开烦人的GTK警告：</p>
<blockquote>
<p>** (gvim:13629): WARNING **: Trying to register gtype 'GMountMountFlags' as enum when in fact it is of type 'GFlags'</p>
<p>** (gvim:13629): WARNING **: Trying to register gtype 'GDriveStartFlags' as enum when in fact it is of type 'GFlags'</p>
<p>** (gvim:13629): WARNING **: Trying to register gtype 'GSocketMsgFlags' as enum when in fact it is of type 'GFlags'</p>
</blockquote>
<p>这些警告是GTK或其它一些程序库的Bug造成的，虽然只在虚拟终端中启动Vim时会显示并且不影响使用，但总会有警告恐惧症患者会觉得这种东西很闹心。如果这样，就把这个选项的值设成0，用回巨型浏览器好了。</p>
<p>本次更新的全部内容如下：</p>
<ul>
<li>Feature: Add a tiny web browser to do previewing, which starts much faster than full-functional browsers like firefox and chromium. The later ones are still supported. The matter that whether or not to use the new previewer is controlled by a new option <strong>ub_use_ubviewer</strong>.</li>
<li>Bugfix: Issue 7: Keywords highlighting is disabled in item lists, even if searches are made manually.</li>
</ul>
<p>关于UB的详细信息在<a href="http://0x3f.org/?p=1894">这里</a>。</p>
<p>这是那个Podcast：</p>
<p><embed src='http://player.youku.com/player.php/sid/XMzg5MTc1OTI4/v.swf' quality='high' width='480' height='400' align='middle' allowScriptAccess='sameDomain' type='application/x-shockwave-flash'></embed></p>
<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item><item><title>UltraBlog.vim v3.4.0: 正则表达式、批量替换和调试模式</title><link>http://0x3f.org/post/ultrablog-v340-released/</link><pubDate>Sun, 29 Apr 2012 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/ultrablog-v340-released/</guid><description><![CDATA[<p>这次的更新主要引入了支持正则表达式的全文检索、批量替换和调试模式。</p>
<h2>正则表达式</h2>
<p>我一直觉得原来的全文检索有一个遗憾，虽然可以通过多个关键词实现较为精确的查询，但还是不如正则表达式灵活和精确。</p>
<p>这是个蓄谋已久的需求，但直到真正做起来，才发现很多有意思的东西。虽然SQLite3提供支持正则表达式查询的<strong>“REGEX”</strong>关键词，但并没有实际实现这个功能，而是需要写程序实现并在数据库接口中注册这个函数：</p>
```python
import sqlite3

conn = sqlite3.connect('/tmp/your-database-file.db')

# 使用正则表达式匹配给定内容的函数，返回布尔类型
def regexp_search(expr, item):
    """Check if the item has a sub-string which matches the expr"""
    reg = re.compile(expr)
    return reg.search(item) is not None

# 在数据库中注册这个函数
conn.create_function('REGEXP', 2, regexp_search)

cur = conn.execute('select id,title from post where content REGEXP ?', '\babc\b')
row = cur.fetchone()
print row

conn.close()
```

<p>在SQLAlchemy中具体的实现方式是：</p>
```python
# 注册函数
dbe = sqlalchemy.create_engine("sqlite:///tmp/your-database-file.db")
conn = dbe.connect()
conn.connection.create_function('REGEXP', 2, regexp_search)

# 在SQL Expression Language中创建查询条件
tbl = Post.__table__
cond_1 = tbl.c.title.op('regexp')(r'\babc\b')
cond_2 = tbl.c.content.op('regexp')(r'\babc\b')
```

<p>和普通的全文检索一样，正则表达式的全文检索也支持使用多个表达式作为查询条件，多个条件之间是与的关系。现在可以这样查询所有包含“UltraBlog.vim”但不把推广代码算在内的文章了：</p>
```vim
:UBRegexSearch [^\[]UltraBlog\.vim[^\]]
```

<h2>批量替换</h2>
<p>在我换过新域名后，我就觉得这个功能很有必要了：</p>
```vim
:UBReplace https://sinolog.it https://0x3f.org
```

<p>包含第一个参数内容并被替换的文章数目会显示在Vim的命令输出缓冲区中。</p>
<p>有了前面实现全文检索支持正则表达式的尝试，再实现支持正则表达式的批量替换就容易多了：</p>
```python
# 转换字符串成raw格式的函数
def raw(text):
    """Returns a raw string representation of text"""
    escape_dict={'\a':r'\a', '\b':r'\b', '\c':r'\c', '\f':r'\f', '\n':r'\n',
               '\r':r'\r', '\t':r'\t', '\v':r'\v', '\'':r'\'', '\"':r'\"',
               '\0':r'\0', '\1':r'\1', '\2':r'\2', '\3':r'\3', '\4':r'\4',
               '\5':r'\5', '\6':r'\6', '\7':r'\7', '\8':r'\8', '\9':r'\9'}
    return "".join([escape_dict.get(char,char) for char in text])

# 使用正则表达式替换字符串的函数
def regex_replace(string, expr, repl):
    """Do substitutions on the string for repls matching the expr"""
    r = re.compile(raw(expr))
    return r.sub(repl, string)

# 在数据库中注册这个函数
conn.connection.create_function('regex_replace', 3, regex_replace)

# 在SQL语句中使用这个函数
sql_replace = "update post set title=regex_replace(title,:needle,:replacement),content=regex_replace(content,:needle,:replacement)"
conn.execute(sql_replace, {'needle':r'\babc\b', 'replacement':'xyz'})
```

<p>最终，这个命令是这样的：</p>
```vim
:UBRegexReplace \babc\b xyz
```

<p>实现批量替换容易，但要解决由此引出的一个问题就费周折了，就是批量替换过文章内容后怎样和博客同步的问题，现在我还没有好的想法，留作以后实现。</p>
<h2>调试模式</h2>
<p>开启调试模式可以将所有被执行的SQL语句显示在Vim的命令输出缓冲区中，在有异常抛出时，也可以显示堆栈信息。由于开启调试模式既不需要修改代码，也不需要重启Vim，这可以极大地方便开发时对UltraBlog.vim的调试，也能使用户提交问题时能反馈更多更详细的信息。</p>
<p>以下三个命令用于控制调试模式的开启状态：</p>
<ul>
<li><code>:UBEnableDebug</code></li>
<li><code>:UBDisableDebug</code></li>
<li><code>:UBToggleDebug</code></li>
</ul>
<h2>其它内容</h2>
<p>本次更新的内容如下：</p>
<ul>
<li>Feature: Add the command <strong>:UBRegexSearch</strong>, doing full-text searches with regular expressions !</li>
<li>Feature: Add the command <strong>:UBReplace</strong>, doing full-text substitutions.</li>
<li>Feature: Add the command <strong>:UBRegexReplace</strong>, doing full-text substitutions with regular expressions.</li>
<li>Feature: Add commands <strong>:UBEnableDebug</strong>, <strong>:UBDisableDebug</strong>, <strong>:UBToggleDebug</strong> and an option <strong>ub_debug</strong>. In debug mode, SQL statements and stack traces of exceptions will be displayed.</li>
<li>Change:  Undo keywords highlighting after executing <strong>:UBList</strong>.</li>
<li>Bugfix:  Exceptions raised when opening the current item under cursor in item lists if the option <strong>ub_hotkey_save_current_item</strong> has not been set. Now this options comes with a default value.</li>
</ul>
<p>关于UB的详细信息在<a href="http://0x3f.org/?p=1894">这里</a>。</p>
<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item><item><title>UltraBlog.vim v3.3.0：I18N、超时时间和其它</title><link>http://0x3f.org/post/ultrablog-v330-released/</link><pubDate>Sun, 15 Apr 2012 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/ultrablog-v330-released/</guid><description><![CDATA[<p>UB一岁了，这算是个周年纪念版吧。</p>

<p>在这一年里，因为各种原因，博客写得没有以前多了，但每篇都是用这个插件写的，我觉得很好用。断断续续地做了一些修改，因为一切都是一个人在做，所以大的变化不多。这次这个版本里有些改动还是要感谢<a href="http://ihacklog.com/">荒野无灯</a>童鞋，他的<a href="https://github.com/xbot/UltraBlog.vim/issues/3">建议</a>很大程度上催生了这个新版本：比如加入保存命令的热键映射选项，这样可以使用保存普通文件的热键保存UB中的内容，我自己以前也经常习惯性地用错热键；还有socket超时时间的选项，最近我这里也经常性地在UB操作博客时报超时的异常，荒童鞋关于自定义socket超时时间的建议一语惊醒了梦中人。</p>

<p>此外，似乎与近期Vim的一次升级<a href="http://comments.gmane.org/gmane.editors.vim.devel/34092">有关</a>，在Vim中调用Python接口打印任何内容到标准IO都会导致Vim崩溃，所以这次把所有的输出都改成了调用Vim的输出命令来做。</p>

<p>本次修改的内容中，还有一项比较重要的内容就是实现了国际化，目前只提供英文和简体中文两种语言，由于Vimball不能处理二进制文件，所以从此以后UB改用zip格式压缩包打包。</p>

<p>以下是本次更新的详细内容：</p>

<ul>
<li>Feature: Add i18n support !</li>
<li>Feature: Add a new option <strong>ub_hotkey_save_current_item</strong>, users can define their own hotkey for <strong>:UBSave</strong>.</li>
<li>Feature: Add a new option <strong>ub_socket_timeout</strong>, users can customize the timeout period in seconds, useful for slow networks.</li>
<li>Bugfix:  Exception raised when one event is processed by more than one event handlers.</li>
<li>Change:  Echoing messages now uses the command :echoerr instead of python's sys.stderr, because Vim crashes on this due to an upgrade recently.</li>
<li>Change:  Change commands <strong>:UBSave</strong>, <strong>:UBSend</strong>, <strong>:UBUpload</strong>, <strong>:UBConv</strong>, <strong>:UBPreview</strong> to be available only in their effective views.</li>
<li>Change:  Lists are set nowrapped.</li>
<li>Bugfix:  Stop complaining '<strong>_pop from empty list_</strong>' while doing almost everything.</li>
</ul>

<p>关于UB的详细信息在<a href="http://0x3f.org/?p=1894">这里</a>。</p>

<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item><item><title>UltraBlog.vim v3.1释出：代码重构与MacVim支持</title><link>http://0x3f.org/post/ultrablog-v310-released/</link><pubDate>Sat, 05 Nov 2011 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/ultrablog-v310-released/</guid><description><![CDATA[<p>距离上一个版本的释出已经有三个月了，这次新版并没有增加多少功能性的内容，主要是代码的重构和对在MacVim下稳定性的改进。</p>

<p>对依赖关系检查的不细致导致了一些麻烦，抛出的错误信息有时与实际原因相距甚远。由于开始时是以实现功能为主，所以都是直接用函数实现的，之后修修补补，代码冗余而且维护麻烦。于是著手重构主要功能的源码，面向对象，把所有检查逻辑放到父类中去实现，子类只关注自身逻辑，最后新版减少了二百多行的代码量。</p>

<p>在重构的过程中偶然发现，在MacVim中，程序抛出任何异常，即便是有捕获逻辑，也会导致编辑器崩溃。在<a href="http://stackoverflow.com/questions/5574702/how-to-print-to-stderr-in-python">这里</a>简略地提到：</p>

<blockquote>
  <p>the failure was actual a crash, through some strange combination of threading, matplotlib pyplot backend, and ssh X11 forwarding, sys.stderr had somehow been assigned to something which python complained wasn't a file-like object</p>
</blockquote>

<p>于是将所有标准输出与标准错误输出语句换成另一种形式：</p>

```python
# 原形式
sys.stdout.write('xxx')
sys.stderr.write('xxx')

# 新形式
print >> sys.stdout, 'xxx'
print >> sys.stderr, 'xxx'
```

<p>以上是新版主要变更的内容，此外，也顺便解决了开发过程中发现的个别Bug和做了其它一些改动：</p>

<ul>
<li>Change:  The key "xmlrpc" of the settings list is dropped, a new one with the name "url" is added, you should set its value to the blog url.</li>
<li>Change:  Source code refactorings.</li>
<li>Change:  Solve the crash problem existing in MacVim only.</li>
<li>Change:  <strong>:UBConv</strong> can be used in any buffer.</li>
<li>Change:  <strong>:UBThis</strong> now has a third parameter, which enables convertions between syntaxes.</li>
<li>Bugfix:  The second parameter of <strong>:UBThis</strong> cannot take effect.</li>
</ul>

<p>这也是将源码从Google Code迁移到GitHub后发布的第一个新版本，更详细的信息请移步<a href="http://0x3f.org/?p=1894">插件主页</a>或GitHub上的<a href="https://github.com/xbot/UltraBlog.vim">代码仓库</a>。</p>

<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item><item><title>Enable Code Snippet Highlighting For UltraBlog.vim Templates</title><link>http://0x3f.org/post/enable-code-snippet-highlighting-for-ultrablog-vim-templates/</link><pubDate>Sat, 27 Aug 2011 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/enable-code-snippet-highlighting-for-ultrablog-vim-templates/</guid><description><![CDATA[<p>Templates make it possible for users previewing posts in custom formats in <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>. However, there is more you can do with our highly customizable templates. This article discusses how to highlight code snippets in posts by the use of some third-party open-source tools.</p>

<p>Before setting out to work, let me introduce the tools we are about to use:</p>

<ul>
<li><a href="http://softwaremaniacs.org/soft/highlight/en/">highlight.js</a>: A javascript library which highlights code blocks in web pages automatically.</li>
<li><a href="http://jquery.com/">jquery</a>: The famous RIA development javascript library.</li>
</ul>

<p>Download the upper two libraries and put them under any folder accessible to your webbrowser, in my case, it is <strong>/home/lenin/.vim/bundle/ultrablog/vendor/</strong>.</p>

<p>Then open UltraBlog.vim and edit the template you are using, put the following lines in the <code>&lt;head&gt;...&lt;/head&gt;</code> area:</p>

```xml
<link rel="stylesheet" href="/home/lenin/.vim/bundle/ultrablog/vendor/highlight/styles/default.css">
<script src="/home/lenin/.vim/bundle/ultrablog/vendor/highlight/highlight.pack.js"></script>
<script src="/home/lenin/.vim/bundle/ultrablog/vendor/jquery.js"></script>
<script>
$(document).ready(function(){
    $('pre').each(function(i, e){
        if(typeof e.lang != 'undefined')
            e.className = e.lang;
        hljs.highlightBlock(e, '    ');
    });
});
</script>
```

<p>If you are using the default template UltraBlog.vim supplies, change <strong>.title</strong> to <strong>.postTitle</strong> in the pre-defined <code>&lt;style&gt;...&lt;/style&gt;</code> area, and change the class name of the div element in the <code>&lt;body&gt;...&lt;/body&gt;</code> area from <strong>title</strong> to <strong>postTitle</strong>, that is because this class name is also used by highlight.js.</p>

<p>An important point, the jquery selector I used in the code snippet above selects every <code>&lt;pre&gt;...&lt;/pre&gt;</code> element and copies the value of its attribute <strong>lang</strong> to <strong>class</strong>. This is specified for the wordpress plugin <a href="http://wordpress.org/extend/plugins/wp-syntax/">wp-syntax</a> I use. If you use another syntax highlighting tool which uses different markup for code blocks, you should modify the code above to make highlight.js find code blocks correctly.</p>

<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item><item><title>UltraBlog.vim v3.0释出：全文检索与事件驱动</title><link>http://0x3f.org/post/ultrablog-v300-released/</link><pubDate>Mon, 25 Jul 2011 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/ultrablog-v300-released/</guid><description><![CDATA[<p>用了一周的业余时间，昨天我释出了<a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>的3.0版。新版本主要加入了全文检索的功能，并引入事件驱动的模式。</p>

<p>全文检索是我蓄谋已久的功能，一个不能搜索的博客客户端的管理功能是大打折扣的。得益于SQLite数据库和SQLAlchemy框架，全文检索的实现是很简单的，新增加的<code>:UBFind</code>命令将在所有文章和页面的标题与内容中查询，并将搜索结果显示在一个可分页的列表中。这个命令支持任意多个关键词，各关键词之间遵循与的关系。此外，检索结果中，所有的关键词将被自动标记为高亮。</p>

<p>事件驱动模式的引入是我悍然将版本号跳跃到3.x的主要原因。</p>

<p>在前几个版本中，我实现了对多窗口的支持，它使得用户可以在新窗口中打开列表中的文章。但UltraBlog.vim最初开发的时候并没有考虑到多窗口的问题，所有命令都只针对当前窗口进行操作。这就有了缓冲区内容同步的问题，假如在一个新的缓冲区中打开了和另一个缓冲区相同的文章，则一个缓冲区内容的改变不会同步到另外一个中，这多少是有些隐患的。</p>

<p>最直接的做法是在所有可能改变缓冲区内容的功能中加入对其它缓冲区的处理，但这样做有不少问题：</p>

<ul>
<li>代码耦合度太高，违反K.I.S.S原则，不利于今后的开发和维护</li>
<li>函数体过长，我讨厌难看的代码</li>
<li>代码冗余，重复劳动</li>
</ul>

<p>事件驱动模式可以很好的解决以上问题，一个函数只干一件事，做完后一个事件抛出去，至于连带著要做什么，谁监听这个事件谁去处理，代码的耦合度很低，复用度很高，易于维护和阅读。</p>

<p>UltraBlog.vim引入事件驱动模式处理缓冲区同步的问题。不同的操作抛出不同的事件，所有的事件继承自父类<strong>UBEvent</strong>：</p>

```python
class UBEvent:
    def __init__(self, srcObj):
        self.srcObj = srcObj

class UBDebugEvent(UBEvent): pass
class UBTmplDelEvent(UBEvent): pass
class UBTmplSaveEvent(UBEvent): pass
class UBLocalPostDelEvent(UBEvent): pass
class UBRemotePostDelEvent(UBEvent): pass
class UBPostSendEvent(UBEvent): pass
class UBPostSaveEvent(UBEvent): pass
```

<p>一个可能改变缓冲区内容的操作执行完后，创建一个特定的事件并将其加入到事件队列中。事件队列类中存放两个列表，一是事件队列，二是事件监听器列表；提供三个方法，分别用来注册事件监听器、对事件执行入队列操作和处理队列中所有事件：</p>

```python
class UBEventQueue:
    queue = []
    listeners = []

    @classmethod
    def fireEvent(cls, evt):
        cls.queue.append(evt)

    @classmethod
    def processEvents(cls):
        for evt in cls.queue:
            for listener in cls.listeners:
                if listener.isTarget(evt):
                    cls.queue.remove(evt)
                    listener.processEvent(evt)

    @classmethod
    def registerListener(cls, lsnr):
        cls.listeners.append(lsnr)
```

<p>事件队列对事件的处理是通过事件监听器进行的，每个事件监听器要实现两个功能：识别监听对象和处理监听对象。所有具体事件的监听类都是<strong>UBListener</strong>的子类：</p>

```python
class UBListener():
    ''' Parent class of all listeners
    '''
    eventType = None

    @classmethod
    def isTarget(cls, evt):
        return isinstance(evt, cls.eventType)

    @staticmethod
    def processEvent(evt): pass

class UBPostSaveListener(UBListener):
    ''' Listener for saving posts/pages
    1. Refresh the current view if it is an edit/list view of this post
    2. Mark all edit/list views of posts/pages outdated
    '''
    eventType = UBPostSaveEvent

    @staticmethod
    def processEvent(evt):
        for nr in ub_get_buffers(['post_edit','page_edit']):
            if evt.srcObj==ub_get_meta('id', nr):
                if nr==ub_get_bufnr('%'):
                    ub_refresh_current_view()
                else:
                    ub_set_view_outdated(nr)

        for nr in ub_get_buffers(['post_list','page_list','search_result_list']):
            if nr == ub_get_bufnr('%'):
                ub_refresh_current_view()
            else:
                ub_set_view_outdated(nr)
```

<p>事件监听器遍历所有满足处理条件的缓冲区，对当前缓冲区，立即刷新，其余的标记为已过期。同时利用Vim自身的事件驱动特性，在进入已过期的缓冲区时，再更新之，也就是传说中的懒加载模式：</p>

```vim
au BufEnter * py __ub_on_buffer_enter()
```

```python
@__ub_exception_handler
def __ub_on_buffer_enter():
    ''' Triggered by BufEnter event, check if the buffer is outdated
    '''
    if ub_is_view_outdated('%'):
        ub_refresh_current_view()
        ub_set_view_outdated('%', False)
```

<p>此外，随著代码量的增加，原来把全部代码都放在一个文件中的做法不再适用，尤其是以<a href="http://en.wikipedia.org/wiki/Here_document">Here Document</a>形式存放在vim脚本文件中的Python代码不能被ctags识别，所以按类别分别存放到<strong>$VIMRUNTIME/plugin/ultrablog/</strong>下的几个Python源文件中。</p>

<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item><item><title>UltraBlog.vim v2.3.0 Released With Templates</title><link>http://0x3f.org/post/ultrablog-v230-released/</link><pubDate>Mon, 13 Jun 2011 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/ultrablog-v230-released/</guid><description><![CDATA[<p>I released the new version 2.3.0 of <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a> last week. The main improvement in this version is that templates are introduced in.</p>

<p>Templates are simply HTML strings, they are used to preview posts/pages in the browser locally. This feature is a reparation for the remote previewing, due to the limit of the API, users cannot send a post to Wordpress as draft and preview it without affecting the post status if the post has been published. With templates, they do not have to send drafts to blogs to preview the final effect, but preview drafts directly in the browser in a pre-defined style. Templates can be created as many as users like and their looks can be customized with CSS, HTML and Javascript.</p>

<p>The following illustrations show the content and final effect of the default template:</p>

<p>
<div style="display:table;">
    <span style="display:table-cell;"><a href="https://picasaweb.google.com/lh/photo/bixn15q6ujUIQmamJDm7lQ?feat=embedwebsite"></a></span>
    <span style="display:table-cell;width:10px;"></span>
    <span style="display:table-cell;"><a href="https://picasaweb.google.com/lh/photo/B0fBmAnyW2IAYDFcWb2e7Q?feat=embedwebsite"></a></span>
</div>
</p>

<p>Templates should be formatted as valid Python template strings, that is, use the following avaliable placeholders and escape any literal '%' with another '%':</p>

<blockquote>
  <p>%(title)s <br />
     The title of the current post/page.</p>
  
  <p>%(content)s <br />
     The content of the current post/page.</p>
  
  <p>%% <br />
     A literal '%'.</p>
</blockquote>

<p>Users can take the default template whose name is 'default' as an example for writing their own templates. The default template can be changed to another one by setting the name of that template to the option <strong>ub_default_template</strong>.</p>

<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item><item><title>UltraBlog.vim开发手记</title><link>http://0x3f.org/post/ultrablog-development-note/</link><pubDate>Mon, 11 Apr 2011 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/ultrablog-development-note/</guid><description><![CDATA[<p>对于<a href="http://blog.sina.com.cn/s/blog_694377f90100rmko.html">博客已死</a>的说法，我一点都不感到奇怪。早在几年前博客还比较火的时候我就表达过对博客泡沫的<a href="http://0x3f.org/?p=209">看法</a>。</p>

<p>经历了短暂的<a href="http://0x3f.org/?p=354">tumblog</a>的风头，微博成为现在最火的媒介。说博客已死，无非就是说微博将成为个人信息传播的主流。好吧，现在我知道那时候我所说的不懂什么是博客的人都去干什么了。</p>

<p>但是博客还是会继续发展，微博的兴起只会减少滥竽充数。因为微博突出的是时效性，最缺乏的是系统性和可重复更新的能力。微博的短处，正是博客的长处。这让我对博客有了一个新的、迟到了很久的认识──一个好的博客，它的文章不应该是写掉就忘的，而应该是不断地更新著的。</p>

<p><a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>就是出于这个需要而写的。</p>

<p>我对博客客户端的使用大概可以追溯到四五年前，那时候博客正火，在比较了几个<a href="http://en.wikipedia.org/wiki/Blog_service_provider">BSP</a>后选择了<a href="http://www.blogcn.com/">中国博客网</a>，就是因为他们提供桌面客户端。后来独博之后也试用过几个通用的客户端，但都没坚持多久，最根本的原因是它们几乎无一例外地都是<a href="http://zh.wikipedia.org/wiki/%E6%89%80%E8%A6%8B%E5%8D%B3%E6%89%80%E5%BE%97">WYSIWYG</a>。而WYSIWYG的编辑器生成的HTML源码几乎都使用inline的样式，这就导致文章的排版布局很难控制，我对WYSIWYG其实是很抵触的，至今都不怎么用Office这类东西。</p>

<p>后来我意识到，我所需要的是样式与内容分离，于是准备自己写一个<a href="http://0x3f.org/?p=331">客户端</a>，后来由于工作的原因不了了之。与此同时，我自定义了一套文章格式并用Java写了一个转换文章到HTML的<a href="http://0x3f.org/?p=342">工具</a>，直到后来发现<a href="http://0x3f.org/?p=383">Markdown</a>，我才知道我其实是需要一个轻量标记语言。</p>

<p>使用Markdown之后，写博客开始变得轻松愉快。我一度用过一段时间<a href="http://www.scintilla.org/SciTE.html">SciTE</a>，还用<a href="http://zh.wikipedia.org/wiki/Lua">Lua</a>写了个<a href="http://0x3f.org/?p=499">辅助脚本</a>。但是我需要一个完整的客户端来管理文章，而这是一个编辑器所不能胜任的，所以就著手实现一个支持Markdown的<a href="http://0x3f.org/?p=812">客户端</a>。这一次走得比较远，<a href="http://0x3f.org/?p=812">ForeverFantasy</a>最终达到了可用的程度，我一度用它写过一段时间的博客。但是作为一个Vim重症患者，wxPython的编辑器部件是远远达不到我需要的水平的。虽然后来还<a href="http://0x3f.org/?p=1409">实现</a>了调用外部程序处理文章内容（<em>当然也可以调用Vim</em>），但总归觉得不舒服，至今已经一年没更新了。</p>

<p>直到前段时间试用了一下<a href="http://0x3f.org/?p=1861">VimRepress</a>，在修改这个插件的时候突然受到启发，我这几年的需求原来是可以这么简单地解决的。</p>

<p>其实在几年前<a href="http://www.vim.org/scripts/script.php?script_id=1953">vimpress</a>刚刚发布的时候我就了解过这个东西，包括此后接连发布的几个Vim写博客的插件，它们和我原来写的SciTE的那个辅助脚本没有本质的区别，都是博客编辑器。与完整的客户端相比，编辑器缺少对本地文章源码的管理，而且它们不记录文章源码和发布的文章的关联关系，简单地说是无状态的。这不符合博客文章持续更新的观点。</p>

<p>UltraBlog.vim使用<a href="http://www.sqlalchemy.org/">SQLAlchemy</a>做数据库抽象层，将所有文章的源码及其状态保存在本地的一个SQLite数据库中，并且以此为基础，通过<a href="http://en.wikipedia.org/wiki/XML-RPC">XMLRPC</a>接口实现对博客文章、页面的<a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a>操作。同时利用Vim分模式的特点实现了可分页的文章列表和文章编辑视图。</p>

<p>UltraBlog.vim目前支持Markdown和HTML两种格式的文章，它最大的特点是在Markdown格式的源码和发布到博客中的文章之间建立联系，你可以随时修改本地数据库中的Markdown源码并更新博客中对应的文章。</p>

<p>新的功能还会不断地加入。</p>

<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item><item><title>UltraBlog.vim: Ultimate Vim Blogging Plugin</title><link>http://0x3f.org/post/ultrablog-as-an-ultimate-vim-blogging-plugin/</link><pubDate>Sat, 02 Apr 2011 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/ultrablog-as-an-ultimate-vim-blogging-plugin/</guid><description><![CDATA[<h2>Introduction</h2>
<p>UltraBlog.vim is yet another Vim blogging script for Wordpress.</p>
<p>The biggest difference between UB and other similar scripts is that UB is an ultimate client, which stores posts locally in an SQLite database, while others just operate remotely. In this way, many things can be done easily by the advantage of local storage and many other utilities, for example, you can search for posts stored in the database with a few keywords by typing a simple command, also you can preview drafts with any of your favorite templates as soon as you want to.</p>
<p>For those who just needs a lightweight blog editor similar as other Vim blogging scripts, UB also comes with an Editor Mode, which doesn&rsquo;t create a database and store data in it.</p>
<p>In addition, UB is tending to make life easier for writing posts with many kinds of lightweight markup languages, currently the following kinds are supported: Markdown, reStructuredText, LaTeX, Textile and of cause HTML.</p>
<p>Enjoy Vim blogging !</p>
<p><a href="/post/ultrablog-development-note/" rel="">Here</a> is a post written in Chinese describing the motion for which I wrote UltraBlog.vim.</p>
<h2>Features</h2>
<ul>
<li>Multiple syntax support: Markdown, HTML, reStructuredText, LaTeX, Textile.</li>
<li>Editor mode and client mode.</li>
<li>Data is stored in a local SQLite database in client mode.</li>
<li>Full-text search with keywords highlighted.</li>
<li>Full-text search by using regular expressions.</li>
<li>Full-text substitutions.</li>
<li>Full-text substitutions using regular expressions.</li>
<li>Templates for previewing posts.</li>
<li>Built-in web browser, much faster to preview items.</li>
<li>Event-driven system.</li>
<li>I18N.</li>
</ul>
<h2>Tutorial</h2>
<h3>Requirement</h3>
<p>UltraBlog.vim takes advantages from the following techs:</p>
<ul>
<li>Vim with python support</li>
<li><a href="http://www.sqlalchemy.org" target="_blank" rel="noopener noreffer">SQLAlchemy</a> v0.7 or newer</li>
<li><a href="http://www.freewisdom.org/projects/python-markdown/" target="_blank" rel="noopener noreffer">python-markdown</a> or <a href="https://github.com/trentm/python-markdown2" target="_blank" rel="noopener noreffer">python-markdown2</a></li>
<li><a href="http://johnmacfarlane.net/pandoc/" target="_blank" rel="noopener noreffer">pandoc</a></li>
</ul>
<p>You must have these prerequisites met before using UltraBlog.vim. For more information, refer to <strong>UltraBlog_Prerequisites</strong> in the help file.</p>
<h3>Installation</h3>
<p>Download UltraBlog.vim from <a href="http://www.vim.org/scripts/script.php?script_id=3532" target="_blank" rel="noopener noreffer">Vim.org</a> or retrieve the latest source from Github:</p>
<p><a href="https://github.com/xbot/UltraBlog.vim">https://github.com/xbot/UltraBlog.vim</a></p>
<p>Install UltraBlog.vim to your plugin folder and put the following lines in your vimrc file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="k">let</span> <span class="nx">ub_blog</span> <span class="p">=</span> {<span class="s1">&#39;login_name&#39;</span>:<span class="s1">&#39;admin&#39;</span><span class="p">,</span><span class="err">
</span><span class="err"></span>            \<span class="s1">&#39;password&#39;</span>:<span class="s1">&#39;pass2011&#39;</span><span class="p">,</span><span class="err">
</span><span class="err"></span>            \<span class="s1">&#39;url&#39;</span>:<span class="s1">&#39;http://www.sample.com&#39;</span><span class="p">,</span><span class="err">
</span><span class="err"></span>            \<span class="s1">&#39;xmlrpc_uri&#39;</span>:<span class="s1">&#39;xmlrpc.php&#39;</span><span class="p">,</span><span class="err">
</span><span class="err"></span>            \<span class="s1">&#39;db&#39;</span>:<span class="s1">&#39;~/.vim/UltraBlog.db&#39;</span><span class="p">,</span><span class="err">
</span><span class="err"></span>            \<span class="s1">&#39;categories&#39;</span>:<span class="s1">&#39;News|Computer|Image&#39;</span><span class="err">
</span><span class="err"></span>            \}<span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Set this option to 1 if you want to enable debug mode, see :help ub_debug for more information</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_debug</span> <span class="p">=</span> <span class="m">0</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Set this option to 0 if you prefer using firefox or chromium to preview items.</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_use_ubviewer</span> <span class="p">=</span> <span class="m">1</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Default timeout period of xmlrpc operations, see :help ub_socket_timeout for more information</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_socket_timeout</span> <span class="p">=</span> <span class="m">10</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Default page size of local post list, see :help ub_local_pagesize for more information</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_local_pagesize</span> <span class="p">=</span> <span class="m">30</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Default page size of remote post list, see :help ub_remote_pagesize for more information</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_remote_pagesize</span> <span class="p">=</span> <span class="m">15</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Default page size of search result list, see :help ub_search_pagesize for more information</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_search_pagesize</span> <span class="p">=</span> <span class="m">30</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Proudly show your visitors that you are blogging with the world&#39;s most powerful editor</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_append_promotion_link</span> <span class="p">=</span> <span class="m">1</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Set width of the local id column in post or page lists</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_list_col1_width</span> <span class="p">=</span> <span class="m">7</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Set width of the remote id column in post or page lists</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_list_col2_width</span> <span class="p">=</span> <span class="m">8</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Set width of the status column in post or page lists</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_list_col3_width</span> <span class="p">=</span> <span class="m">11</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Set this value to 1 if you want to use editor mode.</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_editor_mode</span> <span class="p">=</span> <span class="m">0</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Set this value to 1 if you want to save posts/pages immediately after they are fetched from the blog.</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_save_after_opened</span> <span class="p">=</span> <span class="m">0</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Set this value to 0 if you do not want to save posts/pages immediately after they are sent to the blog.</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_save_after_sent</span> <span class="p">=</span> <span class="m">1</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Set the following options to use a custom extenal command as the converter.</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_converter_command</span> <span class="p">=</span> <span class="s1">&#39;pandoc&#39;</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_converter_options</span> <span class="p">=</span> [<span class="s1">&#39;--reference-links&#39;</span>]<span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_converter_option_from</span> <span class="p">=</span> <span class="s1">&#39;--from=%s&#39;</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_converter_option_to</span> <span class="p">=</span> <span class="s1">&#39;--to=%s&#39;</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Customize hotkeys</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_hotkey_open_item_in_current_view</span><span class="p">=</span><span class="s1">&#39;&lt;enter&gt;&#39;</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_hotkey_open_item_in_splitted_view</span><span class="p">=</span><span class="s1">&#39;&lt;s-enter&gt;&#39;</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_hotkey_open_item_in_tabbed_view</span><span class="p">=</span><span class="s1">&#39;&lt;c-enter&gt;&#39;</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_hotkey_delete_item</span><span class="p">=</span><span class="s1">&#39;&lt;del&gt;&#39;</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_hotkey_save_current_item</span><span class="p">=</span><span class="s1">&#39;&lt;C-S&gt;&#39;</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Set the link template string for images uploaded by :UBUpload</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_tmpl_img_url</span><span class="p">=</span><span class="s2">&#34;markdown###![$(file)s][]\n[$(file)s]:%(url)s&#34;</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Set the default template to use when previewing posts/pages locally</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">ub_default_template</span><span class="p">=</span><span class="s2">&#34;default&#34;</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>Change values of the upper options to yours. Restart Vim and a database file will be created in the path you specified above.</p>
<h3>Concepts</h3>
<p>It is important to understand some basic concepts of UltraBlog.vim.</p>
<h4>Modes</h4>
<p>UltraBlog.vim makes life easier while writing or updating blogs. It stores posts/pages in a local SQLite database. You can also set it to editor mode, in which UltraBlog.vim does not store data locally, just like other Vim blogging scripts.</p>
<p>By default, UltraBlog.vim is in client mode. You can set it to use editor mode by adding the fallowing line to the vimrc file:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="k">let</span> <span class="nx">ub_editor_mode</span> <span class="p">=</span> <span class="m">1</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><h4>Items</h4>
<p>Currently, UltraBlog.vim manages three items: post, page and tmpl. &ldquo;tmpl&rdquo; is the shorthand of &ldquo;template&rdquo;.</p>
<p>Templates are used to preview the current post/page in the browser locally. This feature is a reparation for the remote previewing, due to the limit of the API, users cannot send a post to Wordpress as draft and preview it without affecting the post status if the post has been published.</p>
<p>With templates, users can preview posts/pages directly in the browser in a pre-defined style. They can create as many templates as they like and customize the look with CSS and HTML, or even Javascript.</p>
<p>Templates should be formatted as a valid python template string, that is, use the following avaliable placeholders and escape any literal &lsquo;%&rsquo; with another &lsquo;%':</p>
<blockquote>
<ol>
<li>%(title)s<br />
   The title of the current post/page.</li>
<li>%(content)s<br />
   The content of the current post/page.</li>
<li>%%<br />
   A literal '%'.</li>
</ol>
</blockquote>
<p>There is a default template in the database, whose name is &lsquo;default&rsquo;, which can be used as an example of template.</p>
<p>Users can specify the default template to use with the option <strong>ub_default_template</strong>.</p>
<h4>Syntaxes</h4>
<p>The syntaxes supported by UltraBlog.vim currently are:</p>
<blockquote>
<p>markdown, html, rst, textile, latex.</p>
</blockquote>
<h4>Statuses</h4>
<p>The available statuses are:</p>
<blockquote>
<p>publish, private, draft, pending.</p>
</blockquote>
<h4>Scopes</h4>
<p>Scopes tells UltraBlog.vim to operate on items in which place, &ldquo;local&rdquo; stands for items stored in the database, and &ldquo;remote&rdquo; stands for the blog.</p>
<h2>Usage</h2>
<h4>Create a new item</h4>
<p><code>:UBNew [item [syntax/template_name]]</code></p>
<p>Create a new item.</p>
<p>For the first parameter, refer to <strong>UltraBlog_Items</strong>. The default value is &ldquo;post&rdquo;.</p>
<p>If &ldquo;item&rdquo; is either &ldquo;post&rdquo; or &ldquo;page&rdquo;, the second parameter must be a syntax name, refer to <strong>UltraBlog_Syntaxes</strong>. The default value is &ldquo;markdown&rdquo;.</p>
<p>If &ldquo;item&rdquo; is &ldquo;tmpl&rdquo;, the second parameter should be the name of the new template.</p>
<p>When the cursor is focused in the metadata line of categories, press <strong><C-X><C-U></strong> to do auto-completion. This will use the data set by option ub_blog[&lsquo;categories&rsquo;], if it is not set, categories will be fetched from your blog.</p>
<h4>Save a modified post</h4>
<p><code>:UBSave</code></p>
<p>After executing this command, the current buffer is saved into database.</p>
<h4>Send a post to blog</h4>
<p><code>:UBSend [status]</code></p>
<p>Post an item.</p>
<p>If no parameter is given, UltraBlog.vim will send the item to blog and set it to be the value stored in the meta information area.</p>
<p>Refer to <strong>UltraBlog_Statuses</strong>.</p>
<h4>List posts</h4>
<p><code>:UBList [item [scope [page_size [page_no]]]]</code></p>
<p>List items.</p>
<p>Refer to <strong>UltraBlog_Items</strong> for the first parameter. The default value of this parameter is &ldquo;post&rdquo;.</p>
<p>The second parameter &ldquo;scope&rdquo; is only available when &ldquo;item&rdquo; is either &ldquo;post&rdquo; or &ldquo;page&rdquo;. Refer to <strong>UltraBlog_Scopes</strong>.</p>
<p>&ldquo;page_size&rdquo; and &ldquo;page_no&rdquo; are both for the situation when &ldquo;item&rdquo; is &ldquo;post&rdquo; and &ldquo;scope&rdquo; is &ldquo;local&rdquo;. The former stands for how many item will be listed a page. The latter stands for the page number.</p>
<p>For example:</p>
<p><code>:UBList</code></p>
<p>This command lists the first page of local posts, by default, posts which have not been posted to blog are listed before the posted ones, and there are <strong>ub_local_pagesize</strong> posts a page.</p>
<p><code>:UBList post local 20 3</code></p>
<p>This command lists the third page of local posts, 20 posts a page. As you see, you can use this command to scroll forward or back between pages. As a matter of fact, there are two key mappings within local post list:</p>
<ul>
<li>CTRL+PageDown</li>
<li>CTRL+PageUp</li>
</ul>
<p><code>:UBList post remote 50</code></p>
<p>This command lists the latest 50 posts in the blog.</p>
<p>Pressing the ENTER key in a remote post list will open the post under cursor and save it to the local database if it is not in it, otherwise, the local copy will be opened instead of the remote one. This enables users to modify markdown source and update the remote post.</p>
<p>The remote post list doesn&rsquo;t support paging.</p>
<h4>Open a single post</h4>
<p><code>:UBOpen {item} {post_id/template_name} [scope]</code></p>
<p>Open an item.</p>
<p>For the first parameter, refer to <strong>UltraBlog_Items</strong>.</p>
<p>If &ldquo;item&rdquo; is either &ldquo;post&rdquo; or &ldquo;page&rdquo;, the second parameter should be value of its id. If it&rsquo;s &ldquo;tmpl&rdquo;, the name.</p>
<p>For &ldquo;scope&rdquo;, refer to <strong>UltraBlog_Scopes</strong>. The default value is &ldquo;local&rdquo;.</p>
<h4>Upload a media</h4>
<p><code>:UBUpload {file_path}</code></p>
<p>This command can only be executed in a post edit view, and the URL of the uploaed file will be appended in that buffer.</p>
<h4>Preview the changes</h4>
<p><code>:UBPreview [status/template name]</code></p>
<p>Preview the content of the current buffer.</p>
<p>If any of the <strong>UltraBlog_Statuses</strong> is given, the current buffer will be sent to the blog and then opened in the browser with a parameter &ldquo;preview&rdquo; appended to the URL.</p>
<p>If the given parameter is not a post status, a pre-defined template whose name is the same with the parameter will be used to preview the buffer locally.</p>
<p>If none is given, the default template is used.</p>
<p>You do not have to care for which syntax you use, markdown source will be translated into html automatically before a browser window is opened to display it.</p>
<p>The matter that whether to use the built-in web browser or the system default ones is controlled by the option <strong>ub_use_ubviewer</strong>.</p>
<h4>Delete a post/page</h4>
<p><code>:UBDel {item} {post_id/template_name} [scope]</code></p>
<p>Delete an item.</p>
<p>Refer to <strong>UBOpen</strong> for the usage of these options.</p>
<p>You can also delete items in the list by pressing the DELETE button on the target. In a local post list, if the post to be deleted has been posted to the blog, a confirmation will be prompted for you to decide whether to delete the remote copy cascadly.</p>
<h4>Create a post/page using content of the current buffer</h4>
<p><code>:UBThis [item [to_syntax [from_syntax]]]</code></p>
<p>Create a new post or page which is filled with content in the current buffer.</p>
<p>If no parameter is specified, the first parameter will be default to &ldquo;post&rdquo;; for the second and the third one, the syntax of the current buffer is used.</p>
<p>Content of the current buffer will be automatically converted from the <strong>from_syntax</strong> to the <strong>to_syntax</strong>.</p>
<h4>Convert a post/page buffer between the available syntaxes</h4>
<p><code>:UBConv {to_syntax} [from_syntax]</code></p>
<p>Convert the current buffer from &lsquo;from_syntax&rsquo; to &lsquo;to_syntax&rsquo;.</p>
<p>Refer to <strong>UltraBlog_Syntaxes</strong>.</p>
<p>If you only need to convert from Markdown to HTML, only python-markdown or python-markdown2 module is required. For other conversion scenarios, you must install pacdoc or use the options: <strong>ub_converter_command</strong>, <strong>ub_converter_options</strong>, <strong>ub_converter_option_from</strong>, <strong>ub_converter_option_to</strong> to specify a valid external command.</p>
<h4>Refresh the current buffer</h4>
<p><code>:UBRefresh</code></p>
<h4>Full-text search</h4>
<p><code>:UBFind keyword1 [keyword2 &hellip;]</code></p>
<p>Doing full-text searches for both posts and pages by keywords, all keywords will be highlighted. Page size of the search result list is controlled by option <strong>ub_search_pagesize</strong>.</p>
<p><code>:UBRegexSearch regexp1 [regexp2 &hellip;]</code></p>
<p>Doing full-text searches for both posts and pages by regular expressions, all strings that match the regular expressions will be highlighted. Page size of the search result list is controlled by <strong>ub_search_pagesize</strong>.</p>
<h4>Full-text substitutions</h4>
<p><strong>Attention:</strong> Full-text substitutions will change contents of all matched posts/pages immediately when executed. You may need to backup your database file first.</p>
<p><code>:UBReplace needle replacement</code></p>
<p>Do full-text substitutions.</p>
<p><code>:UBRegexReplace regexp replacement</code></p>
<p>Do full-text substitutions using regular expressions.</p>
<h4>Debug</h4>
<p>In debug mode, SQL statements being executed will be displayed and so are all stack traces of exceptions raised.</p>
<p><code>:UBEnableDebug</code></p>
<p>Enable debugging.</p>
<p><code>:UBDisableDebug</code></p>
<p>Disable debugging.</p>
<p><code>:UBToggleDebug</code></p>
<p>Toggle debugging status.</p>
<h3>Options</h3>
<p>For more detail information on tweaking UltraBlog.vim, refer to the documentation.</p>
<h2>Tips</h2>
<ul>
<li>Install syntax files for any light weight markup language you use to highlight the posts/pages.</li>
<li><a href="/post/enable-code-snippet-highlighting-for-ultrablog-vim-templates/" rel="">Enable Code Snippet Highlighting For UltraBlog.vim Templates</a></li>
</ul>
<h2>News</h2>
<ul>
<li>2014-04-20 v3.6.1 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2012-04-30 v3.5.0 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2012-04-29 v3.4.0 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2012-04-15 v3.3.0 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2012-01-05 v3.2.0 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2011-11-01 v3.1.0 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2011-07-24 v3.0.0 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2011-06-15 v2.3.1 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2011-06-10 v2.3.0 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2011-05-30 v2.2.0 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2011-05-28 v2.1.0 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2011-05-12 v2.0.1 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2011-04-14 v2.0.0 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2011-04-12 v1.4.0 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2011-04-09 v1.3.0 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2011-04-07 v1.2.0 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2011-04-05 v1.1.0 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2011-04-04 v1.0.5 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2011-04-02 v1.0.4 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2011-04-02 v1.0.3 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2011-04-02 v1.0.2 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2011-04-01 v1.0.1 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
<li>2011-04-01 v1.0.0 released. <a href="https://github.com/xbot/UltraBlog.vim/wiki/Changelog" target="_blank" rel="noopener noreffer">Changes</a></li>
</ul>
<p>Posted via <a href="/post/ultrablog-as-an-ultimate-vim-blogging-plugin/" rel="">UltraBlog.vim</a>.</p>
]]></description></item></channel></rss>