<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>单元测试 - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link><description>单元测试 - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 18 Feb 2020 22:49:45 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/" rel="self" type="application/rss+xml"/><item><title>在 VS Code 中快速创建 PHPUnit 测试类的方法</title><link>http://0x3f.org/post/quickly-create-phpunit-test-cases-with-vscode/</link><pubDate>Tue, 18 Feb 2020 22:49:45 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/quickly-create-phpunit-test-cases-with-vscode/</guid><description><![CDATA[<p>通过单元测试解决问题或者调试代码，可以避开错综复杂的依赖关系、直击问题的核心，从而极大地节约时间、提高效率。</p>
<p>但是，当创建测试类成为一个经常发生的操作时，每次都手动创建类、引入基类、添加测试方法就显得很烦琐。我需要这样一个解决方案，让我可以立即开始着手写测试代码。</p>
<h2 id="方案一文件模板">方案一：文件模板</h2>
<p>通过VS Code的插件<a href="https://marketplace.visualstudio.com/items?itemName=yongwoo.template" target="_blank" rel="noopener noreffer">Template</a>，可以实现把事先准备好的一个测试类文件模板复制到工程目录下。</p>
<p>安装完后，第一次执行<code>Template: Create New</code>命令会在当前工程根目录下创建文件“template.config.js”和目录“.templates”。</p>
<p>在“.templates”中创建测试类模板文件，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>

<span class="k">namespace</span> <span class="nx">Tests</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Tests\TransactionalTestCase</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">AnyTest</span> <span class="k">extends</span> <span class="nx">TransactionalTestCase</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">testAnything</span><span class="p">()</span>
    <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>下次再执行Template的命令或者侧边栏文件管理器中的右键菜单项时，就可以选择该模板了。</p>
<p>Template有个很大的短板，目前的版本还不支持全局模板，每个工程下都维护一套模板还是很烦琐的。</p>
<h2 id="方案二代码片断">方案二：代码片断</h2>
<p>代码片断（以下统称Snippet）可能是VS Code做得最烂的一个功能，我曾无数次泪流满面地回想起有Vim和UltiSnips相伴的美好时光。</p>
<p>解决方案是这样的：</p>
<p>先通过插件<a href="https://marketplace.visualstudio.com/items?itemName=sleistner.vscode-fileutils" target="_blank" rel="noopener noreffer">File Utils</a>的<code>File: New File Relative to Project Root</code>命令在工程目录下创建一个空白文件（如AnyTest.php）。然后再通过Snippet快速插入测试类的脚手架代码。</p>
<p>这里有一个问题，VS Code的PHP Snippet只有在<code>&lt;?php</code>标签之内才能生效，所以如果创建一个针对PHP语言的Snippet，在上面创建的这个空白文件里是无法触发的。</p>
<p>VS Code的Snippet总体上分为工程和通用两类，所谓工程类（Project Snippet Scope），就是只对当前工程生效，存储在工程根目录下的“.vscode”目录中。通用类（Language Snippet Scope）是我们平时最常用的，对所有工程都会生效。它又分为语言和全局两种。语言类（Language Snippet File）是针对具体的语言定义的Snippet集合，文件名为语言名称，后缀是“.json”，如“php.json”。全局类（Global Snippet File）通常是不受限于语言的，当然也可以指定单个Snippet对哪些语言启用，文件名随意，后缀是“.code-snippets”。</p>
<p>因此，测试类脚手架代码的Snippet不能定义在“php.json”中，而应放在“global.code-snippets”里：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-JSON" data-lang="JSON"><span class="s2">&#34;PHPUnit：新测试类&#34;</span><span class="err">:</span> <span class="p">{</span>
    <span class="nt">&#34;prefix&#34;</span><span class="p">:</span> <span class="s2">&#34;newcase&#34;</span><span class="p">,</span>
    <span class="nt">&#34;body&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&#34;&lt;?php&#34;</span><span class="p">,</span>
        <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="s2">&#34;namespace Tests${1:\\\\${2:SubNameSpace}};&#34;</span><span class="p">,</span>
        <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="s2">&#34;use Tests\\\\${3|TransactionalTestCase,TestCase|};&#34;</span><span class="p">,</span>
        <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="s2">&#34;class ${TM_FILENAME_BASE} extends $3&#34;</span><span class="p">,</span>
        <span class="s2">&#34;{&#34;</span><span class="p">,</span>
        <span class="s2">&#34;    $0&#34;</span><span class="p">,</span>
        <span class="s2">&#34;}&#34;</span>
    <span class="p">],</span>
    <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;PHPUnit：新测试类&#34;</span><span class="p">,</span>
    <span class="nt">&#34;scope&#34;</span><span class="p">:</span> <span class="s2">&#34;html,php&#34;</span><span class="p">,</span>
<span class="p">}</span><span class="err">,</span>
</code></pre></td></tr></table>
</div>
</div><p>这里通过选项“scope”设定只对“html”和“php”两种语言生效，注意如果只设定“php”也是只能在<code>&lt;?php</code>标签内才能生效的。</p>]]></description></item><item><title>解决Laravel中makeWith()无法取到被mock的实例的问题</title><link>http://0x3f.org/post/mocking-objects-made-by-laravel-container-with-parameters/</link><pubDate>Fri, 16 Aug 2019 10:55:40 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/mocking-objects-made-by-laravel-container-with-parameters/</guid><description><![CDATA[<p>被测单元有一行实例化一个类的代码，而且该类的构造方法需要参数。基于面向单元测试编程的原则，通过容器的makeWith()方法实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">$api = app()-&gt;makeWith(Api::class, [&#39;config&#39; =&gt; $config]);
</code></pre></td></tr></table>
</div>
</div><p>但是在执行单元测试时发现，虽然测试代码中已经mock了这个类且注入到容器，但在被测单元中取到的还是原类的实例。</p>
<p>实际上，测试代码中在将mock的实例注入容器时使用的是instance()方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">$this-&gt;app-&gt;instance($class, $mockedObj);
</code></pre></td></tr></table>
</div>
</div><p>而容器在取带构造参数的类的实例时，并不取通过instance()方法注册进来的实例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">protected function resolve($abstract, $parameters = [])
{
    $abstract = $this-&gt;getAlias($abstract);

    $needsContextualBuild = ! empty($parameters) || ! is_null(
        $this-&gt;getContextualConcrete($abstract)
    );

    // If an instance of the type is currently being managed as a singleton we&#39;ll
    // just return an existing instance instead of instantiating new instances
    // so the developer can keep using the same objects instance every time.
    if (isset($this-&gt;instances[$abstract]) <span class="err">&amp;&amp;</span> ! $needsContextualBuild) {
        return $this-&gt;instances[$abstract];
    }

    $this-&gt;with[] = $parameters;

    $concrete = $this-&gt;getConcrete($abstract);

    // We&#39;re ready to instantiate an instance of the concrete type registered for
    // the binding. This will instantiate the types, as well as resolve any of
    // its &#34;nested&#34; dependencies recursively until all have gotten resolved.
    if ($this-&gt;isBuildable($concrete, $abstract)) {
        $object = $this-&gt;build($concrete);
    } else {
        $object = $this-&gt;make($concrete);
    }
    
    // ...
    
}
</code></pre></td></tr></table>
</div>
</div><p>当存在构造参数时，容器认为是“上下文相关的构造”（needsContextualBuild），所以尝试通过具体的（concrete）逻辑实时构造。</p>
<p>进一步地，getConcrete()方法的实现如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">protected function getConcrete($abstract)
{
    if (! is_null($concrete = $this-&gt;getContextualConcrete($abstract))) {
        return $concrete;
    }

    // If we don&#39;t have a registered resolver or concrete for the type, we&#39;ll just
    // assume each type is a concrete name and will attempt to resolve it as is
    // since the container should be able to resolve concretes automatically.
    if (isset($this-&gt;bindings[$abstract])) {
        return $this-&gt;bindings[$abstract][&#39;concrete&#39;];
    }

    return $abstract;
}
</code></pre></td></tr></table>
</div>
</div><p>它从bindings数组中获取构造逻辑。因此，可以将测试代码中注册被mock的实例的方法改成如下所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">$this-&gt;app-&gt;offsetSet($class, $mockedObj);
</code></pre></td></tr></table>
</div>
</div><p>因为offsetSet()方法就是通过bind()方法把被mock的实例注册到容器的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">public function offsetSet($key, $value)
{
    $this-&gt;bind($key, $value instanceof Closure ? $value : function () use ($value) {
        return $value;
    });
}
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>利用单元测试为开发提效</title><link>http://0x3f.org/post/use-unit-test-as-an-efficiency-tool/</link><pubDate>Tue, 13 Aug 2019 16:38:02 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/use-unit-test-as-an-efficiency-tool/</guid><description><![CDATA[<p>单元测试可以方便地伪造和回滚测试数据，这个特性决定了它其实是一个效率工具。</p>
<p>例如在开发退款单、发票的时候，由于这种后置的功能依赖订单、支付、库存等前置的数据，因此需要频繁地创建这些测试数据，这就导致开发的效率极低，有时甚至需要切换多个系统做诸如增加库存、下单、支付等操作。虽然在开发环境可以通过直接修改数据使之恢复可被测试的状态，但仍然存在效率很低、遗留垃圾数据和存在隐患等问题。</p>
<p>单元测试可以完美地解决这些问题。</p>
<h2 id="伪造测试数据">伪造测试数据</h2>
<p>在Laravel/Lumen中，利用Model Factory、Faker可以很方便地伪造测试数据。进一步地，只需要伪造被测单元依赖的数据，不需要真实、完整的数据。这些在<a href="/phpunit-tips" rel="">《单元测试的技巧》</a>一文中有详细介绍。</p>
<p>测试数据只是被测单元依赖关系的一种，利用Mockery框架对依赖关系做伪造和断言是非常重要的知识。Mock是单元测试的灵魂！</p>
<h2 id="回滚数据库">回滚数据库</h2>
<p>Laravel/Lumen提供了DatabaseTransactions和DatabaseMigrations（不同版本可能有差异）这样的Trait，可以自动在每个测试方法执行后自动回滚数据库。</p>
<h2 id="调试代码">调试代码</h2>
<p>不管是调试测试代码还是被测单元，调试代码在结合单元测试的开发过程中都是个强需求。通常调试代码有两种方式：打印并中断（echo &amp; die）和单步调试。这两者在单元测试中都可以很方便地实现。</p>
<h3 id="打印并中断">打印并中断</h3>
<p>某些版本的PHPUnit会抑制标准输出，某些配置项（<code>beStrictAboutOutputDuringTests=&quot;true&quot;</code>）也会导致在有标准输出时中断单元测试的执行。可通过把信息打印到标准错误输出设备绕过：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">fwrite(STDERR, &#34;Behold:\n&#34; . var_export($order, true) . &#34;\n&#34;);
</code></pre></td></tr></table>
</div>
</div><h3 id="单步调试">单步调试</h3>
<p>单元测试是通过命令行执行的，因此可以利用XDebug支持CLI的特性触发单步调试：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">export</span> <span class="nv">XDEBUG_CONFIG</span><span class="o">=</span><span class="s2">&#34;idekey=VSCODE&#34;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="性能调优">性能调优</h2>
<p>和单步调试一样，可以通过环境变量实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">export</span> <span class="nv">XDEBUG_CONFIG</span><span class="o">=</span><span class="s2">&#34;idekey=VSCODE profiler_enable=1&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>但是性能分析会极大地降低代码执行效率，因此建议通过命令参数的方式实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">php -d <span class="s2">&#34;xdebug.profiler_enable=1&#34;</span> ./vendor/bin/phpunit
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>面向单元测试编程</title><link>http://0x3f.org/post/unit-test-oriented-programming/</link><pubDate>Tue, 13 Aug 2019 16:35:15 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/unit-test-oriented-programming/</guid><description><![CDATA[<p>同一逻辑可以有多种实现方式，选择对单元测试友好的方式可以提高写测试代码的效率。</p>
<h2 id="返回被创建的对象">返回被创建的对象</h2>
<p>通常创建数据的接口只需要返回错误信息，成功时返回空即可，不需要返回被创建的数据。故创建数据的方法可以定义成无返回值。并且，如果我们并不关注数据是不是实际上被插入到数据库中，可以通过mock那部分的逻辑实现，事实上，这其实是更符合单元测试的理念的。</p>
<p>但如果希望测试这一点，就需要到数据库中查询数据是否存在。有时候，如果被创建数据的特征不明显或不唯一，按这种方式实现就很困难。此时，如果被测单元返回被创建的对象实例，就可以省掉这一步，从而简化测试代码、提高执行效率。</p>
<h2 id="唾弃乱注入的恶习">唾弃乱注入的恶习</h2>
<p>遵循MVCSR的分层规范：</p>
<ol>
<li>Controller只实现校验参数、获取参数、调用Service、返回值，不封装具体业务逻辑。</li>
<li>Service只注入本对象的Repository，对其它对象的逻辑的调用均通过该对象的Facade实现。</li>
<li>Repository只注入本对象的Model，只封装本对象的逻辑。</li>
<li>Controller和Service中对任何其它Service的调用均通过Facade实现。</li>
</ol>
<p>否则，写测试代码时对被测单元的依赖关系的处理会很麻烦。</p>
<h2 id="使用facade">使用Facade</h2>
<p>Laravel/Lumen的Facade集成了Mockery，可以极大简化mocking。</p>
<p>对使用依赖注入的方式调用的逻辑做mocking时代码是这样的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">$fakeOrderService = \Mockery::mock(OrderService::class);
$fakeOrderService-&gt;shouldReceive(&#39;update&#39;)-&gt;once()-&gt;andReturn(true);
$this-&gt;app-&gt;instance(OrderService::class, $fakeOrderService);
</code></pre></td></tr></table>
</div>
</div><p>而当使用Facade时，只需一行代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">OrderFacade::shouldReceive(&#39;udpate&#39;)-&gt;once()-&gt;andReturn(true);
</code></pre></td></tr></table>
</div>
</div><h2 id="使用appmodelclass而不是new-model">使用app(Model::class)而不是new Model()</h2>
<p>在Laravel/Lumen中，当代码中需要获取一个对象Model的实例时，通过容器实现会比直接new对单元测试更友好。因为借助容器，可以方便地mock这个Model。</p>]]></description></item><item><title>PHP单元测试的技巧</title><link>http://0x3f.org/post/phpunit-tips/</link><pubDate>Tue, 13 Aug 2019 14:21:48 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/phpunit-tips/</guid><description><![CDATA[<p>以下是我平时写单元测试时总结的一些最佳实践，有些是和具体的框架强相关的。</p>
<h2 id="利用model-factory生成测试数据">利用Model Factory生成测试数据</h2>
<p>Laravel/Lumen的Model Factory是个很好的工具。</p>
<p>事先定义好主要对象的Model Factory，可以在写单元测试的代码时方便地生成临时数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">// 在数据库中创建一条发票的数据，并返回其Model的实例
$invoice = factory(\App\Models\Invoice::class)-&gt;create();
</code></pre></td></tr></table>
</div>
</div><p>此外，借助<a href="https://github.com/fzaninotto/Faker" target="_blank" rel="noopener noreffer">Faker</a>，可以为Model Factory定义仿真数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">$factory-&gt;define(\App\Models\Invoice::class, function () {
    $faker = Faker\Factory::create(&#39;zh_CN&#39;);
    $enFaker = Faker\Factory::create(&#39;en_US&#39;);

    return [
        &#39;user_id&#39;                      =&gt; 1,
        &#39;amount&#39;                       =&gt; 100,
        &#39;title&#39;                        =&gt; $faker-&gt;company,
        &#39;taxpayer_id&#39;                  =&gt; $faker-&gt;randomNumber(),
        &#39;bank&#39;                         =&gt; $faker-&gt;bank,
        &#39;account&#39;                      =&gt; $enFaker-&gt;bankAccountNumber,
        &#39;company_registration_address&#39; =&gt; $faker-&gt;address,
        &#39;company_registration_phone&#39;   =&gt; $faker-&gt;phoneNumber,
        &#39;consignee_name&#39;               =&gt; $faker-&gt;name,
        &#39;consignee_province&#39;           =&gt; $faker-&gt;state,
        &#39;consignee_city&#39;               =&gt; $faker-&gt;city,
        &#39;consignee_district&#39;           =&gt; $faker-&gt;citySuffix,
        &#39;consignee_address&#39;            =&gt; $faker-&gt;address,
        &#39;consignee_phone&#39;              =&gt; $faker-&gt;phoneNumber,
        &#39;zip_code&#39;                     =&gt; $faker-&gt;postcode,
        &#39;remark&#39;                       =&gt; $faker-&gt;text,
        &#39;status&#39;                       =&gt; 1,
    ];
});
</code></pre></td></tr></table>
</div>
</div><h2 id="只伪造被测单元所需的数据">只伪造被测单元所需的数据</h2>
<p>单元测试只关注被测单元本身，并不关注整体功能，所以无须保证测试数据的完整性。换言之，如果被测单元只用到了订单主表数据，就没必要创建一个包含子单、SPU/SKU、支付记录等在内的完整订单。</p>
<h2 id="利用dataprovider简化测试代码">利用dataProvider简化测试代码</h2>
<p>当多个测试用例逻辑相似时，可以把它们抽象成一个测试方法，并用dataProvider提供每个用例的数据和断言。从而使测试代码变得更为简洁、易懂和便于维护。</p>
<h2 id="单独测试被测单元的校验逻辑">单独测试被测单元的校验逻辑</h2>
<p>通常我们会用标准的IO模型实现一个方法，同时对包含校验不合法在内的异常情况抛出相应异常。</p>
<p>PHPUnit提供了expectException()系列方法用于断言异常的抛出。但由于代码抛出了异常、程序被中断，故无法在一次测试中对多个异常做断言。</p>
<p>因此，可以把对一个方法校验逻辑的测试单独抽象出一个测试方法，并用dataProvider提供测试数据和断言。</p>
<h2 id="利用工具查看代码覆盖率">利用工具查看代码覆盖率</h2>
<p>PHPUnit提供参数<code>--coverage-html</code>生成覆盖率分析结果的HTML页面，但在IDE或编辑器里相对实时地查看结果会更方便。</p>
<p>主流IDE或编辑器一般都集成了这个功能或提供了相关插件，如<a href="https://marketplace.visualstudio.com/items?itemName=ryanluker.vscode-coverage-gutters" target="_blank" rel="noopener noreffer">Coverage Gutters</a>。</p>]]></description></item><item><title>Lumen单元测试提示自定义校验规则不存在的问题</title><link>http://0x3f.org/post/unit-test-in-laravel-complains-validation-rule-not-exist/</link><pubDate>Fri, 02 Aug 2019 15:12:17 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/unit-test-in-laravel-complains-validation-rule-not-exist/</guid><description><![CDATA[<p>执行单元测试时遇到报错：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">BadMethodCallException: Method [validateIdList] does not exist.
</code></pre></td></tr></table>
</div>
</div><p><code>id_list</code>是一个自定义的校验规则，通过<code>Illuminate\Support\Facades\Validator::extend()</code>在<code>AppServiceProvider::boot()</code>中注册。由于存在一个和该规则配套的、通过<code>Illuminate\Support\Facades\Request::macro()</code>注册的扩展方法<code>getIDs()</code>，故通过<code>Illuminate\Support\Facades\Request::hasMacro()</code>判断当该方法不存在时才注册，并把这个校验规则的注册逻辑也放到了这个判断里。</p>
<p>同一接口，在Postman中测试并无异常。通过日志看到，<code>AppServiceProvider::boot()</code>被执行了两次，这也很好理解，执行单元测试本身时会初始化一次，当单元测试调用被测试接口时，是第二次调用。也就是在这次调用中，抛出了这个异常。</p>
<p>那么，为什么<code>getIDs()</code>方法没有问题，而<code>id_list</code>校验规则却不存在呢？</p>
<p>通过源码可以看到，<code>macro()</code>方法来自于<code>Illuminate\Support\Traits\Macroable</code>，该Trait内部使用静态变量<code>$macros</code>存储被注册的逻辑。而注册校验规则的<code>extend()</code>方法来自于<code>Illuminate\Validation\Factory</code>这个类。此类在<code>Illuminate\Validation\ValidationServiceProvider</code>中被注册为单例。</p>
<p>因此，当第二次被执行时，静态存储的<code>getIDs()</code>方法仍然存在，而<code>id_list</code>由于程序实例被重置，已经不存在了。</p>
<p>综上，解决的办法是把注册自定义校验规则的逻辑拿到<code>hasMacro()</code>外面。</p>]]></description></item><item><title>基于Laravel的项目的单元测试规范</title><link>http://0x3f.org/post/unit-testing-standard-for-laravel-based-projects/</link><pubDate>Sun, 24 Mar 2019 22:42:08 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/unit-testing-standard-for-laravel-based-projects/</guid><description><![CDATA[<p>单元测试是个好东西，解决了我很多问题，不论开发效率还是代码质量，都给我助益良多。最近想在团队内部推广，就拟了个规范草稿：</p>
<h1 id="什么是单元">什么是单元？</h1>
<p>单元是逻辑的最小单位，是函数或方法。</p>
<p>单元测试意味着只测试单元本身，单元内部调用的其它接口、函数和方法等均称为依赖关系。依赖关系自有它们对应的单元测试负责，不在本单元的测试范围内。</p>
<h1 id="怎么测试单元stub--mock">怎么测试单元？（Stub &amp; Mock）</h1>
<p>依赖关系是脆弱的，它会导致单元测试的编写和运行效率低下，甚至易于失败。以下是项目中的一个测试用例，由于依赖了用户服务，且该服务在我家无法访问，导致测试失败：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">  donie@Donies &gt; ~/Projects/app/service-biz &gt;&gt; master &gt; phpunitat57                                  -- INSERT --
  PHPUnit 5.7.26 by Sebastian Bergmann and contributors.
  
  ......E.                                                            8 / 8 (100%)
  
  Time: 5.59 seconds, Memory: 22.00MB
  
  There was 1 error:
  
  1) Tests\\Quotation\\QuotationTest::testUpdateQuotationProject
  GuzzleHttp\\Exception\\ConnectException: cURL error 28: Connection timed out after 2003 milliseconds (see &lt;http://curl.haxx.se/libcurl/c/libcurl-errors.html&gt;)
  
  /Users/donie/Projects/app/service-biz/vendor/guzzlehttp/guzzle/src/Handler/CurlFactory.php:186
  /Users/donie/Projects/app/service-biz/vendor/guzzlehttp/guzzle/src/Handler/CurlFactory.php:150
  /Users/donie/Projects/app/service-biz/vendor/guzzlehttp/guzzle/src/Handler/CurlFactory.php:103
  /Users/donie/Projects/app/service-biz/vendor/guzzlehttp/guzzle/src/Handler/CurlHandler.php:43
  /Users/donie/Projects/app/service-biz/vendor/guzzlehttp/guzzle/src/Handler/Proxy.php:28
  /Users/donie/Projects/app/service-biz/vendor/guzzlehttp/guzzle/src/Handler/Proxy.php:51
  /Users/donie/Projects/app/service-biz/vendor/guzzlehttp/guzzle/src/PrepareBodyMiddleware.php:72
  /Users/donie/Projects/app/service-biz/vendor/guzzlehttp/guzzle/src/Middleware.php:30
  /Users/donie/Projects/app/service-biz/vendor/guzzlehttp/guzzle/src/RedirectMiddleware.php:68
  /Users/donie/Projects/app/service-biz/vendor/guzzlehttp/guzzle/src/Middleware.php:59
  /Users/donie/Projects/app/service-biz/vendor/guzzlehttp/guzzle/src/HandlerStack.php:67
  /Users/donie/Projects/app/service-biz/vendor/guzzlehttp/guzzle/src/Client.php:275
  /Users/donie/Projects/app/service-biz/vendor/guzzlehttp/guzzle/src/Client.php:123
  /Users/donie/Projects/app/service-biz/vendor/guzzlehttp/guzzle/src/Client.php:129
  /Users/donie/Projects/app/service-biz/app/Services/UserService.php:61
  /Users/donie/Projects/app/service-biz/app/Services/UserService.php:96
  /Users/donie/Projects/app/service-biz/app/Services/QuotationService.php:121
  /Users/donie/Projects/app/service-biz/vendor/illuminate/support/Facades/Facade.php:221
  /Users/donie/Projects/app/service-biz/tests/Quotation/QuotationTest.php:154
  
  ERRORS!
  Tests: 8, Assertions: 8, Errors: 1.
</code></pre></td></tr></table>
</div>
</div><p>要实现真正的单元测试，不可避免地要对单元内部的依赖关系进行伪造，即Mock。</p>
<h1 id="规范">规范</h1>
<h2 id="目录结构">目录结构</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">tests/
    ↳ Api/
    ↳ Services/
    ↳ Repositories/
    ↳ Helpers/
    ↳ TestCase.php
    ↳ TransactionalTestCase.php
</code></pre></td></tr></table>
</div>
</div><h2 id="继承关系">继承关系</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">App\Tests\TestCase
    ↳Tests\TestCase
        ↳Tests\Api\TagTest
        ...
    ↳Tests\TransactionalTestCase
        ↳Tests\Services\TagTest
        ...
</code></pre></td></tr></table>
</div>
</div><h2 id="接口测试">接口测试</h2>
<ul>
<li>所有接口都必须有测试用例，代码覆盖率100%</li>
<li>位于<code>tests/Api</code>下，命名空间是<code>Tests/Api</code></li>
<li>和被测试的Controller对应</li>
<li>只测试路由和Action本单元的代码，不测试具体业务逻辑</li>
<li>具体业务逻辑封装在Service层，由该层的单元测试负责</li>
<li>测试代码中通过Facade实现对Service层的Mock</li>
</ul>
<h2 id="单元测试">单元测试</h2>
<h3 id="service">Service</h3>
<ul>
<li>所有Service层的方法都必须有测试用例，代码覆盖率不低于90%</li>
<li>位于<code>tests/Services</code>目录下，命名空间是<code>Tests/Services</code></li>
<li>和被测试的Service对应</li>
<li>通过Facade调用Service层并实现对被测试单元依赖关系的Mock</li>
</ul>
<h3 id="repository">Repository</h3>
<ul>
<li>复杂的或有必要的方法要有测试用例，其余可以通过Service层的单元测试覆盖到，代码覆盖率不低于90%</li>
<li>位于<code>tests/Repositories</code>目录下，命名空间是<code>Tests/Repositories</code></li>
<li>和被测试的Repository对应</li>
</ul>
<h3 id="helper-functions">Helper Functions</h3>
<ul>
<li>复杂的或有必要的函数要有测试用例，其余可以通过其它层的单元测试覆盖到，代码覆盖率100%</li>
<li>位于<code>tests/Helpers</code>目录下，命名空间是<code>Tests/Helpers</code></li>
<li>每个测试用例和被测试的helper函数对应</li>
</ul>
<h2 id="辅助方法">辅助方法</h2>
<p>基类中封装如下辅助方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">/**
 * Mock一个对象并返回伪造的实例
 *
 * 可通过回调匿名函数定制Mock的实例的行为特征。
 * 当$inject参数为false时，Mock的实例不被注入容器，缺省为注入。
 *
 * @param mixed $class 类名字符串或类本身
 * @param callable $handler 回调匿名函数，接收Mock的实例作为参数，用于定制实例自身行为特征
 * @param bool $inject 是否注入容器，缺省为true
 *
 * @return \\Mockery\\MockInterface
 */
protected function mock($class, callable $handler = null, bool $inject = true): MockInterface
{
    $mockedObj = \Mockery::mock($class);

    if (is_callable($handler)) {
        call_user_func($handler, $mockedObj);
    }

    if ($inject) {
        $this-&gt;app-&gt;instance($class, $mockedObj);
    }

    return $mockedObj;
}
  
/**
 * Mock一个单例模式的类
 *
 * 可通过回调匿名函数定制Mock的实例的行为特征。
 *
 * @param mixed    $class   类名字符串或类本身
 * @param callable $handler 回调匿名函数，接收Mock的实例作为参数，用于定制实例自身行为特征
 */
protected function mockSingleton($class, callable $handler = null): void
{
    $mockedObj = \Mockery::mock($class);

    if (is_callable($handler)) {
        call_user_func($handler, $mockedObj);
    }

    $ref = new \ReflectionProperty($class, &#39;instance&#39;);
    $ref-&gt;setAccessible(true);
    $ref-&gt;setValue(null, $mockedObj);
}

/**
  * 触发对象的private或protected方法
  *
  * @param  object $object 对象实例
  * @param  string $methodName 方法名
 * @param  array $parameters 参数数组
  *
  * @return mixed 被触发方法的返回值
  */
protected function invokeMethod(<span class="err">&amp;</span>$object, $methodName, array $parameters = [])
{
    $reflection = new \ReflectionClass(get_class($object));
    $method = $reflection-&gt;getMethod($methodName);
    $method-&gt;setAccessible(true);
    return $method-&gt;invokeArgs($object, $parameters);
}
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>解决Laravel的Facade在被Mock时不自动注入依赖的一种方法</title><link>http://0x3f.org/post/manual-dependency-injection-with-laravel/</link><pubDate>Tue, 30 Jan 2018 15:41:16 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/manual-dependency-injection-with-laravel/</guid><description><![CDATA[<p>由于集成了Mockery，Laravel的Facade对单元测试非常友好，只需要一行代码就能实现mocking。</p>
<p>例如，测试目标方法中调用了订单工具类的一个方法，在使用依赖注入的方式时，需要用三行代码实现对这个方法的mocking：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">$fakeOrderTool = m::mock(\App\Tool\Order::class);
$fakeOrderTool-&gt;shouldReceive(&#39;getById&#39;)-&gt;once()-&gt;with($id)-&gt;andReturn($fakeOrder);
$this-&gt;app-&gt;instance(\App\Tool\Order::class, $fakeOrderTool);
</code></pre></td></tr></table>
</div>
</div><p>而用Facade是这样的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">OrderFacade::shouldReceive(&#39;getById&#39;)-&gt;once()-&gt;with($id)-&gt;andReturn($fakeOrder);
</code></pre></td></tr></table>
</div>
</div><p>当测试目标方法也属于订单工具类时，需要部分mock这个类，所以还要加上一行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">OrderFacade::makePartial();
</code></pre></td></tr></table>
</div>
</div><p>但如果订单工具类的构造方法里有需要注入的依赖关系，这里并不会被执行。所以我在工具类基类里封装了一个方法，用反射机制实现手工注入依赖关系：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">    /**
     * 注入依赖，用于单元测试
     *
     * @return  void
     * @author  donieli
     * @since   5
     * @version 5
     */
    public function injectDependencies()
    {
        $reflector = new \ReflectionClass(get_class($this));
        $params    = $reflector-&gt;getConstructor()-&gt;getParameters();
        $args      = [];
        foreach ($params as $param) {
            $paramClass = $param-&gt;getClass();
            if (empty($paramClass)) {
                throw new \Exception(&#39;Dependency named &#39;.$param-&gt;getName().&#39; cannot be injected.&#39;);
            }
            $instance  = app()-&gt;make($paramClass-&gt;getName());
            $args[] = $instance;
        }
        call_user_func_array([$this, &#39;__construct&#39;], $args);
    }
</code></pre></td></tr></table>
</div>
</div><p>然后就可以这样处理：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">OrderFacade::shouldReceive(&#39;getById&#39;)-&gt;with($id)-&gt;once()-&gt;andReturn($fakeOrder);
OrderFacade::makePartial();
OrderFacade::injectDependencies();
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>Laravel单元测试错误：1205 Lock wait timeout exceeded</title><link>http://0x3f.org/post/1205-lock-wait-timeout-exceeded/</link><pubDate>Fri, 22 Dec 2017 15:47:32 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/1205-lock-wait-timeout-exceeded/</guid><description><![CDATA[<p>错误信息：</p>
<blockquote>
<p>1205 Lock wait timeout exceeded; try restarting transaction</p>
</blockquote>
<p>原因之一是测试用例里重写的tearDown()方法中没有调用父类的该方法。因为DatabaseTransaction这个trait自动开启了事务，对应的回滚方法在测试用例基类的tearDown()中执行。</p>
]]></description></item><item><title>测试驱动开发的实际收益</title><link>http://0x3f.org/post/the-real-income-of-tdd/</link><pubDate>Sun, 17 Dec 2017 14:20:02 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/the-real-income-of-tdd/</guid><description><![CDATA[<p>我并不试图系统地谈TDD，因为我在这方面的经验还不足以做到这一点。但是TDD的一些方法论和工具确实解决了我在实际开发过程中遇到的一些问题。</p>
<p>第一个问题是健壮性。尤其是对于我这样思维发散、容易迷失又喜欢重构的人，TDD给了我一个明确的目标，在一切刚开始的时候，我要做的只是满足测试用例，让它们由红变绿。到了重构阶段，我就可以把精力放到优化代码上面，且不必对健壮性有过多的担心。在此之前，由于手动测试比较麻烦，很多时候惰性会说服潜意识告诉自己这部分逻辑很简单、不会有什么bug，结果提交测试后却一再地发生问题。</p>
<p>第二个问题是效率。曾经只有不忙的时候才会写测试用例，但是现在一般都会写，因为确实可以提高开发效率，而不只是保证重构的健壮性。可能对于所有对单元测试不熟悉的人来说，这都是匪夷所思的，我也曾认为单元测试只是用来保证健壮性的，必然和开发效率是一对矛盾，因为要花很多时间写测试代码。这种想法首先是因为对单元测试不熟悉，所以才需要花很多时间在上面。其次是没有看到它所带来的好处。</p>
<p>例如你要实现一整套退款单的功能，退款单是依赖订单的，这意味著你需要不只一条符合条件的订单数据。但是订单是有状态的，随著时间的推移、人为的操作或者开发过程中程序的影响，状态会变得不再符合你的要求，这时候你就必须停下来去做更多符合要求的订单。而创建订单也存在很多麻烦，你需要找到有库存的商品，有时候还要去库管系统中补充库存，然后下单并支付。最后花了很多时间做出来的订单，因为正在开发的退款单的程序出现的一个小问题变得不能使用！时间被大量浪费在创建所依赖的上游数据上。</p>
<p>这时候如果用单元测试并mock出依赖关系，就可以随时随地、无限制地执行相关的业务逻辑。对效率的提高不言而喻。</p>
<p>特别的，mock并不是随时可以抓起的救命稻草，它的原罪在于：不负责任地滥用mock会导致很多问题被掩盖。因此，对mock的使用应该是节制的、目标明确的。</p>
<p>当然，这并不包括单纯地为了提高代码覆盖率而使用mock，只所以这是个在很多强制TDD的团队里的普遍现象，归根结底是因为KPI是万恶之源，任何好的方法论，一旦沦为KPI，就离死不远了。</p>
]]></description></item></channel></rss>