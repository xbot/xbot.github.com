<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>udev - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/udev/</link><description>udev - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 17 Apr 2015 18:02:00 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/udev/" rel="self" type="application/rss+xml"/><item><title>自动重映射键盘</title><link>http://0x3f.org/post/auto-remap-keyboard/</link><pubDate>Fri, 17 Apr 2015 18:02:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/auto-remap-keyboard/</guid><description><![CDATA[<p>每次键盘拔出再插入时，键盘映射都会失效，要重新执行映射，而且要对不同的键盘应用不同的映射方案。试过直接添加udev规则，即使指定X Display和Xauthority也不成功。所以用pyudev写个脚本（<a href="https://github.com/xbot/shell/blob/master/udev.py" target="_blank" rel="noopener noreffer">最新版本</a>）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="ch">#!/usr/bin/env python2</span>
<span class="c1"># encoding: utf-8</span>

<span class="s2">&#34;&#34;&#34;
</span><span class="s2">File:        udev.py
</span><span class="s2">Description: udev monitor script.
</span><span class="s2">Author:      Donie Leigh
</span><span class="s2">Email:       donie.leigh at gmail.com
</span><span class="s2">&#34;&#34;&#34;</span>

<span class="kn">import</span> <span class="nn">glib</span><span class="o">,</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">time</span>
<span class="kn">from</span> <span class="nn">pyudev</span> <span class="kn">import</span> <span class="n">Context</span><span class="p">,</span> <span class="n">Monitor</span>

<span class="n">PID_FILE</span> <span class="o">=</span> <span class="s2">&#34;/tmp/udev_monitor.pid&#34;</span>

<span class="k">def</span> <span class="nf">remap_pokerii</span><span class="p">(</span><span class="n">device</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34; Do keyboard remapping when PokerII is plugged in.
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="k">if</span> <span class="n">device</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;ID_VENDOR_ID&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;0f39&#39;</span> \
            <span class="ow">and</span> <span class="n">device</span><span class="o">.</span><span class="n">action</span> <span class="o">==</span> <span class="s1">&#39;add&#39;</span><span class="p">:</span>
        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s1">&#39;setxkbmap&#39;</span><span class="p">)</span>
        <span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s1">&#39;xmodmap ~/.Xmodmap&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">remap_filco</span><span class="p">(</span><span class="n">device</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34; Do keyboard remapping when Filco is plugged in.
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="k">if</span> <span class="n">device</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">&#39;ID_VENDOR_ID&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;04d9&#39;</span> \
            <span class="ow">and</span> <span class="n">device</span><span class="o">.</span><span class="n">action</span> <span class="o">==</span> <span class="s1">&#39;add&#39;</span><span class="p">:</span>
        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s1">&#39;setxkbmap&#39;</span><span class="p">)</span>
        <span class="n">os</span><span class="o">.</span><span class="n">system</span><span class="p">(</span><span class="s1">&#39;xmodmap ~/.Xmodmap&#39;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">is_pid_running</span><span class="p">(</span><span class="n">pid</span><span class="p">):</span>
    <span class="s2">&#34;&#34;&#34; Check if the given pid is running.
</span><span class="s2">    :pid: int
</span><span class="s2">    :returns: bool
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">os</span><span class="o">.</span><span class="n">kill</span><span class="p">(</span><span class="n">pid</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">except</span> <span class="ne">OSError</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="bp">True</span>

<span class="k">def</span> <span class="nf">write_pid_or_die</span><span class="p">():</span>
    <span class="s2">&#34;&#34;&#34; Write the current pid into pid file or exists if there is already a instance running.
</span><span class="s2">    :returns: void
</span><span class="s2">    &#34;&#34;&#34;</span>
    <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">isfile</span><span class="p">(</span><span class="n">PID_FILE</span><span class="p">):</span>
        <span class="n">pid</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="n">PID_FILE</span><span class="p">)</span><span class="o">.</span><span class="n">read</span><span class="p">())</span>
        <span class="k">if</span> <span class="n">is_pid_running</span><span class="p">(</span><span class="n">pid</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="s2">&#34;Process {0} is still running.&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">pid</span><span class="p">))</span>
            <span class="k">raise</span> <span class="ne">SystemExit</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">PID_FILE</span><span class="p">)</span>

    <span class="nb">open</span><span class="p">(</span><span class="n">PID_FILE</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">getpid</span><span class="p">()))</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="kn">from</span> <span class="nn">pyudev.glib</span> <span class="kn">import</span> <span class="n">MonitorObserver</span>
        <span class="k">def</span> <span class="nf">device_event</span><span class="p">(</span><span class="n">observer</span><span class="p">,</span> <span class="n">device</span><span class="p">):</span>
            <span class="n">remap_pokerii</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
            <span class="n">remap_filco</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="kn">from</span> <span class="nn">pyudev.glib</span> <span class="kn">import</span> <span class="n">GUDevMonitorObserver</span> <span class="k">as</span> <span class="n">MonitorObserver</span>
        <span class="k">def</span> <span class="nf">device_event</span><span class="p">(</span><span class="n">observer</span><span class="p">,</span> <span class="n">action</span><span class="p">,</span> <span class="n">device</span><span class="p">):</span>
            <span class="n">remap_pokerii</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
            <span class="n">remap_filco</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>

    <span class="n">context</span> <span class="o">=</span> <span class="n">Context</span><span class="p">()</span>
    <span class="n">monitor</span> <span class="o">=</span> <span class="n">Monitor</span><span class="o">.</span><span class="n">from_netlink</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>

    <span class="n">monitor</span><span class="o">.</span><span class="n">filter_by</span><span class="p">(</span><span class="n">subsystem</span><span class="o">=</span><span class="s1">&#39;usb&#39;</span><span class="p">)</span>
    <span class="n">observer</span> <span class="o">=</span> <span class="n">MonitorObserver</span><span class="p">(</span><span class="n">monitor</span><span class="p">)</span>

    <span class="n">observer</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="s1">&#39;device-event&#39;</span><span class="p">,</span> <span class="n">device_event</span><span class="p">)</span>
    <span class="n">monitor</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>

    <span class="n">glib</span><span class="o">.</span><span class="n">MainLoop</span><span class="p">()</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>

<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">write_pid_or_die</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">main</span><span class="p">()</span>
    <span class="k">except</span> <span class="ne">KeyboardInterrupt</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s2">&#34;Game over.&#34;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>有个坑，监测到键盘插入事件后要等一秒再应用映射，否则不成功。</p>
<p>这里只用了设备的Vendor ID，可以直接用lsusb看。看更多的设备属性的命令如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 监视设备变动</span>
udevadm monitor --environment --udev

<span class="c1"># 查看设备属性</span>
udevadm info -a -n <span class="o">[</span>device name<span class="o">]</span>

<span class="c1"># 查看文件所属设备的属性</span>
udevadm info -a -p <span class="o">[</span>file name<span class="o">]</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>