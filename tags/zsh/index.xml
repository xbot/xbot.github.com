<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>zsh - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/zsh/</link><description>zsh - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 19 Aug 2021 23:34:25 +0800</lastBuildDate><atom:link href="http://0x3f.org/tags/zsh/" rel="self" type="application/rss+xml"/><item><title>用 zsh-autoenv 实现目录级别的 zshrc</title><link>http://0x3f.org/post/implement-directory-specific-zshrc-with-zsh-autoenv/</link><pubDate>Thu, 19 Aug 2021 23:34:25 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/implement-directory-specific-zshrc-with-zsh-autoenv/</guid><description><![CDATA[<p><a href="https://github.com/Tarrasch/zsh-autoenv" target="_blank" rel="noopener noreffer">zsh-autoenv</a> 可以实现当进入特定的目录时加载特定的 zshrc 文件，并当切换到其它目录时取消其中的变更。后者在当前的版本下，对环境变量、命令别名和函数有效。</p>
<p>使用方法为：</p>
<p>在目录（如 <code>~/project</code> ）下创建文件 <code>.autoenv.zsh</code> :</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-zsh" data-lang="zsh">autostash <span class="nv">TEST_VAR</span><span class="o">=</span><span class="s1">&#39;This is a test variable.&#39;</span>

autostash <span class="nb">alias</span> <span class="nv">test_cmd</span><span class="o">=</span><span class="s1">&#39;echo &#34;This is a test alias.&#34;&#39;</span>

autostash test_func
test_func<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">&#34;This is a test function.&#34;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>出于安全考虑， zsh-autoenv 会对 <code>.autoenv.zsh</code> 做哈希校验，所以第一次或者做变动后进入该目录时，都会要求确认是否接受此文件最新的内容。</p>
<p>此外，如果进入的目录不存在 <code>.autoenv.zsh</code>， zsh-autoenv 会自动向上查找最近的同名文件并加载，上溯的层级可以通过配置项定义。</p>
<p>最后，它提供了一个命令 <code>autoenv-edit</code> 用来快速打开和编辑 <code>.autoenv.zsh</code> 文件。</p>
]]></description></item><item><title>ZSH下新安装的程序无法自动补全的解决方法</title><link>http://0x3f.org/post/how-to-auto-complete-newly-installed-command-in-zsh/</link><pubDate>Wed, 12 Nov 2014 22:15:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/how-to-auto-complete-newly-installed-command-in-zsh/</guid><description><![CDATA[<p>Zsh默认开启了对PATH变量的缓存，这是导致新安装的程序无法立即使用自动补全的原因。</p>
<p>其实只要PATH变量不太复杂，安装的程序不太多，完全没必要开启缓存，实际上我把缓存关掉后完全没有感觉到补全的速度有什么变化。</p>
<p>方法如下，在.zshrc中增加一行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">zstyle <span class="s1">&#39;:completion:*&#39;</span> rehash <span class="nb">true</span>
</code></pre></td></tr></table>
</div>
</div><p>也可以在必要的时间手工执行命令<strong>rehash</strong>，也是个临时解决方法。</p>
]]></description></item><item><title>Take Sakura as My Primary Terminal</title><link>http://0x3f.org/post/take-sakura-as-my-primary-terminal/</link><pubDate>Sun, 07 Jul 2013 12:07:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/take-sakura-as-my-primary-terminal/</guid><description><![CDATA[<p>It&rsquo;s a long time since I came across rxvt-unicode.</p>
<p>About seven years ago, when I switched from Windows XP to Ubuntu mainly for performance issues, I never be bored with searching for everything with a higher speed. To me, gnome-terminal is too much slow as a terminal being frequently opened and closed. Then, rxvt-unicode came through.</p>
<p>At first glance, rxvt-unicode was so ugly that I put it behind without the slightest bit of hesitation. Not until I once saw a screenshot did I realize this ugly thing can actually be pretty like that. So I started to take it as my primary terminal since then, for it was the fastest terminal I can find at that time.</p>
<p>Time flies, rxvt-unicode has proved to be a very good friend within these years, only until yesterday. I descided to change my Zsh theme to agnoster, which is a very pretty and git-friendly theme. Although I did everything according to the official manual, the right and left arrow signs were still displayed as boxes, then I tried almost all the methods I could find from Google, it still didn&rsquo;t work.</p>
<p>So I reluctantly descided to part from rxvt-unicode. A number of terminals came out through these years, some of them also show a good performance, like sakura, terminator, etc. Now I take sakura as my primary terminal, it runs as fast as rxvt-unicode while working normally with agnoster or powerline.</p>
<p>Here is the final effect:</p>
<p></p>
<p><strong>Update (2013-07-07 23:34:53):</strong></p>
<p>Thanks to Star Brilliant, he mentioned LilyTerm in his comment. I discovered that it is even faster than Sakura while supplying plenty of functions, so now I descide to switch to LilyTerm.</p>
]]></description></item></channel></rss>