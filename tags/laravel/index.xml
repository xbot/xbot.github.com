<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Laravel on 晴耕雨讀</title><link>http://0x3f.org/tags/laravel/</link><description>Recent content in Laravel on 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>© 淘气 2022</copyright><lastBuildDate>Sat, 06 Aug 2022 20:22:36 +0800</lastBuildDate><atom:link href="http://0x3f.org/tags/laravel/index.xml" rel="self" type="application/rss+xml"/><item><title>Laravel Horizon 简介</title><link>http://0x3f.org/posts/an-introduction-of-laravel-horizon/</link><pubDate>Sat, 06 Aug 2022 20:22:36 +0800</pubDate><guid>http://0x3f.org/posts/an-introduction-of-laravel-horizon/</guid><description>简介 Horizon 针对 Laravel 的 Redis 队列，增加了可视化、进程池等特性。
特性 可视化仪表板 Worker 进程池的维护和调度 词汇表 master supervisor: 主进程，通过 proc_open() 启动 supervisor 子进程。 environments: 可以按 APP_ENV 针对不同环境创建多套配置。 supervisors: Horizon 自己的进程池概念，与托管后台进程的软件 Supervisor 没有关系。 workers: 队列消费者进程，每个 supervisor 中包含多个 worker。 负载均衡策略 false 一个 supervisor 下的所有 worker 全部用于按队列名称的顺序逐个队列消费任务。
simple 一个 supervisor 下的所有 worker 被平均分配给每个队列。
auto 一个 supervisor 下空闲的 worker 会被优先分配给负载最高的队列。同时保证空闲队列有配置项 minProcesses 数量的 worker 待命。
超时提醒 如果一个队列执行任务的时间超过预先配置的时间限制，horizon 将终止该任务并可以通过短信、邮件或 Slack 发送通知。
Horizon 每分钟查询一次执行任务的时间超过配置值的队列：
每 5 分钟发送一次通知：
吞吐量和平均耗时统计 需要通过定时任务周期性执行 artisan horizon:snapshot 命令生成统计数据并存储到 Redis 中。</description></item><item><title>关于Lumen的Facade不支持引用传递的看法</title><link>http://0x3f.org/posts/lumen-facade-doesnot-support-pass-by-reference-param/</link><pubDate>Tue, 04 Feb 2020 17:40:34 +0000</pubDate><guid>http://0x3f.org/posts/lumen-facade-doesnot-support-pass-by-reference-param/</guid><description>&lt;p>今天遇到一个奇怪的问题，一次调用带引用传递形参的方法后，该形参对应的变量值没有按预期改变。&lt;/p></description></item><item><title>解决Laravel中makeWith()无法取到被mock的实例的问题</title><link>http://0x3f.org/posts/mocking-objects-made-by-laravel-container-with-parameters/</link><pubDate>Fri, 16 Aug 2019 10:55:40 +0000</pubDate><guid>http://0x3f.org/posts/mocking-objects-made-by-laravel-container-with-parameters/</guid><description>&lt;p>被测单元有一行实例化一个类的代码，而且该类的构造方法需要参数。基于面向单元测试编程的原则，通过容器的makeWith()方法实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$api&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">app&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="na">makeWith&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Api&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;config&amp;#39;&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nv">$config&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是在执行单元测试时发现，虽然测试代码中已经mock了这个类且注入到容器，但在被测单元中取到的还是原类的实例。&lt;/p></description></item><item><title>利用单元测试为开发提效</title><link>http://0x3f.org/posts/use-unit-test-as-an-efficiency-tool/</link><pubDate>Tue, 13 Aug 2019 16:38:02 +0000</pubDate><guid>http://0x3f.org/posts/use-unit-test-as-an-efficiency-tool/</guid><description>&lt;p>单元测试可以方便地伪造和回滚测试数据，这个特性决定了它其实是一个效率工具。&lt;/p>
&lt;p>例如在开发退款单、发票的时候，由于这种后置的功能依赖订单、支付、库存等前置的数据，因此需要频繁地创建这些测试数据，这就导致开发的效率极低，有时甚至需要切换多个系统做诸如增加库存、下单、支付等操作。虽然在开发环境可以通过直接修改数据使之恢复可被测试的状态，但仍然存在效率很低、遗留垃圾数据和存在隐患等问题。&lt;/p>
&lt;p>单元测试可以完美地解决这些问题。&lt;/p></description></item><item><title>面向单元测试编程</title><link>http://0x3f.org/posts/unit-test-oriented-programming/</link><pubDate>Tue, 13 Aug 2019 16:35:15 +0000</pubDate><guid>http://0x3f.org/posts/unit-test-oriented-programming/</guid><description>&lt;p>同一逻辑可以有多种实现方式，选择对单元测试友好的方式可以提高写测试代码的效率。&lt;/p></description></item><item><title>Lumen单元测试提示自定义校验规则不存在的问题</title><link>http://0x3f.org/posts/unit-test-in-laravel-complains-validation-rule-not-exist/</link><pubDate>Fri, 02 Aug 2019 15:12:17 +0000</pubDate><guid>http://0x3f.org/posts/unit-test-in-laravel-complains-validation-rule-not-exist/</guid><description>&lt;p>执行单元测试时遇到报错：&lt;/p>
&lt;pre tabindex="0">&lt;code>BadMethodCallException: Method [validateIdList] does not exist.
&lt;/code>&lt;/pre></description></item><item><title>对比Laravel Excel和Spout的读写性能</title><link>http://0x3f.org/posts/performance-comparation-for-laravel-excel-and-spout/</link><pubDate>Sun, 07 Jul 2019 20:23:26 +0000</pubDate><guid>http://0x3f.org/posts/performance-comparation-for-laravel-excel-and-spout/</guid><description>./artisan excel:write --driver=spout --amount=100000 写入数据100000行。 用时：156秒。 最大使用内存：2750.5106964111 M。 ./artisan excel:write --driver=laravel-excel --amount=100000 写入数据100000行。 用时：305秒。 最大使用内存：1330.7370758057 M。 ./artisan excel:read ./storage/app/test.xlsx --driver=spout 读取数据100001行。 用时：576秒。 最大使用内存：122.15303039551 M。 ./artisan excel:read ./storage/app/test.xlsx --driver=laravel-excel 读取数据100001行。 用时：166秒。 最大使用内存：739.48976898193 M。 基本上，Laravel Excel写XLSX的性能是Spout的一半，但内存占用是对方的一半。而在读文件上，前者的性能是后者的约3倍多，而内存占用是后者的6倍。
测试环境：
MBP 3.1 GHz Intel Core i5 8G内存 PHP 7.1.30 Laravel 5.8.27 Laravel Excel 3.1.14 Spout 3.0.1</description></item><item><title>基于Laravel的项目的单元测试规范</title><link>http://0x3f.org/posts/unit-testing-standard-for-laravel-based-projects/</link><pubDate>Sun, 24 Mar 2019 22:42:08 +0000</pubDate><guid>http://0x3f.org/posts/unit-testing-standard-for-laravel-based-projects/</guid><description>&lt;p>单元测试是个好东西，解决了我很多问题，不论开发效率还是代码质量，都给我助益良多。最近想在团队内部推广，就拟了个规范草稿：&lt;/p></description></item><item><title>解决Laravel的Facade在被Mock时不自动注入依赖的一种方法</title><link>http://0x3f.org/posts/manual-dependency-injection-with-laravel/</link><pubDate>Tue, 30 Jan 2018 15:41:16 +0000</pubDate><guid>http://0x3f.org/posts/manual-dependency-injection-with-laravel/</guid><description>由于集成了Mockery，Laravel的Facade对单元测试非常友好，只需要一行代码就能实现mocking。
例如，测试目标方法中调用了订单工具类的一个方法，在使用依赖注入的方式时，需要用三行代码实现对这个方法的mocking：
1 2 3 $fakeOrderTool = m::mock(\App\Tool\Order::class); $fakeOrderTool-&amp;gt;shouldReceive(&amp;#39;getById&amp;#39;)-&amp;gt;once()-&amp;gt;with($id)-&amp;gt;andReturn($fakeOrder); $this-&amp;gt;app-&amp;gt;instance(\App\Tool\Order::class, $fakeOrderTool); 而用Facade是这样的：
1 OrderFacade::shouldReceive(&amp;#39;getById&amp;#39;)-&amp;gt;once()-&amp;gt;with($id)-&amp;gt;andReturn($fakeOrder); 当测试目标方法也属于订单工具类时，需要部分mock这个类，所以还要加上一行：
1 OrderFacade::makePartial(); 但如果订单工具类的构造方法里有需要注入的依赖关系，这里并不会被执行。所以我在工具类基类里封装了一个方法，用反射机制实现手工注入依赖关系：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 /** * 注入依赖，用于单元测试 * * @return void * @author donieli * @since 5 * @version 5 */ public function injectDependencies() { $reflector = new \ReflectionClass(get_class($this)); $params = $reflector-&amp;gt;getConstructor()-&amp;gt;getParameters(); $args = []; foreach ($params as $param) { $paramClass = $param-&amp;gt;getClass(); if (empty($paramClass)) { throw new \Exception(&amp;#39;Dependency named &amp;#39;.</description></item><item><title>Laravel单元测试错误：1205 Lock wait timeout exceeded</title><link>http://0x3f.org/posts/1205-lock-wait-timeout-exceeded/</link><pubDate>Fri, 22 Dec 2017 15:47:32 +0000</pubDate><guid>http://0x3f.org/posts/1205-lock-wait-timeout-exceeded/</guid><description>错误信息：
1205 Lock wait timeout exceeded; try restarting transaction
原因之一是测试用例里重写的tearDown()方法中没有调用父类的该方法。因为DatabaseTransaction这个trait自动开启了事务，对应的回滚方法在测试用例基类的tearDown()中执行。</description></item><item><title>Mock Laravel的DB Facade的方法</title><link>http://0x3f.org/posts/how-to-mock-the-db-facade-of-laravel/</link><pubDate>Mon, 14 Aug 2017 15:51:41 +0000</pubDate><guid>http://0x3f.org/posts/how-to-mock-the-db-facade-of-laravel/</guid><description>关于数据库操作是否应该mock的问题，我认为查询一般不应该mock，可以避免一些问题，但如果查询的结果可能影响到断言，就应该mock了。
Laravel的DB facade完整的mock实例是这样的：</description></item><item><title>接口编程中记录日志的最佳实践</title><link>http://0x3f.org/posts/the-best-practice-of-logging-in-api-programming/</link><pubDate>Tue, 25 Apr 2017 15:50:41 +0000</pubDate><guid>http://0x3f.org/posts/the-best-practice-of-logging-in-api-programming/</guid><description>解决什么问题 快速定位日志 降低记录成本 提高代码可读性 日志框架是项目开始阶段应该最先搭建好的内容之一，有助于极大地节约以后解决问题的时间和成本。但这也是最让我头疼的问题之一，因为记日志不光包括用什么记、怎么记，也包括记什么内容，这恰恰是最容易被忽略的问题。
一条好的日志需要做到能让问题的跟踪者快速定位它在程序中的位置且包含关键数据。工作中不乏这样的团队成员，在移交接口问题的时候没有主动提供关键信息的意识，所谓关键信息，是指像问题发生的环境、接口名、传递的实参和返回结果这样的内容，使得面向契约编程本来是很好的开发模式，却得不到最好的应用。这时我们可以从自己接口的日志中得到一些弥补。
但是日志的记录不应该占用很大的代码量，一来降低了代码的可读性，二来会耗费太多的时间精力。
本文目的在于讨论一种日志记录的最佳实践方式，使得可以兼顾以上这些问题。
实践 这里针对Laravel实现一个日志工具类，实现以下功能：
兼容Laravel自己的日志系统 自动记录关键的业务数据 自动记录日志所属的接口名 自动记录接口的实参 记录接口的返回值 生成简洁规范的日志内容 代码：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 &amp;lt;?</description></item></channel></rss>