<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>最佳实践 - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link><description>最佳实践 - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 19 Feb 2020 21:48:15 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/" rel="self" type="application/rss+xml"/><item><title>改变 Vim 模式时自动切换输入法的方法</title><link>http://0x3f.org/post/auto-switch-input-method-while-changing-vim-mode/</link><pubDate>Wed, 19 Feb 2020 21:48:15 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/auto-switch-input-method-while-changing-vim-mode/</guid><description><![CDATA[<p>VS Code的Vim插件有个很贴心的功能，可以在切换到普通模式时自动切换到英文输入法，而当切换回插入模式时再换到此前的输入法。</p>
<p>设置的方法很简单。先安装<a href="https://github.com/daipeihust/im-select" target="_blank" rel="noopener noreffer">im-select</a>，然后配置如下（macOS）：</p>
<p></p>
<p>当然，在Vim里也可以利用im-select实现这个功能。</p>
]]></description></item><item><title>在 VS Code 中快速创建 PHPUnit 测试类的方法</title><link>http://0x3f.org/post/quickly-create-phpunit-test-cases-with-vscode/</link><pubDate>Tue, 18 Feb 2020 22:49:45 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/quickly-create-phpunit-test-cases-with-vscode/</guid><description><![CDATA[<p>通过单元测试解决问题或者调试代码，可以避开错综复杂的依赖关系、直击问题的核心，从而极大地节约时间、提高效率。</p>
<p>但是，当创建测试类成为一个经常发生的操作时，每次都手动创建类、引入基类、添加测试方法就显得很烦琐。我需要这样一个解决方案，让我可以立即开始着手写测试代码。</p>
<h2 id="方案一文件模板">方案一：文件模板</h2>
<p>通过VS Code的插件<a href="https://marketplace.visualstudio.com/items?itemName=yongwoo.template" target="_blank" rel="noopener noreffer">Template</a>，可以实现把事先准备好的一个测试类文件模板复制到工程目录下。</p>
<p>安装完后，第一次执行<code>Template: Create New</code>命令会在当前工程根目录下创建文件“template.config.js”和目录“.templates”。</p>
<p>在“.templates”中创建测试类模板文件，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>

<span class="k">namespace</span> <span class="nx">Tests</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Tests\TransactionalTestCase</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">AnyTest</span> <span class="k">extends</span> <span class="nx">TransactionalTestCase</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">testAnything</span><span class="p">()</span>
    <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>下次再执行Template的命令或者侧边栏文件管理器中的右键菜单项时，就可以选择该模板了。</p>
<p>Template有个很大的短板，目前的版本还不支持全局模板，每个工程下都维护一套模板还是很烦琐的。</p>
<h2 id="方案二代码片断">方案二：代码片断</h2>
<p>代码片断（以下统称Snippet）可能是VS Code做得最烂的一个功能，我曾无数次泪流满面地回想起有Vim和UltiSnips相伴的美好时光。</p>
<p>解决方案是这样的：</p>
<p>先通过插件<a href="https://marketplace.visualstudio.com/items?itemName=sleistner.vscode-fileutils" target="_blank" rel="noopener noreffer">File Utils</a>的<code>File: New File Relative to Project Root</code>命令在工程目录下创建一个空白文件（如AnyTest.php）。然后再通过Snippet快速插入测试类的脚手架代码。</p>
<p>这里有一个问题，VS Code的PHP Snippet只有在<code>&lt;?php</code>标签之内才能生效，所以如果创建一个针对PHP语言的Snippet，在上面创建的这个空白文件里是无法触发的。</p>
<p>VS Code的Snippet总体上分为工程和通用两类，所谓工程类（Project Snippet Scope），就是只对当前工程生效，存储在工程根目录下的“.vscode”目录中。通用类（Language Snippet Scope）是我们平时最常用的，对所有工程都会生效。它又分为语言和全局两种。语言类（Language Snippet File）是针对具体的语言定义的Snippet集合，文件名为语言名称，后缀是“.json”，如“php.json”。全局类（Global Snippet File）通常是不受限于语言的，当然也可以指定单个Snippet对哪些语言启用，文件名随意，后缀是“.code-snippets”。</p>
<p>因此，测试类脚手架代码的Snippet不能定义在“php.json”中，而应放在“global.code-snippets”里：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-JSON" data-lang="JSON"><span class="s2">&#34;PHPUnit：新测试类&#34;</span><span class="err">:</span> <span class="p">{</span>
    <span class="nt">&#34;prefix&#34;</span><span class="p">:</span> <span class="s2">&#34;newcase&#34;</span><span class="p">,</span>
    <span class="nt">&#34;body&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&#34;&lt;?php&#34;</span><span class="p">,</span>
        <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="s2">&#34;namespace Tests${1:\\\\${2:SubNameSpace}};&#34;</span><span class="p">,</span>
        <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="s2">&#34;use Tests\\\\${3|TransactionalTestCase,TestCase|};&#34;</span><span class="p">,</span>
        <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="s2">&#34;class ${TM_FILENAME_BASE} extends $3&#34;</span><span class="p">,</span>
        <span class="s2">&#34;{&#34;</span><span class="p">,</span>
        <span class="s2">&#34;    $0&#34;</span><span class="p">,</span>
        <span class="s2">&#34;}&#34;</span>
    <span class="p">],</span>
    <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;PHPUnit：新测试类&#34;</span><span class="p">,</span>
    <span class="nt">&#34;scope&#34;</span><span class="p">:</span> <span class="s2">&#34;html,php&#34;</span><span class="p">,</span>
<span class="p">}</span><span class="err">,</span>
</code></pre></td></tr></table>
</div>
</div><p>这里通过选项“scope”设定只对“html”和“php”两种语言生效，注意如果只设定“php”也是只能在<code>&lt;?php</code>标签内才能生效的。</p>]]></description></item><item><title>用Github当图床</title><link>http://0x3f.org/post/take-github-as-image-hosting-service/</link><pubDate>Thu, 06 Feb 2020 22:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/take-github-as-image-hosting-service/</guid><description><![CDATA[<p>微博图床的域名不知道什么时候改了，Google找不到相关信息，经过排查发现原域名中的“ws”改成了“wx”，浪费了不少时间。</p>
<p>于是打算换图床。</p>
<p>Github自从去年扩大免费账户享受的权利后，单个仓库的大小没有硬性限制，很适合做图床。</p>
<p>uPic是个很好用的图床辅助工具，支持Github。</p>
<p></p>
<p>同类工具还有PicGo。</p>]]></description></item><item><title>用C4-PlantUML画软件架构图</title><link>http://0x3f.org/post/design-software-architecture-with-c4-plantuml/</link><pubDate>Fri, 17 Jan 2020 17:29:24 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/design-software-architecture-with-c4-plantuml/</guid><description><![CDATA[<p><a href="https://c4model.com" target="_blank" rel="noopener noreffer">C4 Model</a>是一种简洁有序的架构模型，四个“C”分别表示“Context”、“Container”、“Component”和“Code”，是由上而下逐步细化的四个层级。</p>
<p>Contex即上下文，它表示我们正在构架的软件系统和用户、其它系统之间的关系。例如：</p>
<p><figure><a class="lightgallery" href="https://www.plantuml.com/plantuml/svg/0/TLHBRzim3BxxLt2vD0NIP8UTTceUnbeiZo8F53qPYaB7GcJ9a-IcmR3_FigE4xjrSeh8Z-H7ygCVhMF6vQaClWd5PRx3t4X8dClipy70i6D_BroIRtEBXclbKBa-r-bWAJWpEpqNcA4SZ7yyl4Yct6Os7QJCEZHaYiOU_-7wcKz_1xcYm9GIW4iGOYsbFWgr1oaK0bCxQBY5iVHF0nK6gJcJyaGvAfBmENrmDns-BJRhQBruYIQBr_d5C5n5gz_XUln4uMVJw_FwAPg6lyBv90YSS19XTIBMAKo9X-KiGzW9jZSi9Pu6Hc8F8wOEa4aU12zeh5PTdbkdKpGzw9GM9WkGRsbyzdN8EOGA2JekUjiIgWT7cYjaLQIt0UDSvyhPVkS-24BgpcH6M8n6PDqnS-hoxvImpgPp3ty3e5_9lxij2KIsU1BusMTHw2xKIc11p2_0NjXPF-rtWKSGYffEcHDQ0TlglDY8C4sElM9bAJiWPEpazrRIlfA9mW_NPSwp6AvdjohwCUn8Py2PJNo6JmbI9kIrdV31ly5UcbZJF4NH8mrn9hZHLiSEmW-UCBL7m7f06q5ogvWMZPHiLlrlcTRAQOCMI8VL6ZaPu3pmbfbTkkpLPkOCKvPn3wCNEdwXL6gee5H5HdHpxu9xPfMWO5MQOELO77VgdZCOhFSKOnNg8hTgiBKgMyOFaOxZii28Nh0eNjVSmrqgbB14kkoB5cxpBDF6tQxoBmYMAACvYdsorQPs9b-qkR5eASB3bpLSAPdNiovi8Gpw353e6Uovrl1DXQoGBlYyTYymFz_F5Le6FBG72tzojCLgV9mN5qhC4gsmIZBvSc2tYpSeByj3g8kjqNrBsZRWf4KRDw2Rve9RKC6KdIXZGQnPl-chIjuNnatp8g_EH-gTliJ_0G00" title="System Landscape diagram for Big Bank plc" data-thumbnail="https://www.plantuml.com/plantuml/svg/0/TLHBRzim3BxxLt2vD0NIP8UTTceUnbeiZo8F53qPYaB7GcJ9a-IcmR3_FigE4xjrSeh8Z-H7ygCVhMF6vQaClWd5PRx3t4X8dClipy70i6D_BroIRtEBXclbKBa-r-bWAJWpEpqNcA4SZ7yyl4Yct6Os7QJCEZHaYiOU_-7wcKz_1xcYm9GIW4iGOYsbFWgr1oaK0bCxQBY5iVHF0nK6gJcJyaGvAfBmENrmDns-BJRhQBruYIQBr_d5C5n5gz_XUln4uMVJw_FwAPg6lyBv90YSS19XTIBMAKo9X-KiGzW9jZSi9Pu6Hc8F8wOEa4aU12zeh5PTdbkdKpGzw9GM9WkGRsbyzdN8EOGA2JekUjiIgWT7cYjaLQIt0UDSvyhPVkS-24BgpcH6M8n6PDqnS-hoxvImpgPp3ty3e5_9lxij2KIsU1BusMTHw2xKIc11p2_0NjXPF-rtWKSGYffEcHDQ0TlglDY8C4sElM9bAJiWPEpazrRIlfA9mW_NPSwp6AvdjohwCUn8Py2PJNo6JmbI9kIrdV31ly5UcbZJF4NH8mrn9hZHLiSEmW-UCBL7m7f06q5ogvWMZPHiLlrlcTRAQOCMI8VL6ZaPu3pmbfbTkkpLPkOCKvPn3wCNEdwXL6gee5H5HdHpxu9xPfMWO5MQOELO77VgdZCOhFSKOnNg8hTgiBKgMyOFaOxZii28Nh0eNjVSmrqgbB14kkoB5cxpBDF6tQxoBmYMAACvYdsorQPs9b-qkR5eASB3bpLSAPdNiovi8Gpw353e6Uovrl1DXQoGBlYyTYymFz_F5Le6FBG72tzojCLgV9mN5qhC4gsmIZBvSc2tYpSeByj3g8kjqNrBsZRWf4KRDw2Rve9RKC6KdIXZGQnPl-chIjuNnatp8g_EH-gTliJ_0G00" data-sub-html="<h2>System Landscape diagram for Big Bank plc</h2><p>System Landscape diagram for Big Bank plc</p>">
        
    </a><figcaption class="image-caption">System Landscape diagram for Big Bank plc</figcaption>
    </figure></p>
<p>容器（Container）把关注点放在被架构的系统本身，显示组成系统的容器（例如：APP、Web端、API、微服务、数据库等）及彼此之间的关系。例如：</p>
<p><figure><a class="lightgallery" href="https://www.plantuml.com/plantuml/svg/0/bLN1Zjf84BtxAsh98KJo35ffJtiA0sXdae7nZfcTv6ILsmMqqkwskjiG5Es_RxMn0KEKP3dPHTMhrwzUjTyxZzRNfOf-argekg3QAjXuNxa_HoEBkzkrz9iwhnrPORGdxM-5AKVFKg0jp49IHMeq-UCcKQZzo_nnLABpP3cKJJWVfIPxMuK6Rw7MN5eo1FWDmSeePNPIhq5n4g0keFUtj8wV371hK4QWKdl6w6Z2TOFeSVpvwMMPBP-IRFhqkeZUje5ncgKVPyl9FTUteTU7vNtsEFjhjfX6aPTUCM271eN4jSMI6Lfuu3DRJHxkK7y9PDCzdw-CeeIiCteeQkTDIJQ6oV5fC8Ok36RLd2RdwXXsh2LKJI6g9WOeXAcrTuDtKNI0pkuuKA3T3yNlZ7L9OF0ElaN0loFVuOxo3AkAaryfXt5LAPwEbqOFEFG1jnX3Mjb0VlxF9CIcfEIMQJJKs05U2cYdsymXX8zzy-xWoPX9zZkxYh47AV-jw2R1DONkNTTKM5dv6CPwNIkq8PnOivK5EU1fVh_BYaqIgAEIVX_6B-f6I0TRYQ54Mk3pGcxDZZrvnQWqkLJKoZ5lNZfEapSnVC8IMOa-5pPWAJqLuEhSCPTsPh_2pLsHEn20WhPIq2MzQJuiq6EEZi8OsiV09ltx4NhltbZc5lOEBAsbynQvDKZDhYoRwSQmuUG2i6PN2Ki5Zq-YSd4m5Jd7MxFc5_BYzagc7CKNqWNh98DVauVlssPgECsUwdgw_KIV80a3S-j_ZzQUVVL3Ab6gp3K1XflTpFczNQk0lsJfPGFDEpANmXfdLXvcNyK6DJliKCcmPvWjWnCgO-eLxp1TxEsPjC62xQG51uwdE5COC3UrFuqvFgvh33mFxR0vxqdaw9dKsPLmMimNHoxqlbykavGJ-tc7DVfnJi_OJUgXNROWkTxavkmQEC1rIzuYDS7-sBk6wFPQnF0XVLgCpfkVj_nVbTaTPv-8dIpVHtacB1oih2cRMsTdUGdvJZ81kGMUtaswSmRCCpqkR9Goh0Ew2T46uqJamd5z3lswseKRzjW-dI-J5kXuc5xvbUywOKBzg5Nd4tyLEt7USob_g_u3" title="Container diagram for Internet Banking System" data-thumbnail="https://www.plantuml.com/plantuml/svg/0/bLN1Zjf84BtxAsh98KJo35ffJtiA0sXdae7nZfcTv6ILsmMqqkwskjiG5Es_RxMn0KEKP3dPHTMhrwzUjTyxZzRNfOf-argekg3QAjXuNxa_HoEBkzkrz9iwhnrPORGdxM-5AKVFKg0jp49IHMeq-UCcKQZzo_nnLABpP3cKJJWVfIPxMuK6Rw7MN5eo1FWDmSeePNPIhq5n4g0keFUtj8wV371hK4QWKdl6w6Z2TOFeSVpvwMMPBP-IRFhqkeZUje5ncgKVPyl9FTUteTU7vNtsEFjhjfX6aPTUCM271eN4jSMI6Lfuu3DRJHxkK7y9PDCzdw-CeeIiCteeQkTDIJQ6oV5fC8Ok36RLd2RdwXXsh2LKJI6g9WOeXAcrTuDtKNI0pkuuKA3T3yNlZ7L9OF0ElaN0loFVuOxo3AkAaryfXt5LAPwEbqOFEFG1jnX3Mjb0VlxF9CIcfEIMQJJKs05U2cYdsymXX8zzy-xWoPX9zZkxYh47AV-jw2R1DONkNTTKM5dv6CPwNIkq8PnOivK5EU1fVh_BYaqIgAEIVX_6B-f6I0TRYQ54Mk3pGcxDZZrvnQWqkLJKoZ5lNZfEapSnVC8IMOa-5pPWAJqLuEhSCPTsPh_2pLsHEn20WhPIq2MzQJuiq6EEZi8OsiV09ltx4NhltbZc5lOEBAsbynQvDKZDhYoRwSQmuUG2i6PN2Ki5Zq-YSd4m5Jd7MxFc5_BYzagc7CKNqWNh98DVauVlssPgECsUwdgw_KIV80a3S-j_ZzQUVVL3Ab6gp3K1XflTpFczNQk0lsJfPGFDEpANmXfdLXvcNyK6DJliKCcmPvWjWnCgO-eLxp1TxEsPjC62xQG51uwdE5COC3UrFuqvFgvh33mFxR0vxqdaw9dKsPLmMimNHoxqlbykavGJ-tc7DVfnJi_OJUgXNROWkTxavkmQEC1rIzuYDS7-sBk6wFPQnF0XVLgCpfkVj_nVbTaTPv-8dIpVHtacB1oih2cRMsTdUGdvJZ81kGMUtaswSmRCCpqkR9Goh0Ew2T46uqJamd5z3lswseKRzjW-dI-J5kXuc5xvbUywOKBzg5Nd4tyLEt7USob_g_u3" data-sub-html="<h2>Container diagram for Internet Banking System</h2><p>Container diagram for Internet Banking System</p>">
        
    </a><figcaption class="image-caption">Container diagram for Internet Banking System</figcaption>
    </figure></p>
<p>组件（Component）把一个容器放大，拆分成不同的抽象逻辑，这一层级已经涉及代码层面的内容。例如：</p>
<p><figure><a class="lightgallery" href="https://www.plantuml.com/plantuml/svg/0/fLLDRnen4BtlhvXoQ45AmgMddaf8sYJA1mBIZnEQzGwBMt-iR2yKLVtl7Nk1NPAeYjHSuXsFPzwyzsm--e0kr5fbRwGHgYweTWfM8LJ-mt3eS7DMoh2gyzgJ4zO4Ck5CM3sSIe6kiFUIAbB3yVlJYK8J7kzkXnfz8CUXnTZgoffueeeDta5j-AZc08GLmT8gPJVIbA2a8K1JmD6sT9vN5hWrA2jGgItNsCE4vmsosz7tXyVvuklr_6fnU_dvylwYFyYo88FYz7qk519BXvhxExZcYPoX0ETeVaOeiosZrt0AeyarZAfAyPn1MfDbOvuU6QZh-mfFe3VZTAuxmPAwYJtU-e5hzCB9AgIfq9IrGXTt9iwkPK4UU9eqfTm3o7S0banIh8DAXcqSNzG-M4tEmrfYF2CTR2Y7tDaDYtBM6tIWwOZipkPI9L2nvJVKwAGvxiwKQnce05_ddhlRy1zeTDDlzw-WjHHq1EiYxnSvzx_0W3bwYbYcfB2f3FimpCIADCRTMR2ESKRNWQDI-k1IDYDasNHQdy0A_Ofdm9fncB0J08IZ8dwYyYU0Gf3tx9-IFoY8YAlHU77vA_HrxYDXZ7B9bg0dDkWWYNhPPI99SE10K0SFO6xhq3AKcjlQ15unVECnKTdYQ0bQd7DUWMxRnqfoqoVcwmtWTmRyTp1ntylI91EMXaqCiPBZ-qJ9PNTVnZ0blZs7S8oEudLhEFLHobY2ySVbYzhxXeF1ayxjKBtHRWcpMhF9jg-2SJ1XQwKDFp7iISzLB5TfU6PZHIG74fy1yIHgnxQCDEoMxMwIhd9nZdF2O_SVczf58xAB4YEcR4Gz0R72vgD2xpVM5Qrknp3OGaiKMD0_Z0IVKiOBe4RG70QcgD517seS2v4S4rlppTd9ts7WqTEUeRZVYjI5zoIfFPvkvvImWBUmuH0n6n7TpSNvk7EWKwkvEAbWV6FutR-QpoSpJlwJPQbuV2HtBjsdtSmUxWzvXwIEeLvCJ9dw5TNqAufz95FmRyLV" title="Component diagram for Internet Banking System - API Application" data-thumbnail="https://www.plantuml.com/plantuml/svg/0/fLLDRnen4BtlhvXoQ45AmgMddaf8sYJA1mBIZnEQzGwBMt-iR2yKLVtl7Nk1NPAeYjHSuXsFPzwyzsm--e0kr5fbRwGHgYweTWfM8LJ-mt3eS7DMoh2gyzgJ4zO4Ck5CM3sSIe6kiFUIAbB3yVlJYK8J7kzkXnfz8CUXnTZgoffueeeDta5j-AZc08GLmT8gPJVIbA2a8K1JmD6sT9vN5hWrA2jGgItNsCE4vmsosz7tXyVvuklr_6fnU_dvylwYFyYo88FYz7qk519BXvhxExZcYPoX0ETeVaOeiosZrt0AeyarZAfAyPn1MfDbOvuU6QZh-mfFe3VZTAuxmPAwYJtU-e5hzCB9AgIfq9IrGXTt9iwkPK4UU9eqfTm3o7S0banIh8DAXcqSNzG-M4tEmrfYF2CTR2Y7tDaDYtBM6tIWwOZipkPI9L2nvJVKwAGvxiwKQnce05_ddhlRy1zeTDDlzw-WjHHq1EiYxnSvzx_0W3bwYbYcfB2f3FimpCIADCRTMR2ESKRNWQDI-k1IDYDasNHQdy0A_Ofdm9fncB0J08IZ8dwYyYU0Gf3tx9-IFoY8YAlHU77vA_HrxYDXZ7B9bg0dDkWWYNhPPI99SE10K0SFO6xhq3AKcjlQ15unVECnKTdYQ0bQd7DUWMxRnqfoqoVcwmtWTmRyTp1ntylI91EMXaqCiPBZ-qJ9PNTVnZ0blZs7S8oEudLhEFLHobY2ySVbYzhxXeF1ayxjKBtHRWcpMhF9jg-2SJ1XQwKDFp7iISzLB5TfU6PZHIG74fy1yIHgnxQCDEoMxMwIhd9nZdF2O_SVczf58xAB4YEcR4Gz0R72vgD2xpVM5Qrknp3OGaiKMD0_Z0IVKiOBe4RG70QcgD517seS2v4S4rlppTd9ts7WqTEUeRZVYjI5zoIfFPvkvvImWBUmuH0n6n7TpSNvk7EWKwkvEAbWV6FutR-QpoSpJlwJPQbuV2HtBjsdtSmUxWzvXwIEeLvCJ9dw5TNqAufz95FmRyLV" data-sub-html="<h2>Component diagram for Internet Banking System - API Application</h2><p>Component diagram for Internet Banking System - API Application</p>">
        
    </a><figcaption class="image-caption">Component diagram for Internet Banking System - API Application</figcaption>
    </figure></p>
<p>而抽象逻辑内部代码之间的关系由Code这一层展示。</p>
<p><a href="https://github.com/RicardoNiepel/C4-PlantUML" target="_blank" rel="noopener noreffer">C4-PlantUML</a>是为PlantUML封装的一套模板，用来画C4架构图既美观又方便。下面是我画的样子：</p>
<p><figure><a class="lightgallery" href="https://www.plantuml.com/plantuml/svg/0/jLXVJzjM57_Ff_3oKYAnvcLFUse7Q7Ib445GDMcIPHmRh3fsP3ljq5I9m4ef8v0MwDgDjGqjRRKL1rG68H7amyptElaMkzVNyP_43cPXUOXkxZs_txddt7FEFJStL8rHj7nMZCM-42HMp6SuQaxJSkhNoQJ2FBW-AsXp-PcyoYciB6cSf5rdvMnoKc0P9IEF2roE4vD3NtsP4Xb9cxupbimogiOfQ8eUGlAC877AzHoclqRb9GJD8WfAc-CeNXP5-O4WpL8Y4g8OAKFvbWL5HIEPGgefKMOPKPn77CuUknN4ncv-Fp6TfjCJANfuukuuahPdRaxHKxT7qaEZ0mbtykwjz2WzDlBjoFWmcevfWYPob57x03OBIQFs3hxOJ3QFTi5g6VvTCAg_uS6hO_ZgvrWinIcgB0ta53cJPpKwoqZCBASCsc2plc6MbXDjAJQlQdAMKsX6LGNaQqaRf82-2tUAtI8E4nPOEUbWObXMpak4WUoilKIF_AWvB6sqRp73gSAiX1UR-dbJBuFg2h9v11seabC4bQE_GTGPHfaVU20hzsOuYPqRfEBWPCyusm4R1_44zLECGf-fUNIwMLUwxGEMmrG8GdnWLFT1Oyb1uOzpM0CvbkOLAvOoMCUJelbN9Ov6tp7t6PLLX1ooxwQa3LjRZZiYhVAf-RiUJmGppZ3iFPkmj6uJfaPJWzHO7eLKt9c7wtjWusqGo_0Cviam6ZF3g5o7AN3x01PrKDl4JAqNZTRZDQFsr9qbV0zZWKvYbIn23KtU2N48MhzgZs3AAt499lBu11dHbojuGM8abdFZXGHoptZXhpnU-2kA5zuNBrvJeZhfON0Iec97eufxNs0v5M_bN4Vr0f67vg57k4FIRxajHzjvwqIv3UfsmigoULZ_Pw4mbPh6txUd0ntQfaMb6Nl2h3NCezqmJh9gwcLKt13d3n8ehS7zFVFJ9wFw13u_TMAifoevbvFHlIK9sZpUv_OotAc5Mc6jzglHBR1nKc53rP7gRQdhpOXc5COw1b1QmPiAOxHM-tQPaY4vf--2udQOBhAAj83z4Xdt9BKpsed_C5guLJ7gBu1UXc-gY1nk7SDFvwtDusPv3HJBZcbmesIk7pXYnjdBrkuVw0Q61qVeP-ljEbp_q7C_agm9F0u9nDHQVXRgqOsdhOM2-NhVQ9HxycdCB2PxyzZSFm-DQ6ltHCQi7u7QUso9zTCPW6The7BQF2o3Hv-RXItqRNwkzowMCkg355yTU7GCzAM01BUH-APNLHbB5hVDnLFpPHsSUO_FAsVRXpixRCBMHpUYUmAuB2E8kAejwaRzs8Umwjcr__n1lHdPXd7MG0E04lfbfH--IKxixjByxKTJRxH-rV4XZgRJgIba20O5DMqTj_G5G4TT99YtjUFPoyb7Kj2P7PvQHdA0P4k7j7tK7c7xq8E4szHkgnc1sYFSGTrV77bxjpuZY9xqTwo-PhDPEO67YrOtCZKndiGkjmtrOKXIskdO8UpgS6ZzVQYh8psKIjxoA700NdxufjpwSoraIowYgn7eQKeNpYuRyFLUix9hPoqwwaAboxo-pX5TRFqVdpz3_ArnkDL-L8GJz15tzCqXP-Y3H3j4FyJVTy7D8dglaVugCjRVI14AqZ15L-yM21jlTK3HyMuVPEEjVYUw2NPZGy1sqn8L73cIGndS728aTl6v78cdZ-ePabr0f-7njJHHqUtRd8193RxQ5FO-Y_hFPT_jo4ShnVmbIx6NbezIYlbBbsAUxIiBWk1E4bWnI9A0n21SUMuqTBXrIYRDrMEuK8XAUwdq23JBKnmi4b8SBaSI9Jk2S96J8mZy_-S6g2w1muK-EKxUeuT5wwo4_zfavkdXNlSy_lyJhgvwdpFeOU9zkS6jSx1oW5-MjJNqDeiHogvIvtaU9IwI8OTmeLWxK2uKj8F1jWMyUzvQ-cY_NwpDmvq5e_eBUXPt45bFkNR7cGXQTBVWEDEV1xxGI3X2dHK6uM-WSJuh_Wi0" title="产品 交易 财务流业务架构" data-thumbnail="https://www.plantuml.com/plantuml/svg/0/jLXVJzjM57_Ff_3oKYAnvcLFUse7Q7Ib445GDMcIPHmRh3fsP3ljq5I9m4ef8v0MwDgDjGqjRRKL1rG68H7amyptElaMkzVNyP_43cPXUOXkxZs_txddt7FEFJStL8rHj7nMZCM-42HMp6SuQaxJSkhNoQJ2FBW-AsXp-PcyoYciB6cSf5rdvMnoKc0P9IEF2roE4vD3NtsP4Xb9cxupbimogiOfQ8eUGlAC877AzHoclqRb9GJD8WfAc-CeNXP5-O4WpL8Y4g8OAKFvbWL5HIEPGgefKMOPKPn77CuUknN4ncv-Fp6TfjCJANfuukuuahPdRaxHKxT7qaEZ0mbtykwjz2WzDlBjoFWmcevfWYPob57x03OBIQFs3hxOJ3QFTi5g6VvTCAg_uS6hO_ZgvrWinIcgB0ta53cJPpKwoqZCBASCsc2plc6MbXDjAJQlQdAMKsX6LGNaQqaRf82-2tUAtI8E4nPOEUbWObXMpak4WUoilKIF_AWvB6sqRp73gSAiX1UR-dbJBuFg2h9v11seabC4bQE_GTGPHfaVU20hzsOuYPqRfEBWPCyusm4R1_44zLECGf-fUNIwMLUwxGEMmrG8GdnWLFT1Oyb1uOzpM0CvbkOLAvOoMCUJelbN9Ov6tp7t6PLLX1ooxwQa3LjRZZiYhVAf-RiUJmGppZ3iFPkmj6uJfaPJWzHO7eLKt9c7wtjWusqGo_0Cviam6ZF3g5o7AN3x01PrKDl4JAqNZTRZDQFsr9qbV0zZWKvYbIn23KtU2N48MhzgZs3AAt499lBu11dHbojuGM8abdFZXGHoptZXhpnU-2kA5zuNBrvJeZhfON0Iec97eufxNs0v5M_bN4Vr0f67vg57k4FIRxajHzjvwqIv3UfsmigoULZ_Pw4mbPh6txUd0ntQfaMb6Nl2h3NCezqmJh9gwcLKt13d3n8ehS7zFVFJ9wFw13u_TMAifoevbvFHlIK9sZpUv_OotAc5Mc6jzglHBR1nKc53rP7gRQdhpOXc5COw1b1QmPiAOxHM-tQPaY4vf--2udQOBhAAj83z4Xdt9BKpsed_C5guLJ7gBu1UXc-gY1nk7SDFvwtDusPv3HJBZcbmesIk7pXYnjdBrkuVw0Q61qVeP-ljEbp_q7C_agm9F0u9nDHQVXRgqOsdhOM2-NhVQ9HxycdCB2PxyzZSFm-DQ6ltHCQi7u7QUso9zTCPW6The7BQF2o3Hv-RXItqRNwkzowMCkg355yTU7GCzAM01BUH-APNLHbB5hVDnLFpPHsSUO_FAsVRXpixRCBMHpUYUmAuB2E8kAejwaRzs8Umwjcr__n1lHdPXd7MG0E04lfbfH--IKxixjByxKTJRxH-rV4XZgRJgIba20O5DMqTj_G5G4TT99YtjUFPoyb7Kj2P7PvQHdA0P4k7j7tK7c7xq8E4szHkgnc1sYFSGTrV77bxjpuZY9xqTwo-PhDPEO67YrOtCZKndiGkjmtrOKXIskdO8UpgS6ZzVQYh8psKIjxoA700NdxufjpwSoraIowYgn7eQKeNpYuRyFLUix9hPoqwwaAboxo-pX5TRFqVdpz3_ArnkDL-L8GJz15tzCqXP-Y3H3j4FyJVTy7D8dglaVugCjRVI14AqZ15L-yM21jlTK3HyMuVPEEjVYUw2NPZGy1sqn8L73cIGndS728aTl6v78cdZ-ePabr0f-7njJHHqUtRd8193RxQ5FO-Y_hFPT_jo4ShnVmbIx6NbezIYlbBbsAUxIiBWk1E4bWnI9A0n21SUMuqTBXrIYRDrMEuK8XAUwdq23JBKnmi4b8SBaSI9Jk2S96J8mZy_-S6g2w1muK-EKxUeuT5wwo4_zfavkdXNlSy_lyJhgvwdpFeOU9zkS6jSx1oW5-MjJNqDeiHogvIvtaU9IwI8OTmeLWxK2uKj8F1jWMyUzvQ-cY_NwpDmvq5e_eBUXPt45bFkNR7cGXQTBVWEDEV1xxGI3X2dHK6uM-WSJuh_Wi0" data-sub-html="<h2>产品 交易 财务流业务架构</h2><p>产品 交易 财务流业务架构</p>">
        
    </a><figcaption class="image-caption">产品 交易 财务流业务架构</figcaption>
    </figure></p>
<p>和上面的例子相比，好像不太适合画较复杂的架构，布局不太好处理，另外连线太多容易重叠在一块傻傻分不清楚。</p>]]></description></item><item><title>用鼠须管输入日期时间的方法</title><link>http://0x3f.org/post/input-date-and-time-with-rime/</link><pubDate>Wed, 08 Jan 2020 13:52:49 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/input-date-and-time-with-rime/</guid><description><![CDATA[<p>原来在Linux下用小小输入法，输入日期时间很方便。换到Mac后，很早就在关注这个问题，直到后来鼠须管实现了嵌入Lua脚本的功能才得以解决。</p>
<p>在“用户设定”目录下创建文件<code>rime.lua</code>，内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lua" data-lang="lua"><span class="kr">function</span> <span class="nf">date_translator</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="n">seg</span><span class="p">)</span>
    <span class="kr">if</span> <span class="p">(</span><span class="n">input</span> <span class="o">==</span> <span class="s2">&#34;date&#34;</span><span class="p">)</span> <span class="kr">then</span>
       <span class="c1">--- Candidate(type, start, end, text, comment)</span>
       <span class="n">yield</span><span class="p">(</span><span class="n">Candidate</span><span class="p">(</span><span class="s2">&#34;date&#34;</span><span class="p">,</span> <span class="n">seg.start</span><span class="p">,</span> <span class="n">seg._end</span><span class="p">,</span> <span class="n">os.date</span><span class="p">(</span><span class="s2">&#34;%Y-%m-%d&#34;</span><span class="p">),</span> <span class="s2">&#34;日期&#34;</span><span class="p">))</span>
       <span class="n">yield</span><span class="p">(</span><span class="n">Candidate</span><span class="p">(</span><span class="s2">&#34;date&#34;</span><span class="p">,</span> <span class="n">seg.start</span><span class="p">,</span> <span class="n">seg._end</span><span class="p">,</span> <span class="n">os.date</span><span class="p">(</span><span class="s2">&#34;%Y年%m月%d日&#34;</span><span class="p">),</span> <span class="s2">&#34;日期&#34;</span><span class="p">))</span>
    <span class="kr">end</span>
    <span class="kr">if</span> <span class="p">(</span><span class="n">input</span> <span class="o">==</span> <span class="s2">&#34;time&#34;</span><span class="p">)</span> <span class="kr">then</span>
       <span class="c1">--- Candidate(type, start, end, text, comment)</span>
       <span class="n">yield</span><span class="p">(</span><span class="n">Candidate</span><span class="p">(</span><span class="s2">&#34;date&#34;</span><span class="p">,</span> <span class="n">seg.start</span><span class="p">,</span> <span class="n">seg._end</span><span class="p">,</span> <span class="n">os.date</span><span class="p">(</span><span class="s2">&#34;%H:%M&#34;</span><span class="p">),</span> <span class="s2">&#34;时间&#34;</span><span class="p">))</span>
       <span class="n">yield</span><span class="p">(</span><span class="n">Candidate</span><span class="p">(</span><span class="s2">&#34;date&#34;</span><span class="p">,</span> <span class="n">seg.start</span><span class="p">,</span> <span class="n">seg._end</span><span class="p">,</span> <span class="n">os.date</span><span class="p">(</span><span class="s2">&#34;%H:%M:%S&#34;</span><span class="p">),</span> <span class="s2">&#34;时间&#34;</span><span class="p">))</span>
    <span class="kr">end</span>
    <span class="kr">if</span> <span class="p">(</span><span class="n">input</span> <span class="o">==</span> <span class="s2">&#34;datetime&#34;</span><span class="p">)</span> <span class="kr">then</span>
       <span class="c1">--- Candidate(type, start, end, text, comment)</span>
       <span class="n">yield</span><span class="p">(</span><span class="n">Candidate</span><span class="p">(</span><span class="s2">&#34;date&#34;</span><span class="p">,</span> <span class="n">seg.start</span><span class="p">,</span> <span class="n">seg._end</span><span class="p">,</span> <span class="n">os.date</span><span class="p">(</span><span class="s2">&#34;%Y-%m-%d %H:%M:%S&#34;</span><span class="p">),</span> <span class="s2">&#34;日期时间&#34;</span><span class="p">))</span>
    <span class="kr">end</span>
 <span class="kr">end</span>
 
 <span class="c1">--- 过滤器：单字在先</span>
 <span class="kr">function</span> <span class="nf">single_char_first_filter</span><span class="p">(</span><span class="n">input</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">l</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="kr">for</span> <span class="n">cand</span> <span class="kr">in</span> <span class="n">input</span><span class="p">:</span><span class="n">iter</span><span class="p">()</span> <span class="kr">do</span>
       <span class="kr">if</span> <span class="p">(</span><span class="n">utf8.len</span><span class="p">(</span><span class="n">cand.text</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="kr">then</span>
          <span class="n">yield</span><span class="p">(</span><span class="n">cand</span><span class="p">)</span>
       <span class="kr">else</span>
          <span class="n">table.insert</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">cand</span><span class="p">)</span>
       <span class="kr">end</span>
    <span class="kr">end</span>
    <span class="kr">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">cand</span> <span class="kr">in</span> <span class="n">ipairs</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="kr">do</span>
       <span class="n">yield</span><span class="p">(</span><span class="n">cand</span><span class="p">)</span>
    <span class="kr">end</span>
 <span class="kr">end</span>
</code></pre></td></tr></table>
</div>
</div><p>然后在码表配置文件的“engine/translators”下追加<code>lua_translator@date_translator</code>。</p>
<p>最后，重新部署即可。</p>]]></description></item><item><title>AirPods Pro的使用感受</title><link>http://0x3f.org/post/the-expirence-of-airpods-pro/</link><pubDate>Tue, 05 Nov 2019 16:18:54 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/the-expirence-of-airpods-pro/</guid><description><![CDATA[<p>Bose QC35曾是带给我巨大幸福感的工具，并且三年来一直处于重度使用的状态。但是它的一些弱点，使得在某些细分场景下并不能得到很好的体验。首先是包耳式的设计在夏天会很热。其次，虽然有折叠的功能，但头戴式的设计对于日常通勤来说，还是不够便携。再次，QC35一代的降噪级别只能通过APP设置，很麻烦，所以我一直都保持默认开启状态，出于安全性考虑，不适合徒步或者骑行。</p>
<p>于是后来买了一副AirPods（以下简称AP）。高温和骑行的体验得以改善，但一直被通勤过程中北京公交糟糕的乘坐体验所困扰。其实在购买AP之前，更想买的是带降噪功能的耳塞，当时索尼的降噪豆一代才刚上市，评测普遍反馈体验不太好，而QC30的狗圈又让我完全接受不能，除此之外，在当时并无更多的选择。AP其实是权衡之后妥协的结果。</p>
<p>所以从看到AirPods Pro（以下简称APP）上市的消息到下单，并没有考虑太久。下单时提示可能一到两周才能到货，但其实第二天就发了货，次日到手。体验了几天，说说感受。</p>
<h1 id="降噪效果">降噪效果</h1>
<p>首先是最大的卖点，降噪。整体上不如QC35，但完全可以接受。</p>
<p>在主要的应用场景（通勤）下，对公交车、马路上的低频噪音过滤效果明显，戴上之后一秒钟，整个世界都安静了。仍然能听到较为清楚的人声，好处是可以听到报站声、避免坐过站，但旁边大声打电话的声音也会产生一定的干扰。</p>
<h1 id="佩戴舒适度">佩戴舒适度</h1>
<p>对APP主要的疑虑应该就是入耳式的设计。对于我来说，默认的中号耳塞确实会有明显的胀感，戴的时间稍长就会不舒服。换上小号之后好很多，可以长时间佩戴，但稳固度会受到一定影响。</p>
<h1 id="稳固度">稳固度</h1>
<p>我戴AP时，右耳容易松脱。APP的稳固度会好于AP，但吃东西时右耳仍然会松脱。而且换成小号耳塞也会影响到稳固度。</p>
<h1 id="操控体验">操控体验</h1>
<p>之前对APP捏的操控方式有些顾虑，担心会影响稳固度。实际体验下来没有那么严重，可能跟入耳式、柄较短和重心靠上有关。但还是会在每次操作后不自觉地扶一下。整体上操控比AP敲击的方式精准，但不如后者方便。</p>
<h1 id="音质和续航">音质和续航</h1>
<p>我不是个音乐发烧友，对音质不敏感。续航方面也没有过多关注。这两方面大致是Apple一贯的水准吧，和AP相比差不多。</p>
<h1 id="通话体验">通话体验</h1>
<p>我很少打电话，留做后补吧。</p>
<h1 id="结尾">结尾</h1>
<p>我曾<a href="/post/the-experience-of-bose-qc35/" rel="">说过</a>，我对耳机的核心需求是降噪、无线和舒适。AirPods Pro完全可以满足这样的需求。QC35仍是我降噪效果最好、佩戴最舒适的耳机，而APP会是通勤、高温场景下绝对的主力。至于AP，我想知道iOS 13的音频共享什么时候迁移到macOS上？</p>]]></description></item><item><title>PHP单元测试的技巧</title><link>http://0x3f.org/post/phpunit-tips/</link><pubDate>Tue, 13 Aug 2019 14:21:48 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/phpunit-tips/</guid><description><![CDATA[<p>以下是我平时写单元测试时总结的一些最佳实践，有些是和具体的框架强相关的。</p>
<h2 id="利用model-factory生成测试数据">利用Model Factory生成测试数据</h2>
<p>Laravel/Lumen的Model Factory是个很好的工具。</p>
<p>事先定义好主要对象的Model Factory，可以在写单元测试的代码时方便地生成临时数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">// 在数据库中创建一条发票的数据，并返回其Model的实例
$invoice = factory(\App\Models\Invoice::class)-&gt;create();
</code></pre></td></tr></table>
</div>
</div><p>此外，借助<a href="https://github.com/fzaninotto/Faker" target="_blank" rel="noopener noreffer">Faker</a>，可以为Model Factory定义仿真数据：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">$factory-&gt;define(\App\Models\Invoice::class, function () {
    $faker = Faker\Factory::create(&#39;zh_CN&#39;);
    $enFaker = Faker\Factory::create(&#39;en_US&#39;);

    return [
        &#39;user_id&#39;                      =&gt; 1,
        &#39;amount&#39;                       =&gt; 100,
        &#39;title&#39;                        =&gt; $faker-&gt;company,
        &#39;taxpayer_id&#39;                  =&gt; $faker-&gt;randomNumber(),
        &#39;bank&#39;                         =&gt; $faker-&gt;bank,
        &#39;account&#39;                      =&gt; $enFaker-&gt;bankAccountNumber,
        &#39;company_registration_address&#39; =&gt; $faker-&gt;address,
        &#39;company_registration_phone&#39;   =&gt; $faker-&gt;phoneNumber,
        &#39;consignee_name&#39;               =&gt; $faker-&gt;name,
        &#39;consignee_province&#39;           =&gt; $faker-&gt;state,
        &#39;consignee_city&#39;               =&gt; $faker-&gt;city,
        &#39;consignee_district&#39;           =&gt; $faker-&gt;citySuffix,
        &#39;consignee_address&#39;            =&gt; $faker-&gt;address,
        &#39;consignee_phone&#39;              =&gt; $faker-&gt;phoneNumber,
        &#39;zip_code&#39;                     =&gt; $faker-&gt;postcode,
        &#39;remark&#39;                       =&gt; $faker-&gt;text,
        &#39;status&#39;                       =&gt; 1,
    ];
});
</code></pre></td></tr></table>
</div>
</div><h2 id="只伪造被测单元所需的数据">只伪造被测单元所需的数据</h2>
<p>单元测试只关注被测单元本身，并不关注整体功能，所以无须保证测试数据的完整性。换言之，如果被测单元只用到了订单主表数据，就没必要创建一个包含子单、SPU/SKU、支付记录等在内的完整订单。</p>
<h2 id="利用dataprovider简化测试代码">利用dataProvider简化测试代码</h2>
<p>当多个测试用例逻辑相似时，可以把它们抽象成一个测试方法，并用dataProvider提供每个用例的数据和断言。从而使测试代码变得更为简洁、易懂和便于维护。</p>
<h2 id="单独测试被测单元的校验逻辑">单独测试被测单元的校验逻辑</h2>
<p>通常我们会用标准的IO模型实现一个方法，同时对包含校验不合法在内的异常情况抛出相应异常。</p>
<p>PHPUnit提供了expectException()系列方法用于断言异常的抛出。但由于代码抛出了异常、程序被中断，故无法在一次测试中对多个异常做断言。</p>
<p>因此，可以把对一个方法校验逻辑的测试单独抽象出一个测试方法，并用dataProvider提供测试数据和断言。</p>
<h2 id="利用工具查看代码覆盖率">利用工具查看代码覆盖率</h2>
<p>PHPUnit提供参数<code>--coverage-html</code>生成覆盖率分析结果的HTML页面，但在IDE或编辑器里相对实时地查看结果会更方便。</p>
<p>主流IDE或编辑器一般都集成了这个功能或提供了相关插件，如<a href="https://marketplace.visualstudio.com/items?itemName=ryanluker.vscode-coverage-gutters" target="_blank" rel="noopener noreffer">Coverage Gutters</a>。</p>]]></description></item><item><title>用ALE替换了Syntastic</title><link>http://0x3f.org/post/replace-syntastic-with-ale/</link><pubDate>Wed, 12 Dec 2018 20:42:10 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/replace-syntastic-with-ale/</guid><description><![CDATA[<p>习惯频繁地保存源码，但是每次保存都有明显的卡顿，于是用Vim自己的调优功能跟踪了一下。</p>
<p>依次执行以下命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">:profile start profile.log
:profile file *
:profile func *
</code></pre></td></tr></table>
</div>
</div><p>然后执行保存操作，再执行以下命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">:profile pause
:noautocmd qall!
</code></pre></td></tr></table>
</div>
</div><p>在当前目录下生成的文件profile.log里，看到执行时间最长的是Syntastic的函数，禁用这个扩展后保存果然比原来快多了。</p>
<p>但是Syntastic是个很有用的扩展，所以Google一下有没有异步执行的方法，偶然发现了ALE，主要特性就是异步执行。试用之后觉得很好用，就把前者卸了。</p>
<p>ALE的初始配置如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="c">&#34; ALE</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ale_sign_column_always</span> <span class="p">=</span> <span class="m">1</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ale_set_highlights</span> <span class="p">=</span> <span class="m">0</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">airline</span>#<span class="nx">extensions</span>#<span class="nx">ale</span>#<span class="nx">enabled</span> <span class="p">=</span> <span class="m">1</span><span class="err">
</span><span class="err"></span><span class="c">&#34;自定义error和warning图标</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ale_sign_error</span> <span class="p">=</span> <span class="s1">&#39;✗&#39;</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ale_sign_warning</span> <span class="p">=</span> <span class="s1">&#39;⚠&#39;</span><span class="err">
</span><span class="err"></span><span class="c">&#34; 显示Linter名称,出错或警告等相关信息</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ale_echo_msg_error_str</span> <span class="p">=</span> <span class="s1">&#39;E&#39;</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ale_echo_msg_warning_str</span> <span class="p">=</span> <span class="s1">&#39;W&#39;</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ale_echo_msg_format</span> <span class="p">=</span> <span class="s1">&#39;[%linter%] %s [%severity%]&#39;</span><span class="err">
</span><span class="err"></span><span class="c">&#34; PHP</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ale_php_phpcs_standard</span> <span class="p">=</span> <span class="s1">&#39;PSR2&#39;</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">ale_php_phpmd_ruleset</span> <span class="p">=</span> <span class="s1">&#39;~/.phpmd.xml&#39;</span><span class="err">
</span><span class="err"></span><span class="c">&#34; 普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告</span><span class="err">
</span><span class="err"></span><span class="nx">nmap</span> <span class="nx">sp</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">ale_previous_wrap</span><span class="p">)</span><span class="err">
</span><span class="err"></span><span class="nx">nmap</span> <span class="nx">sn</span> <span class="p">&lt;</span><span class="nx">Plug</span><span class="p">&gt;(</span><span class="nx">ale_next_wrap</span><span class="p">)</span><span class="err">
</span><span class="err"></span><span class="c">&#34; 触发/关闭语法检查</span><span class="err">
</span><span class="err"></span><span class="nx">nmap</span> <span class="p">&lt;</span><span class="nx">Leader</span><span class="p">&gt;</span><span class="nx">at</span> :<span class="nx">ALEToggle</span><span class="p">&lt;</span><span class="nx">CR</span><span class="p">&gt;</span><span class="err">
</span><span class="err"></span><span class="c">&#34; 查看错误或警告的详细信息</span><span class="err">
</span><span class="err"></span><span class="nx">nmap</span> <span class="p">&lt;</span><span class="nx">Leader</span><span class="p">&gt;</span><span class="nx">ad</span> :<span class="nx">ALEDetail</span><span class="p">&lt;</span><span class="nx">CR</span><span class="p">&gt;</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>配置鼠须管的特殊符号输入</title><link>http://0x3f.org/post/input-punctuations-with-rime/</link><pubDate>Sat, 13 Oct 2018 11:59:50 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/input-punctuations-with-rime/</guid><description><![CDATA[<p><em>开源工具最常见的问题就是文档不全，实现一个需求的时候只能苦苦Google，甚至连蒙带猜。这也是我逐渐倾向买用户体验更好的收费软件的原因。</em></p>
<p>鼠须管是自带特殊符号码表的，在用户配置目录中的<code>symbols.yaml</code>，但是有的码表需要手动配置。经过查资料和摸索，关键在于以下几项配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="k">punctuator</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">import_preset</span><span class="p">:</span><span class="w"> </span>symbols<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">recognizer</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">import_preset</span><span class="p">:</span><span class="w"> </span>default<span class="w">
</span><span class="w">  </span><span class="k">patterns</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">punct</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;^/([a-z]+|[0-9]0?)$&#34;</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>然后就可以通过<code>【/】+【编码】</code>的方式显示符号备选项了，具体的编码可以到<code>symbols.yaml</code>里看，当然一般为了方便定制该码表，会复制并重命名该文件，然后上述的配置项里也要做相应的修改。</p>
]]></description></item><item><title>鼠须管的美化</title><link>http://0x3f.org/post/beautify-squrrel-input-method/</link><pubDate>Sat, 21 Apr 2018 20:52:42 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/beautify-squrrel-input-method/</guid><description><![CDATA[<p>效果如下：
</p>
<p>尽管鼠须管的Github仓库一直在更新，但释出版已经很久没有更新了，所以下面的美化基于网络上个人编译的版本。<a href="https://scomper.me/gtd/-shu-xu-guan-de-diao-jiao-bi-ji" target="_blank" rel="noopener noreffer">这篇文章</a>里有该版本和「花园明朝」字体的下载链接，按照文中的说明替换鼠须管的程序。（<em>注意：官方当前释出版本鼠须管不支持下文通过patch自定义配置的方式，会造成原配置信息丢失。也不支持图示的样式。</em>）</p>
<p>然后参考<a href="https://scomper.me/gtd/shu-xu-guan-shu-ru-fa-de-xin-pei-se" target="_blank" rel="noopener noreffer">这篇文章</a>，把新的颜色方案移植到用户配置中。</p>
<p>图示样式使用「dust」方案。原色彩方案的字体设置的有点小，需要把font_point和label_font_point分别从14和10修改成18和14。原方案的第一顺序字体是「HYQiHei-55S Book」，要使用图示的花园明朝字体，可以不安装或者从配置信息中去掉该字体。由于原方案中已存在的配置项不能通过patch的方式覆盖，所以只能直接修改squirrel.yaml文件。</p>
]]></description></item></channel></rss>