<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Windows - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/windows/</link><description>Windows - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 31 Aug 2011 00:00:00 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/windows/" rel="self" type="application/rss+xml"/><item><title>Double Commander: 免费、跨平台的Total Commander</title><link>http://0x3f.org/post/double-commander/</link><pubDate>Wed, 31 Aug 2011 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/double-commander/</guid><description><![CDATA[<p>由于Total Commander很贵，在Windows下又是必不可少的，我一直希望能找到一个TC的免费替代品。试用过很多免费的文件管理器，但都不理想。偶然看到<a href="http://doublecmd.sourceforge.net/">Double Commander</a>，才发现这几乎完全就是我想要的。</p>

<p><a href="https://picasaweb.google.com/lh/photo/ioR_w9MmX81q_5a8xjUPsA?feat=embedwebsite"></a></p>

<h2>特性</h2>

<ul>
<li>几乎完全模仿TC，甚至连插件的API都一致</li>
<li>界面布局、样式高度可定制</li>
<li>热键高度可定制</li>
<li>开源、免费、跨平台</li>
</ul>

<h2>局限</h2>

<ul>
<li>功能相对TC少很多</li>
<li>稳定性不是非常高</li>
<li>运行速度稍嫌慢</li>
<li>开发进度慢</li>
</ul>

<h2>小技巧</h2>

<h3>热键设置</h3>

<p>每个内置命令可以设置多个热键，每个热键可以指定参数，参数中可以使用环境变量，如下图所示：</p>

<p><a href="https://picasaweb.google.com/lh/photo/Z3jLMCGkoAbs1XC6yOhElg?feat=embedwebsite"></a></p>

<p>针对命令<code>cm_ChangeDir</code>设置了两个热键，其中，给<strong>Ctrl+Home</strong>指定的参数是<strong>$HOME</strong>，给<strong>Ctrl+Shift+Home</strong>指定的参数是<strong>$HOME/Desktop</strong>，即分别切换到当前用户的主目录和桌面目录。</p>

<h3>自定义文件类型命令</h3>

<p>可以为每种文件类型定义多个命令，这些自定义命令将显示为上下文菜单的“动作”菜单的子菜单项。如下图所示：</p>

<p><a href="https://picasaweb.google.com/lh/photo/m7mjk4g77XsMZw58ayJnEw?feat=embedwebsite"></a></p>

<p>定义了名称为“Archive”的文件类型，关联了一系列的文件后缀名。然后添加了一个名为“解压缩到当前目录”的动作，并指定所执行的命令为<code>urxvt -e aunpack %f</code>。其中，<strong>%f</strong>是一个占位符，代表当前文件的全名。DC预置了几个占位符，可以点击命令输入框右侧图标是加号的按钮选择。</p>

<p>最终的效果如下：</p>

<p><a href="https://picasaweb.google.com/lh/photo/mXYVL8uX1TNw0ENFur1PUQ?feat=embedwebsite"></a></p>

<h3>解决日期时间乱码的问题</h3>

<p>截至版本0.5.0 beta，如果设置了使用日期时间字符串的格式为“yyyy-mm-dd hh:mm:ss”，在<strong>zh_CN.UTF-8</strong>的区域设置下，字符串中将出现乱码：</p>

<p><a href="https://picasaweb.google.com/lh/photo/gMOlqF5DOQQ5otUEBon7lA?feat=embedwebsite"></a></p>

<p>临时解决办法是以英文区域设置启动doublecmd：</p>

```bash
#!/bin/bash

export LC_ALL=en_US.UTF-8
doublecmd &
```

<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item><item><title>Console2：取代cmd.exe的Windows虚拟终端</title><link>http://0x3f.org/post/console2-as-an-alternative-of-cmd-exe/</link><pubDate>Sat, 22 Jan 2011 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/console2-as-an-alternative-of-cmd-exe/</guid><description><![CDATA[<p>相对于鸡肋cmd.exe，<a href="http://sourceforge.net/projects/console/">Console2</a>有以下优点：</p>

<ol>
<li>窗口大小可调整</li>
<li>字体样式可选择</li>
<li>支持多标签</li>
<li>有很方便的选择、复制、粘贴等基本编辑功能</li>
<li>支持自定义快捷键</li>
</ol>

<p>对经常不得不使用Windows虚拟终端的人来说，以上几个特性足以使人忘掉cmd.exe。其实，Console2本身只是Shell的图形前端，只是在默认情况下它会调用cmd.exe处理用户输入，因此，也可以通过设置使Console2成为Cygwin的前端，只是从这一点上讲，Console2和<a href="http://code.google.com/p/mintty/">Mintty</a>相比完全没有优势。</p>

<p><a href="http://picasaweb.google.com/lh/photo/hfesI_yiNpTZ68BKIqdImA?feat=embedwebsite"></a></p>
]]></description></item><item><title>Dokan SSHFS：Windows下通过SSH挂载Linux主机为本地分区</title><link>http://0x3f.org/post/mount-linux-dirs-as-windows-local-partitions/</link><pubDate>Thu, 20 Jan 2011 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/mount-linux-dirs-as-windows-local-partitions/</guid><description><![CDATA[<p>Linux一般使用Samba向Windows共享资源。另一个办法就是使用SSH。</p>

<p><a href="http://dokan-dev.net/en/">Dokan</a>是一个为Windows提供实现新文件系统的开发库，而<a href="http://dokan-dev.net/en/download/#sshfs">Dokan SSHFS</a>是在此基础上实现的挂载SSH通道为本地分区的文件系统。必须先安装Dokan，然后再安装Dokan SSHFS。</p>

<p><a href="http://picasaweb.google.com/lh/photo/d6J9vTU8cvK2KEplEo0ZaQ?feat=embedwebsite"></a></p>

<p>如果从安装SSH服务做起，步骤是：</p>

<ol>
<li>在Linux主机上安装openssh</li>
<li>修改Linux主机的<strong>/etc/hosts.allow</strong>，加入<code>sshd: ALL</code>，以允许外部访问</li>
<li>启动sshd守护进程</li>
<li>在Windows主机上安装Dokan和Dokan SSHFS</li>
<li>通过SSHFS的图形配置工具挂载SSH通道</li>
</ol>

<p>这种方式的好处是简单，但是存在安全隐患，不管怎样，公布SSH连接绝非好事，这意味著接入用户可以远程控制Linux主机，尤其是当SSH账户的权限较高时。因此，这种方式只适用于虚拟机或家庭网络，例如对Host-Guests共享支持不佳的KVM虚拟机来说就是个好的选择。即便如此，也要注意相应的Windows主机的安全防范，否则，入侵者可以通过Windows主机做跳板来进入Linux主机。</p>
]]></description></item><item><title>darkstat: 网络流量监测工具</title><link>http://0x3f.org/post/darkstat-as-a-network-discharge-meter/</link><pubDate>Sun, 26 Dec 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/darkstat-as-a-network-discharge-meter/</guid><description><![CDATA[<p><a href="http://dmr.ath.cx/net/darkstat/">darkstat</a>是一个跨平台的网络流量监测工具，可显示最大一个月内操作系统的各项网络流量指标。</p>
<p>具有以下特性：</p>
<ol>
	<li>以守护进程方式运行，提供Web用户界面，零配置，易于使用</li>
	<li>可显示较为详细的网络流量指标</li>
	<li>性能表现好，占用资源少</li>
	<li>跨平台，支持多个UNIX、类UNIX操作系统，并有非官方的Windows移植版</li>
</ol>
<p>具有以下不足：</p>
<ol>
	<li>功能较为简单，以易用性换灵活性</li>
	<li>日志记录功能比较单薄，需要编写辅助脚本并设置定时任务</li>
</ol>
<p>darkstat启动时需要手工指定监视的网络接口，因此需要用根权限启动：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo darkstat -i eth0
</code></pre></td></tr></table>
</div>
</div><p>darkstat默认使用<strong>667</strong>端口提供Web访问，可以用<strong>-p</strong>参数指定端口：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo darkstat -i eth0 -p <span class="m">8080</span>
</code></pre></td></tr></table>
</div>
</div><p>darkstat的Web用户界面分为Graph、Hosts和Host三部分。Graph是缺省主页，用于显示最近一分钟、一小时、一天和一个月的流量统计直方图，将光标置于任何一个直方条上可查看对应时刻的流量指标：</p>
<p><a href="http://picasaweb.google.com/lh/photo/NAB3_2TtnezdM45HoNd5pQ?feat=embedwebsite"></a></p>
<p>Hosts界面按主机显示各自的流量统计指标的值：</p>
<p><a href="http://picasaweb.google.com/lh/photo/kG1J2j2eecaLUnhDL-fArA?feat=embedwebsite"></a></p>
<p>单击Hosts界面上的IP进入对应主机的Host界面，此界面按TCP/UDP类型显示对应的主机的各端口的网络流量指标的值：</p>
<p><a href="http://picasaweb.google.com/lh/photo/XBNQWty4lp63OWwyAFm_BA?feat=embedwebsite"></a></p>
<p>可通过如下命令查看占用指定端口的进程：</p>
<blockquote>
[lenin@archer ~]$ lsof -i tcp:58062 -n
COMMAND   PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
mlnet   18660 lenin   74u  IPv4 251788      0t0  TCP 192.168.1.3:58062->122.116.212.89:http (ESTABLISHED)
</blockquote>
<p>darkstat区别于其它流量监测工具的最大的优点就是简单易用，非常适合对流量监测应用不复杂的场景。前段时间公司的一台RHEL服务器因为流量过大多次被网管拔线，后来用darkstat监测到大部分流量被几个UDP端口占去，进而发现原来是服务器被入侵并被安装了一个扫描器<a href="http://code.google.com/p/sipvicious/">SIPVicious</a>。</p>
]]></description></item><item><title>Vim保存文件时移除尾行换行符的方法</title><link>http://0x3f.org/post/howto-remove-eof-in-vim/</link><pubDate>Sun, 05 Dec 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/howto-remove-eof-in-vim/</guid><description><![CDATA[<p>Vim认为一个文本文件的每一行都应该由一换行符结束，即使文件的最后一行也不例外。这就使得Vim保存过的文本文件在其它文本编辑器中查看时可能会在文件末尾多出一个空行。一般来说，这不是个问题，但对于程序员来说，有时候一些不规范的运行环境或其它组件就要求文件的最后一行不能有换行符，否则就会出莫名其妙的问题，尤其是在Windows环境下最常见。</p>
<p>要在保存文件时不在最后一行添加换行符，最常见、最简单的方法就是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="p">:</span><span class="nx">set</span> <span class="nx">binary</span><span class="err">
</span><span class="err"></span><span class="p">:</span><span class="nx">set</span> <span class="nx">noendofline</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>但是这样做有一个问题，就是会把DOS格式的文件自动转换成UNIX格式，WinSlave们肯定不希望这么做。</p>
<p>因此，可在vimrc中加入如下内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="c">&#34; Save the current buffer as a file with no EOF sign.</span><span class="err">
</span><span class="err"></span><span class="k">function</span><span class="p">!</span> <span class="nx">SaveAsNOEOF</span><span class="p">(</span><span class="nx">filename</span><span class="p">)</span><span class="err">
</span><span class="err"></span>    <span class="k">let</span> <span class="nx">a</span><span class="p">=</span><span class="nx">getline</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="nx">line</span><span class="p">(</span><span class="s1">&#39;$&#39;</span><span class="p">)</span><span class="m">-1</span><span class="p">)</span><span class="err">
</span><span class="err"></span>    <span class="k">let</span> <span class="nx">b</span><span class="p">=</span><span class="nx">map</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="s1">&#39;iconv(v:val,&#34;&#39;</span>.&amp;<span class="nx">enc</span>.<span class="s1">&#39;&#34;,&#34;&#39;</span>.&amp;<span class="nx">fenc</span>.<span class="s1">&#39;&#34;) . nr2char(13)&#39;</span><span class="p">)</span><span class="err">
</span><span class="err"></span>    <span class="nx">call</span> <span class="nx">extend</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="nx">getline</span><span class="p">(</span><span class="s1">&#39;$&#39;</span><span class="p">,</span> <span class="s1">&#39;$&#39;</span><span class="p">))</span><span class="err">
</span><span class="err"></span>    <span class="nx">call</span> <span class="nx">writefile</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span>:<span class="nx">filename</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">)</span><span class="err">
</span><span class="err"></span>    <span class="k">if</span> <span class="nx">a</span>:<span class="nx">filename</span> <span class="p">==</span> <span class="nx">bufname</span><span class="p">(</span><span class="s1">&#39;%&#39;</span><span class="p">)</span><span class="err">
</span><span class="err"></span>        <span class="nx">set</span> <span class="nx">nomodified</span><span class="err">
</span><span class="err"></span>    <span class="k">endif</span><span class="err">
</span><span class="err"></span><span class="k">endfunction</span><span class="err">
</span><span class="err"></span><span class="c">&#34; Save the current buffer and get rid of the EOF sign.</span><span class="err">
</span><span class="err"></span><span class="k">function</span><span class="p">!</span> <span class="nx">SaveNOEOF</span><span class="p">()</span><span class="err">
</span><span class="err"></span>    <span class="nx">call</span> <span class="nx">SaveAsNOEOF</span><span class="p">(</span><span class="nx">bufname</span><span class="p">(</span><span class="s1">&#39;%&#39;</span><span class="p">))</span><span class="err">
</span><span class="err"></span><span class="k">endfunction</span><span class="err">
</span><span class="err"></span><span class="nx">command</span><span class="p">!</span> <span class="p">-</span><span class="nx">complete</span><span class="p">=</span><span class="nx">file</span> <span class="p">-</span><span class="nx">nargs</span><span class="p">=</span><span class="m">0</span> <span class="nx">SaveNOEOF</span> :<span class="nx">call</span> <span class="nx">SaveNOEOF</span><span class="p">()</span><span class="err">
</span><span class="err"></span><span class="nx">command</span><span class="p">!</span> <span class="p">-</span><span class="nx">complete</span><span class="p">=</span><span class="nx">file</span> <span class="p">-</span><span class="nx">nargs</span><span class="p">=</span><span class="m">1</span> <span class="nx">SaveAsNOEOF</span> :<span class="nx">call</span> <span class="nx">SaveAsNOEOF</span><span class="p">(&lt;</span><span class="nx">q</span><span class="p">-</span><span class="nx">args</span><span class="p">&gt;)</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>然后就可以使用SaveNOEOF和SaveAsNOEOF两条命令去保存没有EOF的文件了。</p>
<p><em>说明：本文的目的在于保存文件时移除最后一行的换行符，而并非移除EOF，上述配置中使用EOF只为记忆更容易起见。</em></p>
<p><strong>更新：</strong></p>
<blockquote>
<strong>2010-12-15</strong>
<ol>
	<li>修正SaveNOEOF命令报缺少参数的错误的问题</li>
	<li>修正保存当前buffer后没有变更文档修改状态的问题</li>
	<li>修正保存文件后总是将编码转换成encoding选项的值的问题</li>
</ol>
</blockquote>
]]></description></item><item><title>virtio可能导致windows蓝屏</title><link>http://0x3f.org/post/virto-may-breakdown-windows/</link><pubDate>Sat, 04 Dec 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/virto-may-breakdown-windows/</guid><description>&lt;p>前段时间突然发现kvm中的windows在启动时蓝屏，开始以为是kvm新版本的bug，后来发现如果不启用虚拟机硬盘的virtio就不会出现蓝屏。&lt;/p>
&lt;p>于是下载了最新版的virtio，然而更新后，蓝屏的问题并没有解决，所以目前只能暂时不使用virtio。不过网卡的virtio是没有问题的。&lt;/p></description></item><item><title>WinMerge：开源的差异比较工具</title><link>http://0x3f.org/post/winmerge-as-a-free-diff-tool/</link><pubDate>Mon, 29 Nov 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/winmerge-as-a-free-diff-tool/</guid><description><![CDATA[<p><a href="http://winmerge.org/">WinMerge</a>是开源的差异比较工具，只运行于Windows平台。</p>
<p>具有以下实用特性：</p>
<ol>
	<li>支持文件内容和文件、文件夹差异比较</li>
	<li>文件内容比较采用左右双栏显示，支持语法高亮</li>
	<li>提供Windows资源管理器右键菜单，以选择文件或文件夹进行比较</li>
</ol>
<p>具有以下不足：</p>
<ol>
	<li>文件夹比较结果以单栏显示，不直观</li>
	<li>仅支持两方比较，不支持多方比较</li>
</ol>
<p>使用时的注意事项：</p>
<ol>
	<li>使用树状的列表显示文件夹比较结果可以稍微缓解单栏显示导致的不直观的问题</li>
	<li>Windows资源管理器的右键菜单需要在设置界面手工设置才能加入选取不同目标进行比较的菜单项</li>
</ol>
<p>相较于商业的Beyong Compare等工具，WinMerge在操作的直观度和功能细节上存在不足，但是在差异比较的主要功能上，WinMerge完全可以胜任日常工作。同时，由于免费，WinMerge可以作为这些商业软件很好的替代工具。</p>
<p><strong>后记：这些天越来越对使用未授权的商业软件感到不安，于是开始寻找这些工具的开源、免费替代品。</strong></p>
]]></description></item><item><title>调整Arch的磁盘分区</title><link>http://0x3f.org/post/adjust-disk-partitions-in-archlinux/</link><pubDate>Sat, 13 Nov 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/adjust-disk-partitions-in-archlinux/</guid><description><![CDATA[<p><h2>简述</h2></p>

<p>目标：移除Windows 7，整块硬盘完全分配给Archlinux。</p>

<p>原分区结构：</p>

<p>
<table class="art_tbl">
<tr><th class="art_tbl_th">分区</th><th class="art_tbl_th">类型</th><th class="art_tbl_th">挂载</th><th class="art_tbl_th">文件系统</th><th class="art_tbl_th">容量</th></tr>
<tr><td class="art_tbl_td">/dev/sda1</td><td class="art_tbl_td">主分区，启动分区</td><td class="art_tbl_td">Windows 7的安装分区</td><td class="art_tbl_td">ntfs</td><td class="art_tbl_td">30G</td></tr>
<tr><td class="art_tbl_td">/dev/sda2</td><td class="art_tbl_td">扩展分区</td><td class="art_tbl_td">-</td><td class="art_tbl_td">-</td><td class="art_tbl_td">-</td></tr>
<tr><td class="art_tbl_td">/dev/sda5</td><td class="art_tbl_td">逻辑分区</td><td class="art_tbl_td">Windows的D盘</td><td class="art_tbl_td">ntfs</td><td class="art_tbl_td">40G</td></tr>
<tr><td class="art_tbl_td">/dev/sda3</td><td class="art_tbl_td">主分区</td><td class="art_tbl_td">/</td><td class="art_tbl_td">ext3</td><td class="art_tbl_td">78G</td></tr>
<tr><td class="art_tbl_td">/dev/sda4</td><td class="art_tbl_td">交换分区</td><td class="art_tbl_td">swap</td><td class="art_tbl_td">-</td><td class="art_tbl_td">2G</td></tr>
</table>
</p>

<p>调整后分区结构：</p>

<p>
<table class="art_tbl">
<tr><th class="art_tbl_th">分区</th><th class="art_tbl_th">类型</th><th class="art_tbl_th">挂载</th><th class="art_tbl_th">文件系统</th><th class="art_tbl_th">容量</th></tr>
<tr><td class="art_tbl_td">/dev/sda1</td><td class="art_tbl_td">主分区，启动分区</td><td class="art_tbl_td">/</td><td class="art_tbl_td">ext3</td><td class="art_tbl_td">30G</td></tr>
<tr><td class="art_tbl_td">/dev/sda2</td><td class="art_tbl_td">主分区</td><td class="art_tbl_td">/home</td><td class="art_tbl_td">ext3</td><td class="art_tbl_td">120G</td></tr>
<tr><td class="art_tbl_td">/dev/sda3</td><td class="art_tbl_td">交换分区</td><td class="art_tbl_td">swap</td><td class="art_tbl_td">-</td><td class="art_tbl_td">2G</td></tr>
</table>
</p>

<p><h2>步骤</h2></p>

<ol>
```bash
sudo grub-install /dev/sda
```
```bash
sudo vi /boot/grub/menu.lst
```
# (2) Arch Linux
title  Arch Linux
root   (hd0,0)
kernel /boot/vmlinuz26 root=/dev/sda1 resume=/dev/sda4 ro acpi_osi="Linux"
initrd /boot/kernel26.img
</blockquote></li>
  <li><a href="http://0x3f.org/?p=1699">安装U盘启动的Puppy Linux</a></li>
```bash
mkfs.ext3 /dev/sda1
```
```bash
# 先点击桌面上sda1和sda3的盘符，使之被挂载到/mnt下

cd /mnt/sda3
cp -a * /mnt/sda1
```
```bash
vi /mnt/sda1/etc/fstab
```
# 修改必要的挂载点，如将根目录的挂载点由sda3改为sda1：
/dev/sda1           /         ext3      defaults,noatime       0       1
</blockquote></li>
  <li>重启系统，并引导到新分区上的系统中</li>
```bash
sudo grub-install /dev/sda
```
  <li>重启并进入Puppy，使用gparted删除除sda1以外的所有分区，然后在空闲的空间上创建ext3格式的主分区sda2和交换分区sda3</li>
```bash
cp -a /mnt/sda1/home/* /mnt/sda2
rm -rf /mnt/sda1/home/*
```
```bash
vi /mnt/sda1/etc/fstab
```
# 将fstab中磁盘分区的挂载点配置为如下内容
/dev/sda1        /          ext3      defaults,noatime         0        1
/dev/sda2        /home      ext3      defaults,noatime         1        2
/dev/sda3        swap       swap      defaults                 0        0
```bash
vi /mnt/boot/grub/menu.lst
```
# 将原来启动项中的sda3修改为sda1，由于配置过休眠，也将resume参数中的sda4改为sda3，即交换分区
</blockquote>
  <li>重启系统</li>
</ol>

<p><h2>后记</h2></p>

<p>从<a href="http://0x3f.org/?tag=arch">Arch</a><a href="http://0x3f.org/?p=819">诞生</a>时只装XP，到<a href="http://0x3f.org/?p=836">装上Archlinux</a>后双系统并存，再到<a href="http://0x3f.org/?p=1180">尝试Win7</a>，两年的时间里，一直有很多原因让Windows像只寄生虫一样顽强地活著。最近硬盘空间越来越紧张，早前装的Win7也很长时间不用了，于是时隔三年之后，我又成了个纯粹的Archer。</p>
]]></description></item><item><title>启动GVim时自动最大化窗口的方法</title><link>http://0x3f.org/post/howto-auto-maximize-gvim-at-startup/</link><pubDate>Wed, 25 Aug 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/howto-auto-maximize-gvim-at-startup/</guid><description><![CDATA[<p>根据帮助文档，gvim在windows下的最大化是通过模拟打开窗口菜单并点击最大化菜单项实现的，而在Linux下的方法较为灵活。</p>
<p>下面的方法是在vim中通过调用wmctrl实现最大化的方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="k">if</span> <span class="nx">has</span><span class="p">(</span><span class="s1">&#39;win32&#39;</span><span class="p">)</span><span class="err">
</span><span class="err"></span>    <span class="nx">au</span> <span class="nx">GUIEnter</span> * <span class="nx">simalt</span> <span class="p">~</span><span class="nx">x</span><span class="err">
</span><span class="err"></span><span class="k">else</span><span class="err">
</span><span class="err"></span>    <span class="nx">au</span> <span class="nx">GUIEnter</span> * <span class="nx">call</span> <span class="nx">MaximizeWindow</span><span class="p">()</span><span class="err">
</span><span class="err"></span><span class="k">endif</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">function</span><span class="p">!</span> <span class="nx">MaximizeWindow</span><span class="p">()</span><span class="err">
</span><span class="err"></span>    <span class="nx">silent</span> <span class="p">!</span><span class="nx">wmctrl</span> <span class="p">-</span><span class="nx">r</span> :<span class="nx">ACTIVE</span>: <span class="p">-</span><span class="nx">b</span> <span class="nx">add</span><span class="p">,</span><span class="nx">maximized_vert</span><span class="p">,</span><span class="nx">maximized_horz</span><span class="err">
</span><span class="err"></span><span class="k">endfunction</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>当然也可以通过配置窗口管理器规则实现自动最大化，但上面的方法更灵活。</p>
]]></description></item><item><title>Inno Setup执行SQL脚本的方法</title><link>http://0x3f.org/post/howto-execute-sql-scripts-in-inno-setup/</link><pubDate>Mon, 17 May 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/howto-execute-sql-scripts-in-inno-setup/</guid><description><![CDATA[<p>作为和<a href="http://zh.wikipedia.org/zh-cn/Nullsoft%E8%85%B3%E6%9C%AC%E5%AE%89%E8%A3%9D%E7%B3%BB%E7%B5%B1">NSIS</a>并立的、两个最流行的免费Windows应用程序安装包制作工具之一，<a href="http://en.wikipedia.org/wiki/Inno_Setup">Inno</a>在学习难度上相对要低一些，非常适合对一些简单的桌面程序打包。但对于较复杂的安装过程，或者Web应用程序来说，我个人觉得不是Inno的强项。当然，既然Inno内嵌了<a href="http://zh.wikipedia.org/zh-cn/Pascal">Pascal</a>语言用以扩展功能，理论上不是不可以应付复杂的安装过程，但实现起来要复杂一些。</p>

<p>比如对于在安装过程中连接数据库并执行SQL脚本这样的需求，使用<a href="http://en.wikipedia.org/wiki/InstallShield">InstallShield</a>应该会简单地多，而Inno却不支持直接操作数据库，并且相关的资料说明少之又少，还不如NSIS丰富，以至于我踏破铁鞋无觅处，最终却在NSIS的资料中找到了思路。</p>

<p>主要的思路是，在安装过程中，调用数据库客户端连接数据库并执行SQL脚本，然后将执行结果或错误信息输出到文件中，最后通过分析这个文件来判断命令执行的结果。但是，既然是调用特定的客户端，那么对不同数据库的操作自然就有所区别，具体情况如下所述。</p>

<p>首先在打包脚本的<strong>[Files]</strong>段将必需的文件包含进来：</p>

```ini
[Files]
Source: "D:\Development\MyDemoApp\code\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "D:\Development\MyDemoApp\sqlcmd.exe"; Flags: dontcopy
Source: "D:\Development\MyDemoApp\sqlcmd.rll"; Flags: dontcopy
Source: "D:\Development\MyDemoApp\mysql.exe"; Flags: dontcopy
Source: "D:\Development\MyDemoApp\script_mssql.sql"; Flags: dontcopy
Source: "D:\Development\MyDemoApp\script_mysql.sql"; Flags: dontcopy
Source: "D:\Development\MyDemoApp\script_oracle.sql"; Flags: dontcopy
```

<p>在SQL Server中执行脚本的代码片断：</p>

```pascal
function ExecScriptInMSSQL(DBHost, DBLogin, DBPass, DBName: String): Boolean;
var
    ConnectExe: String;
    ConnectParam: String;
begin
    {解压临时文件}
    ExtractTemporaryFile('sqlcmd.exe');
    ExtractTemporaryFile('sqlcmd.rll');
    ExtractTemporaryFile('script_mssql.sql');
    {构造数据库连接字符串}
    ConnectExe := ExpandConstant('{tmp}') + '\sqlcmd.exe';
    ConnectParam := ' -S ' + DBHost
        + ' -U ' + DBLogin
        + ' -P ' + DBPass
        + ' -d ' + DBName
        + ' -i script_mssql.sql -o '
        + ExpandConstant('{tmp}') + '\dbstatus.txt';
    {建立数据库连接并执行脚本}
    if Exec(ConnectExe, ConnectParam, '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then begin
        Result := ResultCode = 0;
        LoadStringFromFile(ExpandConstant('{tmp}') + '\dbstatus.txt', StatusString);
        if StatusString <> '' then begin
            MsgBox(StatusString, mbError, MB_OK);
            Result := False;
        end else begin
            Result := True;
        end;
    end else begin
        MsgBox('Database update failed:'#10#10 + SysErrorMessage(ResultCode), mbError, MB_OK);
        Result := False;
    end;
end;
```

<p>在MySQL中执行脚本的代码片断：</p>

```pascal
function ExecScriptInMYSQL(DBHost, DBLogin, DBPass, DBName: String): Boolean;
var
    ConnectExe: String;
    ConnectParam: String;
begin
    {解压临时文件}
    ExtractTemporaryFile('mysql.exe');
    ExtractTemporaryFile('script_mysql.sql');
    {构造数据库连接字符串}
    ConnectExe := ExpandConstant('cmd');
    ConnectParam := ' /c "' + ExpandConstant('{tmp}') + '\mysql.exe'
        + ' -h' + DBHost
        + ' -u' + DBLogin
        + ' -p' + DBPass
        + ' -D' + DBName
        + ' -e "source ' + ExpandConstant('{tmp}') + '\script_mysql.sql"" > ' + ExpandConstant('{tmp}') + '\dbstatus.txt 2>&1';
    {建立数据库连接并执行脚本}
    if Exec(ConnectExe, ConnectParam, '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then begin
        Result := ResultCode = 0;
        LoadStringFromFile(ExpandConstant('{tmp}') + '\dbstatus.txt', StatusString);
        if StatusString <> '' then begin
            MsgBox(StatusString, mbError, MB_OK);
            Result := False;
        end else begin
            Result := True;
        end;
    end else begin
        MsgBox('Database update failed:'#10#10 + SysErrorMessage(ResultCode), mbError, MB_OK);
        Result := False;
    end;
end;
```

<p>由于mysql.exe没有输出结果到文件的参数，故需要使用cmd.exe来运行mysql.exe以便将其输出重定向到文件dbstatus.txt中。此外，在命令的最后加上参数<strong>2&gt;&amp;1</strong>，将标准错误输出设备也重定向到文件上，否则命令执行的错误信息不会输出到文件中。</p>

<p>在Oracle中执行脚本的代码片断：</p>

```pascal
function ExecScriptInORACLE(ClientPath, DBInstance, DBLogin, DBPass: String): Boolean;
begin
    {解压临时文件}
    ExtractTemporaryFile('script_oracle.sql');
    {连接数据库并执行脚本}
    if Exec(ExpandConstant('cmd'), ' /c "' + ClientPath + ' -L -S ' + DBLogin
        + '/' + DBPass
        + '@' + DBInstance
        + ' @' + ExpandConstant('{tmp}') + '\script_oracle.sql > ' + ExpandConstant('{tmp}') + '\dbstatus.txt 2>&1',
        '',
        SW_HIDE, ewWaitUntilTerminated, ResultCode)
    then begin
        Result := ResultCode = 0;
        LoadStringFromFile(ExpandConstant('{tmp}') + '\dbstatus.txt', StatusString);
        if Pos('holytail', StatusString) <> 0 then begin
            {若输出信息中有“holytail”的子串，则表示脚本成功执行}
            {若执行有误，提示用户打开日志文件}
            if Pos('ORA-', StatusString) <> 0 then begin
                {提示用户脚本执行出错}
                if MsgBox('数据库更新出错，是否打开日志文件？', mbConfirmation, MB_YESNO) = IDYES then begin
                    {打开日志}
                    if not ShellExec('', ExpandConstant('{tmp}') + '\dbstatus.txt', '', '', SW_SHOW, ewNoWait, ErrorCode) then begin
                        MsgBox('日志文件打开错误！', mbError, MB_OK);
                    end;
                end;
                Result := False;
            {若执行无误，返回True}
            end else begin
                Result := True;
            end;
        end else if StatusString <> '' then begin
            MsgBox(StatusString, mbError, MB_OK);
            Result := False;
        end else begin
            Result := True;
        end;
    end else begin
        MsgBox('Database update failed:'#10#10 + SysErrorMessage(ResultCode), mbError, MB_OK);
        Result := False;
    end;
end;
```

<p>Oracle的客户端太大，不能集成到安装包中，应使用一个<strong>TInputFileWizardPage</strong>由用户选择sqlplus.exe的安装位置。同时，由于sqlplus.exe也没有输出结果到文件的参数，也须使用cmd.exe来运行它并重定向输出到文件。此外，由于sqlplus.exe执行脚本时无论成功还是失败，都会输出信息，故无法像使用sqlcmd.exe和mysql.exe那样简单地判断脚本是否执行成功，需要在脚本的最后通过select语句输出一个特殊的字符串到文件中，然后通过判断dbstatus.txt中是否存在该字符串来判断脚本的执行情况；且由于sqlplus.exe执行完脚本后不会自动退出，还要在脚本最后加上exit语句；故<strong>script_oracle.sql</strong>的最后必须是如下内容：</p>

```sql
SELECT 'holytail' FROM dual;
exit;
```
]]></description></item></channel></rss>