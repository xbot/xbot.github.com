<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>算法 on 晴耕雨讀</title><link>http://0x3f.org/tags/%E7%AE%97%E6%B3%95/</link><description>Recent content in 算法 on 晴耕雨讀</description><generator>Hugo</generator><language>zh-cn</language><copyright>© 淘气 2022</copyright><lastBuildDate>Sat, 13 Mar 2010 00:00:00 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml"/><item><title>SQL Server的自定义函数：统计两日期之间工作日的数量</title><link>http://0x3f.org/posts/counting-days-between-dates-in-sqlserver/</link><pubDate>Sat, 13 Mar 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/counting-days-between-dates-in-sqlserver/</guid><description>&lt;p>前段时间工作中遇到的一个需求，要求计算两个日期之间工作日的数量，即排除期间所有的周六和周日之后的天数。&lt;/p>

&lt;p>在网上找到一个自定义函数，原函数有些小问题，例如如果传入的截止日期如果有时间且足够大，则计算结果可能出错，修正后代码如下：&lt;/p>

&lt;p>
```sql
--函数：类似datediff，不统计期间所有的周六和周日
if exists (select * from dbo.sysobjects where id=object_id(N'[dbo].[f_WorkDay]') and xtype in (N'FN',N'IF',N'TF')) 
drop function [dbo].[f_WorkDay] 
GO

CREATE FUNCTION f_WorkDay(
@dt_begin datetime,
@dt_end datetime 
)RETURNS int 
AS 
BEGIN 
 DECLARE @workday int,@i int,@bz bit,@dt datetime 

 set @dt_begin = convert(datetime, convert(nvarchar(32), @dt_begin, 23))
 set @dt_end = convert(datetime, convert(nvarchar(32), @dt_end, 23)) 

 IF @dt_begin>@dt_end 
 SELECT @bz=1,@dt=@dt_begin,@dt_begin=@dt_end,@dt_end=@dt 
 ELSE 
 SET @bz=0 

 SELECT @i=DATEDIFF(Day,@dt_begin,@dt_end),@workday=@i/7*5,@dt_begin=DATEADD(Day,@i/7*7,@dt_begin) 

 WHILE @dt_begin&lt;@dt_end 
 BEGIN 
 SELECT @workday=CASE WHEN (@@DATEFIRST+DATEPART(Weekday,@dt_begin)-1)%7 BETWEEN 1 AND 5 THEN @workday+1 ELSE @workday END,@dt_begin=@dt_begin+1 
 END 

 RETURN(CASE WHEN @bz=1 THEN -@workday ELSE @workday END) 
END 
GO
```
&lt;/p></description></item><item><title>欧拉工程第十一解</title><link>http://0x3f.org/posts/project-euler-11/</link><pubDate>Tue, 12 May 2009 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-11/</guid><description>&lt;blockquote>
 &lt;p>In the 20×20 grid below, four numbers along a diagonal line have been marked in red.&lt;/p>
 
 &lt;p>08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48&lt;/p></description></item><item><title>欧拉工程第十解</title><link>http://0x3f.org/posts/project-euler-10/</link><pubDate>Tue, 18 Nov 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-10/</guid><description>&lt;blockquote>&lt;p>The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.&lt;/p>

&lt;p>Find the sum of all the primes below two million.&lt;/p>&lt;/blockquote>

&lt;p>题目越来越变态，开始好玩儿了。&lt;/p>

&lt;p>&lt;a href="http://0x3f.org/?p=753">第七解&lt;/a>里的算法在这里算是废了，一万个素数都算得那么费劲，两百万以下的素数有十几万个，不得不用筛选法了。&lt;/p>

&lt;p>普通的筛选效率也不行，当初就是因为这个原因才没用它。不过优化过的筛选法就很奇妙了，下面是Lua的实现：&lt;/p>

&lt;p>
```lua
require('math')

local limit = 2000000

local primes = {}
for i=1,limit do
 table.insert(primes,true)
end
primes[0] = false
primes[1] = false

for i=0,math.floor(math.sqrt(limit)) do
 if primes[i] then
 for j=math.pow(i,2),limit,i do
 primes[j] = false
 end
 end
end

local sumVal = 0
for i,j in ipairs(primes) do
 if j then
 sumVal = sumVal + i
 end
end

print(sumVal)
```
&lt;/p></description></item><item><title>欧拉工程第九解</title><link>http://0x3f.org/posts/project-euler-9/</link><pubDate>Mon, 10 Nov 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-9/</guid><description>&lt;blockquote>
&lt;p>A Pythagorean triplet is a set of three natural numbers, &lt;b>&lt;em>a&lt;/em>&lt;/b> &lt; &lt;b>&lt;em>b&lt;/em>&lt;/b> &lt; &lt;b>&lt;em>c&lt;/em>&lt;/b>, for which,&lt;/p>

&lt;p>&lt;b>&lt;em>a&lt;/em>&lt;/b>&lt;sup>2&lt;/sup> + &lt;b>&lt;em>b&lt;/em>&lt;/b>&lt;sup>2&lt;/sup> = &lt;b>&lt;em>c&lt;/em>&lt;/b>&lt;sup>2&lt;/sup>&lt;/p>

&lt;p>For example, 3&lt;sup>2&lt;/sup> + 4&lt;sup>2&lt;/sup> = 9 + 16 = 25 = 5&lt;sup>2&lt;/sup>.&lt;/p>

&lt;p>There exists exactly one Pythagorean triplet for which &lt;b>&lt;em>a&lt;/em>&lt;/b> + &lt;b>&lt;em>b&lt;/em>&lt;/b> + &lt;b>&lt;em>c&lt;/em>&lt;/b> = 1000.
Find the product &lt;b>&lt;em>abc&lt;/em>&lt;/b>.
&lt;/blockquote>


&lt;p>解：&lt;/p>

&lt;p>
```python
flag = False
for a in range(1,1000):
 for b in range(1,1000):
 if a ** 2 + b ** 2 == (1000 - a - b) ** 2:
 print a,b,(1000 - a - b)
 print a * b * (1000 - a - b)
 flag = True
 break
 if flag:
 break
```
&lt;/p></description></item><item><title>欧拉工程第八解</title><link>http://0x3f.org/posts/project-euler-8/</link><pubDate>Sun, 09 Nov 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-8/</guid><description>&lt;blockquote>&lt;p>Find the greatest product of five consecutive digits in the 1000-digit number.&lt;/p>

&lt;p>73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450&lt;/p>&lt;/blockquote>

&lt;p>穷举，解：&lt;/p>

&lt;p>
```python
def MakeProduct(strNum):
 prod = 1
 for char in strNum:
 prod = prod * int(char)
 return prod
 
def GetTheFirstProduct(strNum):
 if len(strNum) &lt; 5:
 return 0,0
 return MakeProduct(strNum[:5]),strNum[1:]

num = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'

largestProduct = 0
while len(num) >= 5:
 tmp = GetTheFirstProduct(num)
 if tmp == (0,0):
 break
 num = tmp[1]
 if largestProduct &lt; tmp[0]:
 largestProduct = tmp[0]
print largestProduct
```
&lt;/p></description></item><item><title>欧拉工程第七解</title><link>http://0x3f.org/posts/project-euler-7/</link><pubDate>Fri, 31 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-7/</guid><description>&lt;p>第七解：&lt;/p>

&lt;blockquote>&lt;p>By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.&lt;/p>

&lt;p>What is the 10001st prime number?&lt;/p>&lt;/blockquote>

&lt;p>穷举，并加以最大程度的优化：对大于2的素数，只判断奇数；判断一个奇数是否素数时，只拿已经找到的素数中小于第这个数平方根的数来相除，如果均不能整除，就是素数。Python的实现：&lt;/p>

&lt;p>
```python
def IsPrimeNum(num,feed):
 from math import sqrt
 tmp = feed[:]
 while tmp[-1] > int(sqrt(num)):
 tmp.pop()
 for i in tmp:
 if num % i == 0:
 return False
 return True

limit = 10001
feed = [2,3,5,7]
temp = 7
counter = 4
while counter &lt; limit :
 temp += 2
 if IsPrimeNum(temp,feed):
 feed.append(temp)
 counter += 1
print temp
```
&lt;/p></description></item><item><title>欧拉工程第六解</title><link>http://0x3f.org/posts/project-euler-6/</link><pubDate>Wed, 29 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-6/</guid><description>&lt;p>第六解：&lt;/p>

&lt;blockquote>&lt;p>The sum of the squares of the first ten natural numbers is,
12 + 22 + &amp;hellip; + 102 = 385&lt;/p>

&lt;p>The square of the sum of the first ten natural numbers is,
(1 + 2 + &amp;hellip; + 10)2 = 552 = 3025&lt;/p>

&lt;p>Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 385 = 2640.
Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.&lt;/p></description></item><item><title>欧拉工程第五解</title><link>http://0x3f.org/posts/project-euler-5/</link><pubDate>Mon, 27 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-5/</guid><description>&lt;p>第五解：&lt;/p>

&lt;blockquote>&lt;p>2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest number that is evenly divisible by all of the numbers from 1 to 20?&lt;/p>&lt;/blockquote>

&lt;p>解：&lt;/p>

&lt;p>
```python
#为简洁明了，此处不作校验
def GetGreatestCommonDivisor(min,max):
 '''辗转相除法求最大公约数'''
 while min > 0:
 tmp = min
 min = max % min
 max = tmp
 return max

def GetLeastCommonMultiple(a,b):
 if a > b:
 max = a
 min = b
 else:
 max = b
 min = a
 div = GetGreatestCommonDivisor(min,max)
 return min * max / div

temp = 1
for i in range(1,21):
 temp = GetLeastCommonMultiple(i,temp)
print temp
```
&lt;/p></description></item><item><title>欧拉工程第四解</title><link>http://0x3f.org/posts/project-euler-4/</link><pubDate>Wed, 22 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-4/</guid><description>&lt;p>第四解：&lt;/p>

&lt;blockquote>&lt;p>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.&lt;/p>&lt;/blockquote>

&lt;p>解：&lt;/p>

&lt;p>
```python
largestPalindrome = 0
for i in range(100,1000):
 for j in range(100,1000):
 product = i * j
 if int(str(product)[::-1]) == product and product > largestPalindrome:
 largestPalindrome = product
print largestPalindrome
```
&lt;/p></description></item><item><title>欧拉工程第三解</title><link>http://0x3f.org/posts/project-euler-3/</link><pubDate>Tue, 21 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-3/</guid><description>&lt;p>第三解：&lt;/p>

&lt;blockquote>&lt;p>The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?&lt;/p>&lt;/blockquote>

&lt;p>解：&lt;/p>

&lt;p>
```python
feed = 600851475143

def GetFactor(feed,footmark):
 while footmark &lt; feed:
 footmark += 2
 if feed % footmark == 0:
 print footmark
 GetFactor(feed / footmark,footmark)
 break

GetFactor(feed,1)
```
&lt;/p>

&lt;p>&lt;a href="http://picasaweb.google.com/lh/photo/CQ25Wrocadk-dyd7sOiRUA">&lt;img src="http://lh6.ggpht.com/lenin.lee/SP3inG0AczI/AAAAAAAAAjA/DBMygQUR9HI/s400/project_euler_problem_003.png" />&lt;/a>&lt;/p></description></item><item><title>欧拉工程第二解</title><link>http://0x3f.org/posts/project-euler-2/</link><pubDate>Sun, 19 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-2/</guid><description>&lt;p>第二解：&lt;/p>

&lt;blockquote>&lt;p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, &amp;hellip;
Find the sum of all the even-valued terms in the sequence which do not exceed four million.&lt;/p>&lt;/blockquote>

&lt;p>解：&lt;/p>

&lt;p>
```python
i = 1
j = 2
sum = 0
while j &lt; 4000000 :
 if j % 2 == 0 :
 sum = sum + j
 t = i
 i = j
 j = t + j
print sum
```
&lt;/p></description></item><item><title>欧拉工程第一解</title><link>http://0x3f.org/posts/project-euler-1/</link><pubDate>Mon, 06 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-1/</guid><description>&lt;div style="float:right;margin-left:10px;margin-bottom:10px;">
	&lt;a href="http://picasaweb.google.com/lh/photo/AAMfMJges97jrmxxYmmsXw">&lt;img src="http://lh5.ggpht.com/lenin.lee/SOjhkJQQ7HI/AAAAAAAAAbk/HT6_ZIxVCJE/s144/euler.jpg" />&lt;/a>
&lt;/div>
&lt;p>
“&lt;a href="http://projecteuler.net/">欧拉工程&lt;/a>”是一个很有意思的网站，它每周会提供一道数学题，要求访问者使用任一种编程语言设计一个计算机程序求解。到现在为止已经出了二百一十一道题，当然，题的难度是依次递增的。几十个国家的程序员已参与了这个工程，截至目前，中国有四百多人参与，但是解决所有的二百多道题的只有一个人。
&lt;/p>
&lt;p>
我觉得没事儿的时候做一道很有意思，下面是第一道，很简单：
&lt;/p>
	&lt;blockquote>
	If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
	Find the sum of all the multiples of 3 or 5 below 1000.
	&lt;/blockquote>
&lt;p>
最容易想到的一算法就是依次取出一到一千的整数，只要是三或五的倍数，就累加起来，最终的和就是结果：
&lt;/p>
```python
sum = 0

for num in range(1,1000):
	if not (num % 3 != 0 and num % 5 != 0):
		sum += num

print sum
```
&lt;p>
但是我觉得这个算法太普通了，从一到一千要做一千次循环，时间复杂度会比较高。所以我设想只取出三和五的倍数，然后相加就行了，所需要考虑的只是怎么处理三和五的公倍数的问题。下面是我的算法，只有三百多次循环：
&lt;/p></description></item></channel></rss>