<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>博客 - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/%E5%8D%9A%E5%AE%A2/</link><description>博客 - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 19 Jun 2020 17:41:52 +0800</lastBuildDate><atom:link href="http://0x3f.org/tags/%E5%8D%9A%E5%AE%A2/" rel="self" type="application/rss+xml"/><item><title>从 Hexo 到 Hugo</title><link>http://0x3f.org/post/migrate-from-hexo-to-hugo/</link><pubDate>Fri, 19 Jun 2020 17:41:52 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/migrate-from-hexo-to-hugo/</guid><description><![CDATA[<p>一切源于我这个颜党的喜新厌旧。</p>
<p>总想找到一个极简而不失现代感的主题，在这个过程中，发现越来越多比较贴近我口味的主题都是适配 Hugo 的。趁最近有时间，就换了过来。</p>
<hr>
<h2 id="创建一个空站点">创建一个空站点</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 安装 hugo</span>
brew install hugo

<span class="c1"># 创建空站点</span>
hugo new site Blog

<span class="c1"># 安装 LoveIt 主题</span>
<span class="nb">cd</span> Blog
git init
git submodule add https://github.com/dillonzq/LoveIt.git themes/LoveIt
cp -f themes/LoveIt/exampleSite/config.toml .

<span class="c1"># 配置 config.toml</span>

<span class="c1"># 在本机预览效果</span>
hugo server -D
</code></pre></td></tr></table>
</div>
</div><h2 id="写一篇新文章">写一篇新文章</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">hugo new posts/test.md
</code></pre></td></tr></table>
</div>
</div><p>Hugo 需要自己指定文章的相对路径和文件名，这一点不如 Hexo 自动化程度高。</p>
<h2 id="迁移文章">迁移文章</h2>
<blockquote>
<p>注意：以下命令和脚本仅适用于本博客，不加判断地使用可能会修改不需要变动的内容。</p>
</blockquote>
<h3 id="统一文章后缀">统一文章后缀</h3>
<p>历史原因，用过的文件后缀不止一种，这次把<code>.mkd</code>和<code>.markdown</code>统一成<code>.md</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">rename -s .mkd .md -s .markdown .md *
</code></pre></td></tr></table>
</div>
</div><h3 id="删除不兼容的-front-matter">删除不兼容的 Front Matter</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">gsed -i <span class="s1">&#39;/^type:\s*post/d&#39;</span> *
</code></pre></td></tr></table>
</div>
</div><h3 id="修改不规范的-front-matter">修改不规范的 Front Matter</h3>
<p>我用单分类、多标签的方式管理文章，所以以前都是把分类名直接写在<code>categories:</code>后面了，Hugo 要求必须使用连接符前缀另起一行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">perl -pi -e <span class="s1">&#39;s/(?&lt;=^categories:)/\n-/g&#39;</span> *
</code></pre></td></tr></table>
</div>
</div><p>也是因为历史的原因，有的文章没有日期时间，有的格式也不统一。Hugo 对日期时间的格式要求比较严格。这里把所有没有秒的时间后补全。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">perl -pi -e <span class="s1">&#39;s/(?&lt;=^date:\s\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}$)/:00/g&#39;</span> *
</code></pre></td></tr></table>
</div>
</div><h3 id="替换文章摘要标签">替换文章摘要标签</h3>
<p>Hugo 不允许“more”两侧有空格：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">gsed -ri <span class="s1">&#39;s/!-- more --/!--more--/g&#39;</span> *
</code></pre></td></tr></table>
</div>
</div><h3 id="补充和转换复杂内容">补充和转换复杂内容</h3>
<p>此外还有诸如日期时间缺失、转换 Octopress 标签到 Markdown 格式等问题，另外为了保持 Permalink 不变，准备每篇文章都补充一个Front Matter <code>slug</code>。所以写了一个 PHP 脚本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">#!/usr/bin/env php
<span class="cp">&lt;?php</span>

<span class="k">if</span> <span class="p">(</span><span class="nv">$argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">file_put_contents</span><span class="p">(</span><span class="s1">&#39;php://stderr&#39;</span><span class="p">,</span> <span class="s2">&#34;需输入一个合法的文件路径</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">);</span>
    <span class="k">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$argc</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">handle_file</span><span class="p">(</span><span class="nv">$argv</span><span class="p">[</span><span class="nv">$i</span><span class="p">]);</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">handle_file</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$content</span> <span class="o">=</span> <span class="nx">file_get_contents</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">);</span>
    <span class="nv">$lines</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nv">$content</span><span class="p">);</span>

    <span class="nv">$isDateMissing</span> <span class="o">=</span> <span class="k">empty</span><span class="p">(</span><span class="nx">preg_grep</span><span class="p">(</span><span class="s1">&#39;/^date:\s*/&#39;</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$isDateMissing</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">append_date</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nv">$isSlugMissing</span> <span class="o">=</span> <span class="k">empty</span><span class="p">(</span><span class="nx">preg_grep</span><span class="p">(</span><span class="s1">&#39;/^slug:\s/&#39;</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$isSlugMissing</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">append_slug</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">convert_hexo_tags</span><span class="p">(</span><span class="nv">$lines</span><span class="p">);</span>

    <span class="nx">file_put_contents</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">,</span> <span class="nx">implode</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">,</span> <span class="nv">$lines</span><span class="p">));</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">append_date</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$lines</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// 获取文件名中的日期
</span><span class="c1"></span>    <span class="nv">$arr</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/\d{4}-\d{2}-\d{2}/&#39;</span><span class="p">,</span> <span class="nx">basename</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">),</span> <span class="nv">$arr</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$arr</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">file_put_contents</span><span class="p">(</span><span class="s1">&#39;php://stderr&#39;</span><span class="p">,</span> <span class="s2">&#34;未能从文件名中找到日期</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">);</span>
        <span class="k">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$lines</span> <span class="k">as</span> <span class="nv">$idx</span> <span class="o">=&gt;</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">strpos</span><span class="p">(</span><span class="nv">$line</span><span class="p">,</span> <span class="s1">&#39;title:&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$lines</span> <span class="o">=</span> <span class="nx">array_merge</span><span class="p">(</span>
                <span class="nx">array_slice</span><span class="p">(</span><span class="nv">$lines</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">$idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
                <span class="p">[</span><span class="s2">&#34;date: </span><span class="si">{</span>$arr[0]<span class="si">}</span><span class="s2"> 00:00:00&#34;</span><span class="p">],</span>
                <span class="nx">array_slice</span><span class="p">(</span><span class="nv">$lines</span><span class="p">,</span> <span class="nv">$idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">append_slug</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">,</span> <span class="o">&amp;</span><span class="nv">$lines</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/(?&lt;=\d{4}-\d{2}-\d{2}-).*(?=\.)/&#39;</span><span class="p">,</span> <span class="nx">basename</span><span class="p">(</span><span class="nv">$filePath</span><span class="p">),</span> <span class="nv">$matches</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">file_put_contents</span><span class="p">(</span><span class="s1">&#39;php://stderr&#39;</span><span class="p">,</span> <span class="s2">&#34;未能从文件名中找到slug</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">);</span>
        <span class="k">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$lines</span> <span class="k">as</span> <span class="nv">$idx</span> <span class="o">=&gt;</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">strpos</span><span class="p">(</span><span class="nv">$line</span><span class="p">,</span> <span class="s1">&#39;title:&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$lines</span> <span class="o">=</span> <span class="nx">array_merge</span><span class="p">(</span>
                <span class="nx">array_slice</span><span class="p">(</span><span class="nv">$lines</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">$idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
                <span class="p">[</span><span class="s2">&#34;slug: &#34;</span> <span class="o">.</span> <span class="nx">str_replace</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">[</span><span class="mi">0</span><span class="p">])],</span>
                <span class="nx">array_slice</span><span class="p">(</span><span class="nv">$lines</span><span class="p">,</span> <span class="nv">$idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">convert_hexo_tags</span><span class="p">(</span><span class="o">&amp;</span><span class="nv">$lines</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$lines</span> <span class="k">as</span> <span class="nv">$idx</span> <span class="o">=&gt;</span> <span class="nv">$line</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/(?&lt;={%\simg\s).*(?=\s\d+\s%})/&#39;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">)</span>
            <span class="o">||</span> <span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/(?&lt;={%\simg\s).*(?=\s%})/&#39;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">)</span>
        <span class="p">)</span> <span class="p">{</span>
            <span class="nv">$lines</span><span class="p">[</span><span class="nv">$idx</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;![](</span><span class="si">{</span>$matches[0]<span class="si">}</span><span class="s2">)&#34;</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/(?&lt;={%\scodeblock\slang:).*(?=\s[a-zA-Z0-9.]+\s%})/&#39;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">)</span>
            <span class="o">||</span> <span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/(?&lt;={%\scodeblock\slang:).*(?=\s%})/&#39;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">)</span>
            <span class="o">||</span> <span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/(?&lt;={%\scodeblock).*(?=\s%})/&#39;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">,</span> <span class="nv">$matches</span><span class="p">)</span>
        <span class="p">)</span> <span class="p">{</span>
            <span class="nv">$lines</span><span class="p">[</span><span class="nv">$idx</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;```</span><span class="si">{</span>$matches[0]<span class="si">}</span><span class="s2">&#34;</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="s1">&#39;/{%\sendcodeblock\s%}/&#39;</span><span class="p">,</span> <span class="nv">$line</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$lines</span><span class="p">[</span><span class="nv">$idx</span><span class="p">]</span> <span class="o">=</span> <span class="s2">&#34;```&#34;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">ls content/posts <span class="p">|</span> sed <span class="s2">&#34;s:^:`pwd`/content/posts/:&#34;</span> <span class="p">|</span> xargs ./convert.php
</code></pre></td></tr></table>
</div>
</div><h2 id="实现全文检索">实现全文检索</h2>
<p>默认的 Lunr 方式开箱即用，但速度较慢，而且中文分词做得不好。所以使用 <a href="https://www.algolia.com/" target="_blank" rel="noopener noreffer">Algolia</a> 实现。</p>
<p>注册账号并选用免费方案后，在“API Keys”页面复制“Application ID”、“Search-Only API Key”和“Admin API Key”。</p>
<p>在项目根目录下创建 <code>.env</code> 文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ini" data-lang="ini"><span class="na">ALGOLIA_APP_ID</span><span class="o">=</span><span class="s">XXXXXX</span>
<span class="na">ALGOLIA_ADMIN_KEY</span><span class="o">=</span><span class="s">XXXXXX</span>
<span class="na">ALGOLIA_INDEX_NAME</span><span class="o">=</span><span class="s">0x3f.org</span>
<span class="na">ALGOLIA_INDEX_FILE</span><span class="o">=</span><span class="s">public/index.json</span>
</code></pre></td></tr></table>
</div>
</div><p><code>APP_ID</code> 和 <code>ADMIN_KEY</code> 是前面复制的三项中的值，<code>INDEX_NAME</code> 是 Algolia 上的索引名称，随便起一个就行。<code>INDEX_FILE</code> 是生成站点时自动生成的索引文件的路径，一般不需要修改。</p>
<p>安装自动提交索引到 Algolia 的脚本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">npm install atomic-algolia -g
</code></pre></td></tr></table>
</div>
</div><p>执行提交：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">atomic-algolia
</code></pre></td></tr></table>
</div>
</div><p>因为我所用的主题是支持 Algolia 的，所以把 “Application ID”、“Search-Only Key”和索引名称填到配置文件中对应的项后就可以使用搜索了。</p>
<h2 id="添加评论功能">添加评论功能</h2>
<p>用了很多年 Disqus ，这次打算换用 Github Issues ，选择了 <a href="https://utteranc.es/" target="_blank" rel="noopener noreffer">Utterances</a> 。</p>
<p>主题原生支持，注册账号后简单配置即可。</p>
<h2 id="favicon">Favicon</h2>
<p>原来简单粗暴地用了唯一在的图标文件，这次改用 <a href="https://realfavicongenerator.net/" target="_blank" rel="noopener noreffer">Favicon Generator</a> 生成一套对多平台浏览器优化的图标。</p>
<p>把全套文件放到 <code>static/</code> 目录下即可。</p>
<h2 id="部署到-github-pages">部署到 Github Pages</h2>
<p>Github Pages 支持多种站点生成方式，由于 Hexo 默认使用 master 分支管理生成的静态资源，而站点源码存放在 source 分支，所以我打算沿用这个方案，在继续使用 master 分支存放静态资源的同时，新增一个 hugo 分支，管理源码。</p>
<h3 id="手动部署">手动部署</h3>
<p>Hugo 会将生成的静态资源存放在项目根目录下的<code>public</code>目录中，所以需要将 master 分支检出到该目录：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">git worktree add -B master public origin/master
</code></pre></td></tr></table>
</div>
</div><p>生成站点并部署：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">hugo
<span class="nb">cd</span> public <span class="o">&amp;&amp;</span> git add —all
git commit
git push -f origin master
</code></pre></td></tr></table>
</div>
</div><p>很快就能看到新网站了。</p>
<h3 id="自动部署">自动部署</h3>
<p>Hugo 并没有提供 Hexo 那样的自动部署命令，所以要么把上述手动部署的命令写成脚本，要么使用自动部署工具，恰好 Github Actions 可以很好地实现。</p>
<p>创建 <code>.github/workflows/main.yml</code> 文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="k">name</span><span class="p">:</span><span class="w"> </span>github<span class="w"> </span>pages<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">on</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">push</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">branches</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- hugo<span class="w">
</span><span class="w">
</span><span class="w"></span><span class="k">jobs</span><span class="p">:</span><span class="w">
</span><span class="w">  </span><span class="k">deploy</span><span class="p">:</span><span class="w">
</span><span class="w">    </span><span class="k">runs-on</span><span class="p">:</span><span class="w"> </span>ubuntu<span class="m">-18.04</span><span class="w">
</span><span class="w">    </span><span class="k">steps</span><span class="p">:</span><span class="w">
</span><span class="w">      </span>- <span class="k">uses</span><span class="p">:</span><span class="w"> </span>actions/checkout@v2<span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  </span><span class="c"># Fetch Hugo themes (true OR recursive)</span><span class="w">
</span><span class="w">          </span><span class="k">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">    </span><span class="c"># Fetch all history for .GitInfo and .Lastmod</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Setup<span class="w"> </span>Hugo<span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>peaceiris/actions-hugo@v2<span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">        </span><span class="c">#   hugo-version: &#39;0.71.1&#39;</span><span class="w">
</span><span class="w">          </span><span class="k">hugo-version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;latest&#39;</span><span class="w">
</span><span class="w">          </span><span class="c"># extended: true</span><span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Build<span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>hugo<span class="w"> </span>--minify<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Deploy<span class="w">
</span><span class="w">        </span><span class="k">uses</span><span class="p">:</span><span class="w"> </span>peaceiris/actions-gh-pages@v3<span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">github_token</span><span class="p">:</span><span class="w"> </span>${{<span class="w"> </span>secrets.GITHUB_TOKEN<span class="w"> </span>}}<span class="w">
</span><span class="w">          </span><span class="k">publish_dir</span><span class="p">:</span><span class="w"> </span>./public<span class="w">
</span><span class="w">          </span><span class="k">publish_branch</span><span class="p">:</span><span class="w"> </span>master<span class="w">
</span><span class="w">
</span><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Update<span class="w"> </span>Algolia<span class="w"> </span>Index<span class="w">
</span><span class="w">        </span><span class="k">env</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">ALGOLIA_APP_ID</span><span class="p">:</span><span class="w"> </span>XXXXXX<span class="w">
</span><span class="w">          </span><span class="k">ALGOLIA_ADMIN_KEY</span><span class="p">:</span><span class="w"> </span>${{<span class="w"> </span>secrets.ALGOLIA_ADMIN_KEY<span class="w"> </span>}}<span class="w">
</span><span class="w">          </span><span class="k">ALGOLIA_INDEX_NAME</span><span class="p">:</span><span class="w"> </span><span class="m">0x3f</span>.org<span class="w">
</span><span class="w">          </span><span class="k">ALGOLIA_INDEX_FILE</span><span class="p">:</span><span class="w"> </span>public/index.json<span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span><span class="sd">|
</span><span class="sd">          sudo apt-get -yqq install npm</span><span class="w">
</span><span class="w">          </span>sudo<span class="w"> </span>npm<span class="w"> </span>install<span class="w"> </span>atomic-algolia<span class="w"> </span>-g<span class="w">
</span><span class="w">          </span>atomic-algolia<span class="w">
</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p>注意替换 <code>ALGOLIA_APP_ID</code> 的真实值，并把 Algolia 的“Admin API Key”添加到 Github 项目设置中的“Secrets”里，名称为“ALGOLIA_ADMIN_KEY”。</p>
<p>以后再在 hugo 分支推送新的提交时，Github Actions 就会自动执行部署操作。</p>
<hr>
<p>从06年在中国博客网上开始写文章，到后来换到个人搭建并售卖的 Wordpress，五年颠沛流离的博客生涯终于在12年结束并<a href="/post/migrate-blog-to-octopress/" rel="">定居到 Github 上</a>，之后 Octopress 一用就又是五年。17年，因为 Octopress 转换速度太慢，<a href="/post/migrate-octopress-to-hexo/" rel="">换成了 Hexo</a>。</p>
<p>我想，这次折腾之后，应该能再安分五年吧。</p>]]></description></item><item><title>用Github当图床</title><link>http://0x3f.org/post/take-github-as-image-hosting-service/</link><pubDate>Thu, 06 Feb 2020 22:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/take-github-as-image-hosting-service/</guid><description><![CDATA[<p>微博图床的域名不知道什么时候改了，Google找不到相关信息，经过排查发现原域名中的“ws”改成了“wx”，浪费了不少时间。</p>
<p>于是打算换图床。</p>
<p>Github自从去年扩大免费账户享受的权利后，单个仓库的大小没有硬性限制，很适合做图床。</p>
<p>uPic是个很好用的图床辅助工具，支持Github。</p>
<p></p>
<p>同类工具还有PicGo。</p>]]></description></item><item><title>把博客字体改成了方正北魏楷书</title><link>http://0x3f.org/post/set-blog-webfont-to-fzbeiweikaishu/</link><pubDate>Mon, 14 Aug 2017 16:05:30 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/set-blog-webfont-to-fzbeiweikaishu/</guid><description><![CDATA[<p>我曾说过<a href="/post/best-practices-of-calibre-on-formatting/" rel="">方正北魏楷书是最佳的阅读字体</a>，不过后来感觉长时间阅读的体验还是普通的楷体更好。但这并不妨碍在Reeder、博客这种短时阅读场合突出页面的设计感。</p>
<p>今天把博客（hexo）的webfont改成了方正北魏楷书，用font-spider压缩后，从13M缩减到1.4M。方法是这样的：</p>
<p>首先把完整的字体复制到主题的字体目录中（themes/crisp/source/fonts），文件名为<code>FZBeiWeiKaiShu-full.ttf</code>。</p>
<p>在CSS中加入webfont配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">@</span><span class="k">font-face</span> <span class="p">{</span>
  	<span class="nt">font-family</span><span class="o">:</span> <span class="s1">&#39;FZBeiWeiKaiShu&#39;</span><span class="o">;</span>
    <span class="nt">src</span><span class="o">:</span> <span class="nt">url</span><span class="o">(</span><span class="s1">&#39;../fonts/FZBeiWeiKaiShu.ttf&#39;</span><span class="o">)</span> <span class="nt">format</span><span class="o">(</span><span class="s1">&#39;truetype&#39;</span><span class="o">),</span>
         <span class="nt">url</span><span class="o">(</span><span class="s1">&#39;../fonts/FZBeiWeiKaiShu-full.ttf&#39;</span><span class="o">)</span> <span class="nt">format</span><span class="o">(</span><span class="s1">&#39;truetype&#39;</span><span class="o">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p><code>FZBeiWeiKaiShu.ttf</code>是压缩后的字体文件名，这样访问时浏览器会优先下载压缩后的字体。</p>
<p>然后把CSS中使用字体的地方都指定为<code>FZBeiWeiKaiShu</code>。</p>
<p>在博客根目录下创建脚本<code>update_fonts.sh</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/sh
</span><span class="cp"></span>
hexo clean
hexo g

find public -name <span class="s2">&#34;*.html&#34;</span> <span class="p">|</span>xargs sed -i <span class="s1">&#39;&#39;</span> <span class="s2">&#34;s#/styles/crisp.css#</span><span class="nv">$HOME</span><span class="s2">/Projects/blog/public/styles/crisp.css#g&#34;</span>
find public -name <span class="s2">&#34;*.html&#34;</span><span class="p">|</span>xargs font-spider

cp -f public/fonts/FZBeiWeiKaiShu.ttf themes/crisp/source/fonts/FZBeiWeiKaiShu.ttf

hexo clean
hexo s -g
</code></pre></td></tr></table>
</div>
</div><p>除非用到新的字符，否则不需要经常更新字体。</p>
<p>font-spider会提示一共使用了多少种字符，我这么多年也只用到三千多种，真是太没文化了。🤥</p>
]]></description></item><item><title>从 Octopress 迁移到 Hexo</title><link>http://0x3f.org/post/migrate-octopress-to-hexo/</link><pubDate>Wed, 08 Feb 2017 20:24:16 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/migrate-octopress-to-hexo/</guid><description><![CDATA[<p>因为原来的主题没有针对中文优化，显示效果不太好，在搜索新主题的时候顺便了解了一下其它几个静态博客生成工具，发现Hexo比Octopress有很大的优势，就迁移了过来。</p>
<p>Hexo的优势：</p>
<ul>
<li>速度快：几百篇文章只需要几秒，而Octopress需要几十秒</li>
<li>易用：配置、部署简单，文章被修改后会立即更新浏览器中的预览页面</li>
<li>轻量：基于node.js，目录结构简明</li>
</ul>
<p>迁移的过程不算顺利，先是遇到「MODULE_NOT_FOUND」的问题，搜到的方法都不起作用，原因大概是因为墙的问题导致dtrace模块安装出错，理论上用代理安装是可以解决的，结果在反复安装的过程中莫名其妙地就好了。</p>
<p>再一个问题是选主题，喜欢极简的风格，但是极简又大气的主题很少，相对最喜欢的是<a href="https://github.com/yuche/hexo-theme-kael" target="_blank" rel="noopener noreffer">kael</a>，不过生成速度非常慢，而且生成的页面有大量乱码。于是退而求其次，选择了<a href="https://github.com/guolin/crisp-hexo-theme" target="_blank" rel="noopener noreffer">crisp</a>。然而还是有不满意的地方，比如过于简单、没有搜索、不区分首页和归档等，还有待自己修改。</p>
]]></description></item><item><title>UltraBlog.vim v3.6.1: 文章分类自动补全</title><link>http://0x3f.org/post/ultrablog-v361-released/</link><pubDate>Sun, 20 Apr 2014 22:50:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/ultrablog-v361-released/</guid><description><![CDATA[<p>春节期间收到两个issue，一直拖到今天才有时间完成。</p>
<p>增加了一个功能，在文章编辑视图的元数据中分类那行，使用热键&lt;C-X&gt;&lt;C-U&gt;自动完成文章的分类。在配置数组<strong>ub_blog</strong>中增加键值对“categories”，默认使用这一项的值实现自动完成，如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="k">let</span> <span class="nx">ub_blog</span> <span class="p">=</span> {<span class="s1">&#39;login_name&#39;</span>:<span class="s1">&#39;admin&#39;</span><span class="p">,</span><span class="err">
</span><span class="err"></span>            \<span class="s1">&#39;password&#39;</span>:<span class="s1">&#39;pass2011&#39;</span><span class="p">,</span><span class="err">
</span><span class="err"></span>            \<span class="s1">&#39;url&#39;</span>:<span class="s1">&#39;http://www.sample.com/&#39;</span><span class="p">,</span><span class="err">
</span><span class="err"></span>            \<span class="s1">&#39;xmlrpc_uri&#39;</span>:<span class="s1">&#39;xmlrpc.php&#39;</span><span class="p">,</span><span class="err">
</span><span class="err"></span>            \<span class="s1">&#39;db&#39;</span>:<span class="s1">&#39;$VIM/UltraBlog.db&#39;</span><span class="p">,</span><span class="err">
</span><span class="err"></span>            \<span class="s1">&#39;categories&#39;</span>: <span class="s1">&#39;News|Computer|Image&#39;</span><span class="err">
</span><span class="err"></span>            \}<span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>如果这一项不存在，将从博客中拉取分类数据。</p>
<p>自从迁移到Octopress，有两年不用Wordpress了，没想到居然还有人在用<a href="/post/ultrablog-as-an-ultimate-vim-blogging-plugin/" rel="">UltraBlog.vim</a>。</p>
]]></description></item><item><title>迁移到 Octopress</title><link>http://0x3f.org/post/migrate-blog-to-octopress/</link><pubDate>Sat, 23 Jun 2012 23:13:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/migrate-blog-to-octopress/</guid><description><![CDATA[<h2 id="关于迁移">关于迁移</h2>
<p>前段时间，用了五年的虚拟主机突然限制了PHP内存上限，导致Wordpress只能启用有限的几个插件，根本不能满足需要。</p>
<p>所以毅然决定迁移到JeckyII+GitHub，在摸索的过程中发现octopress比JeckyII易用，于是导出所有文章，开始迁移。因为我这几年博客写得比较乱，无论是内容上，还是发表方式上，结果用了几个导出脚本，效果都不甚理想，还是有很多地方需要手工修改。六百篇文章，正好趁这个机会挑拣一下，较早的文章质量低的比较多。断断续续地迁移了一些，剩下的工作量还是很大的，留著以后慢慢来吧。另外这次把URL也改成永久格式了，这一来真的伤筋动骨了，连永久重定向都没的做。</p>
<p>至于Feed输出，以前订阅Feedburner烧录的两个地址的读者不受影响，直接订阅Wordpress输出的地址的就丢了，这里再公布一下：</p>
<ul>
<li>本博客聚合输出：http://feeds.feedburner.com/sinolog</li>
<li>我的全部资讯聚合：http://feeds.feedburner.com/leninlee</li>
</ul>
<h2 id="迁移那点事">迁移那点事</h2>
<h3 id="python-版本的问题">Python 版本的问题</h3>
<p>Archlinux很激进，早已把Python的缺省版本进化到了3.x，octopress会用到2.x，结果在生成全站的时候，会报如下错误：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">  File &#34;&lt;string&gt;&#34;, line 1
    import sys; print sys.executable
                        ^
SyntaxError: invalid syntax
</code></pre></td></tr></table>
</div>
</div><p>在<a href="http://blog.dayanjia.com/2012/04/fix-rubypython-bug-in-arch-linux/" target="_blank" rel="noopener noreffer">这里</a>找到解决方法。在octopress的plugins目录里创建文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">&#39;pygments&#39;</span>

<span class="k">if</span> <span class="o">!!</span><span class="no">RUBY_PLATFORM</span><span class="o">[</span><span class="s1">&#39;linux&#39;</span><span class="o">]</span>
    <span class="no">RubyPython</span><span class="o">.</span><span class="n">configure</span> <span class="ss">:python_exe</span> <span class="o">=&gt;</span> <span class="s1">&#39;/usr/bin/python2&#39;</span>
<span class="k">end</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="不足">不足</h3>
<p>用了这段时间octopress，感觉缺点也不小，每次修改后都要重新生成全站，占用系统资源不小，而且理论上以后会越来越慢。</p>
]]></description></item><item><title>UltraBlog.vim v3.5.0: 内建浏览器</title><link>http://0x3f.org/post/ultrablog-v350-released/</link><pubDate>Mon, 30 Apr 2012 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/ultrablog-v350-released/</guid><description><![CDATA[<p>此前预览文章是通过调用系统默认的网络浏览器实现的，缺点是这些功能完备的浏览器启动速度不甚理想，尤其是火狐，谁用谁知道。</p>
<p>前两天看了TuxRadar的一个Podcast，几分钟内就可以用pywebkitgtk拼装出一个五脏俱全的网络浏览器，pywebkitgtk这个东西实在是非常的好用。不过我实测后发现这东西加载页面的速度比较慢，而且貌似是单线程的，因为图片都是放在最后才加载，不知道是这个绑定本身的问题，还是有API可以实现的。于是突然想到拿这个东西实现一个简单的浏览器，很适合在UB里预览文章。</p>
<p>增加了一个选项<strong>“ub_use_ubviewer”</strong>，默认值是1，即默认使用这个内建的浏览器预览文章。当这个选项的值被设为0时，仍然使用系统的默认浏览器，并且在Vim启动时不会加载内建的浏览器。这样做一是为了多一种选择，再一个也可以避开烦人的GTK警告：</p>
<blockquote>
<p>** (gvim:13629): WARNING **: Trying to register gtype 'GMountMountFlags' as enum when in fact it is of type 'GFlags'</p>
<p>** (gvim:13629): WARNING **: Trying to register gtype 'GDriveStartFlags' as enum when in fact it is of type 'GFlags'</p>
<p>** (gvim:13629): WARNING **: Trying to register gtype 'GSocketMsgFlags' as enum when in fact it is of type 'GFlags'</p>
</blockquote>
<p>这些警告是GTK或其它一些程序库的Bug造成的，虽然只在虚拟终端中启动Vim时会显示并且不影响使用，但总会有警告恐惧症患者会觉得这种东西很闹心。如果这样，就把这个选项的值设成0，用回巨型浏览器好了。</p>
<p>本次更新的全部内容如下：</p>
<ul>
<li>Feature: Add a tiny web browser to do previewing, which starts much faster than full-functional browsers like firefox and chromium. The later ones are still supported. The matter that whether or not to use the new previewer is controlled by a new option <strong>ub_use_ubviewer</strong>.</li>
<li>Bugfix: Issue 7: Keywords highlighting is disabled in item lists, even if searches are made manually.</li>
</ul>
<p>关于UB的详细信息在<a href="http://0x3f.org/?p=1894">这里</a>。</p>
<p>这是那个Podcast：</p>
<p><embed src='http://player.youku.com/player.php/sid/XMzg5MTc1OTI4/v.swf' quality='high' width='480' height='400' align='middle' allowScriptAccess='sameDomain' type='application/x-shockwave-flash'></embed></p>
<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item><item><title>UltraBlog.vim v3.4.0: 正则表达式、批量替换和调试模式</title><link>http://0x3f.org/post/ultrablog-v340-released/</link><pubDate>Sun, 29 Apr 2012 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/ultrablog-v340-released/</guid><description><![CDATA[<p>这次的更新主要引入了支持正则表达式的全文检索、批量替换和调试模式。</p>
<h2>正则表达式</h2>
<p>我一直觉得原来的全文检索有一个遗憾，虽然可以通过多个关键词实现较为精确的查询，但还是不如正则表达式灵活和精确。</p>
<p>这是个蓄谋已久的需求，但直到真正做起来，才发现很多有意思的东西。虽然SQLite3提供支持正则表达式查询的<strong>“REGEX”</strong>关键词，但并没有实际实现这个功能，而是需要写程序实现并在数据库接口中注册这个函数：</p>
```python
import sqlite3

conn = sqlite3.connect('/tmp/your-database-file.db')

# 使用正则表达式匹配给定内容的函数，返回布尔类型
def regexp_search(expr, item):
    """Check if the item has a sub-string which matches the expr"""
    reg = re.compile(expr)
    return reg.search(item) is not None

# 在数据库中注册这个函数
conn.create_function('REGEXP', 2, regexp_search)

cur = conn.execute('select id,title from post where content REGEXP ?', '\babc\b')
row = cur.fetchone()
print row

conn.close()
```

<p>在SQLAlchemy中具体的实现方式是：</p>
```python
# 注册函数
dbe = sqlalchemy.create_engine("sqlite:///tmp/your-database-file.db")
conn = dbe.connect()
conn.connection.create_function('REGEXP', 2, regexp_search)

# 在SQL Expression Language中创建查询条件
tbl = Post.__table__
cond_1 = tbl.c.title.op('regexp')(r'\babc\b')
cond_2 = tbl.c.content.op('regexp')(r'\babc\b')
```

<p>和普通的全文检索一样，正则表达式的全文检索也支持使用多个表达式作为查询条件，多个条件之间是与的关系。现在可以这样查询所有包含“UltraBlog.vim”但不把推广代码算在内的文章了：</p>
```vim
:UBRegexSearch [^\[]UltraBlog\.vim[^\]]
```

<h2>批量替换</h2>
<p>在我换过新域名后，我就觉得这个功能很有必要了：</p>
```vim
:UBReplace https://sinolog.it https://0x3f.org
```

<p>包含第一个参数内容并被替换的文章数目会显示在Vim的命令输出缓冲区中。</p>
<p>有了前面实现全文检索支持正则表达式的尝试，再实现支持正则表达式的批量替换就容易多了：</p>
```python
# 转换字符串成raw格式的函数
def raw(text):
    """Returns a raw string representation of text"""
    escape_dict={'\a':r'\a', '\b':r'\b', '\c':r'\c', '\f':r'\f', '\n':r'\n',
               '\r':r'\r', '\t':r'\t', '\v':r'\v', '\'':r'\'', '\"':r'\"',
               '\0':r'\0', '\1':r'\1', '\2':r'\2', '\3':r'\3', '\4':r'\4',
               '\5':r'\5', '\6':r'\6', '\7':r'\7', '\8':r'\8', '\9':r'\9'}
    return "".join([escape_dict.get(char,char) for char in text])

# 使用正则表达式替换字符串的函数
def regex_replace(string, expr, repl):
    """Do substitutions on the string for repls matching the expr"""
    r = re.compile(raw(expr))
    return r.sub(repl, string)

# 在数据库中注册这个函数
conn.connection.create_function('regex_replace', 3, regex_replace)

# 在SQL语句中使用这个函数
sql_replace = "update post set title=regex_replace(title,:needle,:replacement),content=regex_replace(content,:needle,:replacement)"
conn.execute(sql_replace, {'needle':r'\babc\b', 'replacement':'xyz'})
```

<p>最终，这个命令是这样的：</p>
```vim
:UBRegexReplace \babc\b xyz
```

<p>实现批量替换容易，但要解决由此引出的一个问题就费周折了，就是批量替换过文章内容后怎样和博客同步的问题，现在我还没有好的想法，留作以后实现。</p>
<h2>调试模式</h2>
<p>开启调试模式可以将所有被执行的SQL语句显示在Vim的命令输出缓冲区中，在有异常抛出时，也可以显示堆栈信息。由于开启调试模式既不需要修改代码，也不需要重启Vim，这可以极大地方便开发时对UltraBlog.vim的调试，也能使用户提交问题时能反馈更多更详细的信息。</p>
<p>以下三个命令用于控制调试模式的开启状态：</p>
<ul>
<li><code>:UBEnableDebug</code></li>
<li><code>:UBDisableDebug</code></li>
<li><code>:UBToggleDebug</code></li>
</ul>
<h2>其它内容</h2>
<p>本次更新的内容如下：</p>
<ul>
<li>Feature: Add the command <strong>:UBRegexSearch</strong>, doing full-text searches with regular expressions !</li>
<li>Feature: Add the command <strong>:UBReplace</strong>, doing full-text substitutions.</li>
<li>Feature: Add the command <strong>:UBRegexReplace</strong>, doing full-text substitutions with regular expressions.</li>
<li>Feature: Add commands <strong>:UBEnableDebug</strong>, <strong>:UBDisableDebug</strong>, <strong>:UBToggleDebug</strong> and an option <strong>ub_debug</strong>. In debug mode, SQL statements and stack traces of exceptions will be displayed.</li>
<li>Change:  Undo keywords highlighting after executing <strong>:UBList</strong>.</li>
<li>Bugfix:  Exceptions raised when opening the current item under cursor in item lists if the option <strong>ub_hotkey_save_current_item</strong> has not been set. Now this options comes with a default value.</li>
</ul>
<p>关于UB的详细信息在<a href="http://0x3f.org/?p=1894">这里</a>。</p>
<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item><item><title>UltraBlog.vim v3.3.0：I18N、超时时间和其它</title><link>http://0x3f.org/post/ultrablog-v330-released/</link><pubDate>Sun, 15 Apr 2012 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/ultrablog-v330-released/</guid><description><![CDATA[<p>UB一岁了，这算是个周年纪念版吧。</p>

<p>在这一年里，因为各种原因，博客写得没有以前多了，但每篇都是用这个插件写的，我觉得很好用。断断续续地做了一些修改，因为一切都是一个人在做，所以大的变化不多。这次这个版本里有些改动还是要感谢<a href="http://ihacklog.com/">荒野无灯</a>童鞋，他的<a href="https://github.com/xbot/UltraBlog.vim/issues/3">建议</a>很大程度上催生了这个新版本：比如加入保存命令的热键映射选项，这样可以使用保存普通文件的热键保存UB中的内容，我自己以前也经常习惯性地用错热键；还有socket超时时间的选项，最近我这里也经常性地在UB操作博客时报超时的异常，荒童鞋关于自定义socket超时时间的建议一语惊醒了梦中人。</p>

<p>此外，似乎与近期Vim的一次升级<a href="http://comments.gmane.org/gmane.editors.vim.devel/34092">有关</a>，在Vim中调用Python接口打印任何内容到标准IO都会导致Vim崩溃，所以这次把所有的输出都改成了调用Vim的输出命令来做。</p>

<p>本次修改的内容中，还有一项比较重要的内容就是实现了国际化，目前只提供英文和简体中文两种语言，由于Vimball不能处理二进制文件，所以从此以后UB改用zip格式压缩包打包。</p>

<p>以下是本次更新的详细内容：</p>

<ul>
<li>Feature: Add i18n support !</li>
<li>Feature: Add a new option <strong>ub_hotkey_save_current_item</strong>, users can define their own hotkey for <strong>:UBSave</strong>.</li>
<li>Feature: Add a new option <strong>ub_socket_timeout</strong>, users can customize the timeout period in seconds, useful for slow networks.</li>
<li>Bugfix:  Exception raised when one event is processed by more than one event handlers.</li>
<li>Change:  Echoing messages now uses the command :echoerr instead of python's sys.stderr, because Vim crashes on this due to an upgrade recently.</li>
<li>Change:  Change commands <strong>:UBSave</strong>, <strong>:UBSend</strong>, <strong>:UBUpload</strong>, <strong>:UBConv</strong>, <strong>:UBPreview</strong> to be available only in their effective views.</li>
<li>Change:  Lists are set nowrapped.</li>
<li>Bugfix:  Stop complaining '<strong>_pop from empty list_</strong>' while doing almost everything.</li>
</ul>

<p>关于UB的详细信息在<a href="http://0x3f.org/?p=1894">这里</a>。</p>

<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item><item><title>启用新域名0x3f.org</title><link>http://0x3f.org/post/enable-the-new-domain-name-0x3f-org/</link><pubDate>Mon, 09 Jan 2012 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/enable-the-new-domain-name-0x3f-org/</guid><description><![CDATA[<p>元旦假期第三天，还是把域名给换了。</p>

<p>原因主要是.it太贵，年费十几刀，而.org只有它的一半。另外，原来的sinolog.it有点儿长，也显老气，想换个更个性、更短的。</p>

<p>可惜中意的0xff有主了，只好退而求0x3f。0x3f在ASCII里面代表问号，象征“<strong>保持好奇心</strong>”。</p>

<p>按照<a href="http://0x3f.org/?p=1356">上次</a>的<a href="http://0x3f.org/?p=1359">经验</a>，对著数据库一通改，加上这两年四处沾花惹草，很多网站上的相关信息都得跟著改，长此以往，以后连域名都换不起了。</p>

<p>好在RSS订阅早已经换成了FeedBurner烧录，只是对于直接用原域名订阅的需要改一下订阅地址了。</p>

<p>用了几年国家域名，现在也用上国际域名了……</p>

<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item></channel></rss>