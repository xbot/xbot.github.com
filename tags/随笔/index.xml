<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随笔 on 晴耕雨讀</title><link>http://0x3f.org/tags/%E9%9A%8F%E7%AC%94/</link><description>Recent content in 随笔 on 晴耕雨讀</description><generator>Hugo</generator><language>zh-cn</language><copyright>© 2007-2024 鬼马妖刀</copyright><lastBuildDate>Mon, 14 Oct 2024 23:11:33 +0800</lastBuildDate><atom:link href="http://0x3f.org/tags/%E9%9A%8F%E7%AC%94/index.xml" rel="self" type="application/rss+xml"/><item><title>记第一次补胎</title><link>http://0x3f.org/posts/my-first-tire-repair/</link><pubDate>Mon, 14 Oct 2024 23:11:33 +0800</pubDate><guid>http://0x3f.org/posts/my-first-tire-repair/</guid><description>&lt;p>要说还是正新的胎不好，其它几辆车都是世文，最少的骑了一千多公里，最多的三千公里，一次都没扎过，这辆 Dash Altena 到手一个月，才三百多公里，就扎了。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/xbot/image-hosting/master/blog/2024-10-14-23-13-39-IMG_3147.jpeg" alt="2024-10-14-23-13-39-IMG_3147">&lt;/p>
&lt;p>以前只是理论上会补胎，看过教学视频，正好想实践一下，这不机会就来了么。&lt;/p>
&lt;p>买了补胎套装，补的还不错，骑了一圈长安街，降温后人少多了，均速第一次上了 26 。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/xbot/image-hosting/master/blog/2024-10-14-23-14-10-IMG_3159.jpeg" alt="2024-10-14-23-14-10-IMG_3159">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/xbot/image-hosting/master/blog/2024-10-14-23-14-33-IMG_3158.jpeg" alt="2024-10-14-23-14-33-IMG_3158">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/xbot/image-hosting/master/blog/2024-10-14-23-14-59-IMG_3160.jpeg" alt="2024-10-14-23-14-59-IMG_3160">&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/xbot/image-hosting/master/blog/2024-10-14-23-15-16-IMG_3163.jpeg" alt="2024-10-14-23-15-16-IMG_3163">&lt;/p>
&lt;p>实践出真知，再扎就换胎！&lt;/p></description></item><item><title>MacBook Pro 维修记</title><link>http://0x3f.org/posts/story-of-repairing-macbook-pro/</link><pubDate>Fri, 26 Jun 2020 23:29:24 +0800</pubDate><guid>http://0x3f.org/posts/story-of-repairing-macbook-pro/</guid><description>&lt;p>&lt;img src="https://raw.githubusercontent.com/xbot/image-hosting/master/blog/2020-06-26-23-36-49-%E4%B8%89%E9%87%8C%E5%B1%AF%E5%A4%AA%E5%8F%A4%E9%87%8C%E5%8D%97%E5%8C%BA.jpg" alt="img">&lt;/p>
&lt;p>生平第一次修电脑。&lt;/p>
&lt;p>17款的 MacBook Pro 13`，该有的问题全有——键盘随机连击或无反应、在桌面上放不平且触控板反馈很弱、疑似电池鼓包。&lt;/p>
&lt;p>用过 ThinkPad X200 和 X220，虽然屏幕很渣，但从来没出过问题。上一台电脑是 15 款的 MacBook Air，用了三年，也没事儿。只能说这届苹果不行。&lt;/p>
&lt;p>APP 上预约的三里屯店，时间下午两点多。太古里门口和店门口分别出示了一次健康码。虽然是工作日、而且在疫情期间，店里人不多也不少，还是等了一会儿。&lt;/p>
&lt;p>常规的询问和联机检查，大概花了十几分钟，没有要求提供任何凭证。店员说因为键盘和电池都在一起，所以是要一块换的。时间上快则一天，慢则两三天，就能修好。&lt;/p>
&lt;p>第二天晚上九点半，接到一个陌生座机号码打来的电话，以为是营销电话，而且之前看过有说换键盘用了一周时间的帖子，所以没往这上面想，就没接。&lt;/p>
&lt;p>第三天晚上看手机电池健康状态的时候，偶然看到电脑的维修状态是已完成，才意识到，回电话过去果然是三里屯苹果商店，但是没人接。&lt;/p>
&lt;p>今天早上九点多，再次打过去，说是十点才营业。于是决定直接过去。&lt;/p>
&lt;p>交接需要出示身份证，花了几分钟验机，很快结束。期间问店员如果之后键盘再坏了怎么办，说是有一年保修期，而且因为批次不同的原因，换过的键盘不容易再出问题。暗笑，换个批次就能解决的话，新款何至于换回剪刀脚？！&lt;/p>
&lt;p>回家后用了一会儿，新键盘和触控板体验很棒，没有打油的阻尼感沁人心脾，发了条 tweet 说：找回了初恋的感觉。&lt;/p></description></item><item><title>我叫王战斗</title><link>http://0x3f.org/posts/i-am-wang-zhandou/</link><pubDate>Sun, 01 Jul 2018 16:46:32 +0000</pubDate><guid>http://0x3f.org/posts/i-am-wang-zhandou/</guid><description>&lt;p>我叫王战斗，男，喵星人，狸花族，现年四个半月，折合成你们两脚兽的年龄算7岁了。&lt;/p>
&lt;p>虽然刚降临你星不久，但是我已经能驯服和驾驭两脚兽这种低等生物了。因为我发现这种生物本性里有一个致命弱点：对它很好反而不会珍惜，故作高冷却奴颜婢膝求抱抱！我们喵星管这叫「贱」。&lt;/p>
&lt;p>开始的时候，我的驭兽术还不熟练，而且我酷爱往两脚兽的脖子里钻，然后蹭它们的脸。结果它们不干了，在我才两个月零九天的时候就把我交给了现在这头两脚兽。是它们不懂喵星习俗好不好？！而且作为一个刚断奶的小正太，卖个萌怎么啦，怪我咯？&lt;/p>
&lt;p>我一直在暗中观察现在这头两脚兽。发现每隔五天，它都会在巢穴里待上两天，然后在接下来的五天里每天都消失一段时间。虽然有点好奇，不过也不是什么大事，只要我有吃有喝、两脚兽按时铲屎，每天给它放个风什么的我也OK，这是我们喵星高等生物的自我修养。&lt;/p>
&lt;p>不过还是要测试一下这货的驯服度。所以我命令它伺候我睡个午觉：
&lt;img src="https://wx4.sinaimg.cn/large/006tNbRwly1fwvx0d5683j31kw1kwb29.jpg" alt="">&lt;/p>
&lt;p>这货竟然没有反抗！！！&lt;/p>
&lt;p>有一天我发现它竟然在偷看我练习家传绝学「黑虎掏心」，我就瞪它，就瞪它：
&lt;img src="https://wx1.sinaimg.cn/large/006tNbRwly1fwvx0z5chyj31ei1ei4qp.jpg" alt="">&lt;/p>
&lt;p>有时候两脚兽全神贯注地照镜子，我就想看看它看的啥，然后它就扒拉我，我想一定是我高大威猛的身躯挡住它了：
&lt;img src="https://wx4.sinaimg.cn/large/006tNbRwly1fwvx1dzxegj31kw16okjm.jpg" alt="">&lt;/p>
&lt;p>这老头叫马霸霸，挺能白话的，它的巢穴已经被我军占领了：
&lt;img src="https://wx1.sinaimg.cn/large/006tNbRwly1fwvx1v8jh3j31kw1kwhdu.jpg" alt="">&lt;/p>
&lt;p>那天两脚兽带回来一只老鼠，我一眼就看出来是假的，但是这货一碰就叫啊，然后我就停不下来了，你星管这叫口嫌体正直，看著两脚兽谜之微笑，我觉得中了奸计：
&lt;img src="https://wx4.sinaimg.cn/large/006tNbRwly1fwvx2fq5ltj30sz0prq8x.jpg" alt="">&lt;/p>
&lt;p>更有甚者，它竟然趁我睡著的时候拍我裸照，还传到网上：
&lt;img src="https://wx1.sinaimg.cn/large/006tNbRwly1fwvx2ix4jej31kw23ve84.jpg" alt="">&lt;/p>
&lt;p>生亦何欢，死亦何惧。趁两脚兽上厕所的时候，叼走了卷纸，然后撕稀碎，有能耐学我们喵星人上完厕所自己舔干净啊？！
&lt;img src="https://wx2.sinaimg.cn/large/006tNbRwly1fwvx2zgpawj31kw1kw1kz.jpg" alt="">&lt;/p>
&lt;p>没想到报复来得如此突然，两脚兽不知道从哪儿搞了一瓶毒气，走到哪儿揣到哪儿，我一想搞事情就各种喷：
&lt;img src="https://wx4.sinaimg.cn/large/006tNbRwly1fwvx332k34j30lc0sgn0a.jpg" alt="">&lt;/p>
&lt;p>真臭啊，臭到怀疑喵生啊！
&lt;img src="https://wx1.sinaimg.cn/large/006tNbRwly1fwvx3jj4ktj31kw23v1kz.jpg" alt="">&lt;/p>
&lt;p>话说回来，大部分时间两脚兽还是没那么讨厌。比如这个会喷水的盒子，被我霸占后就成了我最常喝水的东西兼洗脚盆：
&lt;img src="https://wx3.sinaimg.cn/large/006tNbRwly1fwvxatojbkj31260v9k0s.jpg" alt="">&lt;/p>
&lt;p>两脚兽的厨艺也不赖：
&lt;img src="https://wx3.sinaimg.cn/large/006tNbRwly1fwvxb51icjj31kw1kw1kz.jpg" alt="">&lt;/p>
&lt;p>吹嘘自己慷慨的时候，两脚兽就指著这口袋说：「比我吃得都好。」其实就是618的打折货。
&lt;img src="https://wx3.sinaimg.cn/large/006tNbRwly1fwvx61t9ogj31kw1kw1kz.jpg" alt="">&lt;/p>
&lt;p>两脚兽就是个肥宅兼Nerd，且不说为了给我做饭专门买了台电动切碎机和保鲜盒。铲个屎都装绝命毒师：
&lt;img src="https://wx2.sinaimg.cn/large/006tNbRwly1fwvx6f8zwzj31kw14fhdv.jpg" alt="">&lt;/p>
&lt;p>某天整了把稀奇古怪的东西在床上、沙发上各种吸，完事非要说是我干的：
&lt;img src="https://wx2.sinaimg.cn/large/006tNbRwly1fwvx709q7qj31kw16o4qq.jpg" alt="">&lt;/p>
&lt;p>我的天啊！不就掉个毛么，全宇宙只有你们两脚兽光著屁股满世界跑！
&lt;img src="https://wx1.sinaimg.cn/large/006tNbRwly1fwvx75b1f9j31kw1kw7wi.jpg" alt="">&lt;/p>
&lt;p>我来，我见，我征服。我是王战斗，一个普通的驯兽师。
&lt;img src="https://wx3.sinaimg.cn/large/006tNbRwly1fwvx7kbr2hj30sg0sg0zr.jpg" alt="">&lt;/p></description></item><item><title>变形金刚真人电影系列被重置</title><link>http://0x3f.org/posts/transformers-live-action-movie-series-reset/</link><pubDate>Sun, 18 Feb 2018 11:51:13 +0000</pubDate><guid>http://0x3f.org/posts/transformers-live-action-movie-series-reset/</guid><description>&lt;p>根据这条&lt;a href="http://news.tfw2005.com/2018/02/16/transformers-cinematic-universe-current-movie-series-rebooted-358641">消息&lt;/a>，变形金刚真人电影系列将会被新团队重置，原定在明年的第6部被取消。也就是说，看完今年大黄蜂的电影后，2021年前都不会有变形金刚主题的新片了。&lt;/p>
&lt;p>这种壮士断腕的做法多少算是个好消息吧，经历了变5的失败，再让麦克尔贝这么折腾下去，变形金刚这个IP就完蛋了。&lt;/p>
&lt;p>我对这件事是无可无不可的。作为一个八零后，我对变形金刚的情怀来自G1动画，所以我的关注点主要是还原G1动画风格的Master Piece系列。在MPM-3出来之前，我对电影系的玩具没多大兴趣。&lt;/p>
&lt;p>当年变1上映的时候，我很难认同电影系的风格。但是后来从变1到变3，也逐渐地开始接受它，毕竟随著技术的进步，审美风格也会发生变化，没必要固守二、三十年前的东西。我对电影系最大的意见是剧情太烂，有句话很对，说一部戏好不好关键看反派角色，《蝙蝠侠之黑暗骑士崛起》之所以口碑不错，主要是大反派小丑这个角色很立体。回头说当年的G1动画最成功的一点也是霸天虎尤其威震天这个角色塑造得比较成功。反观电影系，相对于汽车人华丽的人形态和隐藏形态，霸天虎阵营就是一群猥琐的低级生物，而且人物性格的塑造极其脸谱化。&lt;/p>
&lt;p>直到后来变4的时候，风格进一步变化，加入大量骑士元素，机械元素的减少导致科技感进一步下降。最要命的是变4的玩具做得实在是一塌糊涂。至于变5，那真是电影做得和玩具一样烂。&lt;/p>
&lt;p>真是成也麦克尔贝，败也麦克尔贝。&lt;/p></description></item><item><title>中国移动异地补卡记</title><link>http://0x3f.org/posts/story-of-changing-sim-card/</link><pubDate>Fri, 16 Feb 2018 17:24:59 +0000</pubDate><guid>http://0x3f.org/posts/story-of-changing-sim-card/</guid><description>&lt;p>我妈的老SIM卡不能用在iPhone里。因为我的卡就是从大卡剪过来的，所以骑车转了一大圈，临近年关，大部分修手机的店、合作营业厅都关了，最后一个卖手机的店里的老板说这种老卡不能剪，只能换卡。&lt;/p>
&lt;p>之前听附近移动营业厅里的大堂经理说，换卡需要机主本人、身份证和服务密码，而且异地补卡只能去部分较大的营业厅。这个可以在网上营业厅里查到。&lt;/p>
&lt;p>事先在网上营业厅重置了服务密码。第二天一早，去了最近的可以异地补卡的营业厅。工作人员给了张纸条，让写下手机号、服务密码，他们查了一下，说是鉴权失败，让第二天再去。留了营业厅的电话，事先让他们查一下，确认可以办了再去。&lt;/p>
&lt;p>第三天早上十点，打电话过去，说是办异地补卡的人还没来。十一点再打过去，查了一下，说是可以办了。去之前差点没带手机，因为感觉就是办张卡，回来装也一样。事实证明，不带会后悔。&lt;/p>
&lt;p>补卡也需要用手写板签字和人脸识别，因为是2d图像识别，所以很傻，需要摇头、点头、眨眼、张嘴，在张嘴这一步重试了很多次都失败……&lt;/p>
&lt;p>补的第一张卡插到手机里不能识别，第二张才成功。&lt;/p>
&lt;p>总结以上，异地补卡需要注意这些点：&lt;/p>
&lt;ul>
&lt;li>本人、身份证、服务密码（服务密码可以去网上营业厅重置，前提是卡还在，还能接到短信）&lt;/li>
&lt;li>去能办理异地补卡的营业厅（可以在网上营业厅查询，或者打客服电话）&lt;/li>
&lt;li>不要去太早，最好事先打电话让他们查一下，确认可以办了再去&lt;/li>
&lt;li>一定要带手机和开卡槽的工具，现场装卡测试&lt;/li>
&lt;/ul></description></item><item><title>癸丑望，月有食之</title><link>http://0x3f.org/posts/lunar-eclipse/</link><pubDate>Wed, 31 Jan 2018 23:54:41 +0000</pubDate><guid>http://0x3f.org/posts/lunar-eclipse/</guid><description>&lt;p>大概这是我第一次看月全食，暗红色，挺大个儿，但是拍出来就显得很小。论效果， iPhone X 还不如几年前的 LX5 。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/xbot/image-hosting/master/blog/2023-08-25-11-32-18-E9217241-82D8-4B12-8327-48DC8D947709_1_105_c.jpeg" alt="2023-08-25-11-32-18-E9217241-82D8-4B12-8327-48DC8D947709_1_105_c">&lt;/p></description></item><item><title>测试驱动开发的实际收益</title><link>http://0x3f.org/posts/the-real-income-of-tdd/</link><pubDate>Sun, 17 Dec 2017 14:20:02 +0000</pubDate><guid>http://0x3f.org/posts/the-real-income-of-tdd/</guid><description>&lt;p>我并不试图系统地谈TDD，因为我在这方面的经验还不足以做到这一点。但是TDD的一些方法论和工具确实解决了我在实际开发过程中遇到的一些问题。&lt;/p>
&lt;p>第一个问题是健壮性。尤其是对于我这样思维发散、容易迷失又喜欢重构的人，TDD给了我一个明确的目标，在一切刚开始的时候，我要做的只是满足测试用例，让它们由红变绿。到了重构阶段，我就可以把精力放到优化代码上面，且不必对健壮性有过多的担心。在此之前，由于手动测试比较麻烦，很多时候惰性会说服潜意识告诉自己这部分逻辑很简单、不会有什么bug，结果提交测试后却一再地发生问题。&lt;/p>
&lt;p>第二个问题是效率。曾经只有不忙的时候才会写测试用例，但是现在一般都会写，因为确实可以提高开发效率，而不只是保证重构的健壮性。可能对于所有对单元测试不熟悉的人来说，这都是匪夷所思的，我也曾认为单元测试只是用来保证健壮性的，必然和开发效率是一对矛盾，因为要花很多时间写测试代码。这种想法首先是因为对单元测试不熟悉，所以才需要花很多时间在上面。其次是没有看到它所带来的好处。&lt;/p>
&lt;p>例如你要实现一整套退款单的功能，退款单是依赖订单的，这意味著你需要不只一条符合条件的订单数据。但是订单是有状态的，随著时间的推移、人为的操作或者开发过程中程序的影响，状态会变得不再符合你的要求，这时候你就必须停下来去做更多符合要求的订单。而创建订单也存在很多麻烦，你需要找到有库存的商品，有时候还要去库管系统中补充库存，然后下单并支付。最后花了很多时间做出来的订单，因为正在开发的退款单的程序出现的一个小问题变得不能使用！时间被大量浪费在创建所依赖的上游数据上。&lt;/p>
&lt;p>这时候如果用单元测试并mock出依赖关系，就可以随时随地、无限制地执行相关的业务逻辑。对效率的提高不言而喻。&lt;/p>
&lt;p>特别的，mock并不是随时可以抓起的救命稻草，它的原罪在于：不负责任地滥用mock会导致很多问题被掩盖。因此，对mock的使用应该是节制的、目标明确的。&lt;/p>
&lt;p>当然，这并不包括单纯地为了提高代码覆盖率而使用mock，只所以这是个在很多强制TDD的团队里的普遍现象，归根结底是因为KPI是万恶之源，任何好的方法论，一旦沦为KPI，就离死不远了。&lt;/p></description></item><item><title>电影《疾速追杀》</title><link>http://0x3f.org/posts/movie-john-wick/</link><pubDate>Sun, 26 Nov 2017 10:09:34 +0000</pubDate><guid>http://0x3f.org/posts/movie-john-wick/</guid><description>&lt;p>上周看了《疾速追杀》和《疾速特攻》，后者是前者的第二部。&lt;/p>
&lt;p>情节比较老套：一个因爱退隐的职业杀手，在妻子病逝、黑道欺凌下，不得以奋起反击、与整个杀手行业为敌，最后善恶有报、空余萧索。&lt;/p>
&lt;p>知道这部戏是因为和《极寒之城》是同一个导演，卖点都是暴力美学，风格不同。《极寒之城》用不加特效的长镜头表现格斗的残酷，画风冷峻。《疾速》系列更像《杀死比尔》，场面华丽，十步杀一人、千里不留行。&lt;/p>
&lt;p>关于暴力美学，维基百科是这么解释的：&lt;/p>
&lt;blockquote>
&lt;p>主要在官感上，使暴力以美学的方式呈现，诗意的画面，甚至幻想中的镜头来表现人性暴力面和暴力行为。观赏者本身往往惊叹于艺术化的表现形式，无法对内容产生具体的不舒适感。支持人士往往称「暴力程度与票房收入成正比」，社会道德捍卫者和舆论谴责人士则称其是对社会道德教化的阻碍和负面影响；恐引发心理未臻成熟的人们，间接以为暴力行为亦是一种美感的呈现。&lt;/p>
&lt;p>在众多香港导演中，吴宇森是运用这种电影表现手法的代表性人物。其标志性的白鸽漫天飞舞，手持双枪的英雄人物纵横在屏幕之上，使象征和平和安详的白鸽与血腥暴力的枪弹形成了强烈的视觉反差，吸引了无数的目光。&lt;/p>
&lt;/blockquote>
&lt;p>然而我并不打算马上去看新《追捕》，炒冷饭的鲜有好戏，等等再说。&lt;/p></description></item><item><title>电影《极寒之城》</title><link>http://0x3f.org/posts/movie-atomic-blonde/</link><pubDate>Sun, 29 Oct 2017 10:14:56 +0000</pubDate><guid>http://0x3f.org/posts/movie-atomic-blonde/</guid><description>&lt;p>这是最近看的电影里让我印象最深的一部。&lt;/p>
&lt;p>故事背景是1989年柏林墙倒塌前发生在德国的一场谍战。剧情组织得很一般，冷战和谍战这两个卖点做得都不成功，虽然塞隆和波多拉两位女神的床戏挽救了一切，但是女同的卖点只是一道开胃菜，最精彩的部分是中后段的一场动作戏，塞隆单挑一群克格勃，同时还要保护一个东德叛谍，长达数分钟的一个长镜头，场面极为真实，一改一般好莱坞动作片里打不死的风格。&lt;/p></description></item><item><title>读完《谈美》</title><link>http://0x3f.org/posts/after-reading-tan-mei/</link><pubDate>Sun, 29 Oct 2017 09:21:58 +0000</pubDate><guid>http://0x3f.org/posts/after-reading-tan-mei/</guid><description>&lt;p>&lt;img src="https://wx1.sinaimg.cn/large/006tNbRwly1fwvwx0p3twj31kw1kwhdu.jpg" alt="fullsizeoutput_301">&lt;/p>
&lt;p>这本书讲的是「什么是美」。读完后对美有了一些基本的概念，才知道我的审美水平还停留在「以快感为美」的阶段。&lt;/p>
&lt;p>朱自清的序里的一些话说得很好：「新文化是「外国的影响」，自然不错；但说一般青年不留余地地鄙弃旧的文学艺术，却非真理。」、「许多青年腻味了，索性一切不管，只抱著一条道理，「有文艺的嗜好就可以谈文艺」。这是「以不了了之」，究竟「谈」不出什么来。」&lt;/p></description></item><item><title>过度优化和过度设计</title><link>http://0x3f.org/posts/talk-about-excessive-design/</link><pubDate>Sun, 22 Oct 2017 21:38:08 +0000</pubDate><guid>http://0x3f.org/posts/talk-about-excessive-design/</guid><description>&lt;p>我见过两种程序员，一种是想做事的，一种是混饭吃的。&lt;/p>
&lt;p>第一种人最容易犯两个错误，一是过度优化，二是过度设计。两种错误共同的原因是经验不足，不同的地方是过度优化往往出于知其然不知其所以然，而过度设计一般是想得太远从而脱离实际。&lt;/p>
&lt;p>比如我见过的一个人，凡是联表的语句，都要拆开来写，完全不考虑这些联表语句实际会不会发生性能问题。**这就是过度优化，只记住一些成例和范式，不从实际出发，胶柱鼓瑟，刻舟求剑。**联表当然会造成数据量以笛卡尔积的形式增长，但如果所联表的数据量并不大，或者通过限制条件过滤后的数据量不大，并不会出现性能问题，而拆开SQL语句会导致代码量增大、可读性下降，是得不偿失的。&lt;/p>
&lt;p>至于过度设计，我自己就是个很好的反面教材。刚工作的时候，我在写程序之前和过程中会不断地冒出新的想法，设想到很多种可能，为了照顾到这些可能性，我会不断地重构程序，导致出活很慢。多数人并不会认真了解别人，只是从结果上武断地下结论。所以关于我写程序太慢的说法就悄悄流传开，而那些程序写得很烂、混饭吃但出活很快的人反而获利颇丰。最可笑的是过了很长时间后回顾曾经设想到的可能性，几乎全部没有发生。&lt;strong>为一些将来可能发生而实际没有发生的可能性，在一开始就花费更多的成本，这就是过度设计。&lt;/strong>&lt;/p>
&lt;p>不过经验作为知识存量，是不值钱的，假以时间，有一定认知水平、不甘于庸俗的人总可以积累得到。所以相对于第二种人，我宁愿和第一种共事。&lt;/p></description></item><item><title>为什么不应该给表名加前缀</title><link>http://0x3f.org/posts/why-prefixes-are-not-needed-for-table-names/</link><pubDate>Mon, 25 Sep 2017 14:12:41 +0000</pubDate><guid>http://0x3f.org/posts/why-prefixes-are-not-needed-for-table-names/</guid><description>&lt;p>表前缀是个过时的东西。在计算机资源比较昂贵的时代，出于节约成本的需要，会把多个系统的数据放在同一个数据库实例里，所以才会用前缀区分。如今各种云的普及，使这个问题早已经不存在，大家的资源都是冗余的，没有人会把多个系统的表放到同一个库里，这会给运维带来不必要的麻烦。&lt;/p>
&lt;p>然而身边总是会遇到胶柱鼓瑟的人，知其然而不知其所以然。表前缀既非必要，又会导致一些问题。&lt;/p>
&lt;p>其一是写代码时的困扰。比如我经常会在用查询构造器时忘了给表别名加前缀，直到程序报错才突然想起来。&lt;/p>
&lt;p>其二是代码重构的问题。在构造SQL语句的过程中，总是免不了会写原生的语句，这时就得写死表前缀。如果将来表前缀发生变化，重构代码时会麻烦而容易出错。&lt;/p></description></item><item><title>Python 2还是3是个纠结的问题</title><link>http://0x3f.org/posts/bothered-by-python-2-vs-3/</link><pubDate>Sun, 30 Jul 2017 08:40:11 +0000</pubDate><guid>http://0x3f.org/posts/bothered-by-python-2-vs-3/</guid><description>&lt;p>前些天用denite取代unite，用&lt;code>--with-python3&lt;/code>重装了vim，结果发现vdebug只支持python 2。&lt;/p>
&lt;p>vim同时只能在py2和py3中选一个，据说可以通过重新编译python实现共存，但是我在编译py3的时候失败。&lt;/p>
&lt;p>neovim同时支持两个版本，但是尝试deoplete失败，报「Invalid Channel」的错误，似乎是python-neovim的锅。而且由于neovim内建lua、不支持&lt;code>has('lua')&lt;/code>，所以不能fall back到neocomplete。&lt;/p>
&lt;p>万般无奈，只好换回unite。&lt;/p></description></item><item><title>白鹿原、外乡人和窗外</title><link>http://0x3f.org/posts/routine-talk-170629/</link><pubDate>Thu, 29 Jun 2017 22:51:52 +0000</pubDate><guid>http://0x3f.org/posts/routine-talk-170629/</guid><description>&lt;p>&lt;img src="https://wx2.sinaimg.cn/large/006tNbRwly1fwvwyid54yj30wv0igdm7.jpg" alt="">&lt;/p>
&lt;p>今年端午恰好是开公众号一周年，成绩就不晒了，因为没有成绩，当初的目标好像一个都没实现，想著端午写几句话，结果又拖了一个月……&lt;/p>
&lt;p>这一年跌宕起伏，却是不足与人道，倒是最近看了两部剧，感觉还不错。&lt;/p>
&lt;p>《白鹿原》前段时间很火，我没看过原著，好像我骨子里不是个喜欢小说的，十几年前听说这本书的时候也没什么去读的冲动。这次看拍得还不错，就买了乐视的会员，每天追到凌晨一点。整体来说质量不错，阵容不算豪华，主演的几位演技都挺好，适合我这种没看过原著又很龟毛的。看过的就不用追了，影视剧永远赶不上原著。&lt;/p>
&lt;p>《外乡人》的知名度就差远了，我也是从豆瓣上翻高分剧翻出来的。几年前的一部冷门剧，题材就很冷，讲沪漂的。剧情贴近现实，演员的表演也很真实，分数就高在这儿了，能做到这两点的太少了。&lt;/p>
&lt;p>题图是我的窗外，前段时间天气好的时候拍的，Snapseed真是个好东西，嗯。&lt;/p></description></item><item><title>得草根者得天下</title><link>http://0x3f.org/posts/get-the-inferior-class-get-the-throne/</link><pubDate>Fri, 21 Apr 2017 11:05:50 +0000</pubDate><guid>http://0x3f.org/posts/get-the-inferior-class-get-the-throne/</guid><description>&lt;p>国内移动支付是劣质的繁荣，量很大，但是水平低。&lt;/p>
&lt;p>我个人对移动支付偏爱的程度依次是：Apple Pay &amp;gt; 支付宝 &amp;gt; 微信。Apple Pay的体验最好，后两个都多出一个扫码的步骤，微信更是很奇葩地要多一步选卡的操作。&lt;/p>
&lt;p>不过采访过一些人，结果是用微信的最多。&lt;/p>
&lt;p>原因当然是微信的社交切入点带来的普及程度，还有红包的成功，让这个体验最差的东西后来居上。支付宝因为意识到这一点，才不断焦虑地效颦，自乱阵脚，越做越烂。&lt;/p>
&lt;p>我自己平时使用的情况是，能用信用卡支付的一般用支付宝，只能转账的才用微信。而且线下支付还是微信居多。主要原因还是线下的收款方都是小商小贩，大多只会用微信。&lt;/p>
&lt;p>中国正在形成阶层社会，但草根仍是主流，得草根者得天下。&lt;/p></description></item><item><title>技术团队的两个最佳实践</title><link>http://0x3f.org/posts/the-best-practices-of-developing/</link><pubDate>Fri, 24 Feb 2017 13:27:57 +0000</pubDate><guid>http://0x3f.org/posts/the-best-practices-of-developing/</guid><description>&lt;p>在以往的开发和管理中遇到很多问题，以至于我对理想中的技术团队有了一些想法。其中有两点经过实践证明有很强的可操作性，值得拿出来讨论一下：&lt;/p>
&lt;ol>
&lt;li>能用规则解决的问题就不要靠人解决&lt;/li>
&lt;li>能用机器完成的任务就不要用人处理&lt;/li>
&lt;/ol>
&lt;p>这两点都反映了我的一个妄念，就是相信规则和机器，不相信人。人是最不靠谱的生产者，你永远无法保证团队中的每个人都处于很好的状态、拥有相近的技术水平和情商，这也是为什么我不觉得结对编程有什么可操作性。但如果有简单可行的规则，用来规范开发过程中的行为，那么解决开发过程中的冲突就不需要人为地和稀泥，生产效率也会得到提升。此外，机器最适合用来做重复性的任务，很多花大量的人力、物力、时间都没做得很好的事，交给机器来做恰恰是最好的解决办法。&lt;/p>
&lt;p>这些以往都只是我自己的想法，虽然在团队里有过很好的实践效果，但是并不指望和别人有所共鸣。国内的技术团队大多靠堆人、堆时间，很少有团队会把健康的世界观和可操作的方法论放在重要的位置，技术和技术从业者都是刍狗。当然这也无可厚非，毕竟先要解决生存问题，在模式创新为主的国内互联网行业，更新换代如此之快，产品早一天上线就多一分生存的可能。但是有没有可能既解决生存问题，又做出一个有荣誉感的团队呢？世间安得双全法，这是个值得持续讨论的问题。&lt;/p>
&lt;p>最近和别人聊天，竟然听到相同的想法，在具体的方法论上还得到很多补充。&lt;/p>
&lt;p>对于第一点。一个项目按业务线划分开发组、按功能模块划分开发任务本来是个很好的模式，但是接口的对接往往会有很多问题，例如术语使用的不严谨导致高昂的沟通成本、问题处理方法的不规范导致扯皮、冲突和低效。&lt;/p>
&lt;p>在我的团队里，用wiki维护著一套术语词典，开发过程中所有的文档、沟通都必须使用既定的用语，例如「退单」包括「退款单」和「退货单」，这三个术语分别表示不同而精确的概念，如果因为自己造词产生歧义或错用术语导致开发事故，责任是清楚的，问责对象也没有怨言。让有责任的人承担责任，比和稀泥对解决问题更有利。&lt;/p>
&lt;p>再比如，问题在流转过程中很容易出现接口人之间的扯皮甚至冲突，问题的根源并不是别人说你的代码有问题导致你不爽，而是别人做得不够专业让你觉得对方不负责任。在我的团队里，大家约定处理问题的规则是：&lt;/p>
&lt;ul>
&lt;li>谁接手，谁处理&lt;/li>
&lt;li>转交问题时必须提供四项信息：复现问题的环境、完整的接口名、传递的实参和返回结果&lt;/li>
&lt;/ul>
&lt;p>首先当一个问题被反馈过来的时候，分配人会有一个初步的判断，指派给谁，谁处理，不能踢皮球。处理人如果界定问题发生在别人的接口里，应该把上述四项信息连同问题移交给相关责任人。这样做的好处是，一来可以避免误判给别人造成不必要的麻烦，二来让下游接口人可以马上复现并解决问题，而无须考虑上游的业务逻辑。这个规则的效果很好，团队里从来没有因为接口问题出现不愉快。&lt;/p>
&lt;p>对于第二点。代码质量是日常开发中最让人头疼的问题之一，出现频率高而且代价昂贵。不管是靠开发人员的经验，还是测试人员的工作，都对人的依赖很大，既不稳定又低效。以下这些方法能很好地解决这样的问题：&lt;/p>
&lt;ul>
&lt;li>使用Git，先进的生产关系需要更好的生产资料才能带来更高的生产力&lt;/li>
&lt;li>提交代码时自动检查语法错误和代码规范&lt;/li>
&lt;li>高覆盖率、自动化的单元测试&lt;/li>
&lt;li>用模拟工具给单元测试供给测试数据&lt;/li>
&lt;li>用脚本测试网页交互&lt;/li>
&lt;li>用脚本给网页截图，用图片diff工具比较某次修改给网页带来的变化&lt;/li>
&lt;/ul></description></item><item><title>从 Octopress 迁移到 Hexo</title><link>http://0x3f.org/posts/migrate-octopress-to-hexo/</link><pubDate>Wed, 08 Feb 2017 20:24:16 +0000</pubDate><guid>http://0x3f.org/posts/migrate-octopress-to-hexo/</guid><description>&lt;p>因为原来的主题没有针对中文优化，显示效果不太好，在搜索新主题的时候顺便了解了一下其它几个静态博客生成工具，发现Hexo比Octopress有很大的优势，就迁移了过来。&lt;/p>
&lt;p>Hexo的优势：&lt;/p>
&lt;ul>
&lt;li>速度快：几百篇文章只需要几秒，而Octopress需要几十秒&lt;/li>
&lt;li>易用：配置、部署简单，文章被修改后会立即更新浏览器中的预览页面&lt;/li>
&lt;li>轻量：基于node.js，目录结构简明&lt;/li>
&lt;/ul>
&lt;p>迁移的过程不算顺利，先是遇到「MODULE_NOT_FOUND」的问题，搜到的方法都不起作用，原因大概是因为墙的问题导致dtrace模块安装出错，理论上用代理安装是可以解决的，结果在反复安装的过程中莫名其妙地就好了。&lt;/p>
&lt;p>再一个问题是选主题，喜欢极简的风格，但是极简又大气的主题很少，相对最喜欢的是&lt;a href="https://github.com/yuche/hexo-theme-kael">kael&lt;/a>，不过生成速度非常慢，而且生成的页面有大量乱码。于是退而求其次，选择了&lt;a href="https://github.com/guolin/crisp-hexo-theme">crisp&lt;/a>。然而还是有不满意的地方，比如过于简单、没有搜索、不区分首页和归档等，还有待自己修改。&lt;/p></description></item><item><title>Calibre排版的最佳实践</title><link>http://0x3f.org/posts/best-practices-of-calibre-on-formatting/</link><pubDate>Fri, 27 Jan 2017 18:15:00 +0000</pubDate><guid>http://0x3f.org/posts/best-practices-of-calibre-on-formatting/</guid><description>&lt;p>&lt;strong>虽然如今左Kindle、右iPad，但是再也没有在课堂上用文曲星看《此间的少年》的感觉。&lt;/strong>&lt;/p>
&lt;p>忘了前段时间看池建强还是和菜头的文章，说很讨厌中文排版中段落首行缩进的风格，深有同感。我一般在读前会先用Calibre修改一下书的格式，段落首行不缩进、用空白行分割段落、嵌入好看的字体，否则强迫症表示根本看不下去。&lt;/p>
&lt;p>本文分享几则平时积累的Calibre排版的最佳实践，顺带吐槽一下亚马逊电子书的排版质量，早已经被微信读书、多看这些APP吊打了。&lt;/p>
&lt;h2 id="一最佳排版">一、最佳排版&lt;/h2>
&lt;p>最小行高：140%。&lt;/p>
&lt;p>&lt;img src="https://wx1.sinaimg.cn/large/006tNbRwly1fwvx83ybpbj30az0a5t9f.jpg" alt="">&lt;/p>
&lt;p>使用空白行分段，段落首行不缩进。&lt;/p>
&lt;p>&lt;img src="https://wx2.sinaimg.cn/large/006tNbRwly1fwvx8hwq08j30gc03lmxh.jpg" alt="">&lt;/p>
&lt;p>要嵌入字体，必须转换成KF8格式的类型，例如azw3或者both类型的mobi：&lt;/p>
&lt;p>&lt;img src="https://wx3.sinaimg.cn/large/006tNbRwly1fwvx8znehdj30av06dmxo.jpg" alt="">&lt;/p>
&lt;p>注意：KF8格式在点选文字时，默认选中一句，而不是单字，不方便查字典。要默认选中单字，须转换成old类型的mobi。&lt;/p>
&lt;h2 id="二最佳字体">二、最佳字体&lt;/h2>
&lt;p>索尼楷书&lt;/p>
&lt;p>&lt;img src="https://wx4.sinaimg.cn/large/006tNbRwly1fwvx92ktu8j30ts148jys.jpg" alt="">&lt;/p>
&lt;p>方正北魏楷书&lt;/p>
&lt;p>&lt;img src="https://wx3.sinaimg.cn/large/006tNbRwly1fwvx9fm9nlj30ts148dn4.jpg" alt="">&lt;/p>
&lt;p>方正宋三&lt;/p>
&lt;p>在微信读书iOS上显示效果很好，但是在Kindle里比较一般。&lt;/p>
&lt;hr>
&lt;p>&lt;em>本文最早发布在公众号：&lt;strong>两司马门下走狗&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;img src="http://0x3f.org/images/qrcode_zougou.jpg" alt="">&lt;/p></description></item><item><title>关于李陵的更多细节</title><link>http://0x3f.org/posts/more-about-li-ling/</link><pubDate>Thu, 22 Dec 2016 19:41:00 +0000</pubDate><guid>http://0x3f.org/posts/more-about-li-ling/</guid><description>&lt;p>&lt;img src="https://raw.githubusercontent.com/xbot/image-hosting/master/blog/2020-06-19-16-16-10-20161021001.png" alt="2020-06-19-16-16-10-20161021001">&lt;/p>
&lt;p>上次聊了李陵败降的细节。在此之后，还发生了几件有意思的事。&lt;/p>
&lt;p>第一个细节，是武帝并没有马上杀掉李陵全家，甚至在第二年，还派一支军队营救他。&lt;/p>
&lt;p>毕竟累世将门，李陵的军事才能武帝是很欣赏的，况且对于李广的死，武帝不能没有一点愧疚。五千步兵深入匈奴，仗打成这个样子已经是虽败尤胜了，这一点，武帝自己是知道的，之所以迁怒司马迁，主要是因为李陵没有死，而是降了。&lt;/p>
&lt;p>在这次战役中，武帝本来给李陵安排的任务是给李广利作后勤保障，是李陵自己不干，非要率五千步兵涉单于庭。按武帝的想法，李陵真要打赢也行，毕竟事关生死存亡，再不济也得战死沙场。领导给安排的活你不干，你自己吹那么大的牛又没做到，最后还投降了，这是武帝生气的主要原因。&lt;/p>
&lt;p>不过武帝还是惜才的，所以第二年就派了一支军队去救李陵。不过这支军队转了一圈没捞著匈奴人的影子，只带回来一个传闻——李陵在教匈奴人对付汉军的方法。武帝随即大怒，并处决了李陵一家。&lt;/p>
&lt;p>后来，汉朝有人出使匈奴，李陵趁机问汉使：「我自问战功不负朝廷，为什么杀我全家？」汉使就说出了这个传闻。李陵大恨，说这事是一个叫李绪的干的。李绪也是一个汉朝的降将，因为这件事，李陵痛恨李绪，就派人把他刺杀了。可能李绪是大阏氏的人，所以大阏氏就要杀李陵。因为匈奴有浓重的母系氏族的风俗残留，所以大阏氏的势力很大，连单于也要让三分。于是单于只能把李陵藏到很远的地方，直到后来大阏氏死了，才敢接回来。&lt;/p>
&lt;p>第二个细节，是霍光曾经试图策反李陵。&lt;/p>
&lt;p>李陵在汉朝的时候跟霍光私交不错，所以武帝死后，霍光辅政，就想著把李陵接回来，于是以出使的名义派人到匈奴和李陵接头。李陵沈吟良久，说了一句话：「大丈夫不能再次受辱。」最终拒绝了。&lt;/p>
&lt;p>李陵的决定是正确的，作为一个有污点的人，回到汉朝纵然有权臣罩著，一旦靠山倒了，覆巢之下也无完卵。何况至亲已死，在汉朝已无牵挂，哪比得上在那天高原阔的地方做一个部落王。&lt;/p>
&lt;hr>
&lt;p>&lt;em>本文最早发布在公众号：&lt;strong>两司马门下走狗&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;img src="http://0x3f.org/images/qrcode_zougou.jpg" alt="">&lt;/p></description></item><item><title>哪个时代都看脸</title><link>http://0x3f.org/posts/judge-by-face/</link><pubDate>Fri, 09 Dec 2016 21:39:00 +0000</pubDate><guid>http://0x3f.org/posts/judge-by-face/</guid><description>&lt;p>&lt;img src="https://raw.githubusercontent.com/xbot/image-hosting/master/blog/2020-06-19-16-16-10-20161021001.png" alt="2020-06-19-16-16-10-20161021001">&lt;/p>
&lt;p>汉书卷四十二：&lt;/p>
&lt;blockquote>
&lt;p>苍当斩，解衣伏质，身长大，肥白如瓠，时王陵见而怪其美士，乃言沛公，赦勿斩。&lt;/p>
&lt;/blockquote>
&lt;p>高晓松特喜欢说一句话——这是个看脸的时代。其实哪个时代都看脸，所以张苍因为高胖白，捡了一条命。&lt;/p>
&lt;p>昨天读汉书司马相如传，讲到撩妹那段（&lt;em>以琴心挑之&lt;/em>），后面紧接著就是：&lt;/p>
&lt;blockquote>
&lt;p>相如时从车骑，雍容闲雅，甚都。&lt;/p>
&lt;/blockquote>
&lt;p>翻译成人话就是：相如经常开著跑车，逼格满满，很帅。所以你以为光琴弹得好就行了么，想想贝多芬的《献给爱丽丝》。&lt;/p>
&lt;p>看脸本无可厚非，有意思的是看脸的规律：因时而异，因境而异。&lt;/p>
&lt;p>先说后者。家世好的喜瘦，苦出身的喜肥。所以楚王好细腰，宫人多饿死。所以赵飞燕能作掌中舞，于是汉成帝死在赵合德的床上。所以屌丝出身的刘邦和王陵饶了张胖子一命。&lt;/p>
&lt;p>因时而异。乱世尚刚，治世尚柔。季世丧乱，生存是第一命题，社会的整体审美一定是趋于阳刚的，最好脸上再有道疤，活活美死。而由乱入治，公共审美一定趋于女性化。最典型的就是魏晋南北朝，这时期的男人，要剃须、薰香、涂胭脂，甚至头上还插花。&lt;/p>
&lt;p>有个南北互飚花美男的故事。大致的情节是这样的：南方派了一个花美男出使北方，结果都城万人空巷，北方朝廷一看，心说不能让人给比下去啊，就也挑了一个小鲜肉出使南方，于是南方都城里也万头攒动。&lt;/p>
&lt;p>这个故事我不记得出处了，不过《世说新语》的《容止》篇里随便挑一条，都不忍直视：&lt;/p>
&lt;blockquote>
&lt;p>王丞相见卫洗马曰：「居然有羸形，虽复终日调畅，若不堪罗绮。」&lt;/p>
&lt;/blockquote>
&lt;p>不堪罗绮，羡杀韩国欧巴和国产小鲜肉们。&lt;/p>
&lt;hr>
&lt;p>&lt;em>本文最早发布在公众号：&lt;strong>两司马门下走狗&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;img src="http://0x3f.org/images/qrcode_zougou.jpg" alt="">&lt;/p></description></item><item><title>李陵是作死的</title><link>http://0x3f.org/posts/no-zuo-no-die/</link><pubDate>Thu, 01 Dec 2016 20:47:00 +0000</pubDate><guid>http://0x3f.org/posts/no-zuo-no-die/</guid><description>&lt;p>&lt;img src="https://raw.githubusercontent.com/xbot/image-hosting/master/blog/2020-06-19-16-16-10-20161021001.png" alt="2020-06-19-16-16-10-20161021001">&lt;/p>
&lt;p>汉书卷五十四：&lt;/p>
&lt;blockquote>
&lt;p>陵对：「无所事骑，臣愿以少击众，步兵五千人涉单于庭。」上壮而许之……&lt;/p>
&lt;/blockquote>
&lt;p>关于李陵的遭遇，多数人从司马迁身上多少都是知道的：祖上是追杀燕太子丹的秦将李信，祖父是飞将军李广，出身将门世家的李陵自然骁武凭陵，以五千步兵力战十万匈奴精骑，最后矢尽援绝，不得已才投降。即便对于信仰「文死谏，武死战」的中国人，多数也是同情的。&lt;/p>
&lt;p>然而这个故事主要来自于史记，这就尴尬了。从某种意义上说，李陵是给史记定下基调的人。这就决定了它展示给读者的不会是故事的全貌。比如很多年前，我第一次看到这个故事的时候就想不明白一个问题：用五千步兵孤军远征游牧的匈奴，傻子都知道胜算很小，刘彻和李陵的智商同时下线了？&lt;/p>
&lt;p>最近读到汉书的李陵传，发现了更多有趣的细节。&lt;/p>
&lt;p>天汉二年，武帝命二师将军李广利出兵三万攻打在天山的匈奴右贤王，想让李陵监押辎重。**如果把武帝的军事史浓缩成一句话，那就是刘彻和他的小舅子们。**李广利就是因为裙带关系上位的，所以将门世家的李陵耻于为其搞后勤，就跟武帝说：「我本部的军队都是精锐，希望能单独出兵一路，这样可以迫使匈奴人分兵，二师将军那边的压力也会轻一些。」武帝多精啊，一眼就识破李陵的小九九，说：「这次我出兵很多，没有富余的骑兵给你。」&lt;/p>
&lt;p>于是李陵就开始作了，就有了本文开头的那句话。以少击众、步兵打骑兵、孤军深入，哪一条都是兵家大忌，估计李陵说这句话时头皮都是硬的。&lt;/p>
&lt;p>当然李陵也不是完全没有资本，**汉军的战斗力是超过匈奴人的。**硬碰硬的正规战争，匈奴人败多胜少。因为战争打的是综合实力，无论是经济实力、人口、技术，汉朝都远超匈奴，即使三岁骑马五岁弯弓的匈奴人的单兵素质超过汉朝的民兵。&lt;/p>
&lt;p>后来的战事就证明了这一点。首战浚稽山，匈奴人就损失数千人，汉军步兵还追著骑兵打。主要原因就是经济和技术水平的落差太大。匈奴人主要装备的是弓箭，箭头是用兽骨和石头磨成的片状，汉军装备的是连弩，箭头是金属质三棱状，无论在射速、穿透力还是精准度上，前者都远远落后于后者。所以转战上千里，坚持很多天，直到最后汉军的箭用完了，匈奴人才在距离边境五十公里的地方吃掉这支孤军。换句话说，如果箭量充足，十万匈奴骑兵都打不过五千汉军步兵，这个战力的对比，很明显吧。&lt;/p>
&lt;p>最后不服从领导安排的李陵还是败了，败在距离边境只有五十公里的地方。据说最后的日子里，他还单独出营一次，理由是想刺杀单于，搞个斩首行动，回来后就彻底丧失了战斗意志。我觉得这又是个疑点，是不是想溜啊。&lt;/p>
&lt;hr>
&lt;p>&lt;em>本文最早发布在公众号：&lt;strong>两司马门下走狗&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;img src="http://0x3f.org/images/qrcode_zougou.jpg" alt="">&lt;/p></description></item><item><title>时人食狗亦与羊豕同</title><link>http://0x3f.org/posts/thinkings-about-eating-dogs/</link><pubDate>Fri, 21 Oct 2016 13:21:00 +0000</pubDate><guid>http://0x3f.org/posts/thinkings-about-eating-dogs/</guid><description>&lt;p>&lt;img src="https://raw.githubusercontent.com/xbot/image-hosting/master/blog/2020-06-19-16-16-10-20161021001.png" alt="2020-06-19-16-16-10-20161021001">&lt;/p>
&lt;p>汉书卷四十一：「樊哙，沛人也，以屠狗为事。」&lt;/p>
&lt;p>颜师古注：「时人食狗亦与羊豕同。」&lt;/p>
&lt;p>狗对于中国古人的意义和西方人不同。西方人，确切的说是美国人，对狗的感情完全是因为发展的时间太晚。美国开国也就二百来年，从印地安人手里夺来的大量耕地和牧场保证了充足的食物来源，而狗为地广人稀的美国在开拓过程中提供了重要的陪伴和保护，所以美国人不吃狗。&lt;/p>
&lt;p>中国发展的时间远早于美国，而且没有大片的牧场提供稳定的肉食来源，大型牲畜作为农业主要替代劳力一般也不会用于食用，甚至历朝长期立法禁止宰杀大型牲畜。所以狗长期是作为一种重要的肉食来源。&lt;/p>
&lt;p>「失我祈连山，使我六畜不藩息」，「六畜」分别是猪、牛、羊、马、鸡、狗，这是最早被中国人驯化并作为肉食来源的牲畜，而且长期作为祭祀天地祖宗的高档祭品。《道德经》里说：「天地不仁，以万物为刍狗」。「刍狗」就是草扎的狗，是祭祀时当祭品用的，祭祀的时候高高在上、被人们顶礼膜拜，祭祀之后被弃之如敝履，所以说天地不仁。之所以用草狗做祭品，是生产力进步的表现，最初一定是用真狗的，只是后来更高档的肉食逐渐普及，狗肉上不了台面了，才逐渐被抽象成草偶。&lt;/p>
&lt;p>所以中国人是有吃狗的传统的，美国人不吃狗肉也并不表示更文明，至于「狗是人类的朋友」，更是道德绑架，谁也不能随便替别人认朋友，最多只能说你的狗是你的朋友，如果别人吃的不是你的朋友，即便自以为站在道德的高度，你也没有任何权力干涉别人的自由，有句话说的好：自由，就是我有不和你一样高尚的权利。&lt;/p>
&lt;p>我个人也不吃狗肉，但我不觉得别人吃来源合法的狗肉有什么问题。事实上，吃狗肉的问题并不在于吃不吃本身，而是在这个问题上表现出来的人性的恶，人总是自以为站在道德的高度就可以践踏别人的权利，每个暴政无不是利用人性的这个弱点。&lt;/p>
&lt;p>切记，儒以文乱法。&lt;/p>
&lt;hr>
&lt;p>&lt;em>本文最早发布在公众号：&lt;strong>两司马门下走狗&lt;/strong>&lt;/em>&lt;/p>
&lt;p>&lt;img src="http://0x3f.org/images/qrcode_zougou.jpg" alt="">&lt;/p></description></item><item><title>奇怪的决战</title><link>http://0x3f.org/posts/a-strange-decisive-battle/</link><pubDate>Sun, 01 May 2016 10:59:00 +0000</pubDate><guid>http://0x3f.org/posts/a-strange-decisive-battle/</guid><description>&lt;p>前两天读史记王翦列传，觉得秦楚的决战很奇怪。&lt;/p>
&lt;blockquote>
&lt;p>王翦果代李信击荆。荆闻王翦益军而来，乃悉国中兵以拒秦。王翦至，坚壁而守之，不肯战。荆兵数出挑战，终不出。王翦日休士洗沐，而善饮食抚循之，亲与士卒同食。久之，王翦使人问军中戏乎？对曰：「方投石超距。」于是王翦曰：「士卒可用矣。」荆数挑战而秦不出，乃引而东。翦因举兵追之，令壮士击，大破荆军。至蕲南，杀其将军项燕，荆兵遂败走。秦因乘胜略定荆地城邑。岁余，虏荆王负刍，竟平荆地为郡县。&lt;/p>
&lt;/blockquote>
&lt;p>稍微有点军事常识就知道，防守方最好的办法是坚守不战，在自己的地盘上，对方的后勤补给要比自己困难得多，一旦补给不继，军心必乱，势必撤兵，这时候再追上去打，胜算很大，也就是所谓以逸待劳。比如秦赵长平之战，一开始，廉颇先用小股部队跟秦军接触，一看打不赢，马上收缩防线，避免决战，搞得秦军进也不是、退也不是，军力损耗极大，不得以只好用反间换掉廉颇。&lt;/p>
&lt;p>所以战争中的进攻方是处于劣势的，要扭转不利的态势，就要把主动权握在自己手里，所以一般会用反客为主的办法。虽然我是进攻方，但我不著急进攻你，让你自己沈不住气来打我，这时候攻守易形，我成了防守方，你成了进攻方，形势就对我有利了。&lt;/p>
&lt;p>所以王翦反客为主是正常的，项燕急著打就很奇怪了。老项家累世将门，项燕沙场宿将，不可能连常识都不懂。&lt;/p>
&lt;p>也许唯一合理的解释是楚国国力衰败，撑不下去了。&lt;/p>
&lt;p>以前秦国伐楚很困难，因为楚国西有江汉之险，北有诸夏扞蔽。不过自白起破鄢郢，江汉天险尽失；自三晋覆灭，中原逐鹿之势已成。秦国伐楚，后勤补给已经不是问题。&lt;/p>
&lt;p>另外，让秦国拥有支持百万级灭国战役能力的，还有伐蜀的决策。自商君变法，秦国势平地起飞，此后相当长的一段时间，秦国虽说是战国首强，但也不能占据压倒性的优势，直到秦灭六国前的三十年，还有信陵君收天下之兵扣关攻秦的事。战争不是战斗，决定成败的主要还是国力。李信的二十万大军覆灭后，秦国可以马上再把六十万人送上前线，这个国力，不赢没有天理。所以司马错论伐蜀，同时拥有关中、蜀中两块天府之国，是秦国国力质变的关键。&lt;/p>
&lt;p>这个时候的楚国，已经是冢中枯骨。在秦国连年的攻势下，大片国土沦丧，鄢郢破而迁陈，三晋亡而迁寿春，几十年间，颠沛流离，没有喘息的机会，靠吃战略纵深的老本苟延残喘。所以在这次决战之前，可能国力已经难以为继了，但是楚国自己也知道八百年国运系于这一战，所以不得不起倾国之兵应战。空虚的国力和浩大的战争消耗最终迫使项燕选择速战速决，战还有一线生机，不战只能坐以待毙。&lt;/p></description></item><item><title>开始用在线Markdown编辑器记笔记</title><link>http://0x3f.org/posts/start-taking-note-in-online-markdown-editor/</link><pubDate>Thu, 20 Nov 2014 22:35:00 +0000</pubDate><guid>http://0x3f.org/posts/start-taking-note-in-online-markdown-editor/</guid><description>&lt;p>开始用支持VIM模式的在线Markdown编辑器记笔记。既非鼠辈（&lt;em>鼠标依赖症不治者&lt;/em>），始终忍受不了其它WYSIWYG（所见即所得）的在线笔记。&lt;/p>
&lt;p>大部分在线笔记最傻X的一点是，必须点一下编辑按钮才能开始写东西。支持VIM模式的笔记就不用说了，丝般顺滑，不是我大Vimer就不会懂个中骚柔。&lt;/p>
&lt;p>组织上一向后知后觉。智能手机刚开始的时候，组织上很不感冒，理由是屏幕易碎、电池难支&lt;del>、冯唐易老、李广难封&lt;/del>。而今现在眼目下，一日不搞机，如隔三秋。在线Markdown编辑器出现也有段时间了，一直觉得这货无非就是给Markdown加了个可笑的准WYSIWYG，现在看来，真是做笔记的不二神器，罪过罪过。&lt;/p>
&lt;p>说说组织上跟Markdown的故事。很久很久以前，博客刚开始流行的时候，组织上开始写博客，和大部分人一样，注册个账号写公开日记，很快就忍受不了WYSIWYG编辑器失控的格式，于是开始手写HTML代码，很快就发现这货真TM反人类，从此恨乌及乌至今最讨厌的数据交换格式还是XML，于是自定几种格式或标记，用Java写了个解析工具，把文章源码翻译成HTML。突然有天发现这个星球上居然有种叫轻量型标记语言的东西，干的就是这么个事，只不过我的那些标记和解析工具又丑又烂而已。试了几种之后，最终选了Markdown，从此举案齐眉云云。&lt;/p></description></item><item><title>这半年读过的几本书</title><link>http://0x3f.org/posts/books-read-in-the-second-half-of-2013/</link><pubDate>Wed, 25 Dec 2013 23:10:00 +0000</pubDate><guid>http://0x3f.org/posts/books-read-in-the-second-half-of-2013/</guid><description>&lt;p>微博一度使我更新博客的频率一降再降，现在我决定回归。已经写了七年，依然乐此不疲。&lt;/p>
&lt;p>这半年去过一些地方，读过一些书，顿悟了一些东西，我是个有一身毛病的动物，但我享受debug的过程。&lt;/p>
&lt;p>现在读书的动力很大程度上来自于使用PaperWhite的愉悦感，虽然最初买电子书阅读器的目的是读盗版，不过现在宁愿为了更好的排版而买正版，而且觉得更过瘾。现在我在买一本书前都要先看有没有电子版，没有的话就去找盗版，连盗版都没有才去买印刷版。&lt;/p>
&lt;h2 id="小通鉴">小通鉴&lt;/h2>
&lt;p>&lt;img src="http://pic.yupoo.com/leninlee/DpCW6kFR/medish.jpg" alt="">&lt;/p>
&lt;p>虽然《通鉴》读了三年还没有读完，这本小书却很快就过了一遍。它从通鉴里抽出了几个故事，展开评论了一下。读了原史再看别人的解读，经常会会心一笑，或心有戚戚，或醍醐灌顶。读史最大的好处有两个，一是学做事，一是学做人，我注六经，六经注我。&lt;/p>
&lt;h2 id="诛仙">诛仙&lt;/h2>
&lt;p>&lt;img src="http://pic.yupoo.com/leninlee/DpD1kbUK/medish.jpg" alt="">&lt;/p>
&lt;p>纯粹是为了了结旧账，这书在我还在学校的时候还没写完，隔了多年，画一个圈圈，终结它。书本身的故事不错，本来可以再深挖一些，可惜被文笔糟蹋了，整本书缩写为原来的一百分之一波形不会有失真。&lt;/p>
&lt;h2 id="我所认识的蒋介石">我所认识的蒋介石&lt;/h2>
&lt;p>&lt;img src="http://pic.yupoo.com/leninlee/DpD2nJlC/medish.jpg" alt="">&lt;/p>
&lt;p>这本书只读了开头就读不下去了，对于历史和历史人物，全面肯定和全面否定都是不可信的。&lt;/p>
&lt;h2 id="大漠苍狼绝密飞行">大漠苍狼：绝密飞行&lt;/h2>
&lt;p>&lt;img src="http://pic.yupoo.com/leninlee/DpD5NoG1/medish.jpg" alt="">&lt;/p>
&lt;p>悬疑设定得不错。不过现在越来越不喜欢有恐怖色彩的东西，所以这可能是我最后看的一本这种题材的书。&lt;/p>
&lt;h2 id="javascript权威指南">Javascript权威指南&lt;/h2>
&lt;p>&lt;img src="http://pic.yupoo.com/leninlee/DpD6JS7c/medish.jpg" alt="">&lt;/p>
&lt;p>传说中的犀牛书，Javascript最权威的资料之一。第一部分“语言核心”是要细读的，第二部分“客户端的JS”对有几年经验的人，从13到18章浏览一遍，之后的用康圣人读书法。读完这本书就知道什么叫生命不息挖坑不止。&lt;/p>
&lt;h2 id="精通css">精通CSS&lt;/h2>
&lt;p>&lt;img src="http://pic.yupoo.com/leninlee/DpD860nd/medish.jpg" alt="">&lt;/p>
&lt;p>本想查漏补缺，所以没选《CSS禅意花园》，结果这书还是偏设计。难道这个星球上就没有一本给非前端开发看的CSS书么？&lt;/p>
&lt;h2 id="spring-in-action">Spring in Action&lt;/h2>
&lt;p>&lt;img src="http://pic.yupoo.com/leninlee/DpD9xCFY/medish.jpg" alt="">&lt;/p>
&lt;p>重新寻找丢掉的青春，撂下五年再拾起来容易么。这书是本不错的Spring初级教材。&lt;/p>
&lt;h2 id="板桥杂记">板桥杂记&lt;/h2>
&lt;p>&lt;img src="http://pic.yupoo.com/leninlee/DpDblJwq/medish.jpg" alt="">&lt;/p>
&lt;p>明末清初大才子余怀的招嫖回忆录，从对江南名妓的记述中映射物是人非之慨，文笔绝佳。秋风团扇，一觉扬州，于字字雕琢中见山河离碎、愁绪盈怀。每个危楼听雨的暮年都有著软红十丈的青春。&lt;/p>
&lt;h2 id="nosql精粹">NoSQL精粹&lt;/h2>
&lt;p>&lt;img src="http://pic.yupoo.com/leninlee/DpDdM5l4/medish.jpg" alt="">&lt;/p>
&lt;p>NoSQL绝佳的一本入门教材，对NoSQL的概念、应用场景、各类实现的优缺点等等都有适度的介绍。对于一直使用传统技术的人而言，这本书有醍醐灌顶使人捶胸顿足怒相见恨晚叹青春易逝之副作用。&lt;/p></description></item><item><title>Mac，江湖再见！</title><link>http://0x3f.org/posts/bye-mac/</link><pubDate>Mon, 12 Mar 2012 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/bye-mac/</guid><description>&lt;p>零八年底，我用半年的差补收了当时Thinkpad X200顶配的FN3。三年的时间，几乎每天都要用很久，竟然从没掉过链子。虽说是这样，但毕竟用的强度大、时间长，屏幕已经远不如当初清晰，亮度也差了，即使调到最高亮度都觉著暗。&lt;/p>

&lt;p>于是打算趁著还能发挥余热，趁早处理掉，省得将来砸手里。&lt;/p>

&lt;p>既然要换，不如玩儿得折腾一点儿，于是小手一抖，Mac到手。&lt;/p>

&lt;p>我对Mac的OS只是有点小好奇，主要是奔著Mac的外观和做工去的，还是打算回头装Arch。玩儿了四个月，平心而论，Mac OS X确实是个不错的OS，美观程度无与伦比，结合Mac硬件的外观和做工，真是天作之合；易用性之高，确实让我有点小惊讶，多点触摸得心应手，软件安装一拖而就，相比之下，Windows显得拙劣不堪。&lt;/p>

&lt;p>如果只是作为办公和娱乐的工具，Mac可挑剔的地方确实不多。但是易用性往往和灵活性成反比，灵活性高意味著你可以随心所欲地制定自己的游戏规则，而易用性高则往往意味著你只能接受它的方式、认可它的价值观，易用并不代表顺手。&lt;/p>

&lt;p>除此之外就是软件资源的问题，Mac的免费软件相对很少，而且和Windows一样，需要先下载，再安装。虽然也有MacPorts、Homebrew，和Linux的软件仓库比起来还是差得太远。&lt;/p>

&lt;p>做惯了Archer，是可忍，孰不可忍。&lt;/p>

&lt;p>还是要装Arch。但是在制作安装介质这一步就遇著麻烦了，USB启动安装盘死活都不认，试了几种方法，无果。此外还有不少未知的问题，比如驱动等等。&lt;/p>

&lt;p>如果在几年前，在学校，有大把的时间可以糟蹋，我就跟丫死掐了。现在不行了，伤不起了。果断入手Thinkpad X220 A45，上周六把Mac出手了。&lt;/p>

&lt;p>小黑和Arch不愧是天作之合，比起当初在X200上装的时候还容易。只是小黑的多点触摸板啊，东施效颦，我想不到更贴切的词形容了，太TMD坑爹了！&lt;/p>

&lt;p>鉴于X200上4G内存被Chromium吃光光的苦逼经历，这次果断入手两根4G的三星金条，都是党的政策好啊，最近内存白菜价，两根金条才300粮票。&lt;/p>

&lt;p>从宣和八年秋十月到宣和九年春王三月，我的短暂的小白史告一段落，MacBook Pro MC700CH/A，江湖再见！&lt;/p>

&lt;p>Posted via &lt;a href="http://0x3f.org/posts/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim&lt;/a>.&lt;/p></description></item><item><title>UltraBlog.vim开发手记</title><link>http://0x3f.org/posts/ultrablog-development-note/</link><pubDate>Mon, 11 Apr 2011 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/ultrablog-development-note/</guid><description>&lt;p>对于&lt;a href="http://blog.sina.com.cn/s/blog_694377f90100rmko.html">博客已死&lt;/a>的说法，我一点都不感到奇怪。早在几年前博客还比较火的时候我就表达过对博客泡沫的&lt;a href="http://0x3f.org/?p=209">看法&lt;/a>。&lt;/p>

&lt;p>经历了短暂的&lt;a href="http://0x3f.org/?p=354">tumblog&lt;/a>的风头，微博成为现在最火的媒介。说博客已死，无非就是说微博将成为个人信息传播的主流。好吧，现在我知道那时候我所说的不懂什么是博客的人都去干什么了。&lt;/p>

&lt;p>但是博客还是会继续发展，微博的兴起只会减少滥竽充数。因为微博突出的是时效性，最缺乏的是系统性和可重复更新的能力。微博的短处，正是博客的长处。这让我对博客有了一个新的、迟到了很久的认识──一个好的博客，它的文章不应该是写掉就忘的，而应该是不断地更新著的。&lt;/p>

&lt;p>&lt;a href="http://0x3f.org/posts/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim&lt;/a>就是出于这个需要而写的。&lt;/p>

&lt;p>我对博客客户端的使用大概可以追溯到四五年前，那时候博客正火，在比较了几个&lt;a href="http://en.wikipedia.org/wiki/Blog_service_provider">BSP&lt;/a>后选择了&lt;a href="http://www.blogcn.com/">中国博客网&lt;/a>，就是因为他们提供桌面客户端。后来独博之后也试用过几个通用的客户端，但都没坚持多久，最根本的原因是它们几乎无一例外地都是&lt;a href="http://zh.wikipedia.org/wiki/%E6%89%80%E8%A6%8B%E5%8D%B3%E6%89%80%E5%BE%97">WYSIWYG&lt;/a>。而WYSIWYG的编辑器生成的HTML源码几乎都使用inline的样式，这就导致文章的排版布局很难控制，我对WYSIWYG其实是很抵触的，至今都不怎么用Office这类东西。&lt;/p>

&lt;p>后来我意识到，我所需要的是样式与内容分离，于是准备自己写一个&lt;a href="http://0x3f.org/?p=331">客户端&lt;/a>，后来由于工作的原因不了了之。与此同时，我自定义了一套文章格式并用Java写了一个转换文章到HTML的&lt;a href="http://0x3f.org/?p=342">工具&lt;/a>，直到后来发现&lt;a href="http://0x3f.org/?p=383">Markdown&lt;/a>，我才知道我其实是需要一个轻量标记语言。&lt;/p>

&lt;p>使用Markdown之后，写博客开始变得轻松愉快。我一度用过一段时间&lt;a href="http://www.scintilla.org/SciTE.html">SciTE&lt;/a>，还用&lt;a href="http://zh.wikipedia.org/wiki/Lua">Lua&lt;/a>写了个&lt;a href="http://0x3f.org/?p=499">辅助脚本&lt;/a>。但是我需要一个完整的客户端来管理文章，而这是一个编辑器所不能胜任的，所以就著手实现一个支持Markdown的&lt;a href="http://0x3f.org/?p=812">客户端&lt;/a>。这一次走得比较远，&lt;a href="http://0x3f.org/?p=812">ForeverFantasy&lt;/a>最终达到了可用的程度，我一度用它写过一段时间的博客。但是作为一个Vim重症患者，wxPython的编辑器部件是远远达不到我需要的水平的。虽然后来还&lt;a href="http://0x3f.org/?p=1409">实现&lt;/a>了调用外部程序处理文章内容（&lt;em>当然也可以调用Vim&lt;/em>），但总归觉得不舒服，至今已经一年没更新了。&lt;/p>

&lt;p>直到前段时间试用了一下&lt;a href="http://0x3f.org/?p=1861">VimRepress&lt;/a>，在修改这个插件的时候突然受到启发，我这几年的需求原来是可以这么简单地解决的。&lt;/p>

&lt;p>其实在几年前&lt;a href="http://www.vim.org/scripts/script.php?script_id=1953">vimpress&lt;/a>刚刚发布的时候我就了解过这个东西，包括此后接连发布的几个Vim写博客的插件，它们和我原来写的SciTE的那个辅助脚本没有本质的区别，都是博客编辑器。与完整的客户端相比，编辑器缺少对本地文章源码的管理，而且它们不记录文章源码和发布的文章的关联关系，简单地说是无状态的。这不符合博客文章持续更新的观点。&lt;/p>

&lt;p>UltraBlog.vim使用&lt;a href="http://www.sqlalchemy.org/">SQLAlchemy&lt;/a>做数据库抽象层，将所有文章的源码及其状态保存在本地的一个SQLite数据库中，并且以此为基础，通过&lt;a href="http://en.wikipedia.org/wiki/XML-RPC">XMLRPC&lt;/a>接口实现对博客文章、页面的&lt;a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD&lt;/a>操作。同时利用Vim分模式的特点实现了可分页的文章列表和文章编辑视图。&lt;/p>

&lt;p>UltraBlog.vim目前支持Markdown和HTML两种格式的文章，它最大的特点是在Markdown格式的源码和发布到博客中的文章之间建立联系，你可以随时修改本地数据库中的Markdown源码并更新博客中对应的文章。&lt;/p>

&lt;p>新的功能还会不断地加入。&lt;/p>

&lt;p>Posted via &lt;a href="http://0x3f.org/posts/ultrablog-as-an-ultimate-vim-blogging-plugin/">UltraBlog.vim&lt;/a>.&lt;/p></description></item><item><title>中秋后记</title><link>http://0x3f.org/posts/note-after-the-mid-autumn-day/</link><pubDate>Sun, 26 Sep 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/note-after-the-mid-autumn-day/</guid><description>&lt;p>可以让回忆放肆一些。&lt;/p>
&lt;p>中秋的晚上公司餐厅放电影，《邻家特工》和《越光宝盒》，本来打算看完《越光》就走，结果先放的是《特工》。也好，复习一下，好在这片子不错，再看也挺有意思。《越光》纯属烂片，但是如今看看这种不费脑子的东西也变得无可无不可。免费的零食很烘托气氛，唯一的惊喜是居然还有罐装啤酒。&lt;/p>
&lt;p>回到住处的当夜就发布了Dumperor。其实这个东西很早就开始做了，起初的目的是为了判断数据库脚本从SQL Server迁移到Oracle和MySQL是否成功。单纯的迁移只能保证修改后的脚本在这两个数据库中执行不会报错，但究竟是不是该执行的东西都成功执行了，一般很难判断，尤其是那帮家伙总是在发版前一两天才告诉我要迁移脚本，那么多不规范的语句，能保证不报错就已经不错了，遑论没有遗漏。所以就著手做一个数据库表结构和数据的导出工具，这样只需用diff工具比较标准数据库和测试数据库导出的脚本就可以了。&lt;/p>
&lt;p>从一开始我就决定不使用公司产品的一行代码。其实做这个东西最大的麻烦不是来自来自于如何查询不同的数据库的表结构，而是数据库抽象层。如果要白手起家搞个抽象层的话，我想可能代码量比Dumperor本身都大，于是选择了Yii框架。后来在Dumperor基本成型时又觉得为了仅仅使用最基本的数据库查询功能就捆绑这么大一个框架，有点搞笑，谢天谢地，我终于花时间学了PDO。&lt;/p>
&lt;p>中秋节放假的第二天，开始读Google Code上关于Chrome扩展开发的官方文档。这事源于本尊被另一个Chrome扩展作者无视了。&lt;/p>
&lt;p>一直强迫自己喜欢上Firefox，但都败了。本来对Opera充满希望，但是从10.0起它带给我的除了失望就是更多的失望，这个东西的发展就像它的国家的位置一样怪异，你永远不能以常人的思维去臆测Opera的开发者，他们就像一群母系氏族社会的娘们儿一样整天跟著感觉走。&lt;/p>
&lt;p>于是不知道什么时候我就开始经常用Chrome了，前段时间开始用一个扩展辅助MLDonkey下载。这个东西会在工具栏里添加一个图标，唯一的作用就是打开选项设置页面设置那个也许这辈子都只需要设置一次的MLDonkey的URL地址。于是我给那个扩展的作者写了封邮件，那家伙居然到现在都没有回复。&lt;/p>
&lt;p>所以本尊决定无视他了。太祖武皇帝的那句丰衣足食的圣谕真是至理名言，读完文档我就发现这个扩展完全应该用Chrome的Page Action取代Browser Action，简单地说就是当且仅当本页面中包含有可下载的资源时才在地址栏中显示一个图标，而不应该总是在工具栏占用一个图标的位置。&lt;/p>
&lt;p>随后要做的就是用AJAX请求取代弹出新窗口的方式添加下载任务，我嫌每次添加一个下载任务后都要关闭一个弹出窗口太麻烦。我的目标是用AJAX请求将要下载的任务在后台传递给MLDonkey，并用Chrome的Desktop Notification功能弹出桌面提示对话框显示结果状态。这样很优雅。&lt;/p>
&lt;p>但是实际去做的时候问题来了，虽然Chrome本身允许扩展使用跨域的AJAX，但是至少在和MLDonkey进行通讯时，无论成功与否，得到的返回信息都是空的，状态码也都是0。这个问题浪费了我几乎一整天的时间，最终我决定用AJAX的请求响应时间来判断失败或成功，因为一次AJAX请求响应过程在MLDonkey没启动的时候耗费的时间一般会比正在运行时要长。这就要求每个用户都要根据自己的情况设定合适的超时时间。为了避免麻烦，最后还是实现了通过弹窗添加下载任务的模式，毕竟这个东西总是可靠的。&lt;/p>
&lt;p>要发布的时候发现如今在Chrome Extension Gallery中发布扩展居然要收费了，虽然只是一次性的。最后花了八两银子注册了Google Checkout账户，又付了五刀美帝币，才把DonkeyBuddy传上去。发布个免费扩展还得倒贴，本尊也太背了吧。&lt;/p>
&lt;p>节后收到了Dell sk8115键盘、HP百灵无线鼠标和Nokia BH-105蓝牙耳机，sk8115是用来让我的纤纤玉手撒野的，百灵鼠是用来接替即将退役的雷柏7100的，而BH-105和我的小七搭配得天衣无缝。&lt;/p>
&lt;p>很久没有安静地整理一下头绪了，感谢我那价值四十两银子的Dell sk8115，它让我显得如此的语无伦次。&lt;/p></description></item><item><title>开始玩儿茶道</title><link>http://0x3f.org/posts/starting-tea-ceremony/</link><pubDate>Sat, 20 Mar 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/starting-tea-ceremony/</guid><description>&lt;p>前年买了个倒把小西施开始喝茶，渐渐地就觉得喝茶的趣味一半在茶，一半在泡。这周买了茶盘、茶道组等一应物件儿，直到周五晚上才有时间过把瘾。怕睡不着觉，没敢泡生茶，新开了一饼易武大树熟茶。&lt;/p>
&lt;p>&lt;a href="http://picasaweb.google.com/lh/photo/2OI8UYBIqMUejiDCtL3JKg?feat=embedwebsite">&lt;img src="http://lh6.ggpht.com/_ceUJ_lBTHzc/S6OqNZV5xgI/AAAAAAAABVg/nipIKJWV6xk/s400/%E8%8C%B6%E9%81%93%20002.JPG" />&lt;/a>&lt;/p></description></item><item><title>Python控制外部进程的灵异事件</title><link>http://0x3f.org/posts/supernatural-phenomenon-of-controlling-external-processes-in-python/</link><pubDate>Mon, 08 Mar 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/supernatural-phenomenon-of-controlling-external-processes-in-python/</guid><description>&lt;p>春节前的一段时间，重新拾起近一年没动过的&lt;a href="http://0x3f.org/?tag=foreverfantasy">ForeverFantasy&lt;/a>。&lt;/p>

&lt;p>虽然一年内没什么更新，但是我却一直都在用，基本上只限于将用Vim写好的&lt;a href="http://en.wikipedia.org/wiki/Markdown">Markdown&lt;/a>格式的文档转换成HTML。&lt;/p>

&lt;p>重写了相当一部分代码，较大程度地改变了界面布局，突然发现经过一年的沉淀，对&lt;a href="http://en.wikipedia.org/wiki/WxPython">wxPython&lt;/a>的理解增进了不少，开发起来比起去年这个时候清楚了很多。&lt;/p>

&lt;p>&lt;a href="http://picasaweb.google.com/lh/photo/bNRGQr0g6aLuqDUm8EQ6mg?feat=embedwebsite">&lt;img src="http://lh6.ggpht.com/_ceUJ_lBTHzc/S5UYPQmTAzI/AAAAAAAABUc/znMRxXuE8dE/s400/2010-03-08.23%3A27%3A03.%E5%B7%A5%E4%BD%9C%E5%8C%BA%201.01.png" />&lt;/a>&lt;/p>

&lt;p>这些天来一直坚持着每天或多或少的做一些，如果说有什么主要的进展的话，那就是界面的重构，以及昨天实现了调用Vim编辑文档并回收文档内容的功能。&lt;/p>

&lt;p>ForeverFantasy和Vim协同的一个最大的问题就是如何判断Vim已经退出。Python调用外部程序的方法有很多，比如传统的&lt;a href="http://docs.python.org/library/commands.html">commands&lt;/a>模块、&lt;a href="http://docs.python.org/library/os.html">os&lt;/a>.system()等，&lt;a href="http://docs.python.org/library/subprocess.html">subprocess&lt;/a>是致力于替代这些旧有的方式的一个模块，它的一个特点是可以在启动一个外部程序作为子进程后还能监控这个进程的运行状态。这为ForeverFantasy在Vim退出后回收文档内容提供了更简捷的途径。&lt;/p>

&lt;p>下面的代码可以说明如何使用subprocess运行外部程序并监控运行状态：&lt;/p>

&lt;p>
```python
import subprocess
process = subprocess.Popen('gvim', shell=True)
status = process.poll()
if 0 == status:
 print 'The external program exited.'
if status is None:
 print 'The external program is still running.'
```
&lt;/p>

&lt;p>理论上，可以拿实例process的poll()方法监视进程的运行状态，而且这一点在Windows上也确实可以做到，但是到了Linux下，诡异的事出现了，即使刚刚打开gvim，poll()方法也会马上返回一个0，同时process.pid的值总是和实际在运行的那个gvim进程的pid的值差3，而且在虚拟终端中输入gvim命令也不会阻塞终端，就像别的命令加上“&lt;strong>&amp;amp;&lt;/strong>”符号的效果一样。尝试用&lt;a href="http://en.wikipedia.org/wiki/Strace">strace&lt;/a>跟踪gvim的运行，试图找到问题原因，无果。我猜想可能/usr/bin/gvim是一个跳板，它启动后会启动一个新的gvim进程。总之，这个方法在Linux下是行不通的。&lt;/p>

&lt;p>因此我觉得只能另寻出路了，既然不能监控gvim进程，那就监控gvim进程所编辑的文件，只要这个文件不被任何进程占用，就可以判定gvim已退出。这一点，在Linux下易如反掌，不用说，&lt;a href="http://en.wikipedia.org/wiki/Lsof">lsof&lt;/a>当仁不让。&lt;/p>

&lt;p>用&lt;strong>commands.getstatusoutput('lsof file.txt')&lt;/strong>测试发现，如果文件file.txt被某进程占用，则返回的状态值为0，反之，返回256。&lt;/p>

&lt;p>最终，我在程序中使用了两种判断方式，在Windows平台使用subprocess跟踪gvim.exe进程，而在Linux及Unix平台使用lsof检查文档占用情况。&lt;/p>

&lt;p>剩下的就是进行这个判断的时间问题了。&lt;/p>

&lt;p>很显然，如果在子进程被启动后马上使用while循环不停的检查，一来必须使用多线程，二来系统资源占用也会很高。这时就需要利用wxPython的事件机制了，当ForeverFantasy启动Gvim时，主窗口失去焦点，而当Gvim退出时，ForeverFantasy又会获得焦点，只要能在ForeverFantasy窗口获得焦点时做一次检查即可。不过，在选择最合适的事件的问题上，又是一波三折。&lt;/p>

&lt;p>在wxPython的&lt;a href="http://www.wxpython.org/docs/api/frames.html">API&lt;/a>文档中没有找到&lt;a href="http://wiki.wxpython.org/ListOfEvents">事件列表&lt;/a>，倒是在&lt;a href="http://wiki.wxpython.org">Wiki&lt;/a>中找到了。顾名思义，觉得wx.EVT_SET_FOCUS比较靠谱，但试用失败，看API中关于FocusEvent的说明，这个事件适用于窗口控件；然后又试了wx.EVT_CHILD_FOCUS，只有在窗口包含的控件中有获得焦点的情况才会触发；最后才发现&lt;strong>wx.EVT_ACTIVATE&lt;/strong>，这个事件会在窗口失去焦点和获得焦点时各触发一次，使用GetActive()方法可以判断是获得焦点还是失去焦点。&lt;/p>

&lt;p>完成与Vim的协同使ForeverFantasy在我手上由原来单纯的格式转换工具进化为基本可用的文档编辑器，就算是&lt;strong>Milestone 2&lt;/strong>吧。&lt;/p>

&lt;p>此外，还有一些小的经验：&lt;/p>

&lt;p>1. 调用非环境变量下的程序，即命令中必须带程序所在的路径时，应当将程序所在目录的完整路径以自然字符串的形式传递给subprocess.Popen类的构造方法的cwd参数，即如下所示：&lt;/p>

&lt;p>
```python
process = subprocess.Popen('gvim.exe', cwd=r'C:\program files\vim\vim72', shell=True)
```
&lt;/p>

&lt;p>这样可以有效避免路径中的空格和特殊字符对命令执行的影响。&lt;/p>

&lt;p>2. Vim编辑一个文档时，实际操作的是一个临时文件，而不是原文件，这个临时文件与原文件同路径，名称为在原文件名的基础上，前面加一个句点，后面加后缀“.swp”。应该用lsof监控这个临时文件，才可以判断出编辑该文档的Vim进程的运行状态。由于对于不存在的文件使用lsof命令的返回值也是256，故可以同时判断临时文件和原文件的占用情况，这样就为对其它编辑器的支持奠定了基础。&lt;/p>

&lt;p>&lt;strong>2010-03-10 Wednesday 22:52:13 更新&lt;/strong>&lt;/p>

&lt;p>感谢KL童鞋和依云童鞋指教，果然加上&lt;strong>-f&lt;/strong>参数就可以了。&lt;/p></description></item><item><title>PHP后台echo过多会导致进程崩溃</title><link>http://0x3f.org/posts/too-many-echoes-may-crash-php/</link><pubDate>Sun, 31 Jan 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/too-many-echoes-may-crash-php/</guid><description>&lt;p>这是去年晚些时侯发现的一个问题。&lt;/p>
&lt;p>公司产品的后台定时任务应该是用独立的PHP进程驱动的。在做一个项目的时候，为了便于手工调试，我在定时任务中使用了大量的echo输出信息并在浏览器中手工执行此任务的脚本。&lt;/p>
&lt;p>手工执行通过，输出信息完全没有问题。但在实际运行的过程中，一个很诡异的事情发生了：即使我将实际处理数据的代码全部注释掉，只对原始数据做简单的查询，此定时任务仍然极其健壮地中途退出。最要命的是无论程序日志还是PHP的错误日志，都没有任何相关信息。直到后来我把所有echo输出都取消，问题才解决。&lt;/p>
&lt;p>事后模糊地记得很久以前似乎在哪本书上看到过在无输出设备的情况下echo过多数据会导致PHP进程崩溃的内容，但原因已想不起来了。&lt;/p></description></item><item><title>立方体归来</title><link>http://0x3f.org/posts/cube-is-back/</link><pubDate>Tue, 24 Nov 2009 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/cube-is-back/</guid><description>上次鼓捣出立方体还是几年前在学校的时候，&lt;a href="http://zh.wikipedia.org/zh-cn/Ubuntu">Ubuntu&lt;/a>+&lt;a href="http://en.wikipedia.org/wiki/Beryl_(window_manager)">Beryl&lt;/a>。

我那个时候的台式机，&lt;a href="http://en.wikipedia.org/wiki/Celeron#Tualatin-256">Celeron Tualatin&lt;/a>+256M SDRAM+GForce 440，跑XP要了亲命，忍无可忍而投奔Linux，结果一不小心鼓捣出了立方体，捎带着Firefox、OpenOffice开了一大堆，屁事儿没有，我就是这么死心塌地地上了贼船，直至今天。

后来一直用&lt;a href="http://zh.wikipedia.org/zh-cn/ArchLinux">Archlinux&lt;/a>，习惯了&lt;a href="http://zh.wikipedia.org/zh-cn/Fluxbox">Fluxbox&lt;/a>和&lt;a href="http://zh.wikipedia.org/zh-cn/Openbox">Openbox&lt;/a>的简洁。买了X200后曾试图找寻一下旧日华丽的记忆，但却人是物非，新的X200、新的Archlinux、新的&lt;a href="http://zh.wikipedia.org/zh-cn/Compiz_Fusion">Compiz-fusion&lt;/a>远不如当年的老牛破车那么搭调。虽说也搞出了立方体，但所有的窗口都没有边框，于是作罢。

上周六鬼使神差的进入GNOME并打开Fusion-icon，奇迹就这么出现了：

&lt;a href="http://picasaweb.google.com/lh/photo/HkPacmXQACapxzViLh4kRw?feat=embedwebsite">&lt;img src="http://lh5.ggpht.com/_ceUJ_lBTHzc/SwvnvUJImNI/AAAAAAAABPk/076ZiKsl4Uw/s400/screenshot_001.png" />&lt;/a></description></item><item><title>「熊猫烧香」</title><link>http://0x3f.org/posts/panda-burning-joss-sticks/</link><pubDate>Sat, 17 Feb 2007 18:28:00 +0000</pubDate><guid>http://0x3f.org/posts/panda-burning-joss-sticks/</guid><description>&lt;p>前一段的维金，现在的熊猫烧香，windows上总是不消停。&lt;/p>
&lt;p>当年的冲击波，那是我唯一一次中毒的经历，居然还很兴奋。自从转到Linux，感觉这些都离我越来越远，窃自暗爽。&lt;/p>
&lt;p>说到瑞星和卡巴斯基的撕逼，曾经也为选杀毒软件很头疼，后来幡然醒悟，只是个心理安慰，随便装一个就行了。当然，还是现在在Linux上裸奔更好。&lt;/p></description></item></channel></rss>