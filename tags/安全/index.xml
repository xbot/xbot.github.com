<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>安全 - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/%E5%AE%89%E5%85%A8/</link><description>安全 - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 06 Feb 2018 22:53:40 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/%E5%AE%89%E5%85%A8/" rel="self" type="application/rss+xml"/><item><title>用OTP Auth替换了Authy</title><link>http://0x3f.org/post/migrate-from-authy-to-otp-auth/</link><pubDate>Tue, 06 Feb 2018 22:53:40 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/migrate-from-authy-to-otp-auth/</guid><description>&lt;p>Authy的界面很花哨，但并不实用，管理多个两步验证账号时查询效率很低。OTP Auth采用更直观的列表布局，并且支持搜索，在用户体验和效率上有更大的优势。两者之间没有批量迁移数据的方式，只能逐个手动添加，很麻烦。&lt;/p></description></item><item><title>darkstat: 网络流量监测工具</title><link>http://0x3f.org/post/darkstat-as-a-network-discharge-meter/</link><pubDate>Sun, 26 Dec 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/darkstat-as-a-network-discharge-meter/</guid><description><![CDATA[<p><a href="http://dmr.ath.cx/net/darkstat/">darkstat</a>是一个跨平台的网络流量监测工具，可显示最大一个月内操作系统的各项网络流量指标。</p>
<p>具有以下特性：</p>
<ol>
	<li>以守护进程方式运行，提供Web用户界面，零配置，易于使用</li>
	<li>可显示较为详细的网络流量指标</li>
	<li>性能表现好，占用资源少</li>
	<li>跨平台，支持多个UNIX、类UNIX操作系统，并有非官方的Windows移植版</li>
</ol>
<p>具有以下不足：</p>
<ol>
	<li>功能较为简单，以易用性换灵活性</li>
	<li>日志记录功能比较单薄，需要编写辅助脚本并设置定时任务</li>
</ol>
<p>darkstat启动时需要手工指定监视的网络接口，因此需要用根权限启动：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo darkstat -i eth0
</code></pre></td></tr></table>
</div>
</div><p>darkstat默认使用<strong>667</strong>端口提供Web访问，可以用<strong>-p</strong>参数指定端口：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo darkstat -i eth0 -p <span class="m">8080</span>
</code></pre></td></tr></table>
</div>
</div><p>darkstat的Web用户界面分为Graph、Hosts和Host三部分。Graph是缺省主页，用于显示最近一分钟、一小时、一天和一个月的流量统计直方图，将光标置于任何一个直方条上可查看对应时刻的流量指标：</p>
<p><a href="http://picasaweb.google.com/lh/photo/NAB3_2TtnezdM45HoNd5pQ?feat=embedwebsite"></a></p>
<p>Hosts界面按主机显示各自的流量统计指标的值：</p>
<p><a href="http://picasaweb.google.com/lh/photo/kG1J2j2eecaLUnhDL-fArA?feat=embedwebsite"></a></p>
<p>单击Hosts界面上的IP进入对应主机的Host界面，此界面按TCP/UDP类型显示对应的主机的各端口的网络流量指标的值：</p>
<p><a href="http://picasaweb.google.com/lh/photo/XBNQWty4lp63OWwyAFm_BA?feat=embedwebsite"></a></p>
<p>可通过如下命令查看占用指定端口的进程：</p>
<blockquote>
[lenin@archer ~]$ lsof -i tcp:58062 -n
COMMAND   PID  USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
mlnet   18660 lenin   74u  IPv4 251788      0t0  TCP 192.168.1.3:58062->122.116.212.89:http (ESTABLISHED)
</blockquote>
<p>darkstat区别于其它流量监测工具的最大的优点就是简单易用，非常适合对流量监测应用不复杂的场景。前段时间公司的一台RHEL服务器因为流量过大多次被网管拔线，后来用darkstat监测到大部分流量被几个UDP端口占去，进而发现原来是服务器被入侵并被安装了一个扫描器<a href="http://code.google.com/p/sipvicious/">SIPVicious</a>。</p>
]]></description></item><item><title>SSL证书生成方法</title><link>http://0x3f.org/post/howto-create-ssl-certificates/</link><pubDate>Mon, 03 May 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/howto-create-ssl-certificates/</guid><description><![CDATA[<p>一般情况下，如果能找到可用的证书，就可以直接使用，只不过会因证书的某些信息不正确或与部署证书的主机不匹配而导致浏览器提示证书无效，但这并不影响使用。</p>

<p>需要手工生成证书的情况有：</p>

<ol>
<li>找不到可用的证书</li>
<li>需要配置双向SSL，但缺少客户端证书</li>
<li>需要对证书作特别的定制</li>
</ol>

<p>首先，无论是在Linux下还是在Windows下的Cygwin中，进行下面的操作前都须确认已安装OpenSSL软件包。</p>

<p>1. 创建根证书密钥文件<strong>root.key</strong>：</p>

```
openssl genrsa -des3 -out root.key
```

<p>输出内容为：</p>

```
[lenin@archer ~]$ openssl genrsa -des3 -out root.key
Generating RSA private key, 512 bit long modulus
.................++++++++++++
..++++++++++++
e is 65537 (0x10001)
Enter pass phrase for root.key:                ← 输入一个新密码
Verifying - Enter pass phrase for root.key:    ← 重新输入一遍密码
```

<p>2. 创建根证书的申请文件<strong>root.req</strong>：</p>

```
openssl req -new -key root.key -out root.req
```

<p>输出内容为：</p>

```
[lenin@archer ~]$ openssl req -new -key root.key -out root.req
Enter pass phrase for root.key:                                              ← 输入前面创建的密码
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:CN                                         ← 国家代号，中国输入CN
State or Province Name (full name) [Some-State]:BeiJing                      ← 省的全名，拼音
Locality Name (eg, city) []:BeiJing                                          ← 市的全名，拼音
Organization Name (eg, company) [Internet Widgits Pty Ltd]:MyCompany Corp.   ← 公司英文名
Organizational Unit Name (eg, section) []:                                   ← 可以不输入
Common Name (eg, YOUR name) []:                                              ← 此时不输入
Email Address []:admin@mycompany.com                                         ← 电子邮箱，可随意填</p>

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:                                                     ← 可以不输入
An optional company name []:                                                 ← 可以不输入</p>
```

<p>3. 创建一个自当前日期起为期十年的根证书<strong>root.crt</strong>：</p>

```
openssl x509 -req -days 3650 -sha1 -extensions v3_ca -signkey root.key -in root.req -out root.crt
```

<p>输出内容为：</p>

```
[lenin@archer ~]$ openssl x509 -req -days 3650 -sha1 -extensions v3_ca -signkey root.key -in root.req -out root.crt
Signature ok
subject=/C=CN/ST=BeiJing/L=BeiJing/O=MyCompany Corp./emailAddress=admin@mycompany.com
Getting Private key
Enter pass phrase for root.key:    ← 输入前面创建的密码
```

<p>4. 创建服务器证书密钥<strong>server.key</strong>：</p>

```
openssl genrsa -out server.key 2048
```

<p>输出内容为：</p>

```
[lenin@archer ~]$ openssl genrsa -out server.key 2048
Generating RSA private key, 2048 bit long modulus
....+++
..................................................+++
e is 65537 (0x10001)
```

<p>5.创建服务器证书的申请文件<strong>server.req</strong>：</p>

```
openssl req -new -key server.key -out server.req
```

<p>输出内容为：</p>

```
[lenin@archer ~]$ openssl req -new -key server.key -out server.req
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:CN                                          ← 国家名称，中国输入CN
State or Province Name (full name) [Some-State]:BeiJing                       ← 省名，拼音
Locality Name (eg, city) []:BeiJing                                           ← 市名，拼音
Organization Name (eg, company) [Internet Widgits Pty Ltd]:MyCompany Corp.    ← 公司英文名
Organizational Unit Name (eg, section) []:                                    ← 可以不输入
Common Name (eg, YOUR name) []:www.mycompany.com                              ← 服务器主机名，若填写不正确，浏览器会报告证书无效，但并不影响使用
Email Address []:admin@mycompany.com                                          ← 电子邮箱，可随便填

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:                                                      ← 可以不输入
An optional company name []:                                                  ← 可以不输入
```

<p>6. 创建自当前日期起有效期为期两年的服务器证书<strong>server.crt</strong>：</p>

```
openssl x509 -req -days 730 -sha1 -extensions v3_req -CA root.crt -CAkey root.key -CAserial root.srl -CAcreateserial -in server.req -out server.crt
```

<p>输出内容为：</p>

```
[lenin@archer ~]$ openssl x509 -req -days 730 -sha1 -extensions v3_req -CA root.crt -CAkey root.key -CAserial root.srl -CAcreateserial -in server.req -out server.crt
Signature ok
subject=/C=CN/ST=BeiJing/L=BeiJing/O=MyCompany Corp./CN=www.mycompany.com/emailAddress=admin@mycompany.com
Getting CA Private Key
Enter pass phrase for root.key:    ← 输入前面创建的密码
```

<p>7. 创建客户端证书密钥文件<strong>client.key</strong>：</p>

```
openssl genrsa -des3 -out client.key 2048
```

<p>输出内容为：</p>

```
[lenin@archer ~]$ openssl genrsa -des3 -out client.key 2048
Generating RSA private key, 2048 bit long modulus
.........................................................................................+++
......................................................................................................................+++
e is 65537 (0x10001)
Enter pass phrase for client.key:              ← 输入一个新密码
Verifying - Enter pass phrase for client.key:  ← 重新输入一遍密码
```

<p>8. 创建客户端证书的申请文件<strong>client.req</strong>：</p>

```
openssl req -new -key client.key -out client.req
```

<p>输出内容为：</p>

```
[lenin@archer ~]$ openssl genrsa -des3 -out client.key 2048
Generating RSA private key, 2048 bit long modulus
.........................................................................................+++
......................................................................................................................+++
e is 65537 (0x10001)
Enter pass phrase for client.key:
Verifying - Enter pass phrase for client.key:
[lenin@archer ~]$ openssl req -new -key client.key -out client.req
Enter pass phrase for client.key:                                              ← 输入上一步中创建的密码
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:CN                                           ← 国家名称，中国输入CN
State or Province Name (full name) [Some-State]:BeiJing                        ← 省名称，拼音
Locality Name (eg, city) []:BeiJing                                            ← 市名称，拼音
Organization Name (eg, company) [Internet Widgits Pty Ltd]:MyCompany Corp.     ← 公司英文名
Organizational Unit Name (eg, section) []:                                     ← 可以不填
Common Name (eg, YOUR name) []:Lenin                                           ← 自己的英文名，可以随便填
Email Address []:admin@mycompany.com                                           ← 电子邮箱，可以随便填

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:                                                       ← 可以不填
An optional company name []:                                                   ← 可以不填
```

<p>9. 创建一个自当前日期起有效期为两年的客户端证书<strong>client.crt</strong>：</p>

```
openssl x509 -req -days 730 -sha1 -extensions v3_req -CA root.crt -CAkey root.key -CAserial root.srl -CAcreateserial -in client.req -out client.crt
```

<p>输出内容为：</p>

```
[lenin@archer ~]$ openssl x509 -req -days 730 -sha1 -extensions v3_req -CA root.crt -CAkey root.key -CAserial root.srl -CAcreateserial -in client.req -out client.crt
Signature ok
subject=/C=CN/ST=BeiJing/L=BeiJing/O=MyCompany Corp./CN=www.mycompany.com/emailAddress=admin@mycompany.com
Getting CA Private Key
Enter pass phrase for root.key:          ← 输入上面创建的密码
```

<p>10. 将客户端证书文件<strong>client.crt</strong>和客户端证书密钥文件<strong>client.key</strong>合并成客户端证书安装包<strong>client.pfx</strong>：</p>

```
openssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx
```

<p>输出内容为：</p>

```
[lenin@archer ~]$ openssl pkcs12 -export -in client.crt -inkey client.key -out client.pfx
Enter pass phrase for client.key:        ← 输入上面创建的密码
Enter Export Password:                   ← 输入一个新的密码，用作客户端证书的保护密码，在客户端安装证书时需要输入此密码
Verifying - Enter Export Password:       ← 确认密码
```

<p>11. 保存生成的文件备用，其中<strong>server.crt</strong>和<strong>server.key</strong>是配置单向SSL时需要使用的证书文件，<strong>client.crt</strong>是配置双向SSL时需要使用的证书文件，<strong>client.pfx</strong>是配置双向SSL时需要客户端安装的证书文件</p>
]]></description></item></channel></rss>