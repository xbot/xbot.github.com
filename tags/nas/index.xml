<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NAS on 晴耕雨讀</title><link>http://0x3f.org/tags/nas/</link><description>Recent content in NAS on 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>© 淘气 2022</copyright><lastBuildDate>Tue, 06 Feb 2024 11:25:58 +0800</lastBuildDate><atom:link href="http://0x3f.org/tags/nas/index.xml" rel="self" type="application/rss+xml"/><item><title>GVT-g 配置指南：实现多虚拟机共享 Intel 核显硬件加速</title><link>http://0x3f.org/posts/guide-to-configuring-gvt-g-graphics-acceleration/</link><pubDate>Tue, 06 Feb 2024 11:25:58 +0800</pubDate><guid>http://0x3f.org/posts/guide-to-configuring-gvt-g-graphics-acceleration/</guid><description>Proxmox Virtual Environment（PVE）是一个功能强大的开源虚拟化管理平台。它允许用户在单个主机上运行多个虚拟机，每个虚拟机都可以拥有自己的操作系统。为了进一步提升虚拟机的性能，特别是对于那些需要图形处理能力的应用，我们可以通过配置 Intel® Graphics Virtualization Technology –g (GVT-g) 来实现。GVT-g 是一种硬件辅助的虚拟化技术，它允许虚拟机直接访问宿主机的图形处理单元（GPU），从而提高图形性能。本文将详细介绍如何在 PVE 中为 Intel 核显开启 GVT-g 。
本文环境：
操作系统：PVE 8.0 CPU： Intel Core i5-8600t 核显：UHD630 步骤 1 ：修改 GRUB 配置 首先，我们需要确保 GRUB 引导加载器在启动时启用了必要的参数。打开/etc/default/grub文件，并找到GRUB_CMDLINE_LINUX_DEFAULT行。添加以下参数：
1 GRUB_CMDLINE_LINUX_DEFAULT=&amp;#34;quiet intel_iommu=on iommu=pt i915.enable_gvt=1&amp;#34; 这将启用 Intel IOMMU（Input/Output Memory Management Unit）和 GVT-g 。保存文件后，运行以下命令来更新 GRUB 配置：
1 sudo update-grub 步骤 2 ：添加内核模块 接下来，我们需要确保 PVE 在启动时加载必要的内核模块。编辑/etc/modules文件，添加以下模块：
1 2 3 4 5 vfio vfio_iommu_type1 vfio_pci vfio_virqfd kvmgt 如果你之前因为配置直通核显而在/etc/modprobe.d/pve-blacklist.conf中屏蔽了显卡驱动，现在需要解除屏蔽。这可以通过注释掉或删除相关行来实现。
完成修改后，运行以下命令来更新 initramfs ：</description></item><item><title>Homelab 升级记：从 Unraid 到 Proxmox VE 的平滑过渡</title><link>http://0x3f.org/posts/a-smooth-transition-from-unraid-to-pve/</link><pubDate>Mon, 05 Feb 2024 22:22:57 +0800</pubDate><guid>http://0x3f.org/posts/a-smooth-transition-from-unraid-to-pve/</guid><description>最近，我对我的 Homelab 进行了一次重大调整，从 Unraid 迁移到了 Proxmox VE（PVE），并用它实现了对 Unraid 的虚拟化，这一转变不仅提高了系统的稳定性、灵活性，还带来了一系列令人惊喜的改进。在这篇文章中，我将分享这次调整的动机、硬件升级以及软件配置的详细过程。
动机：解耦虚拟机与 Unraid 我决定将虚拟机从 Unraid 中分离出来，这样做的目的是为了减轻 Unraid 重启时对整个网络环境的影响，降低磁盘阵列卡住的风险，并加速 Unraid 的重启过程。
此外，这样的调整也使得使用 Proxmox Backup Server (PBS) 进行备份变得更加方便，减少了对 Unraid 缓存盘的占用，并优化了硬盘的休眠策略，减少了不必要的唤醒次数。
最后，减少虚拟化嵌套层数，简化了架构，提高了整体效率。
硬件升级 机箱改造： 为了适应新的硬件配置，我用角磨机切掉了蜗牛星际机箱 B 款的横梁，因为它挡住了 PCIe 插槽。这一小小的改动为后续的硬件安装提供了空间。 主板与扩展卡： 主板只有一个 M.2 插槽，我选择在这里安装了 PVE。为了加装第二款 NVME 固态硬盘，我购买了 PCIe 转 M.2 扩展卡，将 Unraid 的缓存盘插到了这个扩展卡上。小火炉铠侠 RC10 在加装了扩展卡附带的散热片后降温效果显著，目测温度下降了大约 15℃，Unraid 系统再也没有出现过报警。
视频采集卡： 为了在没有额外显示器的情况下管理 Homelab ，我购买了视频采集卡，并配合 iPad 使用，作为临时显示器。
软件配置 直通设备： 在 PVE 中，我将 Unraid 系统 U 盘、Sata 控制器、外置硬盘以及 NVME 缓存盘直通（passthrough）给了 Unraid 虚拟机。这样做的好处是，仍然使用 Unraid 作为 NAS 系统管理所有存储资源，并继续使用 Unraid 优秀的应用社区，同时使 Jellyfin 可以直接使用硬件加速解码，提高了性能和响应速度。</description></item><item><title>我的家庭数据备份方案</title><link>http://0x3f.org/posts/my-homelab-backup-strategy/</link><pubDate>Wed, 31 Jan 2024 20:02:08 +0800</pubDate><guid>http://0x3f.org/posts/my-homelab-backup-strategy/</guid><description>在这个数字化时代，数据安全比以往任何时候都更加重要。无论是个人生活还是工作，我们都需要一个可靠的备份方案来确保数据的安全。今天，我想分享我的家庭数据备份方案，它不仅涵盖了我所有的虚拟机、容器和配置数据，还包括了 NAS 上的重要文件，如照片、密码、笔记和待办事项。这个方案遵循了著名的 3-2-1 备份策略，并且通过精心选择的备份工具，确保了数据的安全性和高效性。
数据种类 首先，让我们来了解我需要备份的数据种类。我有两个 PVE（Proxmox Virtual Environment）宿主机，上面运行着多个虚拟机和容器。这些虚拟机和容器包含了我所有的工作和个人项目。为了备份这些数据，我选择了 PBS（Proxmox Backup Server）作为备份存储。同时，我还使用 proxmox-backup-client 将 PVE 的配置数据也备份到 PBS 。
除了虚拟机和容器，我的 NAS 上还存储着许多重要数据，包括家庭照片、密码管理器的数据库、个人笔记以及待办事项列表。这些数据对我来说同样重要，因此我也将它们纳入了备份计划。
备份策略 我遵循的备份策略是 3-2-1 原则，即至少有三份备份，存储在两种不同的媒介上，且至少有一份在其他地方。这个策略可以有效地防止数据丢失。
3-2-1策略的具体实现 为了实现这一策略，我部署了两个 Kopia 实例，并行运行，分别将数据备份到阿里云盘和我的移动硬盘。这样做的原因是 KopiaUI 目前只支持同时连接一个仓库，而并行备份可以确保即使上游备份出现问题，也不会影响下游的备份进程。
为什么选择并行而不是串行 串行备份可能会导致一个问题：如果上游的备份过程中出现错误，那么这个错误会被传递到下游的备份。通过并行备份，我们可以避免这种情况，确保每个备份都是独立的。
备份工具的选择 在选择备份工具时，我考虑了以下几个标准：
支持本地和云备份：这样可以确保数据在本地和远程都有备份。 支持增量备份：只备份自上次备份以来发生变化的数据，节省时间和存储空间。 支持压缩和加密：保护数据安全的同时，减少存储需求。 支持将备份数据分割成一定大小：这对于远程备份尤其有用，可以提高小文件的上传速度，降低大文件上传失败的风险。 支持定时备份：自动化的定时备份可以确保数据始终是最新的。 稳定性和易用性：工具需要稳定运行，并且用户界面友好，易于操作。 在对比了多个备份工具后，我选择了 Kopia 和 Duplicati 。以下是它们的优缺点对比：
Duplicati 优点：
易于部署，通过 Docker 部署非常简单。 用户界面友好，易于操作。 支持同时连接多个仓库。 缺点：
使用 .Net 实现，可能会占用更多的系统资源。 有关于稳定性的传闻，尽管这可能因环境而异。 Kopia 优点：
稳定性的负面反馈较少，运行效率高。 占用资源相对较少，对系统的影响小。 用户界面简洁，易于理解。 缺点：
部署和上手难度较高，相关资料较少，官方文档不够详尽。 不支持同时连接多个仓库，这在某些情况下可能会造成不便。 高级功能通常需要通过命令行实现，对于不熟悉命令行的用户来说可能不够友好。 结语 通过这样的备份方案，我可以确保我的数据在多种情况下都能得到保护。无论是硬件故障还是意外删除，我都有办法恢复我的数据。这给了我极大的安心，让我可以专注于我的工作和家庭生活，而不必担心数据安全问题。希望我的分享能为你的家庭数据备份提供一些启示。</description></item><item><title>Unraid 6.11 弃用 NerdPack 的解决办法</title><link>http://0x3f.org/posts/how-to-install-packages-after-nerdpack-is-deprecated-in-unraid-6.11/</link><pubDate>Sun, 25 Sep 2022 21:29:41 +0800</pubDate><guid>http://0x3f.org/posts/how-to-install-packages-after-nerdpack-is-deprecated-in-unraid-6.11/</guid><description>Unraid 6.11 的 release note 没提弃用 NerdPack ，浪费了我很多时间。😞
当前版本的 Unraid 是基于 Slackware 15.0 的，可以手动从以下站点下载软件包手动安装：
https://slackware.pkgs.org/15.0/slackware-x86_64/ https://slackonly.com/pub/packages/15.0-x86_64/ 把下载的软件包放到运行中的 Unraid 的 /boot/extra 目录（不存在就手动创建）下，重启系统后自动安装或者通过 installpkg 命令手动安装。例如：
1 installpkg vim-8.2.4256-x86_64-1.txz 更简单的方法是使用 un-get ：
1 2 3 4 5 6 un-get search vim un-get install python3 python-pip python-setuptools un-get remove vim un-get update un-get cleanup un-get upgrade 这个命令目前不解决依赖关系，而且存在部分包无法下载或找不到的现象，还是需要手动干预。
作者没有在项目主页写安装说明，而是写在 Reddit 帖子里了。
2022-10-07 更新 出了个新的 NerdTools ，界面和 NerdPack 一样难用，包的数量现在还很少，但版本较新，还有一些 un-get 目前搜不到的包（比如: fzf）。可以作为补充。</description></item><item><title>为 Seafile 配置反向代理的问题</title><link>http://0x3f.org/posts/setup-reverse-proxy-for-seafile/</link><pubDate>Mon, 10 Jan 2022 23:27:08 +0800</pubDate><guid>http://0x3f.org/posts/setup-reverse-proxy-for-seafile/</guid><description>我目前用 SWAG 做 Homelab 的反向代理，在和其它服务一样为 Seafile 配置好后，访问时却报如下错误：
Contradictory scheme headers
原因是 Seafile 的 Docker 镜像里已经使用了 NGINX 做反代，而且配置里包含和 SWAG 反代相同的配置项：
1 proxy_set_header X-Forwarded-Proto $scheme； 此时，通过 HTTPS 访问的 SWAG 反代传递的 HEADER 里 X-Forwarded-Proto 是 https ，而通过 HTTP 访问的 Seafile 传递的是 http ，就会报以上错误。
一种解决方法是，把 Seafile 的 /etc/nginx/conf.d/seafile.nginx.conf 复制到宿主机，把文件中 X-Forwarded-Proto 这一行注释掉，然后映射到 Docker 容器的上述路径上：
1 -v &amp;#39;/mnt/user/appdata/seafile/seafile.nginx.conf&amp;#39;:&amp;#39;/etc/nginx/conf.d/seafile.nginx.conf&amp;#39;:&amp;#39;ro&amp;#39; 需要注意的是，不同版本的 Seafile 镜像里该文件的路径可能不同。</description></item><item><title>自动追剧的工作流</title><link>http://0x3f.org/posts/auto-workflow-of-following-tv-series-and-movies/</link><pubDate>Sun, 21 Nov 2021 17:16:15 +0800</pubDate><guid>http://0x3f.org/posts/auto-workflow-of-following-tv-series-and-movies/</guid><description>在 NAS 上搭了个自动追剧、追影的工作流，体验非常好。
只需要把想看的美剧或者电影添加到监控列表里，就可以在资源出现之后自动下载并通知到手机或电脑，全程无值守，回家打开电视就能看。
用到这些工具：
Jackett: BT 索引工具，负责搜索资源。 Prowlarr: Jackett 的平替，和 Radarr/Sonarr 同步 indexer 更方便，对 torrent 网站的限流机制处理得更好。 Sonarr: 电视剧管理工具，负责管理追剧列表、调用 Jackett 搜索、资源监控、下载调度。 Radarr: 电影管理工具，功能同 Sonarr 。 qBittorrent: BT 下载工具。 ChineseSubFinder: 字幕搜索工具。 Jellyfin: 媒体中心，负责影视剧转码、播放、管理。 Telegram: 接收通知。 nzb360: Android APP ， Sonarr 、 Radarr 、 qBittorrent 的客户端。 LunaSea: iOS 的 nzb360 平替，功能和用户体验稍逊后者。 Jackett 是 BT 资源索引工具，可以对添加到索引列表中的 BT 资源站点做集中搜索。
在 Jackett 因某个 indexer 由于其网站的限流措施而响应失败导致 Radarr 无法搜索且无法修改 indexer 配置后，我改用了 Prowlarr 。它不仅解决了之前遇到的问题，还可以自动同步 indexer 配置到 Radarr 和 Sonarr，并且它们的 UI 也十分统一。</description></item><item><title>我的第一台 NAS</title><link>http://0x3f.org/posts/my-first-nas/</link><pubDate>Sun, 10 Oct 2021 21:50:12 +0800</pubDate><guid>http://0x3f.org/posts/my-first-nas/</guid><description>年初终于攒了一台 NAS 。
之前用一块 1T 的 Buffalo 外置硬盘，但是多年之后，我开始担心这头老水牛还能活多久，况且它的剩余空间也已经不多了。与此同时，手机和电脑的存储空间也像油腻大叔的头发一样越来越少，我必须把沉淀的冷数据迁移出去。身边像有一群饥饿的东西拼命向我伸手。
而且，随着数码设备的增加，尤其在添了一台 Apple TV 后，出于看 YouTube 的目的，我更需要通过软路由的方式改善家庭网络的翻墙体验。
再者，以前看影剧都是把 U 盘插到电视或者微投上，或者通过电脑串流，多少也有点麻烦。
于是打算用一台 All-in-one 解决所有问题。
硬件规格 最初考虑过群晖、威联通之类的品牌 NAS ，如果能得到更好的使用体验，多花点钱也是可以的。但是看过硬件规格后，感觉我要是以这个价格买了，那就算人生的污点了。
所以开始准备攒机，按优先级列举一下要求：
美观，不要傻大黑粗的直男风。 体积小。 兼顾功耗和性能。 内存大（16 ~ 32 G）。 先后拟了 4 套配置，和某淘宝店的套装做了一下对比：
- 淘宝店方案 价格 方案 1 价格 方案 2 价格 方案 3 价格 方案 4 价格 机箱 万由 410 - 万由 410 680 迎广 MS04 930 蜗牛星际B涂装改风扇 275 蜗牛星际B涂装改风扇 275 电源 益衡 200W - 益衡 7025B 236 机箱内置 - 益衡 7025B 236 益衡 7025B 236 主板 B365-ITX 定制工控板 - 华擎 Z390M-ITX/ac 1199 华擎 Z390M-ITX/ac 1199 华擎 Z390M-ITX/ac 1199 华擎 Z390M-ITX/ac（二） 700 CPU I5-8600T - I5-8600T 825 I5-8600T 825 I5-8600T 825 I5-8600T 825 散热器 - - AVC 28mm 115X 23 AVC 28mm 115X 23 AVC 28mm 115X 23 AVC 28mm 115X 23 内存 镁光 DDR4 16G 2666 - 光威 DDR4 2666 16G 379 光威 DDR4 2666 16G 379 光威 DDR4 2666 16G 379 海盗船 DDR4 3000 16G×2（二） 700 总计 - 2999 - 3342 - 3356 - 2937 - 2759 最后选了第 4 种。</description></item><item><title>用微力同步换掉了 Dropbox</title><link>http://0x3f.org/posts/replace-dropbox-with-verysync/</link><pubDate>Wed, 06 Oct 2021 01:24:41 +0800</pubDate><guid>http://0x3f.org/posts/replace-dropbox-with-verysync/</guid><description>我希望找到一种体验较好的方式，把两部手机和索尼黑卡上的照片集中同步到 NAS 上交由 PhotoPrism 托管。
需求如下：
可以方便地发送多平台照片到 NAS 。 可以单向同步手机到 NAS 并忽略手机的删除操作，以节省手机的存储空间。 可以实现内网穿透且简单稳定。 便宜。 对比了 PhotoSync 、 Resilio Sync 、 Syncthing 和微力同步（verysync）。
PhotoSync 作为专门针对同步照片的场景设计的 APP ，完美覆盖前两点，第三点可以借助 NAS 已经配置好的内网穿透实现，但是需要购买相应的 Plan ，而且 Android 和 iOS 平台要各自单独购买。
Resilio Sync 实现内网穿透需要引入新的依赖关系，不完全满足第三点。
Syncthing 看起来不错，但是没有官方的 iOS 客户端。
微力同步据说是基于 Syncthing 的，且补上了后者缺失的一环。各平台免费，只有 iOS 上需要花 12￥ 买 APP 。
我的 NAS 运行的是 Unraid ， Community Applications 里没有微力同步，在这里找到了别人配置好的模板，部署很方便。
试用后因为太好用，干脆把 Dropbox 目录也放到微力同步里，卸载了会占用很多内存且免费方案 3 个端的限制早已捉襟见肘的 Dropbox 。</description></item></channel></rss>