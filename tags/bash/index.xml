<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BASH on 晴耕雨讀</title><link>http://0x3f.org/tags/bash/</link><description>Recent content in BASH on 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>© 淘气 2022</copyright><lastBuildDate>Tue, 19 Jun 2012 00:14:00 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/bash/index.xml" rel="self" type="application/rss+xml"/><item><title>怎样为红帽系Linux发行版写系统服务脚本</title><link>http://0x3f.org/posts/how-to-write-service-scripts-for-redhat-distros/</link><pubDate>Tue, 19 Jun 2012 00:14:00 +0000</pubDate><guid>http://0x3f.org/posts/how-to-write-service-scripts-for-redhat-distros/</guid><description>##阅读说明
阅读本文要求有基本的Linux系统使用经验和Bash脚本编程能力。
本文所述的内容适用于RHEL、CentOS等红帽系Linux发行版。
##系统服务简介
###常用命令
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 # 启动MySQL service mysqld start # 关闭MySQL service mysqld stop # 重启MySQL service mysqld restart # 查看MySQL服务运行状态 service mysqld status # 查看MySQL服务是否开机自动运行 chkconfig --list mysqld # 设置MySQL服务开机自动运行 chkconfig --level 345 mysqld on # 取消MySQL服务开机自动运行 chkconfig --level 345 mysqld off ###运行级别
泛UNIX派系操作系统使用运行级别标识使用何种模式初始化。理论上，不同的发行版各级别代表的意义不同。红帽系发行版使用以下七个运行级别：
0：关机 1：单用户模式 2：多用户模式，无网络服务 3：多用户模式，有网络服务 4：未使用/用户自定义 5：带图形界面的多用户模式 6：重启 最常用的是0、3、5、6四种模式。其中，0和6表示关闭和重启操作系统，所以，执行命令init 0和shutdown是一个效果，同样，执行命令init 6和reboot是一个效果。模式3即普通的命令行用户界面，模式5即普通的图形界面用户界面。</description></item><item><title>TurboCRM Cluster Express v1.0 释出</title><link>http://0x3f.org/posts/turbocrm-cluster-express-v1-released/</link><pubDate>Sun, 08 Apr 2012 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/turbocrm-cluster-express-v1-released/</guid><description>TurboCRM Cluster Express是TurboCRM的集群实施工具。
去年我曾经写过一个配置集群的Bash脚本“cluster.sh”，TCE是对这个脚本的图形界面封装，通过可视化的操作简化集群的实施工作。
TCE的最新版本和使用说明可以在这里找到。
Posted via UltraBlog.vim.</description></item><item><title>禁止屏幕在播放视频时自动关闭</title><link>http://0x3f.org/posts/how-to-keep-monitor-active-while-watching-flv/</link><pubDate>Wed, 04 Apr 2012 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/how-to-keep-monitor-active-while-watching-flv/</guid><description>貌似Lose系统下看在线视频的时候不会超时自动关闭屏幕，但是我在Arch下就一直晃鼠标、按键盘来著，这严重违反了DRY原则。于是昨天终于写了这个脚本，当全屏播放视频的时候，关闭屏保和显示器的节能特性，否则则激活它们。由于是在X的级别实现，理论上应当适合所有桌面环境。
```bash #!/bin/bash # Baby-sitter of the monitor's DPMS idle_period=60 ss_switch_off=0 ss_is_off=0 while true; do # Read DPMS state xset -q|grep "DPMS is Disabled" > /dev/null &amp;&amp; ss_is_off=1 || ss_is_off=0 # Get pid of the current window active_window_id=`xprop -root | grep "_NET_ACTIVE_WINDOW(WINDOW)" | cut -d" " -f5` decimal_id=`xprop -id $active_window_id | grep PID | cut -d" " -f3` # Traverse all libflashplayer.so for pid in `ps -ef|grep -v grep|grep libflashplayer.so|awk '{print $2}'`; do # If the current window is libflashplayer.</description></item><item><title>Linux的内存使用机制</title><link>http://0x3f.org/posts/linux-memory-usage/</link><pubDate>Fri, 24 Dec 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/linux-memory-usage/</guid><description>在top中，内存使用情况显示为如下格式：
根据内存的使用情况，将内存空间划分为四种类型：已使用（used），未使用（free），缓冲区（buffers）和已缓存（cached）。
“已使用”是指目前正被使用的活跃的内存区域。“未使用”是指当前空闲的内存区域。“缓冲区”是用于存放即将写入存储介质的数据的区域。“已缓存”是指曾因需要而被读入内存、但目前已不被使用的数据。Linux通常会在资源使用完毕后保留一部分数据在内存中而不全部释放，这就是“已缓存”区域，这样当这些数据再次被使用时，系统就可以直接从内存中读取。而“缓冲区”用于将对存储介质的写操作集中进行。因此，“缓冲区”和“已缓存”特性对减少存储介质IO和加速系统运行都具有非常重要的作用。
所以，Linux运行一段时间后，通常看起来空闲内存都很小，其实是因为很大一部分被用作“已缓存”区域，这部分内存会在内存资源紧张时被自动释放，也可以通过如下命令手工释放：
1 echo 1 &amp;gt; /proc/sys/vm/drop_caches</description></item><item><title>screen曰：$TERM too long - sorry.</title><link>http://0x3f.org/posts/screen-is-sorry-for-term-being-too-long/</link><pubDate>Wed, 01 Dec 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/screen-is-sorry-for-term-being-too-long/</guid><description>最近rxvt-unicode-256color的一次更新触发了screen的一个缺陷。新的版本将默认的环境变量$TERM由rxvt-256color改成了rxvt-unicode-256color，这导致在rxvt中启动screen时报这样的错误：
虽然可以在.Xdefaults中指定$TERM的值，但是据说这样会导致rxvt加载错误的terminfo，并导致终端的颜色由256色降低到88色。另外虽然按照同样的说法，可以在screenrc中设置$TERM的值，但是不知道是我写的格式不对还是什么原因，无效。
最终还是设了个别名：
1 2 3 # vi ~/.bashrc alias screenx=&amp;#39;export TERM=screen-256color &amp;amp;&amp;amp; screen&amp;#39;</description></item><item><title>批量下载视频的BASH脚本</title><link>http://0x3f.org/posts/a-bash-script-downloading-videos-in-batch/</link><pubDate>Sat, 28 Aug 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/a-bash-script-downloading-videos-in-batch/</guid><description>两周前为了批量下载某视频网站中的电视剧，写了个BASH脚本。将电视剧列表页面的URL地址作为唯一参数传给脚本，然后就会把所有视频下载到当前目录下，并自动重命名，同时生成一个M3U格式的播放列表。
由于在线视频不支持断点续传，所以对于单个视频来说无法实现。但对于整个批量下载任务来说，实现了宏观上的断点续传，已经下载的视频不会被重复下载。由于有些视频网站会在午夜更改视频地址，所以这一点很有用。
主流视频网站应该是都支持的，我只测试了我下载电视剧的网站，不支持的都是非主流的！
唯一可能需要注意的依赖是PHP，必须安装后才能使用。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #!</description></item><item><title>Linux下pppoe连接建立后仍不能上网的问题</title><link>http://0x3f.org/posts/problem-on-pppoe-connections-on-linux/</link><pubDate>Sat, 10 Jul 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/problem-on-pppoe-connections-on-linux/</guid><description>问题描述
pppoe可以连接，ifconfig可以看到ppp0接口，一切正常，只是不能上网。
解决办法
使用如下命令查看路由表：
1 route 正常情况下返回的结果中应该有如下内容：
如果没有，可手工添加：
1 route add default dev ppp0 如果可以上网，就成功了。
使用如下脚本在pppoe连接成功时自动添加路由表项：
1 2 3 4 5 6 #!/bin/sh if ifconfig ppp0 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 ; then route del default route add default dev ppp0 fi 将上述内容保存成名为01-route.sh的文件，权限755，放到/etc/ppp/ip-up.d目录下。
然后创建以下两个脚本：
1 2 3 4 5 6 7 8 9 10 11 12 #!/bin/bash if ifconfig ppp0 &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 ; then echo &amp;#39;PPPOE has already been switched on !</description></item><item><title>cd到目录下后自动ls的方法</title><link>http://0x3f.org/posts/howto-do-auto-listing-after-changing-directory/</link><pubDate>Sun, 20 Jun 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/howto-do-auto-listing-after-changing-directory/</guid><description>每cd到一个目录下就ls，这成了我的习惯。以下Bash函数和别名可以实现cd到一个目录下就自动执行ls命令：
1 2 3 4 5 cdl() { cd &amp;#34;${1}&amp;#34;; ls; } alias cd=cdl 将上述内容添加到用户主目录中的.bashrc中即可。</description></item></channel></rss>