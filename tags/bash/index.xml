<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>BASH - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/bash/</link><description>BASH - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 19 Jun 2012 00:14:00 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/bash/" rel="self" type="application/rss+xml"/><item><title>怎样为红帽系Linux发行版写系统服务脚本</title><link>http://0x3f.org/post/how-to-write-service-scripts-for-redhat-distros/</link><pubDate>Tue, 19 Jun 2012 00:14:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/how-to-write-service-scripts-for-redhat-distros/</guid><description><![CDATA[<p>##阅读说明</p>
<p>阅读本文要求有基本的Linux系统使用经验和Bash脚本编程能力。</p>
<p>本文所述的内容适用于RHEL、CentOS等红帽系Linux发行版。</p>
<p>##系统服务简介</p>
<p>###常用命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 启动MySQL</span>
service mysqld start

<span class="c1"># 关闭MySQL</span>
service mysqld stop

<span class="c1"># 重启MySQL</span>
service mysqld restart

<span class="c1"># 查看MySQL服务运行状态</span>
service mysqld status

<span class="c1"># 查看MySQL服务是否开机自动运行</span>
chkconfig --list mysqld

<span class="c1"># 设置MySQL服务开机自动运行</span>
chkconfig --level <span class="m">345</span> mysqld on

<span class="c1"># 取消MySQL服务开机自动运行</span>
chkconfig --level <span class="m">345</span> mysqld off
</code></pre></td></tr></table>
</div>
</div><p>###运行级别</p>
<p>泛UNIX派系操作系统使用运行级别标识使用何种模式初始化。理论上，不同的发行版各级别代表的意义不同。红帽系发行版使用以下七个运行级别：</p>
<ul>
<li>0：关机</li>
<li>1：单用户模式</li>
<li>2：多用户模式，无网络服务</li>
<li>3：多用户模式，有网络服务</li>
<li>4：未使用/用户自定义</li>
<li>5：带图形界面的多用户模式</li>
<li>6：重启</li>
</ul>
<p>最常用的是0、3、5、6四种模式。其中，0和6表示关闭和重启操作系统，所以，执行命令<strong>init 0</strong>和<strong>shutdown</strong>是一个效果，同样，执行命令<strong>init 6</strong>和<strong>reboot</strong>是一个效果。模式3即普通的命令行用户界面，模式5即普通的图形界面用户界面。</p>
<p>模式1在个别情景下会用到，例如忘记root用户的密码时，需要进入模式1修改密码。</p>
<p>##系统服务脚本格式</p>
<p>###示例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="c1"># chkconfig: 345 99 12</span>
<span class="c1"># description: This is a sample service script</span>

<span class="k">case</span> <span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span> in
    start<span class="o">)</span>
        <span class="c1"># Start something.</span>
        touch /var/lock/subsys/sample
        <span class="p">;;</span>
    stop<span class="o">)</span>
        <span class="c1"># Stop something.</span>
        /bin/rm -f /var/lock/subsys/sample
        <span class="p">;;</span>
    restart<span class="p">|</span>reload<span class="o">)</span>
        <span class="c1"># Restart something.</span>
        <span class="p">;;</span>
    status<span class="o">)</span>
        <span class="c1"># Report the running status of something.</span>
        <span class="p">;;</span>
    *<span class="o">)</span>
        <span class="c1"># Invalid command, complain an error.</span>
        <span class="p">;;</span>
<span class="k">esac</span>

<span class="nb">exit</span> <span class="m">0</span>
</code></pre></td></tr></table>
</div>
</div><p>###解释</p>
<p>假设本服务脚本文件的文件名为<strong>sample</strong>。</p>
<p>整个服务脚本是一个普通的Bash脚本。主体是一个case语句，定义了四个命令start、stop、restart或reload、status，顾名思义，四个命令分别用来启动、停止、重启该服务，以及获取服务的运行状态。</p>
<p>红帽系发行版使用chkconfig命令设置服务自动在哪个运行级别被自动执行。要使服务脚本支持chkconfig命令，需要加入注释行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># chkconfig: 345 99 12</span>
</code></pre></td></tr></table>
</div>
</div><p>其中，<strong>345</strong>表示缺省的运行级别，使用如下命令添加服务时：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">chkconfig --add sample
</code></pre></td></tr></table>
</div>
</div><p>将和使用如下命令一个效果：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">chkconfig --level <span class="m">345</span> sample on
</code></pre></td></tr></table>
</div>
</div><p><strong>99</strong>表示启动序号，例如若希望服务B在服务A启动后启动，且服务A的启动序号是98，则服务B的启动序号应设为大于98的一个整数。</p>
<p><strong>12</strong>表示停止序号，作用与启动序号相同。</p>
<p>此外，若希望在操作系统关闭前先自动执行服务的关闭命令，需要在**/var/lock/subsys/**目录中存在与服务名同名的空文件，因此，应在**start**命令中创建一个这样的文件，并在**stop**命令中删除之。</p>
]]></description></item><item><title>TurboCRM Cluster Express v1.0 释出</title><link>http://0x3f.org/post/turbocrm-cluster-express-v1-released/</link><pubDate>Sun, 08 Apr 2012 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/turbocrm-cluster-express-v1-released/</guid><description><![CDATA[<p>TurboCRM Cluster Express是TurboCRM的集群实施工具。</p>

<p></p>

<p>去年我曾经写过一个配置集群的Bash脚本“cluster.sh”，TCE是对这个脚本的图形界面封装，通过可视化的操作简化集群的实施工作。</p>

<p>TCE的最新版本和使用说明可以在<a href="http://xbot.github.com/TurboCRM-Cluster-Express/">这里</a>找到。</p>

<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item><item><title>禁止屏幕在播放视频时自动关闭</title><link>http://0x3f.org/post/how-to-keep-monitor-active-while-watching-flv/</link><pubDate>Wed, 04 Apr 2012 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/how-to-keep-monitor-active-while-watching-flv/</guid><description><![CDATA[<p>貌似Lose系统下看在线视频的时候不会超时自动关闭屏幕，但是我在Arch下就一直晃鼠标、按键盘来著，这严重违反了DRY原则。于是昨天终于写了这个脚本，当全屏播放视频的时候，关闭屏保和显示器的节能特性，否则则激活它们。由于是在X的级别实现，理论上应当适合所有桌面环境。</p>

```bash
#!/bin/bash
# Baby-sitter of the monitor's DPMS

idle_period=60
ss_switch_off=0
ss_is_off=0

while true; do
    # Read DPMS state
    xset -q|grep "DPMS is Disabled" > /dev/null && ss_is_off=1 || ss_is_off=0
    # Get pid of the current window
    active_window_id=`xprop -root | grep "_NET_ACTIVE_WINDOW(WINDOW)" | cut -d" " -f5`
    decimal_id=`xprop -id $active_window_id | grep PID | cut -d" " -f3`
    # Traverse all libflashplayer.so
    for pid in `ps -ef|grep -v grep|grep libflashplayer.so|awk '{print $2}'`; do
        # If the current window is libflashplayer.so
        if [ "$pid" -eq "$decimal_id" ]; then
            ss_switch_off=1
            break
        else
            ss_switch_off=0
        fi
    done
    if [ $ss_switch_off -eq 1 ]; then
        # Turn off DPMS
        echo Turn off DPMS
        if [ $ss_is_off -eq 0 ]; then
            echo Action
            xset s off
            xset -dpms
        fi
    else
        # Turn on DPMS
        echo Turn on DPMS
        if [ $ss_is_off -eq 1 ]; then
            echo Action
            xset +dpms
            xset s on
        fi
    fi
    sleep $idle_period
done
```

<p>似乎对非全屏播放的情况没有什么好方法。</p>

<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item><item><title>Linux的内存使用机制</title><link>http://0x3f.org/post/linux-memory-usage/</link><pubDate>Fri, 24 Dec 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/linux-memory-usage/</guid><description><![CDATA[<p>在top中，内存使用情况显示为如下格式：</p>
<blockquote>
Mem:   3056828k total,  2624472k used,   432356k free,   185196k buffers
Swap:  2096476k total,        0k used,  2096476k free,  1613592k cached
</blockquote>
<p>根据内存的使用情况，将内存空间划分为四种类型：已使用（used），未使用（free），缓冲区（buffers）和已缓存（cached）。</p>
<p>“已使用”是指目前正被使用的活跃的内存区域。“未使用”是指当前空闲的内存区域。“缓冲区”是用于存放即将写入存储介质的数据的区域。“已缓存”是指曾因需要而被读入内存、但目前已不被使用的数据。Linux通常会在资源使用完毕后保留一部分数据在内存中而不全部释放，这就是“已缓存”区域，这样当这些数据再次被使用时，系统就可以直接从内存中读取。而“缓冲区”用于将对存储介质的写操作集中进行。因此，“缓冲区”和“已缓存”特性对减少存储介质IO和加速系统运行都具有非常重要的作用。</p>
<p>所以，Linux运行一段时间后，通常看起来空闲内存都很小，其实是因为很大一部分被用作“已缓存”区域，这部分内存会在内存资源紧张时被自动释放，也可以通过如下命令手工释放：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="m">1</span> &gt; /proc/sys/vm/drop_caches
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>screen曰：$TERM too long - sorry.</title><link>http://0x3f.org/post/screen-is-sorry-for-term-being-too-long/</link><pubDate>Wed, 01 Dec 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/screen-is-sorry-for-term-being-too-long/</guid><description><![CDATA[<p>最近rxvt-unicode-256color的一次更新触发了screen的一个缺陷。新的版本将默认的环境变量$TERM由rxvt-256color改成了rxvt-unicode-256color，这导致在rxvt中启动screen时报这样的错误：</p>
<blockquote>
$TERM too long - sorry.
</blockquote>
<p>虽然可以在.Xdefaults中指定$TERM的值，但是<a href="https://aur.archlinux.org/packages.php?ID=13060">据说</a>这样会导致rxvt加载错误的terminfo，并导致终端的颜色由256色降低到88色。另外虽然按照同样的说法，可以在screenrc中设置$TERM的值，但是不知道是我写的格式不对还是什么原因，无效。</p>
<p>最终还是设了个别名：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># vi ~/.bashrc</span>

<span class="nb">alias</span> <span class="nv">screenx</span><span class="o">=</span><span class="s1">&#39;export TERM=screen-256color &amp;&amp; screen&#39;</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>批量下载视频的BASH脚本</title><link>http://0x3f.org/post/a-bash-script-downloading-videos-in-batch/</link><pubDate>Sat, 28 Aug 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/a-bash-script-downloading-videos-in-batch/</guid><description><![CDATA[<p>两周前为了批量下载某视频网站中的电视剧，写了个BASH脚本。将电视剧列表页面的URL地址作为唯一参数传给脚本，然后就会把所有视频下载到当前目录下，并自动重命名，同时生成一个M3U格式的播放列表。</p>
<p>由于在线视频不支持断点续传，所以对于单个视频来说无法实现。但对于整个批量下载任务来说，实现了宏观上的断点续传，已经下载的视频不会被重复下载。由于有些视频网站会在午夜更改视频地址，所以这一点很有用。</p>
<p>主流视频网站应该是都支持的，我只测试了我下载电视剧的网站，<strong>不支持的都是非主流的！</strong></p>
<p>唯一可能需要注意的依赖是PHP，必须安装后才能使用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
print_help_msg <span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">&#34;You see, I&#39;m nothing .&#34;</span>
    <span class="nb">exit</span> <span class="m">0</span>
<span class="o">}</span>

check_param <span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">[</span> <span class="nv">$#</span> -ne <span class="m">1</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        print_help_msg
    <span class="k">fi</span>
<span class="o">}</span>

check_m3u <span class="o">()</span> <span class="o">{</span>
    <span class="k">if</span> ! <span class="o">[</span> -a p.m3u <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="sb">`</span>wc -l p.m3u<span class="p">|</span>awk <span class="s1">&#39;{ print $1 }&#39;</span><span class="sb">`</span> -eq <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        <span class="nb">echo</span> <span class="s1">&#39;#EXTM3U&#39;</span> &gt; p.m3u
    <span class="k">fi</span>
<span class="o">}</span>

check_param <span class="nv">$*</span>
check_m3u

<span class="nb">export</span> <span class="nv">LC_ALL</span><span class="o">=</span>en_US.UTF-8

<span class="nv">ue</span><span class="o">=</span><span class="k">$(</span>php -r <span class="s2">&#34;echo urlencode(&#39;</span><span class="nv">$1</span><span class="s2">&#39;);&#34;</span><span class="k">)</span>
<span class="nv">parser</span><span class="o">=</span><span class="s2">&#34;http://www.flvcd.com/parse.php?flag=&amp;format=&amp;kw=</span><span class="nv">$ue</span><span class="s2">&amp;sbt=%BF%AA%CA%BCGO%21&#34;</span>
<span class="k">if</span> ! wget <span class="nv">$parser</span> -U mozilla -O meta.html <span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="s2">&#34;Unable to touch the parser, check network status for the cause .&#34;</span>
    <span class="nb">exit</span> <span class="m">0</span>
<span class="k">fi</span>

grep <span class="s2">&#34;&lt;N&gt;&#34;</span> meta.html &gt; title.lst
grep <span class="s2">&#34;&lt;U&gt;&#34;</span> meta.html &gt; url.lst
iconv -f gbk -t utf-8 title.lst -o title.lst
sed -i <span class="s1">&#39;s/&lt;N&gt;//g&#39;</span> title.lst
sed -i <span class="s1">&#39;s/ //g&#39;</span> title.lst
sed -i <span class="s1">&#39;s/&lt;U&gt;//g&#39;</span> url.lst

<span class="nv">l1</span><span class="o">=</span><span class="sb">`</span>wc -l title.lst<span class="p">|</span>awk <span class="s1">&#39;{ print $1 }&#39;</span><span class="sb">`</span>
<span class="nv">l2</span><span class="o">=</span><span class="sb">`</span>wc -l url.lst<span class="p">|</span>awk <span class="s1">&#39;{ print $1 }&#39;</span><span class="sb">`</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$l1</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="s2">&#34;</span><span class="nv">$l2</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="s2">&#34;Title.lst has </span><span class="nv">$l1</span><span class="s2"> lines, but url.lst got </span><span class="nv">$l2</span><span class="s2">.&#34;</span>
    <span class="nb">exit</span> <span class="m">0</span>
<span class="k">fi</span>
<span class="k">if</span> <span class="o">[</span> <span class="nv">$l1</span> -eq <span class="m">0</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="s2">&#34;Nothing got from the parser, check meta.html for detail info.&#34;</span>
    <span class="nb">exit</span> <span class="m">0</span>
<span class="k">fi</span>

<span class="nv">arrTitle</span><span class="o">=(</span><span class="sb">`</span>cat title.lst<span class="sb">`</span><span class="o">)</span>
<span class="nv">arrURL</span><span class="o">=(</span><span class="sb">`</span>cat url.lst<span class="sb">`</span><span class="o">)</span>

<span class="nv">idx</span><span class="o">=</span><span class="k">$((</span><span class="sb">`</span>wc -l p.m3u<span class="p">|</span>awk <span class="s1">&#39;{ print $1 }&#39;</span><span class="sb">`</span><span class="o">-</span><span class="m">1</span><span class="k">))</span>
<span class="k">while</span> <span class="o">[</span> <span class="nv">$idx</span> -lt <span class="nv">$l1</span> <span class="o">]</span><span class="p">;</span> <span class="k">do</span>
    <span class="nv">title</span><span class="o">=</span><span class="si">${</span><span class="nv">arrTitle</span><span class="p">[</span><span class="nv">$idx</span><span class="p">]</span><span class="si">}</span>
    <span class="nv">url</span><span class="o">=</span><span class="si">${</span><span class="nv">arrURL</span><span class="p">[</span><span class="nv">$idx</span><span class="p">]</span><span class="si">}</span>
    <span class="nv">idx</span><span class="o">=</span><span class="k">$((</span>idx+1<span class="k">))</span>
    <span class="k">if</span> ! wget <span class="nv">$url</span> -U mozilla -O <span class="s2">&#34;</span><span class="si">${</span><span class="nv">title</span><span class="si">}</span><span class="s2">.flv&#34;</span> <span class="p">;</span> <span class="k">then</span>
        <span class="nb">echo</span> <span class="s2">&#34;Failed fetching </span><span class="si">${</span><span class="nv">title</span><span class="si">}</span><span class="s2">.flv, maybe its URL has been changed !&#34;</span>
        <span class="nb">exit</span> <span class="m">0</span>
    <span class="k">fi</span>
    <span class="nv">cmd</span><span class="o">=</span><span class="s2">&#34;sed -i &#39;\$a\\</span><span class="si">${</span><span class="nv">title</span><span class="si">}</span><span class="s2">.flv&#39; p.m3u&#34;</span>
    <span class="nb">eval</span> <span class="nv">$cmd</span>
<span class="k">done</span>

<span class="nb">echo</span> <span class="s1">&#39;done !&#39;</span>
<span class="nb">exit</span> <span class="m">0</span>
</code></pre></td></tr></table>
</div>
</div><p>另外，使用VLC执行播放列表效果灰常不错，视频之间衔接平滑流畅。</p>
]]></description></item><item><title>Linux下pppoe连接建立后仍不能上网的问题</title><link>http://0x3f.org/post/problem-on-pppoe-connections-on-linux/</link><pubDate>Sat, 10 Jul 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/problem-on-pppoe-connections-on-linux/</guid><description><![CDATA[<p><strong>问题描述</strong></p>
<p>pppoe可以连接，ifconfig可以看到ppp0接口，一切正常，只是不能上网。</p>
<p><strong>解决办法</strong></p>
<p>使用如下命令查看路由表：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">route
</code></pre></td></tr></table>
</div>
</div><p>正常情况下返回的结果中应该有如下内容：</p>
<blockquote>
default  *  0.0.0.0   U   0   0  0 ppp0
</blockquote>
<p>如果没有，可手工添加：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">route add default dev ppp0
</code></pre></td></tr></table>
</div>
</div><p>如果可以上网，就成功了。</p>
<p>使用如下脚本在pppoe连接成功时自动添加路由表项：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/sh
</span><span class="cp"></span> 
<span class="k">if</span> ifconfig ppp0  &gt; /dev/null 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">;</span> <span class="k">then</span>
    route del default
    route add default dev ppp0
<span class="k">fi</span>
</code></pre></td></tr></table>
</div>
</div><p>将上述内容保存成名为<strong>01-route.sh</strong>的文件，权限<strong>755</strong>，放到<strong>/etc/ppp/ip-up.d</strong>目录下。</p>
<p>然后创建以下两个脚本：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span> 
<span class="k">if</span> ifconfig ppp0  &gt; /dev/null 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="s1">&#39;PPPOE has already been switched on !&#39;</span>
    <span class="nb">exit</span> <span class="m">0</span>
<span class="k">fi</span>
 
off
 
sudo pon
sleep <span class="m">5</span>
sudo /etc/ppp/ip-up
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span> 
<span class="k">if</span> ! ifconfig ppp0  &gt; /dev/null 2&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="s1">&#39;PPPOE has already been switched off !&#39;</span>
    <span class="nb">exit</span> <span class="m">0</span>
<span class="k">fi</span>
 
sudo poff
sudo /etc/ppp/ip-down
</code></pre></td></tr></table>
</div>
</div><p>分别命名为<strong>on</strong>和<strong>off</strong>并复制到环境变量PATH下，以后即可使用这两个脚本建立和注销pppoe连接。</p>
<p><strong>原因分析</strong></p>
<p>问题的原因是pppoe连接建立时，没有自动往路由表中添加相关路由项。</p>
<p>一般情况下，如果使用的是<strong>ppp</strong>做pppoe连接，其配置文件中默认会开启<strong>defaultroute</strong>选项，该选项的作用就是在pppoe连接建立时自动添加路由表项，但在路由表中已经存在<strong>default</strong>项时，该操作将不会进行。</p>
<p>一般有两种情况会使路由表中在pppoe连接建立前就存在default项。一种情况是网络接口配置中设置了route，如在archlinux下，就是rc.conf文件中的gateway项。如果使用的是静态地址，则需要做这种配置，但对于大多数使用DHCP动态分配IP地址的情况，这项配置则不需要。另一种情况就是ADSL Modem自带路由功能，在分配IP给计算机时也会自动添加一条路由表项。</p>
]]></description></item><item><title>cd到目录下后自动ls的方法</title><link>http://0x3f.org/post/howto-do-auto-listing-after-changing-directory/</link><pubDate>Sun, 20 Jun 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/howto-do-auto-listing-after-changing-directory/</guid><description><![CDATA[<p>每cd到一个目录下就ls，这成了我的习惯。以下Bash函数和别名可以实现cd到一个目录下就自动执行ls命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">cdl<span class="o">()</span> <span class="o">{</span>
    <span class="nb">cd</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">1</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">;</span>
    ls<span class="p">;</span>
<span class="o">}</span>
<span class="nb">alias</span> <span class="nv">cd</span><span class="o">=</span>cdl
</code></pre></td></tr></table>
</div>
</div><p>将上述内容添加到用户主目录中的.bashrc中即可。</p>
]]></description></item></channel></rss>