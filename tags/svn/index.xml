<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>svn - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/svn/</link><description>svn - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 21 Nov 2014 23:19:00 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/svn/" rel="self" type="application/rss+xml"/><item><title>用好代码时光机</title><link>http://0x3f.org/post/leverage-code-time-machine/</link><pubDate>Fri, 21 Nov 2014 23:19:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/leverage-code-time-machine/</guid><description><![CDATA[<p>今天看了篇文章，讲几种常见的、糟糕的注释用法。其中之一是把废弃的代码注释起来，而不是直接删掉，原因是担心以后可能会用。</p>
<p>这个其实就是版本控制系统（VCS）要解决的问题之一。包括对于团队协作的项目，经常需要看某段代码是谁改的、什么时间、什么原因。都是可以用VCS很方便地解决的问题。</p>
<p>我以前是用二分法在提交列表里找的。其实有更好的解决方法，思路是列出源码在历次提交中修改的内容，然后在其中查找要找的东西就行了。</p>
<p>git的解决方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">git log -p abc.php
</code></pre></td></tr></table>
</div>
</div><p>svn的解决方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">svn log --diff --internal-diff abc.php
</code></pre></td></tr></table>
</div>
</div><p>vim的辅助函数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="c">&#34; Show commit history of the current file under the given VCS in a new window</span><span class="err">
</span><span class="err"></span><span class="k">function</span><span class="p">!</span> <span class="nx">ShowCommitHistory</span><span class="p">(</span><span class="nx">vcs</span><span class="p">)</span><span class="err">
</span><span class="err"></span><span class="c">    &#34; Check parameter</span><span class="err">
</span><span class="err"></span>    <span class="k">if</span> <span class="nx">a</span>:<span class="nx">vcs</span> <span class="p">!=</span> <span class="s1">&#39;svn&#39;</span> &amp;&amp; <span class="nx">a</span>:<span class="nx">vcs</span> <span class="p">!=</span> <span class="s1">&#39;git&#39;</span><span class="err">
</span><span class="err"></span>        <span class="nx">echoerr</span> <span class="s1">&#39;Unknow VCS: &#39;</span>.<span class="nx">a</span>:<span class="nx">vcs</span><span class="err">
</span><span class="err"></span>        <span class="nx">return</span><span class="err">
</span><span class="err"></span>    <span class="k">endif</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">    &#34; Do the dirty work</span><span class="err">
</span><span class="err"></span>    <span class="k">let</span> <span class="nx">fileName</span> <span class="p">=</span> <span class="nx">expand</span><span class="p">(</span><span class="s1">&#39;%&#39;</span><span class="p">)</span><span class="err">
</span><span class="err"></span>    <span class="k">if</span> <span class="p">!</span><span class="nx">empty</span><span class="p">(</span><span class="nx">fileName</span><span class="p">)</span><span class="err">
</span><span class="err"></span>        <span class="nx">exe</span> <span class="s1">&#39;new&#39;</span><span class="err">
</span><span class="err"></span>        <span class="k">if</span> <span class="nx">a</span>:<span class="nx">vcs</span> <span class="p">==</span> <span class="s1">&#39;svn&#39;</span><span class="err">
</span><span class="err"></span>            <span class="nx">exe</span> <span class="s1">&#39;r !svn log --diff --internal-diff &#39;</span>.<span class="nx">fileName</span><span class="err">
</span><span class="err"></span>        <span class="k">elseif</span> <span class="nx">a</span>:<span class="nx">vcs</span> <span class="p">==</span> <span class="s1">&#39;git&#39;</span><span class="err">
</span><span class="err"></span>            <span class="nx">exe</span> <span class="s1">&#39;r !git log -p &#39;</span>.<span class="nx">fileName</span><span class="err">
</span><span class="err"></span>        <span class="k">endif</span><span class="err">
</span><span class="err"></span>    <span class="k">else</span><span class="err">
</span><span class="err"></span>        <span class="nx">echo</span> <span class="s1">&#39;File not found.&#39;</span><span class="err">
</span><span class="err"></span>    <span class="k">endif</span><span class="err">
</span><span class="err"></span><span class="k">endfunction</span><span class="err">
</span><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">leader</span><span class="p">&gt;</span><span class="nx">ssch</span> :<span class="nx">call</span> <span class="nx">ShowCommitHistory</span><span class="p">(</span><span class="s1">&#39;svn&#39;</span><span class="p">)&lt;</span><span class="nx">CR</span><span class="p">&gt;</span><span class="err">
</span><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">leader</span><span class="p">&gt;</span><span class="nx">gsch</span> :<span class="nx">call</span> <span class="nx">ShowCommitHistory</span><span class="p">(</span><span class="s1">&#39;git&#39;</span><span class="p">)&lt;</span><span class="nx">CR</span><span class="p">&gt;</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>