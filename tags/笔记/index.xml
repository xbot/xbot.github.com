<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>笔记 on 晴耕雨讀</title><link>http://0x3f.org/tags/%E7%AC%94%E8%AE%B0/</link><description>Recent content in 笔记 on 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>© 淘气 2021</copyright><lastBuildDate>Sun, 28 Jan 2018 14:15:57 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml"/><item><title>从Vultr新加坡迁移到洛杉矶</title><link>http://0x3f.org/posts/migrate-vultr-from-singapore-to-los-angeles/</link><pubDate>Sun, 28 Jan 2018 14:15:57 +0000</pubDate><guid>http://0x3f.org/posts/migrate-vultr-from-singapore-to-los-angeles/</guid><description>Vultr新加坡节点挂了两天了，不能翻墙简直什么都干不了。早上用CloudSpeed看了下，洛杉矶机房的响应速度还不错，就迁移了过去。
ShadowsocksR 这个很简单，用一键安装脚本。
网络加速 用BBR，一键安装脚本。
Tiny Tiny RSS 先按照之前的笔记安装ttrss。
然后重建一个空的ttrss的数据库：
1 2 docker exec f6d92ad8efba /usr/bin/psql -c &amp;#34;drop database ttrss&amp;#34; docker exec f6d92ad8efba /usr/bin/psql -c &amp;#34;create database ttrss&amp;#34; 把数据库的备份复制到容器里并导入：
1 2 docker cp ttrss.sql f6d92ad8efba:/tmp/ttrss.sql docker exec f6d92ad8efba /usr/bin/psql -d ttrss -f /tmp/ttrss.sql postgres 以root身份登录容器并删除备份文件：
1 2 docker exec -it --user root f6d92ad8efba /bin/sh rm /tmp/ttrss.sql</description></item><item><title>读完《谈美》</title><link>http://0x3f.org/posts/after-reading-tan-mei/</link><pubDate>Sun, 29 Oct 2017 09:21:58 +0000</pubDate><guid>http://0x3f.org/posts/after-reading-tan-mei/</guid><description>这本书讲的是「什么是美」。读完后对美有了一些基本的概念，才知道我的审美水平还停留在「以快感为美」的阶段。
朱自清的序里的一些话说得很好：「新文化是「外国的影响」，自然不错；但说一般青年不留余地地鄙弃旧的文学艺术，却非真理。」、「许多青年腻味了，索性一切不管，只抱著一条道理，「有文艺的嗜好就可以谈文艺」。这是「以不了了之」，究竟「谈」不出什么来。」</description></item><item><title>用Tiny Tiny RSS搭建私人阅读器的步骤</title><link>http://0x3f.org/posts/ttrss/</link><pubDate>Fri, 27 Oct 2017 14:12:16 +0000</pubDate><guid>http://0x3f.org/posts/ttrss/</guid><description>优势 自定义过滤器 全功能，无限制 利用已有VPS，无需额外费用 安装 安装并启动docker 1 2 3 4 curl https://get.docker.com/ | sh // centos7 systemctl start docker 安装postgre 1 docker run -d --name ttrssdb nornagon/postgres 安装tiny tiny rss 1 docker run -d --link ttrssdb:db -p 80:80 -e SELF_URL_PATH=http://example.org/ttrss fischerman/docker-ttrss example.org替换成VPS的IP或者对应的域名。
配置 配置主程序 访问http://example.org/ttrss，用户名admin，密码password。
伪装成fever 如果RSS阅读器不支持ttrss，但支持fever，例如reeder，可以通过安装插件伪装成fever：
1 2 3 git clone https://github.com/rannen/tinytinyrss-fever-plugin.git docker cp fever [[CONTAINER ID]]:/var/www/plugins 然后去设置见面启用fever插件，并在fever插件的配置栏设置单独的密码，该栏目中会显示在RSS阅读器中使用的接口地址，用户名就是admin。</description></item><item><title>什么是docker</title><link>http://0x3f.org/posts/what-is-docker/</link><pubDate>Thu, 07 Sep 2017 15:31:11 +0000</pubDate><guid>http://0x3f.org/posts/what-is-docker/</guid><description>什么是docker docker是一种容器，这篇文章对容器的定义是：
容器是一组运行在Linux操作系统上并使用命名空间进程进行分隔的进程，有了容器就无需再启动和维护虚拟机。与虚拟机技术相比，容器的最大不同之处在于打包格式和可移植性。构建容器的目的在于为现代基础设施降低占用空间和启动时间、提供重用性、更好地利用服务器资源，并更好地集成到整个开发生态系统中（例如持续集成和交付生命周期）。
容器相对于虚拟机有以下优点：
更高效地利用系统资源 更快的启动速度 一致的运行环境 持续的交付和部署 更轻松的迁移 维护和扩展的便利性 基本概念 镜像 Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。
镜像分为黑箱镜像和dockerfile。
前者通过实际创建和配置docker容器并通过docker commit记录每个版本的变更，优点是简单直观，缺点是不能记录在基础镜像上做了哪些操作，并且在多次修改之后，镜像会变得很臃肿。
dockerfile是镜像的配置文件，部署时docker根据配置内容生成容器，优点是可以清楚地记录每次修改的内容、镜像体积很小，缺点是编写时比较复杂。
容器 容器是镜像运行的实体。
仓库 分发镜像的服务。
编排 容器的编排包含如下一系列任务：
调度（包括部署、复制、扩展、复活、重新调度、升级、降级等） 资源管理（内存、CPU、存储空间、端口、IP、镜像等） 服务管理（即使用标签、分组、命名空间、负载均衡和准备就绪检查将多个容器编排在一起） 安装 我在黑苹果下安装。Mac下安装docker有两种方式：Docker for Mac或Docker Toolbox。前者最简单，后者在前者的系统要求不能被满足的情况下使用。后者的卸载比较麻烦，具体参照这里。
我用前种方式安装，启动时报错：
com.docker.osx.hyperkit.linux failed to start
解决方法是到BIOS里打开VT特性，有说法说黑苹果不支持VT，我这里是可以的。
镜像加速器 一般用阿里云的镜像服务。
docker的使用 拉取镜像 1 docker pull base/archlinux 列出镜像 1 docker images 创建容器 1 docker run --name arch --it base/archlinux bash 终止容器 exit或ctrl-d</description></item><item><title>把博客字体改成了方正北魏楷书</title><link>http://0x3f.org/posts/set-blog-webfont-to-fzbeiweikaishu/</link><pubDate>Mon, 14 Aug 2017 16:05:30 +0000</pubDate><guid>http://0x3f.org/posts/set-blog-webfont-to-fzbeiweikaishu/</guid><description>我曾说过方正北魏楷书是最佳的阅读字体，不过后来感觉长时间阅读的体验还是普通的楷体更好。但这并不妨碍在Reeder、博客这种短时阅读场合突出页面的设计感。
今天把博客（hexo）的webfont改成了方正北魏楷书，用font-spider压缩后，从13M缩减到1.4M。方法是这样的：
首先把完整的字体复制到主题的字体目录中（themes/crisp/source/fonts），文件名为FZBeiWeiKaiShu-full.ttf。
在CSS中加入webfont配置：
1 2 3 4 5 @font-face { font-family: &amp;#39;FZBeiWeiKaiShu&amp;#39;; src: url(&amp;#39;../fonts/FZBeiWeiKaiShu.ttf&amp;#39;) format(&amp;#39;truetype&amp;#39;), url(&amp;#39;../fonts/FZBeiWeiKaiShu-full.ttf&amp;#39;) format(&amp;#39;truetype&amp;#39;); } FZBeiWeiKaiShu.ttf是压缩后的字体文件名，这样访问时浏览器会优先下载压缩后的字体。
然后把CSS中使用字体的地方都指定为FZBeiWeiKaiShu。
在博客根目录下创建脚本update_fonts.sh：
1 2 3 4 5 6 7 8 9 10 11 12 #!/bin/sh hexo clean hexo g find public -name &amp;#34;*.html&amp;#34; |xargs sed -i &amp;#39;&amp;#39; &amp;#34;s#/styles/crisp.css#$HOME/Projects/blog/public/styles/crisp.css#g&amp;#34; find public -name &amp;#34;*.html&amp;#34;|xargs font-spider cp -f public/fonts/FZBeiWeiKaiShu.ttf themes/crisp/source/fonts/FZBeiWeiKaiShu.ttf hexo clean hexo s -g 除非用到新的字符，否则不需要经常更新字体。</description></item><item><title>Cross-site Request Forgery简介</title><link>http://0x3f.org/posts/introduction-of-cross-site-request-forgery/</link><pubDate>Sun, 23 Apr 2017 20:55:58 +0000</pubDate><guid>http://0x3f.org/posts/introduction-of-cross-site-request-forgery/</guid><description>什么是CSRF Cross-site Request Forgery（简称CSRF），意思是跨站请求伪造。原理是利用网站服务器对浏览器的信任，通过一些技术手段欺骗用户的浏览器访问自己曾经认证过的网站，并执行一些危害用户利益的操作。
例如，假设网站的会话信息保存在cookie中，提现的请求是GET http://www.sample.com/withdraw?toCard=123456&amp;amp;amount=10000，攻击者在自己的网页中通过img标签、iframe或者AJAX访问这个链接，并诱使用户访问这个网页，如果用户刚刚登录过sample.com，余额就会被转走。
防止CSRF的方法 CSRF的关键在于用户的鉴权信息保存在cookie中，或攻击者可以拿到它。目前防止CSRF攻击的方法主要有两种：JWT和表单校验token。
JWT的token通过HTTP请求的header传递，且由于浏览器的跨站限制，钓鱼网页中的JS无法拿到token，从而达到防止CSRF的目的。关于JWT更详细的介绍在「JSON Web Token简介」。
表单校验token通常是存储在表单的隐藏字段中的一个随机字符串，服务器端通过比对表单提交的token判断请求是否伪造，此时需要注意服务器端的CORS配置，即便在有需要的情况下开放了，也应该严格限制允许的HTTP方法和域，否则，钓鱼网页的JS就可以拿到这个token，从而实现CSRF。</description></item><item><title>JSON Web Token简介</title><link>http://0x3f.org/posts/introduction-of-json-web-token/</link><pubDate>Sun, 23 Apr 2017 18:29:06 +0000</pubDate><guid>http://0x3f.org/posts/introduction-of-json-web-token/</guid><description>什么是JWT？ JSON Web Token（简称JWT）是一种token格式，通常用来解决身份认证的问题，和会话（session）作用相同，常用在RESTful API或者OAuth认证上。
和session相比，JWT有以下优势：
服务器端的开销低 服务器端扩展方便 不用专门处理CSRF 由于session的实现方式需要在服务器端存储会话数据，所以当存在大量会话时，服务器端的存储压力会很大，并由此带来扩展上的复杂度（共享session）。而JWT可以把这些数据存储在token里，不需要服务器端存储，优势自然很明显。
对于CSRF，由于session一般使用cookie实现，所以需要专门处理这个安全隐患。JWT借助HTTP请求的header传递，所以伪造成本更高。
JWT和Bearer Token的关系 JWT在使用的时候要在token前面加上字符串「bearer」再填到HTTP请求的header里，这个值就是「Bearer Token」。为什么要这么做？它和JWT是什么关系？
简单地说，JWT是一种token格式，Bearer Token是一种鉴权方案。
HTTP的header项「Authorization」是在HTTP 1.0引入的，它的值的格式是类型+token，支持多种鉴权方案，bearer只是其中的一种。bearer方案中使用的token是JWT格式，这就是它们之间的关系。
JWT的格式 JWT是一个用英文点号连接起来的、分成三个部分的字符串：header、payload和signature。
header header是个base64字符串，解密后是个JSON对象，包含一些元数据。例如：
1 2 3 4 { &amp;#39;typ&amp;#39;: &amp;#39;JWT&amp;#39;, &amp;#39;alg&amp;#39;: &amp;#39;HS256&amp;#39; } 「typ」是格式，「alg」是加密方法。
payload payload也是个base64字符串，解密后也是个JSON对象，一般包含两种数据：JWT标准数据和自定义数据。
JWT标准数据常见的有：
iss：提供方。 sub：主题，一般是用户ID。 exp：过期时间。 iat：创建时间。 jti：token的唯一标识。 此外，和session一样，可以把一些自定义的数据存储在payload里。但由于token存储在客户端，所以不应该在这里存储敏感数据。
signature signature也是个base64字符串，解密后是个使用header里描述的加密方法针对header和payload加密的字符串。目的是防止这两部分的数据被篡改。
JWT的使用原则 不存放敏感信息 保护好私钥 结合https使用 都是出于安全角度考虑。token存储在客户端，而且base64可以被解密，所以不能存储敏感数据。如果私钥泄漏，意味著签名可以被随意伪造。使用https可以更好的保护数据，防止中间人攻击。
JWT相关开发资源 jwt.io有各种语言的JWT开发资源。</description></item><item><title>一次对Workflow不完全成功的抓包过程</title><link>http://0x3f.org/posts/a-failed-attempt-to-capture-workflow-requests/</link><pubDate>Tue, 04 Apr 2017 20:19:52 +0000</pubDate><guid>http://0x3f.org/posts/a-failed-attempt-to-capture-workflow-requests/</guid><description>一个workflow对https链接的请求总是失败，而同样的接口在postman里是成功的。所以想对比一下两个请求的差异。
尝试了两种抓包方式，都不成功。一种是用中间人攻击的原理，用的是mitmproxy，类似的还有charles、fiddler等。另一种是从网卡直接抓取，用的是wireshark。
第一种情况，虽然在iOS里安装并信任了mitmproxy的伪证书、safari里也是可以正常访问https链接的，但在workflow里仍然不认。
第二种情况，wireshark支持两种解密TLS包的方式：一是使用https服务的私钥，二是用浏览器输出的「SSLKEYLOGFILE」。这里需要用第二种。但是这种方式只对本机发送的请求有效，而且在实际操作中还发现有时候本机也解密不了。
最后只能采用临时方案，把https链接改成http，然后用mitmproxy抓取，虽然请求是失败的，但是可以拿到请求本身的数据。</description></item><item><title>CORS：另一种前端跨域请求方式</title><link>http://0x3f.org/posts/cors/</link><pubDate>Mon, 27 Feb 2017 17:07:17 +0000</pubDate><guid>http://0x3f.org/posts/cors/</guid><description>CORS的全称是「Cross-Origin Resource Sharing」，即跨域资源共享。
CORS是比JSONP更强大的前端跨域请求的实现方式。JSONP只支持GET请求，而CORS支持更多种类。JSONP的优势是支持老版本的浏览器。
实现CORS需要浏览器和服务器同时支持，主流框架有实现CORS的中间件，如：laravel-cors。
具体参考：http://www.ruanyifeng.com/blog/2016/04/cors.html</description></item><item><title>怎样在Vim中删除引号文本对象</title><link>http://0x3f.org/posts/how-to-delete-quoted-text-object-in-vim/</link><pubDate>Sat, 25 Feb 2017 19:33:18 +0000</pubDate><guid>http://0x3f.org/posts/how-to-delete-quoted-text-object-in-vim/</guid><description>假设有这样一段代码（光标在「|」位置）：
$title = &amp;ldquo;Article:|&amp;rdquo; . $realTitle;
要删除引号及其内容，并进入插入模式准备输入其它内容。
如果执行ca&amp;quot;，会得到如下的结果：
$title = |. $realTitle;
连引号旁边的空格也删除了。
如果不想删除空格，可以用c2i&amp;quot;。
参考：Is it possible to exclude surrounding whitespace from the word-object a&amp;quot;?</description></item><item><title>Git的衍合</title><link>http://0x3f.org/posts/git-rebase/</link><pubDate>Wed, 22 Feb 2017 18:44:37 +0000</pubDate><guid>http://0x3f.org/posts/git-rebase/</guid><description>合并分支有两种方式，merge和rebase。merge是根据三方合并的差异，创建一个新的提交。rebase是将上游分支的各个提交在比较差异后在下游分支上重演一遍。
rebase适合对没有推送到远程的提交对象做合并，这样可以保持一个整洁的提交历史。若对已推送的提交对象使用rebase，可能导致其它已经拉取并创建了新的提交的人不得不重新合并，进而导致提交历史变得很混乱。
基本的rebase：
1 2 3 git rebase master unstable git checkout master git merge unstable 复杂的情况：存在三个分支，unstable基于master的某个提交创建，feature基于unstable的某个提交创建，要把feature合并到master而不合并unstable。更多分支时方法也一样。
1 2 3 git rebase --onto master unstable feature git checkout master git merge feature rebase过程中如果存在冲突，合并后用git add标记已解决，再用git rebase --continue继续。如果解决冲突后仍然不能继续，可能是当前补丁的内容在下游分支已存在，可以用git rebase --skip跳过。</description></item><item><title>Git Reset、Revert和Checkout的区别</title><link>http://0x3f.org/posts/differences-among-reset-checkout-revert-of-git/</link><pubDate>Thu, 09 Feb 2017 19:27:47 +0000</pubDate><guid>http://0x3f.org/posts/differences-among-reset-checkout-revert-of-git/</guid><description>reset在提交层面，是将HEAD设定到指定的提交，通常用来舍弃最新的几个提交。在文件层面，是将指定的提交中的该文件保存到暂存区，工作区中的文件不变。
reset有三个常用的参数：--mixed、--soft和--hard。
在提交层面，--mixed是默认值，影响暂存区，不影响工作区；--soft将HEAD版本保存到暂存区，并将HEAD设定到指定的提交，用来合并提交历史；--hard既影响暂存区，也影响工作区。
在文件层面，--soft和--hard均会报错，不支持这两个选项。
在提交层面，执行过reset后如果需要撤销，使用reflog命令查看之前HEAD的hash，通过reset --hard恢复到该版本。
checkout在提交层面，用来切换分支或检出到指定的提交。对于后者，如果增加了新的提交，在切换到其它分支后，再切换回来时，这些提交将会丢失，如果希望保存这些提交，在切换到其它分支前，创建一个新的分支。
revert用来通过创建一个新的提交来回滚一个提交，因此，和reset不同，并不会改变提交的历史。
对于回滚一次提交的场景，revert比reset安全，所以revert适用于公共分支，reset适用于私有分支。</description></item><item><title>改用Bear记笔记</title><link>http://0x3f.org/posts/switch-to-bear/</link><pubDate>Mon, 14 Nov 2016 23:32:00 +0000</pubDate><guid>http://0x3f.org/posts/switch-to-bear/</guid><description>再次证明我是后知后觉的。
曾经对印象笔记不屑一顾，因为对所见即所得的偏见和印象笔记对技术人员的不友好。所以这些年一直用DokuWiki。
DW的编辑模式不是传统的所见即所得，自己的wiki标记简洁好用。能针对段落进行修改。可以列出大纲。插件和主题较多。使用文件存储数据，方便同步。平台无关，对Linux友好。
不过DW自身也存在一些问题：
需要搭建服务 自行处理同步 移动端访问不便 编辑和查看操作有割裂感 最近开始琢磨记笔记的最佳实践。考虑到用DW的痛点，感觉对于记笔记最重要的是是否方便记录和查看。在这点上，所见即所得的确有优势。所以我尝试转换到这类工具上。
选择Bear而不是印象笔记的原因主要是：
支持代码语法高亮 支持导出Markdown格式 极简风和多种主题 代码语法高亮是刚需，没什么可说的。导出Markdown格式可以方便写博客，这样就不需要Cmd Markdown了。极简的风格和包括Solarized在内的多种主题很毒我。
不过Bear也有不少问题：
没有大纲视图，不适合长笔记 标签只支持两级，大量标签不好管理 不支持扫描 对Linux不友好 用标签替代分类的方式我很喜欢，不过两级的限制让笔记分类很伤脑筋，而且容易造成标签太多、难以管理。扫描也是刚需，印象笔记的扫描就很好用，Bear目前没有这个功能，只能用扫描全能王暂补，割裂感很强，而且还增加了APP。
希望Bear尽快变得更好用。</description></item><item><title>JSON是对象还是字符串？</title><link>http://0x3f.org/posts/what-is-json/</link><pubDate>Tue, 08 Nov 2016 10:46:00 +0000</pubDate><guid>http://0x3f.org/posts/what-is-json/</guid><description>前两天，一个前端跟我争论说JSON是对象。我在接口文档里的数据格式写的是JSON，结果对方真就传了个对象过来。
要搞清楚JSON是什么，先得知道JSON是为了解决什么问题的。维基百科里的定义是：
JSON（JavaScript Object Notation）是一种由道格拉斯·克罗克福特构想设计、轻量级的数据交换语言，以文字为基础，且易于让人阅读。尽管JSON是Javascript的一个子集，但JSON是独立于语言的文本格式，并且采用了类似于C语言家族的一些习惯。
所以说，JSON是为了解决语言之间数据交换的一种文本格式，体现在数据上，JSON就是字符串类型。那么为什么需要为数据交换制订一种通用的文本格式呢？可以做一个简单的试验：
用JavaScript建立一个到PHP的WebSocket并发送一个对象：
1 2 var ws = new WebSocket(&amp;#39;ws://127.0.0.1:4759&amp;#39;); ws.send({name:&amp;#34;hello&amp;#34;}); PHP接收并打印对象：
1 2 3 4 5 6 use Workerman\Worker; $worker = new Worker(&amp;#39;websocket://0.0.0.0:4759&amp;#39;); $worker-&amp;gt;onMessage = function($connection, $data) { var_dump($data); } Worker::runAll(); 得到的结果是：
[object Object]
所以，一种语言的对象的实例以二进制形式直接传递给另一种语言是无法识别的，因此需要把对象数据用文本描述之后再行传递。
此外，相对于XML等其它格式，JSON有可读性上的优势，如果是对象，二进制的数据哪来的可读性？</description></item><item><title>用JavaScript实现分页打印</title><link>http://0x3f.org/posts/howto-do-paged-printing-using-javascript/</link><pubDate>Sat, 19 Jun 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/howto-do-paged-printing-using-javascript/</guid><description>最近客户提的一个需求，要实现分页打印功能。公司产品对打印功能实现得不够好，排版全由程序生成，耦合度高，且不支持分页，需要用笨拙的方法变通。
于是我对如何更好地实现分页打印产生了兴趣，Google了一下，整理了一个Demo：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta http-equiv=&amp;#34;Content-Type&amp;#34; content=&amp;#34;text/html;charset=utf-8&amp;#34;/&amp;gt; &amp;lt;style media=print&amp;gt; .Noprint{display:none;} .PageNext{page-break-after: always;} &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;OBJECT id=WebBrowser classid=CLSID:8856F961-340A-11D0-A96B-00C04FD705A2 height=0 width=0 VIEWASTEXT&amp;gt; &amp;lt;/OBJECT&amp;gt; &amp;lt;div class=&amp;#34;Noprint&amp;#34;&amp;gt; &amp;lt;input onclick=document.all.WebBrowser.ExecWB(6,1) type=button value=打印 name=Button&amp;gt; &amp;lt;input onclick=document.all.WebBrowser.ExecWB(7,1) type=button value=打印预览 name=Button&amp;gt; &amp;lt;input onclick=document.all.WebBrowser.ExecWB(8,1) type=button value=页面设置 name=Button4&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;PageNext&amp;#34;&amp;gt; &amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;雅游&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt; &amp;lt;p&amp;gt;旧院人称曲中，前门对武定桥，后门在钞库街。妓家鳞次，比屋而居。屋宇精洁，花木萧疏，迥非尘境。&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;到门则铜环半启，珠箔低垂;升阶则猧儿吠客，鹦哥唤茶；登堂则假母肃迎，分宾抗礼；&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;进轩则丫鬟毕妆，捧艳而出；坐久则水陆备至，丝肉竞陈；定情则目眺心挑，绸缪宛转。&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;纨绔少年，绣肠才子，无不魂迷色阵，气尽雌风矣。&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;妓家，仆婢称之曰娘，外人呼之曰小娘，假母称之曰娘儿。&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;有客称客曰姐夫，客称假母曰外婆。&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;#34;PageNext&amp;#34;&amp;gt; &amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;木兰花令·拟古决绝词&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt; &amp;lt;center&amp;gt;&amp;lt;h3&amp;gt;清·纳兰容若&amp;lt;/h3&amp;gt;&amp;lt;/center&amp;gt; &amp;lt;p&amp;gt;人生若只如初见，何事秋风悲画扇。等闲变却故人心，却道故人心易变!</description></item><item><title>Python控制外部进程的灵异事件</title><link>http://0x3f.org/posts/supernatural-phenomenon-of-controlling-external-processes-in-python/</link><pubDate>Mon, 08 Mar 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/supernatural-phenomenon-of-controlling-external-processes-in-python/</guid><description>春节前的一段时间，重新拾起近一年没动过的ForeverFantasy。
虽然一年内没什么更新，但是我却一直都在用，基本上只限于将用Vim写好的Markdown格式的文档转换成HTML。
重写了相当一部分代码，较大程度地改变了界面布局，突然发现经过一年的沉淀，对wxPython的理解增进了不少，开发起来比起去年这个时候清楚了很多。
这些天来一直坚持着每天或多或少的做一些，如果说有什么主要的进展的话，那就是界面的重构，以及昨天实现了调用Vim编辑文档并回收文档内容的功能。
ForeverFantasy和Vim协同的一个最大的问题就是如何判断Vim已经退出。Python调用外部程序的方法有很多，比如传统的commands模块、os.system()等，subprocess是致力于替代这些旧有的方式的一个模块，它的一个特点是可以在启动一个外部程序作为子进程后还能监控这个进程的运行状态。这为ForeverFantasy在Vim退出后回收文档内容提供了更简捷的途径。
下面的代码可以说明如何使用subprocess运行外部程序并监控运行状态：
```python import subprocess process = subprocess.Popen('gvim', shell=True) status = process.poll() if 0 == status: print 'The external program exited.' if status is None: print 'The external program is still running.' ``` 理论上，可以拿实例process的poll()方法监视进程的运行状态，而且这一点在Windows上也确实可以做到，但是到了Linux下，诡异的事出现了，即使刚刚打开gvim，poll()方法也会马上返回一个0，同时process.pid的值总是和实际在运行的那个gvim进程的pid的值差3，而且在虚拟终端中输入gvim命令也不会阻塞终端，就像别的命令加上“&amp;amp;”符号的效果一样。尝试用strace跟踪gvim的运行，试图找到问题原因，无果。我猜想可能/usr/bin/gvim是一个跳板，它启动后会启动一个新的gvim进程。总之，这个方法在Linux下是行不通的。
因此我觉得只能另寻出路了，既然不能监控gvim进程，那就监控gvim进程所编辑的文件，只要这个文件不被任何进程占用，就可以判定gvim已退出。这一点，在Linux下易如反掌，不用说，lsof当仁不让。
用commands.getstatusoutput('lsof file.txt')测试发现，如果文件file.txt被某进程占用，则返回的状态值为0，反之，返回256。
最终，我在程序中使用了两种判断方式，在Windows平台使用subprocess跟踪gvim.exe进程，而在Linux及Unix平台使用lsof检查文档占用情况。
剩下的就是进行这个判断的时间问题了。
很显然，如果在子进程被启动后马上使用while循环不停的检查，一来必须使用多线程，二来系统资源占用也会很高。这时就需要利用wxPython的事件机制了，当ForeverFantasy启动Gvim时，主窗口失去焦点，而当Gvim退出时，ForeverFantasy又会获得焦点，只要能在ForeverFantasy窗口获得焦点时做一次检查即可。不过，在选择最合适的事件的问题上，又是一波三折。
在wxPython的API文档中没有找到事件列表，倒是在Wiki中找到了。顾名思义，觉得wx.EVT_SET_FOCUS比较靠谱，但试用失败，看API中关于FocusEvent的说明，这个事件适用于窗口控件；然后又试了wx.EVT_CHILD_FOCUS，只有在窗口包含的控件中有获得焦点的情况才会触发；最后才发现wx.EVT_ACTIVATE，这个事件会在窗口失去焦点和获得焦点时各触发一次，使用GetActive()方法可以判断是获得焦点还是失去焦点。
完成与Vim的协同使ForeverFantasy在我手上由原来单纯的格式转换工具进化为基本可用的文档编辑器，就算是Milestone 2吧。
此外，还有一些小的经验：
1. 调用非环境变量下的程序，即命令中必须带程序所在的路径时，应当将程序所在目录的完整路径以自然字符串的形式传递给subprocess.Popen类的构造方法的cwd参数，即如下所示：
```python process = subprocess.Popen('gvim.exe', cwd=r'C:\program files\vim\vim72', shell=True) ``` 这样可以有效避免路径中的空格和特殊字符对命令执行的影响。
2. Vim编辑一个文档时，实际操作的是一个临时文件，而不是原文件，这个临时文件与原文件同路径，名称为在原文件名的基础上，前面加一个句点，后面加后缀“.swp”。应该用lsof监控这个临时文件，才可以判断出编辑该文档的Vim进程的运行状态。由于对于不存在的文件使用lsof命令的返回值也是256，故可以同时判断临时文件和原文件的占用情况，这样就为对其它编辑器的支持奠定了基础。
2010-03-10 Wednesday 22:52:13 更新
感谢KL童鞋和依云童鞋指教，果然加上-f参数就可以了。</description></item><item><title>PHP后台echo过多会导致进程崩溃</title><link>http://0x3f.org/posts/too-many-echoes-may-crash-php/</link><pubDate>Sun, 31 Jan 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/too-many-echoes-may-crash-php/</guid><description>这是去年晚些时侯发现的一个问题。
公司产品的后台定时任务应该是用独立的PHP进程驱动的。在做一个项目的时候，为了便于手工调试，我在定时任务中使用了大量的echo输出信息并在浏览器中手工执行此任务的脚本。
手工执行通过，输出信息完全没有问题。但在实际运行的过程中，一个很诡异的事情发生了：即使我将实际处理数据的代码全部注释掉，只对原始数据做简单的查询，此定时任务仍然极其健壮地中途退出。最要命的是无论程序日志还是PHP的错误日志，都没有任何相关信息。直到后来我把所有echo输出都取消，问题才解决。
事后模糊地记得很久以前似乎在哪本书上看到过在无输出设备的情况下echo过多数据会导致PHP进程崩溃的内容，但原因已想不起来了。</description></item></channel></rss>