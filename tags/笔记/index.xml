<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>笔记 - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/%E7%AC%94%E8%AE%B0/</link><description>笔记 - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 28 Jan 2018 14:15:57 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/%E7%AC%94%E8%AE%B0/" rel="self" type="application/rss+xml"/><item><title>从Vultr新加坡迁移到洛杉矶</title><link>http://0x3f.org/post/migrate-vultr-from-singapore-to-los-angeles/</link><pubDate>Sun, 28 Jan 2018 14:15:57 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/migrate-vultr-from-singapore-to-los-angeles/</guid><description><![CDATA[<p>Vultr新加坡节点挂了两天了，不能翻墙简直什么都干不了。早上用CloudSpeed看了下，洛杉矶机房的响应速度还不错，就迁移了过去。</p>
<h2 id="shadowsocksr">ShadowsocksR</h2>
<p>这个很简单，用<a href="https://github.com/91yun/shadowsocks_install" target="_blank" rel="noopener noreffer">一键安装脚本</a>。</p>
<h2 id="网络加速">网络加速</h2>
<p>用BBR，<a href="https://teddysun.com/489.html" target="_blank" rel="noopener noreffer">一键安装脚本</a>。</p>
<h2 id="tiny-tiny-rss">Tiny Tiny RSS</h2>
<p>先按照之前的<a href="/post/ttrss/" rel="">笔记</a>安装ttrss。</p>
<p>然后重建一个空的ttrss的数据库：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">docker <span class="nb">exec</span> f6d92ad8efba /usr/bin/psql -c <span class="s2">&#34;drop database ttrss&#34;</span>
docker <span class="nb">exec</span> f6d92ad8efba /usr/bin/psql -c <span class="s2">&#34;create database ttrss&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>把数据库的备份复制到容器里并导入：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">docker cp ttrss.sql f6d92ad8efba:/tmp/ttrss.sql
docker <span class="nb">exec</span> f6d92ad8efba /usr/bin/psql -d ttrss -f /tmp/ttrss.sql postgres
</code></pre></td></tr></table>
</div>
</div><p>以root身份登录容器并删除备份文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">docker <span class="nb">exec</span> -it --user root f6d92ad8efba /bin/sh
rm /tmp/ttrss.sql
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>读完《谈美》</title><link>http://0x3f.org/post/after-reading-tan-mei/</link><pubDate>Sun, 29 Oct 2017 09:21:58 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/after-reading-tan-mei/</guid><description><![CDATA[<p></p>
<p>这本书讲的是「什么是美」。读完后对美有了一些基本的概念，才知道我的审美水平还停留在「以快感为美」的阶段。</p>
<p>朱自清的序里的一些话说得很好：「新文化是「外国的影响」，自然不错；但说一般青年不留余地地鄙弃旧的文学艺术，却非真理。」、「许多青年腻味了，索性一切不管，只抱著一条道理，「有文艺的嗜好就可以谈文艺」。这是「以不了了之」，究竟「谈」不出什么来。」</p>
]]></description></item><item><title>用Tiny Tiny RSS搭建私人阅读器的步骤</title><link>http://0x3f.org/post/ttrss/</link><pubDate>Fri, 27 Oct 2017 14:12:16 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/ttrss/</guid><description><![CDATA[<h2 id="优势">优势</h2>
<ol>
<li>自定义过滤器</li>
<li>全功能，无限制</li>
<li>利用已有VPS，无需额外费用</li>
</ol>
<h2 id="安装">安装</h2>
<h3 id="安装并启动docker">安装并启动docker</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">curl https://get.docker.com/ <span class="p">|</span> sh

// centos7
systemctl start docker
</code></pre></td></tr></table>
</div>
</div><h3 id="安装postgre">安装postgre</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">docker run -d --name ttrssdb nornagon/postgres
</code></pre></td></tr></table>
</div>
</div><h3 id="安装tiny-tiny-rss">安装tiny tiny rss</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">docker run -d --link ttrssdb:db -p 80:80 -e <span class="nv">SELF_URL_PATH</span><span class="o">=</span>http://example.org/ttrss fischerman/docker-ttrss
</code></pre></td></tr></table>
</div>
</div><p><code>example.org</code>替换成VPS的IP或者对应的域名。</p>
<h2 id="配置">配置</h2>
<h3 id="配置主程序">配置主程序</h3>
<p>访问<code>http://example.org/ttrss</code>，用户名<code>admin</code>，密码<code>password</code>。</p>
<h3 id="伪装成fever">伪装成fever</h3>
<p>如果RSS阅读器不支持ttrss，但支持fever，例如reeder，可以通过安装插件伪装成fever：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">git clone https://github.com/rannen/tinytinyrss-fever-plugin.git

docker cp fever <span class="o">[[</span>CONTAINER ID<span class="o">]]</span>:/var/www/plugins
</code></pre></td></tr></table>
</div>
</div><p>然后去设置见面启用fever插件，并在fever插件的配置栏设置单独的密码，该栏目中会显示在RSS阅读器中使用的接口地址，用户名就是<code>admin</code>。</p>
<h2 id="备份">备份</h2>
<p>每天凌晨3点备份数据库到dropbox。</p>
<h3 id="下载dropbox上传脚本">下载dropbox上传脚本</h3>
<p>在VPS的<code>/root</code>下执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">wget https://raw.github.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh
</code></pre></td></tr></table>
</div>
</div><p>执行命令并按提示操作：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">./dropbox_uploader.sh info
</code></pre></td></tr></table>
</div>
</div><h3 id="创建备份脚本">创建备份脚本</h3>
<p>创建<code>/root/backup.sh</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="nv">SCRIPT_DIR</span><span class="o">=</span><span class="s2">&#34;/root&#34;</span>
<span class="nv">NOW</span><span class="o">=</span><span class="k">$(</span>date +<span class="s2">&#34;%Y%m%d&#34;</span><span class="k">)</span>
<span class="nv">TMP_PATH</span><span class="o">=</span><span class="s1">&#39;/tmp&#39;</span>
<span class="nv">DOCKER_ID_TTRSS</span><span class="o">=</span><span class="s1">&#39;39cec6a7xcb7&#39;</span>
<span class="nv">TTRSS_DB</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$TMP_PATH</span><span class="s2">/ttrss.sql&#34;</span>
<span class="nv">BAK_FILE_NAME</span><span class="o">=</span><span class="s2">&#34;vps-</span><span class="nv">$NOW</span><span class="s2">.tar.gz&#34;</span>
<span class="nv">BAK_FILE</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$TMP_PATH</span><span class="s2">/</span><span class="nv">$BAK_FILE_NAME</span><span class="s2">&#34;</span>
<span class="nv">DROPBOX_DIR</span><span class="o">=</span><span class="s2">&#34;&#34;</span>

docker <span class="nb">exec</span> <span class="s2">&#34;</span><span class="nv">$DOCKER_ID_TTRSS</span><span class="s2">&#34;</span> /usr/bin/pg_dump ttrss &gt; <span class="s2">&#34;</span><span class="nv">$TTRSS_DB</span><span class="s2">&#34;</span>
<span class="nb">echo</span> <span class="s2">&#34;数据库备份完成，打包网站数据中...&#34;</span>
tar cfzP <span class="s2">&#34;</span><span class="nv">$BAK_FILE</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$TTRSS_DB</span><span class="s2">&#34;</span>
<span class="nb">echo</span> <span class="s2">&#34;所有数据打包完成，准备上传...&#34;</span>
<span class="c1"># 用脚本上传到dropbox</span>
<span class="s2">&#34;</span><span class="nv">$SCRIPT_DIR</span><span class="s2">&#34;</span>/dropbox_uploader.sh upload <span class="s2">&#34;</span><span class="nv">$BAK_FILE</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$DROPBOX_DIR</span><span class="s2">/</span><span class="nv">$BAK_FILE_NAME</span><span class="s2">&#34;</span>
<span class="k">if</span> <span class="o">[</span> <span class="nv">$?</span> -eq <span class="m">0</span> <span class="o">]</span><span class="p">;</span><span class="k">then</span>
     <span class="nb">echo</span> <span class="s2">&#34;上传完成&#34;</span>
<span class="k">else</span>
     <span class="nb">echo</span> <span class="s2">&#34;上传失败，重新尝试&#34;</span>
<span class="k">fi</span>

<span class="c1"># 删除本地的临时文件</span>
rm -f <span class="s2">&#34;</span><span class="nv">$TTRSS_DB</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$BAK_FILE</span><span class="s2">&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p><code>39cec6a7xcb7</code>替换成实际的postgresql容器的ID。</p>
<h3 id="创建定时任务">创建定时任务</h3>
<p>在<code>crontab -e </code>里添加：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">0 3 * * * /bin/bash /root/backup.sh &gt; /dev/null
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>什么是docker</title><link>http://0x3f.org/post/what-is-docker/</link><pubDate>Thu, 07 Sep 2017 15:31:11 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/what-is-docker/</guid><description><![CDATA[<h2 id="什么是docker">什么是docker</h2>
<p>docker是一种容器，<a href="http://www.infoq.com/cn/articles/container-landscape-2016" target="_blank" rel="noopener noreffer">这篇文章</a>对容器的定义是：</p>
<blockquote>
<p>容器是一组运行在Linux操作系统上并使用命名空间进程进行分隔的进程，有了容器就无需再启动和维护虚拟机。与虚拟机技术相比，容器的最大不同之处在于打包格式和可移植性。构建容器的目的在于为现代基础设施降低占用空间和启动时间、提供重用性、更好地利用服务器资源，并更好地集成到整个开发生态系统中（例如持续集成和交付生命周期）。</p>
</blockquote>
<p>容器相对于虚拟机有以下优点：</p>
<ul>
<li>更高效地利用系统资源</li>
<li>更快的启动速度</li>
<li>一致的运行环境</li>
<li>持续的交付和部署</li>
<li>更轻松的迁移</li>
<li>维护和扩展的便利性</li>
</ul>
<h2 id="基本概念">基本概念</h2>
<h3 id="镜像">镜像</h3>
<p>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p>
<p>镜像分为黑箱镜像和dockerfile。</p>
<p>前者通过实际创建和配置docker容器并通过<code>docker commit</code>记录每个版本的变更，优点是简单直观，缺点是不能记录在基础镜像上做了哪些操作，并且在多次修改之后，镜像会变得很臃肿。</p>
<p>dockerfile是镜像的配置文件，部署时docker根据配置内容生成容器，优点是可以清楚地记录每次修改的内容、镜像体积很小，缺点是编写时比较复杂。</p>
<h3 id="容器">容器</h3>
<p>容器是镜像运行的实体。</p>
<h3 id="仓库">仓库</h3>
<p>分发镜像的服务。</p>
<h3 id="编排">编排</h3>
<p>容器的编排包含如下一系列任务：</p>
<ul>
<li>调度（包括部署、复制、扩展、复活、重新调度、升级、降级等）</li>
<li>资源管理（内存、CPU、存储空间、端口、IP、镜像等）</li>
<li>服务管理（即使用标签、分组、命名空间、负载均衡和准备就绪检查将多个容器编排在一起）</li>
</ul>
<h2 id="安装">安装</h2>
<p>我在黑苹果下安装。Mac下安装docker有两种方式：Docker for Mac或Docker Toolbox。前者最简单，后者在前者的系统要求不能被满足的情况下使用。后者的卸载比较麻烦，具体参照<a href="https://github.com/widuu/chinese_docker/blob/master/installation/mac.md" target="_blank" rel="noopener noreffer">这里</a>。</p>
<p>我用前种方式安装，启动时报错：</p>
<blockquote>
<p>com.docker.osx.hyperkit.linux failed to start</p>
</blockquote>
<p>解决方法是到BIOS里打开VT特性，有说法说黑苹果不支持VT，我这里是可以的。</p>
<h3 id="镜像加速器">镜像加速器</h3>
<p>一般用阿里云的镜像服务。</p>
<h2 id="docker的使用">docker的使用</h2>
<h3 id="拉取镜像">拉取镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">docker pull base/archlinux
</code></pre></td></tr></table>
</div>
</div><h3 id="列出镜像">列出镜像</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">docker images
</code></pre></td></tr></table>
</div>
</div><h3 id="创建容器">创建容器</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">docker run --name arch --it base/archlinux bash
</code></pre></td></tr></table>
</div>
</div><h3 id="终止容器">终止容器</h3>
<p><code>exit</code>或<code>ctrl-d</code></p>
<h3 id="启动已终止容器">启动已终止容器</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">docker start arch
</code></pre></td></tr></table>
</div>
</div><h3 id="attach运行中的容器">attach运行中的容器</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">docker attach arch
</code></pre></td></tr></table>
</div>
</div><h3 id="detach运行中的容器">detach运行中的容器</h3>
<p><code>ctrl+p ctrl+q</code>或者：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">docker detach arch
</code></pre></td></tr></table>
</div>
</div><h3 id="查看容器">查看容器</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 查看运行中的容器</span>
docker ps -q

<span class="c1"># 查看所有，包括已终止的</span>
docker ps -a
</code></pre></td></tr></table>
</div>
</div><h3 id="删除已终止容器">删除已终止容器</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">docker rm arch
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>把博客字体改成了方正北魏楷书</title><link>http://0x3f.org/post/set-blog-webfont-to-fzbeiweikaishu/</link><pubDate>Mon, 14 Aug 2017 16:05:30 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/set-blog-webfont-to-fzbeiweikaishu/</guid><description><![CDATA[<p>我曾说过<a href="/post/best-practices-of-calibre-on-formatting/" rel="">方正北魏楷书是最佳的阅读字体</a>，不过后来感觉长时间阅读的体验还是普通的楷体更好。但这并不妨碍在Reeder、博客这种短时阅读场合突出页面的设计感。</p>
<p>今天把博客（hexo）的webfont改成了方正北魏楷书，用font-spider压缩后，从13M缩减到1.4M。方法是这样的：</p>
<p>首先把完整的字体复制到主题的字体目录中（themes/crisp/source/fonts），文件名为<code>FZBeiWeiKaiShu-full.ttf</code>。</p>
<p>在CSS中加入webfont配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-css" data-lang="css"><span class="p">@</span><span class="k">font-face</span> <span class="p">{</span>
  	<span class="nt">font-family</span><span class="o">:</span> <span class="s1">&#39;FZBeiWeiKaiShu&#39;</span><span class="o">;</span>
    <span class="nt">src</span><span class="o">:</span> <span class="nt">url</span><span class="o">(</span><span class="s1">&#39;../fonts/FZBeiWeiKaiShu.ttf&#39;</span><span class="o">)</span> <span class="nt">format</span><span class="o">(</span><span class="s1">&#39;truetype&#39;</span><span class="o">),</span>
         <span class="nt">url</span><span class="o">(</span><span class="s1">&#39;../fonts/FZBeiWeiKaiShu-full.ttf&#39;</span><span class="o">)</span> <span class="nt">format</span><span class="o">(</span><span class="s1">&#39;truetype&#39;</span><span class="o">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p><code>FZBeiWeiKaiShu.ttf</code>是压缩后的字体文件名，这样访问时浏览器会优先下载压缩后的字体。</p>
<p>然后把CSS中使用字体的地方都指定为<code>FZBeiWeiKaiShu</code>。</p>
<p>在博客根目录下创建脚本<code>update_fonts.sh</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="cp">#!/bin/sh
</span><span class="cp"></span>
hexo clean
hexo g

find public -name <span class="s2">&#34;*.html&#34;</span> <span class="p">|</span>xargs sed -i <span class="s1">&#39;&#39;</span> <span class="s2">&#34;s#/styles/crisp.css#</span><span class="nv">$HOME</span><span class="s2">/Projects/blog/public/styles/crisp.css#g&#34;</span>
find public -name <span class="s2">&#34;*.html&#34;</span><span class="p">|</span>xargs font-spider

cp -f public/fonts/FZBeiWeiKaiShu.ttf themes/crisp/source/fonts/FZBeiWeiKaiShu.ttf

hexo clean
hexo s -g
</code></pre></td></tr></table>
</div>
</div><p>除非用到新的字符，否则不需要经常更新字体。</p>
<p>font-spider会提示一共使用了多少种字符，我这么多年也只用到三千多种，真是太没文化了。🤥</p>
]]></description></item><item><title>Cross-site Request Forgery简介</title><link>http://0x3f.org/post/introduction-of-cross-site-request-forgery/</link><pubDate>Sun, 23 Apr 2017 20:55:58 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/introduction-of-cross-site-request-forgery/</guid><description><![CDATA[<h2 id="什么是csrf">什么是CSRF</h2>
<p>Cross-site Request Forgery（简称CSRF），意思是跨站请求伪造。原理是利用网站服务器对浏览器的信任，通过一些技术手段欺骗用户的浏览器访问自己曾经认证过的网站，并执行一些危害用户利益的操作。</p>
<p>例如，假设网站的会话信息保存在cookie中，提现的请求是<code>GET http://www.sample.com/withdraw?toCard=123456&amp;amount=10000</code>，攻击者在自己的网页中通过img标签、iframe或者AJAX访问这个链接，并诱使用户访问这个网页，如果用户刚刚登录过sample.com，余额就会被转走。</p>
<h2 id="防止csrf的方法">防止CSRF的方法</h2>
<p>CSRF的关键在于用户的鉴权信息保存在cookie中，或攻击者可以拿到它。目前防止CSRF攻击的方法主要有两种：JWT和表单校验token。</p>
<p>JWT的token通过HTTP请求的header传递，且由于浏览器的跨站限制，钓鱼网页中的JS无法拿到token，从而达到防止CSRF的目的。关于JWT更详细的介绍在「<a href="/post/introduction-of-json-web-token/" rel="">JSON Web Token简介</a>」。</p>
<p>表单校验token通常是存储在表单的隐藏字段中的一个随机字符串，服务器端通过比对表单提交的token判断请求是否伪造，此时需要注意服务器端的CORS配置，即便在有需要的情况下开放了，也应该严格限制允许的HTTP方法和域，否则，钓鱼网页的JS就可以拿到这个token，从而实现CSRF。</p>
]]></description></item><item><title>JSON Web Token简介</title><link>http://0x3f.org/post/introduction-of-json-web-token/</link><pubDate>Sun, 23 Apr 2017 18:29:06 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/introduction-of-json-web-token/</guid><description><![CDATA[<h2 id="什么是jwt">什么是JWT？</h2>
<p>JSON Web Token（简称JWT）是一种token格式，通常用来解决身份认证的问题，和会话（session）作用相同，常用在RESTful API或者OAuth认证上。</p>
<p>和session相比，JWT有以下优势：</p>
<ul>
<li>服务器端的开销低</li>
<li>服务器端扩展方便</li>
<li>不用专门处理CSRF</li>
</ul>
<p>由于session的实现方式需要在服务器端存储会话数据，所以当存在大量会话时，服务器端的存储压力会很大，并由此带来扩展上的复杂度（共享session）。而JWT可以把这些数据存储在token里，不需要服务器端存储，优势自然很明显。</p>
<p>对于CSRF，由于session一般使用cookie实现，所以需要专门处理这个安全隐患。JWT借助HTTP请求的header传递，所以伪造成本更高。</p>
<h3 id="jwt和bearer-token的关系">JWT和Bearer Token的关系</h3>
<p>JWT在使用的时候要在token前面加上字符串「bearer」再填到HTTP请求的header里，这个值就是「Bearer Token」。为什么要这么做？它和JWT是什么关系？</p>
<p>简单地说，JWT是一种token格式，Bearer Token是一种鉴权方案。</p>
<p>HTTP的header项「Authorization」是在HTTP 1.0引入的，它的值的格式是<code>类型+token</code>，支持多种鉴权方案，bearer只是其中的一种。bearer方案中使用的token是JWT格式，这就是它们之间的关系。</p>
<h2 id="jwt的格式">JWT的格式</h2>
<p>JWT是一个用英文点号连接起来的、分成三个部分的字符串：header、payload和signature。</p>
<h3 id="header">header</h3>
<p>header是个base64字符串，解密后是个JSON对象，包含一些元数据。例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="err">&#39;typ&#39;:</span> <span class="err">&#39;JWT&#39;,</span>
  <span class="err">&#39;alg&#39;:</span> <span class="err">&#39;HS256&#39;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>「typ」是格式，「alg」是加密方法。</p>
<h3 id="payload">payload</h3>
<p>payload也是个base64字符串，解密后也是个JSON对象，一般包含两种数据：JWT标准数据和自定义数据。</p>
<p>JWT标准数据常见的有：</p>
<ul>
<li>iss：提供方。</li>
<li>sub：主题，一般是用户ID。</li>
<li>exp：过期时间。</li>
<li>iat：创建时间。</li>
<li>jti：token的唯一标识。</li>
</ul>
<p>此外，和session一样，可以把一些自定义的数据存储在payload里。但由于token存储在客户端，所以不应该在这里存储敏感数据。</p>
<h3 id="signature">signature</h3>
<p>signature也是个base64字符串，解密后是个使用header里描述的加密方法针对header和payload加密的字符串。目的是防止这两部分的数据被篡改。</p>
<h2 id="jwt的使用原则">JWT的使用原则</h2>
<ul>
<li>不存放敏感信息</li>
<li>保护好私钥</li>
<li>结合https使用</li>
</ul>
<p>都是出于安全角度考虑。token存储在客户端，而且base64可以被解密，所以不能存储敏感数据。如果私钥泄漏，意味著签名可以被随意伪造。使用https可以更好的保护数据，防止中间人攻击。</p>
<h2 id="jwt相关开发资源">JWT相关开发资源</h2>
<p><a href="https://jwt.io/" target="_blank" rel="noopener noreffer">jwt.io</a>有各种语言的JWT开发资源。</p>
]]></description></item><item><title>一次对Workflow不完全成功的抓包过程</title><link>http://0x3f.org/post/a-failed-attempt-to-capture-workflow-requests/</link><pubDate>Tue, 04 Apr 2017 20:19:52 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/a-failed-attempt-to-capture-workflow-requests/</guid><description><![CDATA[<p>一个workflow对https链接的请求总是失败，而同样的接口在postman里是成功的。所以想对比一下两个请求的差异。</p>
<p>尝试了两种抓包方式，都不成功。一种是用中间人攻击的原理，用的是mitmproxy，类似的还有charles、fiddler等。另一种是从网卡直接抓取，用的是wireshark。</p>
<p>第一种情况，虽然在iOS里安装并信任了mitmproxy的伪证书、safari里也是可以正常访问https链接的，但在workflow里仍然不认。</p>
<p>第二种情况，wireshark支持两种解密TLS包的方式：一是使用https服务的私钥，二是用浏览器输出的「SSLKEYLOGFILE」。这里需要用第二种。但是这种方式只对本机发送的请求有效，而且在实际操作中还发现有时候本机也解密不了。</p>
<p>最后只能采用临时方案，把https链接改成http，然后用mitmproxy抓取，虽然请求是失败的，但是可以拿到请求本身的数据。</p>
]]></description></item><item><title>CORS：另一种前端跨域请求方式</title><link>http://0x3f.org/post/cors/</link><pubDate>Mon, 27 Feb 2017 17:07:17 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/cors/</guid><description><![CDATA[<p>CORS的全称是「Cross-Origin Resource Sharing」，即跨域资源共享。</p>
<p>CORS是比JSONP更强大的前端跨域请求的实现方式。JSONP只支持GET请求，而CORS支持更多种类。JSONP的优势是支持老版本的浏览器。</p>
<p>实现CORS需要浏览器和服务器同时支持，主流框架有实现CORS的中间件，如：<a href="https://github.com/barryvdh/laravel-cors" target="_blank" rel="noopener noreffer">laravel-cors</a>。</p>
<p>具体参考：http://www.ruanyifeng.com/blog/2016/04/cors.html</p>
]]></description></item><item><title>怎样在Vim中删除引号文本对象</title><link>http://0x3f.org/post/how-to-delete-quoted-text-object-in-vim/</link><pubDate>Sat, 25 Feb 2017 19:33:18 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/how-to-delete-quoted-text-object-in-vim/</guid><description><![CDATA[<p>假设有这样一段代码（光标在「|」位置）：</p>
<blockquote>
<p>$title = &ldquo;Article:|&rdquo; . $realTitle;</p>
</blockquote>
<p>要删除引号及其内容，并进入插入模式准备输入其它内容。</p>
<p>如果执行<code>ca&quot;</code>，会得到如下的结果：</p>
<blockquote>
<p>$title = |. $realTitle;</p>
</blockquote>
<p>连引号旁边的空格也删除了。</p>
<p>如果不想删除空格，可以用<code>c2i&quot;</code>。</p>
<p>参考：<a href="https://www.reddit.com/r/vim/comments/5v4gm5/is_it_possible_to_exclude_surrounding_whitespace/" target="_blank" rel="noopener noreffer">Is it possible to exclude surrounding whitespace from the word-object <code>a&quot;</code>?</a></p>
]]></description></item></channel></rss>