<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HomeLab on 晴耕雨讀</title><link>http://0x3f.org/tags/homelab/</link><description>Recent content in HomeLab on 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>© 淘气 2022</copyright><lastBuildDate>Mon, 05 Feb 2024 22:22:57 +0800</lastBuildDate><atom:link href="http://0x3f.org/tags/homelab/index.xml" rel="self" type="application/rss+xml"/><item><title>Homelab 升级记：从 Unraid 到 Proxmox VE 的平滑过渡</title><link>http://0x3f.org/posts/a-smooth-transition-from-unraid-to-pve/</link><pubDate>Mon, 05 Feb 2024 22:22:57 +0800</pubDate><guid>http://0x3f.org/posts/a-smooth-transition-from-unraid-to-pve/</guid><description>最近，我对我的 Homelab 进行了一次重大调整，从 Unraid 迁移到了 Proxmox VE（PVE），并用它实现了对 Unraid 的虚拟化，这一转变不仅提高了系统的稳定性、灵活性，还带来了一系列令人惊喜的改进。在这篇文章中，我将分享这次调整的动机、硬件升级以及软件配置的详细过程。
动机：解耦虚拟机与 Unraid 我决定将虚拟机从 Unraid 中分离出来，这样做的目的是为了减轻 Unraid 重启时对整个网络环境的影响，降低磁盘阵列卡住的风险，并加速 Unraid 的重启过程。
此外，这样的调整也使得使用 PhotoBackup Server (PBS) 进行备份变得更加方便，减少了对 Unraid 缓存盘的占用，并优化了硬盘的休眠策略，减少了不必要的唤醒次数。
最后，减少虚拟化嵌套层数，简化了架构，提高了整体效率。
硬件升级 机箱改造： 为了适应新的硬件配置，我用角磨机切掉了蜗牛星际机箱 B 款的横梁，因为它挡住了 PCIe 插槽。这一小小的改动为后续的硬件安装提供了空间。 主板与扩展卡： 主板只有一个 M.2 插槽，我选择在这里安装了 PVE。为了加装第二款 NVME 固态硬盘，我购买了 PCIe 转 M.2 扩展卡，将 Unraid 的缓存盘插到了这个扩展卡上。小火炉铠侠 RC10 在加装了扩展卡附带的散热片后降温效果显著，目测温度下降了大约 15℃，Unraid 系统再也没有出现过报警。
视频采集卡： 为了在没有额外显示器的情况下管理 Homelab ，我购买了视频采集卡，并配合 iPad 使用，作为临时显示器。
软件配置 直通设备： 在 PVE 中，我将 Unraid 系统 U 盘、Sata 控制器、外置硬盘以及 NVME 缓存盘直通（passthrough）给了 Unraid 虚拟机。这样做的好处是，仍然使用 Unraid 作为 NAS 系统管理所有存储资源，并继续使用 Unraid 优秀的应用社区，同时使 Jellyfin 可以直接使用硬件加速解码，提高了性能和响应速度。</description></item><item><title>我的家庭数据备份方案</title><link>http://0x3f.org/posts/my-homelab-backup-strategy/</link><pubDate>Wed, 31 Jan 2024 20:02:08 +0800</pubDate><guid>http://0x3f.org/posts/my-homelab-backup-strategy/</guid><description>在这个数字化时代，数据安全比以往任何时候都更加重要。无论是个人生活还是工作，我们都需要一个可靠的备份方案来确保数据的安全。今天，我想分享我的家庭数据备份方案，它不仅涵盖了我所有的虚拟机、容器和配置数据，还包括了 NAS 上的重要文件，如照片、密码、笔记和待办事项。这个方案遵循了著名的 3-2-1 备份策略，并且通过精心选择的备份工具，确保了数据的安全性和高效性。
数据种类 首先，让我们来了解我需要备份的数据种类。我有两个 PVE（Proxmox Virtual Environment）宿主机，上面运行着多个虚拟机和容器。这些虚拟机和容器包含了我所有的工作和个人项目。为了备份这些数据，我选择了 PBS（Proxmox Backup Server）作为备份存储。同时，我还使用 proxmox-backup-client 将 PVE 的配置数据也备份到 PBS 。
除了虚拟机和容器，我的 NAS 上还存储着许多重要数据，包括家庭照片、密码管理器的数据库、个人笔记以及待办事项列表。这些数据对我来说同样重要，因此我也将它们纳入了备份计划。
备份策略 我遵循的备份策略是 3-2-1 原则，即至少有三份备份，存储在两种不同的媒介上，且至少有一份在其他地方。这个策略可以有效地防止数据丢失。
3-2-1策略的具体实现 为了实现这一策略，我部署了两个 Kopia 实例，并行运行，分别将数据备份到阿里云盘和我的移动硬盘。这样做的原因是 KopiaUI 目前只支持同时连接一个仓库，而并行备份可以确保即使上游备份出现问题，也不会影响下游的备份进程。
为什么选择并行而不是串行 串行备份可能会导致一个问题：如果上游的备份过程中出现错误，那么这个错误会被传递到下游的备份。通过并行备份，我们可以避免这种情况，确保每个备份都是独立的。
备份工具的选择 在选择备份工具时，我考虑了以下几个标准：
支持本地和云备份：这样可以确保数据在本地和远程都有备份。 支持增量备份：只备份自上次备份以来发生变化的数据，节省时间和存储空间。 支持压缩和加密：保护数据安全的同时，减少存储需求。 支持将备份数据分割成一定大小：这对于远程备份尤其有用，可以提高小文件的上传速度，降低大文件上传失败的风险。 支持定时备份：自动化的定时备份可以确保数据始终是最新的。 稳定性和易用性：工具需要稳定运行，并且用户界面友好，易于操作。 在对比了多个备份工具后，我选择了 Kopia 和 Duplicati 。以下是它们的优缺点对比：
Duplicati 优点：
易于部署，通过 Docker 部署非常简单。 用户界面友好，易于操作。 支持同时连接多个仓库。 缺点：
使用 .Net 实现，可能会占用更多的系统资源。 有关于稳定性的传闻，尽管这可能因环境而异。 Kopia 优点：
稳定性的负面反馈较少，运行效率高。 占用资源相对较少，对系统的影响小。 用户界面简洁，易于理解。 缺点：
部署和上手难度较高，相关资料较少，官方文档不够详尽。 不支持同时连接多个仓库，这在某些情况下可能会造成不便。 高级功能通常需要通过命令行实现，对于不熟悉命令行的用户来说可能不够友好。 结语 通过这样的备份方案，我可以确保我的数据在多种情况下都能得到保护。无论是硬件故障还是意外删除，我都有办法恢复我的数据。这给了我极大的安心，让我可以专注于我的工作和家庭生活，而不必担心数据安全问题。希望我的分享能为你的家庭数据备份提供一些启示。</description></item><item><title>用 Caddy 做 Home Lab 的反向代理</title><link>http://0x3f.org/posts/reverse-proxying-home-lab-with-caddy/</link><pubDate>Sun, 16 Oct 2022 22:37:08 +0800</pubDate><guid>http://0x3f.org/posts/reverse-proxying-home-lab-with-caddy/</guid><description>我原本用 SWAG 做 Home Lab 的反向代理，它自带很多服务的配置模板，只需要复制后改几个参数就能工作，还有通过 ACME 自动更新 SSL 证书的功能，但是从某个时间起，首次访问经由它代理的服务会报 404 或 502 的错误，刷新页面就恢复正常，然后隔段时间后又会再次发生，另外还会偶尔出现页面无法显示最新的状态的问题，尤以当服务出错时发生居多。
最近尝试用 Caddy 代替 SWAG ，效果非常好，再也没有出现上述问题。而且 Caddy 的使用很简单，只需要在 Caddyfile 中加几行配置信息就能实现对一个服务的反向代理。当然，它也集成了自动更新 SSL 证书的功能。此外，它的镜像只有 80 多 MB ，在我测试的几个反向代理服务里是最节省空间的。
出于安全考虑，我没有把 Home Lab 的服务暴露在公网上，所以需要通过 DNS challenge 的方式申请 SSL 证书。我的 Docker 容器部署在 Unraid 上，官方软件仓库里的 Caddy 镜像并不包含 Cloudflare 的模块，所以找了个打包了该模块的镜像，看起来更新得还很及时。
镜像的 README 里有申请 Cloudflare API Token 的说明，部署容器前填到环境变量里即可。这里有个小坑，创建容器前需要手动创建 Caddyfile ，空文件就行，否则会报错：
Are you trying to mount a directory onto a file
Caddy 不如 SWAG 的地方是没有为服务提供配置模板，所以我保留了后者的配置目录，作为在前者中配置服务时的参考。以下是我的 Caddyfile 的示例，展示了怎样配置泛域名的反向代理和 SSL 证书的自动申请，以及服务的几种典型反向代理配置：</description></item><item><title>Unraid 6.11 弃用 NerdPack 的解决办法</title><link>http://0x3f.org/posts/how-to-install-packages-after-nerdpack-is-deprecated-in-unraid-6.11/</link><pubDate>Sun, 25 Sep 2022 21:29:41 +0800</pubDate><guid>http://0x3f.org/posts/how-to-install-packages-after-nerdpack-is-deprecated-in-unraid-6.11/</guid><description>Unraid 6.11 的 release note 没提弃用 NerdPack ，浪费了我很多时间。😞
当前版本的 Unraid 是基于 Slackware 15.0 的，可以手动从以下站点下载软件包手动安装：
https://slackware.pkgs.org/15.0/slackware-x86_64/ https://slackonly.com/pub/packages/15.0-x86_64/ 把下载的软件包放到运行中的 Unraid 的 /boot/extra 目录（不存在就手动创建）下，重启系统后自动安装或者通过 installpkg 命令手动安装。例如：
1 installpkg vim-8.2.4256-x86_64-1.txz 更简单的方法是使用 un-get ：
1 2 3 4 5 6 un-get search vim un-get install python3 python-pip python-setuptools un-get remove vim un-get update un-get cleanup un-get upgrade 这个命令目前不解决依赖关系，而且存在部分包无法下载或找不到的现象，还是需要手动干预。
作者没有在项目主页写安装说明，而是写在 Reddit 帖子里了。
2022-10-07 更新 出了个新的 NerdTools ，界面和 NerdPack 一样难用，包的数量现在还很少，但版本较新，还有一些 un-get 目前搜不到的包（比如: fzf）。可以作为补充。</description></item><item><title>让 AdGuard Home 和 OpenClash 协同工作</title><link>http://0x3f.org/posts/make-adguard-home-and-openclash-work-together/</link><pubDate>Sun, 06 Mar 2022 12:12:10 +0800</pubDate><guid>http://0x3f.org/posts/make-adguard-home-and-openclash-work-together/</guid><description>家庭网络环境 使用 OpenWrt （以下简称 OP ）做旁路网关 OP 内建 OpenClash （以下简称 OC ）访问不存在的网站 OP 内建 WireGuard （以下简称 WG ）做内网穿透 使用 AdGuard Home （以下简称 AH ）做内网 DNS 和广告过滤 之前遇到的问题 不管怎样配置，内网和 WG 下的内网主机名解析和科学上网这 4 种场景总有至少一个不工作。
期间创建过一个虚拟机做独立的 WG Server ，内建 SmartDNS （以下简称 SD ）做 AH 的上游，其它场景工作得很好，只是无法通过旁路网关访问不存在的网站。
解决方法 首先如果要正常使用 OC ，就必须使用它的 DNS 解析。
同时，又要达到使用 AH 做内网主机名解析和广告过滤的目的，所以要把 OC 设成 AH 的唯一上游。
然后最棘手的问题来了。如果把 AH 设成 dnsmasq 的上游， WG 下不能解析内网主机名。如果把 AH 设成监听 53 端口，则内网无法解析主机名。
想到之前在独立的 WG Server 上用 SD 在两种场景下都可以正常解析，就试着用它代替 dnsmasq ，结果柳暗花明，所以场景都跑通了。</description></item></channel></rss>