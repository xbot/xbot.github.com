<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>phpunit - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/phpunit/</link><description>phpunit - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 18 Feb 2020 22:49:45 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/phpunit/" rel="self" type="application/rss+xml"/><item><title>在 VS Code 中快速创建 PHPUnit 测试类的方法</title><link>http://0x3f.org/post/quickly-create-phpunit-test-cases-with-vscode/</link><pubDate>Tue, 18 Feb 2020 22:49:45 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/quickly-create-phpunit-test-cases-with-vscode/</guid><description><![CDATA[<p>通过单元测试解决问题或者调试代码，可以避开错综复杂的依赖关系、直击问题的核心，从而极大地节约时间、提高效率。</p>
<p>但是，当创建测试类成为一个经常发生的操作时，每次都手动创建类、引入基类、添加测试方法就显得很烦琐。我需要这样一个解决方案，让我可以立即开始着手写测试代码。</p>
<h2 id="方案一文件模板">方案一：文件模板</h2>
<p>通过VS Code的插件<a href="https://marketplace.visualstudio.com/items?itemName=yongwoo.template" target="_blank" rel="noopener noreffer">Template</a>，可以实现把事先准备好的一个测试类文件模板复制到工程目录下。</p>
<p>安装完后，第一次执行<code>Template: Create New</code>命令会在当前工程根目录下创建文件“template.config.js”和目录“.templates”。</p>
<p>在“.templates”中创建测试类模板文件，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>

<span class="k">namespace</span> <span class="nx">Tests</span><span class="p">;</span>

<span class="k">use</span> <span class="nx">Tests\TransactionalTestCase</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">AnyTest</span> <span class="k">extends</span> <span class="nx">TransactionalTestCase</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">testAnything</span><span class="p">()</span>
    <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>下次再执行Template的命令或者侧边栏文件管理器中的右键菜单项时，就可以选择该模板了。</p>
<p>Template有个很大的短板，目前的版本还不支持全局模板，每个工程下都维护一套模板还是很烦琐的。</p>
<h2 id="方案二代码片断">方案二：代码片断</h2>
<p>代码片断（以下统称Snippet）可能是VS Code做得最烂的一个功能，我曾无数次泪流满面地回想起有Vim和UltiSnips相伴的美好时光。</p>
<p>解决方案是这样的：</p>
<p>先通过插件<a href="https://marketplace.visualstudio.com/items?itemName=sleistner.vscode-fileutils" target="_blank" rel="noopener noreffer">File Utils</a>的<code>File: New File Relative to Project Root</code>命令在工程目录下创建一个空白文件（如AnyTest.php）。然后再通过Snippet快速插入测试类的脚手架代码。</p>
<p>这里有一个问题，VS Code的PHP Snippet只有在<code>&lt;?php</code>标签之内才能生效，所以如果创建一个针对PHP语言的Snippet，在上面创建的这个空白文件里是无法触发的。</p>
<p>VS Code的Snippet总体上分为工程和通用两类，所谓工程类（Project Snippet Scope），就是只对当前工程生效，存储在工程根目录下的“.vscode”目录中。通用类（Language Snippet Scope）是我们平时最常用的，对所有工程都会生效。它又分为语言和全局两种。语言类（Language Snippet File）是针对具体的语言定义的Snippet集合，文件名为语言名称，后缀是“.json”，如“php.json”。全局类（Global Snippet File）通常是不受限于语言的，当然也可以指定单个Snippet对哪些语言启用，文件名随意，后缀是“.code-snippets”。</p>
<p>因此，测试类脚手架代码的Snippet不能定义在“php.json”中，而应放在“global.code-snippets”里：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-JSON" data-lang="JSON"><span class="s2">&#34;PHPUnit：新测试类&#34;</span><span class="err">:</span> <span class="p">{</span>
    <span class="nt">&#34;prefix&#34;</span><span class="p">:</span> <span class="s2">&#34;newcase&#34;</span><span class="p">,</span>
    <span class="nt">&#34;body&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="s2">&#34;&lt;?php&#34;</span><span class="p">,</span>
        <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="s2">&#34;namespace Tests${1:\\\\${2:SubNameSpace}};&#34;</span><span class="p">,</span>
        <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="s2">&#34;use Tests\\\\${3|TransactionalTestCase,TestCase|};&#34;</span><span class="p">,</span>
        <span class="s2">&#34;&#34;</span><span class="p">,</span>
        <span class="s2">&#34;class ${TM_FILENAME_BASE} extends $3&#34;</span><span class="p">,</span>
        <span class="s2">&#34;{&#34;</span><span class="p">,</span>
        <span class="s2">&#34;    $0&#34;</span><span class="p">,</span>
        <span class="s2">&#34;}&#34;</span>
    <span class="p">],</span>
    <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;PHPUnit：新测试类&#34;</span><span class="p">,</span>
    <span class="nt">&#34;scope&#34;</span><span class="p">:</span> <span class="s2">&#34;html,php&#34;</span><span class="p">,</span>
<span class="p">}</span><span class="err">,</span>
</code></pre></td></tr></table>
</div>
</div><p>这里通过选项“scope”设定只对“html”和“php”两种语言生效，注意如果只设定“php”也是只能在<code>&lt;?php</code>标签内才能生效的。</p>]]></description></item><item><title>PHPUnit代码覆盖率的统计方法</title><link>http://0x3f.org/post/how-to-count-code-coverage-of-phpunit/</link><pubDate>Sun, 30 Apr 2017 14:20:41 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/how-to-count-code-coverage-of-phpunit/</guid><description><![CDATA[<p>关于PHPUnit代码覆盖率的很多概念，官方文档中讲的十分清楚，本文仅就部分语焉不详的细节做些补充。</p>
<p>虽然phpunit.xml不是必需，但每次都输入完整的命令很不方便，所以一般都要生成这个配置文件。用<code>phpunit --generate-configuration</code>生成的phpunit.xml默认包含<code>forceCoversAnnotation=&quot;true&quot;</code>，它表示必须在测试方法头部的注释里显式使用<code>@covers</code>标签声明统计范围，例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php">/**
 * @covers Ox3f\LaravelUtils\Log\Log::<span class="p">&lt;</span><span class="nt">public</span><span class="p">&gt;</span>
 * @covers Ox3f\LaravelUtils\Log\Log::parseCallStack
 * @covers Ox3f\LaravelUtils\Log\Log::__construct
 * @covers Ox3f\LaravelUtils\Log\Log::__callStatic
 */
public function testAll()
{
    // ...
}
</code></pre></td></tr></table>
</div>
</div><p>否则在执行统计代码覆盖率的命令时，会报risk：</p>
<blockquote>
<p>There was 1 risky test:</p>
<ol>
<li>Ox3f\LaravelUtils\Log\LogTest::testAll
This test does not have a @covers annotation but is expected to have one</li>
</ol>
</blockquote>
<p>如果希望单元测试覆盖全部代码、且不用一一显式声明，可以将此选项的值改成
<code>false</code>。</p>
<p>之后即可使用明令<code>phpunit —coverage-html ./report</code>统计代码覆盖率，统计结果保存在report目录中。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://phpunit.de/manual/current/zh_cn/code-coverage-analysis.html" target="_blank" rel="noopener noreffer">官方文档：第11章-代码覆盖率分析</a></li>
</ul>
]]></description></item><item><title>Phalcon项目中PHPUnit的初始化</title><link>http://0x3f.org/post/testing-with-phpunit-in-phalcon/</link><pubDate>Sat, 29 Nov 2014 09:58:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/testing-with-phpunit-in-phalcon/</guid><description><![CDATA[<p>参考<a href="http://docs.phalconphp.com/zh/latest/reference/unit-testing.html" target="_blank" rel="noopener noreffer">官方文档</a>，稍作修改。</p>
<p>在项目下创建目录unittests，进入目录执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">composer require phpunit/phpunit
</code></pre></td></tr></table>
</div>
</div><p>创建tests目录并在其中创建文件Bootstrap.php：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">use</span> <span class="nx">Phalcon\DI</span><span class="p">,</span>
    <span class="nx">Phalcon\DI\FactoryDefault</span><span class="p">;</span>

<span class="nx">ini_set</span><span class="p">(</span><span class="s1">&#39;display_errors&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">error_reporting</span><span class="p">(</span><span class="k">E_ALL</span><span class="p">);</span>

<span class="nx">define</span><span class="p">(</span><span class="s1">&#39;ROOT_PATH&#39;</span><span class="p">,</span> <span class="no">__DIR__</span><span class="p">);</span>
<span class="nx">define</span><span class="p">(</span><span class="s1">&#39;PROJECT_DIR&#39;</span><span class="p">,</span> <span class="s1">&#39;/home/taoqi/workspace&#39;</span><span class="p">);</span>

<span class="nx">set_include_path</span><span class="p">(</span>
    <span class="nx">ROOT_PATH</span> <span class="o">.</span> <span class="nx">PATH_SEPARATOR</span> <span class="o">.</span> <span class="nx">get_include_path</span><span class="p">()</span>
<span class="p">);</span>

<span class="c1">// required for phalcon/incubator
</span><span class="c1"></span><span class="k">include</span> <span class="no">__DIR__</span> <span class="o">.</span> <span class="s2">&#34;/../vendor/autoload.php&#34;</span><span class="p">;</span>

<span class="c1">// 加载项目文件
</span><span class="c1"></span><span class="nv">$config</span> <span class="o">=</span> <span class="k">require_once</span> <span class="nx">PROJECT_DIR</span><span class="o">.</span><span class="s1">&#39;/web/config/config.php&#39;</span><span class="p">;</span>
<span class="k">require_once</span> <span class="nx">PROJECT_DIR</span><span class="o">.</span><span class="s1">&#39;/web/config/loader.php&#39;</span><span class="p">;</span>
<span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">registerDirs</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
    <span class="nx">ROOT_PATH</span>
<span class="p">),</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">// $di = new FactoryDefault();
</span><span class="c1"></span><span class="nx">DI</span><span class="o">::</span><span class="na">reset</span><span class="p">();</span>

<span class="c1">// add any needed services to the DI here
</span><span class="c1"></span><span class="k">require_once</span> <span class="nx">PROJECT_DIR</span><span class="o">.</span><span class="s1">&#39;/web/config/services.php&#39;</span><span class="p">;</span>

<span class="nx">DI</span><span class="o">::</span><span class="na">setDefault</span><span class="p">(</span><span class="nv">$di</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>安装phalcon的phpunit辅助库：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">composer require phalcon/incubator
</code></pre></td></tr></table>
</div>
</div><p>创建phpunit.xml：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
<span class="nt">&lt;phpunit</span> <span class="na">bootstrap=</span><span class="s">&#34;./Bootstrap.php&#34;</span>
        <span class="na">backupGlobals=</span><span class="s">&#34;false&#34;</span>
        <span class="na">backupStaticAttributes=</span><span class="s">&#34;false&#34;</span>
        <span class="na">verbose=</span><span class="s">&#34;true&#34;</span>
        <span class="na">colors=</span><span class="s">&#34;false&#34;</span>
        <span class="na">convertErrorsToExceptions=</span><span class="s">&#34;true&#34;</span>
        <span class="na">convertNoticesToExceptions=</span><span class="s">&#34;true&#34;</span>
        <span class="na">convertWarningsToExceptions=</span><span class="s">&#34;true&#34;</span>
        <span class="na">processIsolation=</span><span class="s">&#34;false&#34;</span>
        <span class="na">stopOnFailure=</span><span class="s">&#34;false&#34;</span>
        <span class="na">syntaxCheck=</span><span class="s">&#34;true&#34;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;testsuite</span> <span class="na">name=</span><span class="s">&#34;Phalcon - Testsuite&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;directory&gt;</span>./<span class="nt">&lt;/directory&gt;</span>
    <span class="nt">&lt;/testsuite&gt;</span>
<span class="nt">&lt;/phpunit&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>创建单元测试基类UnitTestCase.php：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">use</span> <span class="nx">Phalcon\DI</span><span class="p">,</span>
    <span class="nx">\Phalcon\Test\UnitTestCase</span> <span class="k">as</span> <span class="nx">PhalconTestCase</span><span class="p">;</span>

<span class="k">abstract</span> <span class="k">class</span> <span class="nc">UnitTestCase</span> <span class="k">extends</span> <span class="nx">PhalconTestCase</span> <span class="p">{</span>

    <span class="sd">/**
</span><span class="sd">     * @var \Voice\Cache
</span><span class="sd">     */</span>
    <span class="k">protected</span> <span class="nv">$_cache</span><span class="p">;</span>

    <span class="sd">/**
</span><span class="sd">     * @var \Phalcon\Config
</span><span class="sd">     */</span>
    <span class="k">protected</span> <span class="nv">$_config</span><span class="p">;</span>

    <span class="sd">/**
</span><span class="sd">     * @var bool
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$_loaded</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setUp</span><span class="p">(</span><span class="nx">Phalcon\DiInterface</span> <span class="nv">$di</span> <span class="o">=</span> <span class="k">NULL</span><span class="p">,</span> <span class="nx">Phalcon\Config</span> <span class="nv">$config</span> <span class="o">=</span> <span class="k">NULL</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// Load any additional services that might be required during testing
</span><span class="c1"></span>        <span class="nv">$di</span> <span class="o">=</span> <span class="nx">DI</span><span class="o">::</span><span class="na">getDefault</span><span class="p">();</span>

        <span class="c1">// get any DI components here. If you have a config, be sure to pass it to the parent
</span><span class="c1"></span>        <span class="k">parent</span><span class="o">::</span><span class="na">setUp</span><span class="p">(</span><span class="nv">$di</span><span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_loaded</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>

    <span class="p">}</span>

    <span class="sd">/**
</span><span class="sd">     * Check if the test case is setup properly
</span><span class="sd">     * @throws \PHPUnit_Framework_IncompleteTestError;
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__destruct</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_loaded</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">\PHPUnit_Framework_IncompleteTestError</span><span class="p">(</span><span class="s1">&#39;Please run parent::setUp().&#39;</span><span class="p">);</span>

        <span class="p">}</span>

    <span class="p">}</span>

<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>创建单元测试类testsTestUnitTest.php：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>

<span class="k">namespace</span> <span class="nx">Test</span><span class="p">;</span>

<span class="sd">/**
</span><span class="sd"> * Class UnitTest
</span><span class="sd"> */</span>
<span class="k">class</span> <span class="nc">UnitTests</span> <span class="k">extends</span> <span class="nx">\UnitTestCase</span> <span class="p">{</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">testTestCase</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$post</span> <span class="o">=</span> <span class="nx">\Post</span><span class="o">::</span><span class="na">find</span><span class="p">(</span><span class="mi">33</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertObjectHasAttribute</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="nv">$post</span><span class="p">,</span> <span class="s1">&#39;where is title ?&#39;</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>在tests目录下建立phpunit的软连接并执行测试：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">ln -sf ../vendor/bin/phpunit run
./run
</code></pre></td></tr></table>
</div>
</div><p><strong>另</strong>：发现个诡异的问题，如果Model中不覆盖getSource()方法，单元测试中会自动找用下划线分隔的表名，即假如Model名为FooBar，会去找foo_bar的表名，但正常执行程序时找的是foobar。在官方论坛问的<a href="http://forum.phalconphp.com/discussion/4078/whats-the-principle-when-phalcon-gets-the-table-name-of-a-model" target="_blank" rel="noopener noreffer">问题</a>还木有解决。phalcon坑挺多的。</p>
]]></description></item></channel></rss>