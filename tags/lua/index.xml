<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Lua - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/lua/</link><description>Lua - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 25 Jan 2017 18:59:00 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/lua/" rel="self" type="application/rss+xml"/><item><title>用OpenResty自动转换silk到MP3</title><link>http://0x3f.org/post/convert-silk-to-mp3-with-openresty/</link><pubDate>Wed, 25 Jan 2017 18:59:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/convert-silk-to-mp3-with-openresty/</guid><description><![CDATA[<p>PHP没有原生的转换silk格式音频到mp3的方案，所以考虑用NGINX+Lua调用命令行工具实现。</p>
<h2 id="思路">思路</h2>
<p>当访问以「.silk.mp3」为后缀的文件时，查找对应的mp3文件，存在则返回，否则，如果对应的silk文件存在，调用命令行工具转换文件格式，然后内部重定向到新生成的mp3。</p>
<h2 id="安装">安装</h2>
<ul>
<li><a href="https://openresty.org/cn/download.html" target="_blank" rel="noopener noreffer">OpenResty</a></li>
<li><a href="https://github.com/kn007/silk-v3-decoder" target="_blank" rel="noopener noreffer">silk-v3-decoder</a></li>
<li><a href="https://ffmpeg.org" target="_blank" rel="noopener noreffer">ffmpeg</a></li>
</ul>
<h2 id="nginx配置">NGINX配置</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-nginx" data-lang="nginx"><span class="k">location</span> <span class="p">~</span><span class="sr">*</span> <span class="s">/.*\.silk\.mp3</span>$ <span class="p">{</span>
    <span class="kn">content_by_lua_file</span> <span class="s">&#34;/opt/script/silk2mp3.lua&#34;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="lua脚本">Lua脚本</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-lua" data-lang="lua"><span class="kr">function</span> <span class="nf">file_exists</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
    <span class="kd">local</span> <span class="n">f</span><span class="o">=</span><span class="n">io.open</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="s2">&#34;r&#34;</span><span class="p">)</span>
    <span class="kr">if</span> <span class="n">f</span><span class="o">~=</span><span class="kc">nil</span> <span class="kr">then</span> <span class="n">io.close</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="kr">return</span> <span class="kc">true</span> <span class="kr">else</span> <span class="kr">return</span> <span class="kc">false</span> <span class="kr">end</span>
<span class="kr">end</span>

<span class="kd">local</span> <span class="n">resource</span>     <span class="o">=</span> <span class="n">ngx.var</span><span class="p">.</span><span class="n">request_filename</span><span class="p">;</span>
<span class="kd">local</span> <span class="n">realResource</span> <span class="o">=</span> <span class="n">resource</span><span class="p">:</span><span class="n">sub</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">#</span><span class="n">resource</span> <span class="o">-</span> <span class="mi">9</span><span class="p">)</span><span class="o">..</span><span class="s2">&#34;.mp3&#34;</span><span class="p">;</span>
<span class="kd">local</span> <span class="n">realURI</span>      <span class="o">=</span> <span class="n">ngx.var</span><span class="p">.</span><span class="n">uri</span><span class="p">:</span><span class="n">sub</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">#</span><span class="n">ngx.var</span><span class="p">.</span><span class="n">uri</span> <span class="o">-</span> <span class="mi">9</span><span class="p">)</span><span class="o">..</span><span class="s2">&#34;.mp3&#34;</span><span class="p">;</span>

<span class="kr">if</span> <span class="n">file_exists</span><span class="p">(</span><span class="n">realResource</span><span class="p">)</span> <span class="kr">then</span>
    <span class="kr">return</span> <span class="n">ngx.exec</span><span class="p">(</span><span class="n">realURI</span><span class="p">);</span>
<span class="kr">end</span>

<span class="kd">local</span> <span class="n">silk</span> <span class="o">=</span> <span class="n">resource</span><span class="p">:</span><span class="n">sub</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">#</span><span class="n">resource</span> <span class="o">-</span> <span class="mi">4</span><span class="p">);</span>

<span class="kr">if</span> <span class="ow">not</span> <span class="n">file_exists</span><span class="p">(</span><span class="n">silk</span><span class="p">)</span> <span class="kr">then</span>
    <span class="kr">return</span> <span class="n">ngx.exit</span><span class="p">(</span><span class="mi">404</span><span class="p">);</span>
<span class="kr">end</span>

<span class="n">os.execute</span><span class="p">(</span><span class="s2">&#34;/bin/sh /opt/silk-v3-decoder/converter.sh </span><span class="se">\&#34;</span><span class="s2">&#34;</span><span class="o">..</span><span class="n">silk</span><span class="o">..</span><span class="s2">&#34;</span><span class="se">\&#34;</span><span class="s2"> mp3 &gt; /dev/null 2&gt;&amp;1&#34;</span><span class="p">);</span>

<span class="kr">if</span> <span class="n">file_exists</span><span class="p">(</span><span class="n">realResource</span><span class="p">)</span> <span class="kr">then</span>
    <span class="kr">return</span> <span class="n">ngx.exec</span><span class="p">(</span><span class="n">realURI</span><span class="p">);</span>
<span class="kr">else</span>
    <span class="kr">return</span> <span class="n">ngx.exit</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span>
<span class="kr">end</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="遇到的问题">遇到的问题</h2>
<h3 id="openresty调用命令转换失败而手工可以">OpenResty调用命令转换失败，而手工可以</h3>
<p>silk-v3-decoder的converter.sh把所有错误信息都屏蔽了，需要修改脚本查看。</p>
<p>实际情况是OpenResty的运行用户没有音频文件所在目录的权限。</p>
<h3 id="编译的ffmpeg转换pcm到mp3时报错">编译的ffmpeg转换PCM到MP3时报错</h3>
<p>silk-v3-decoder自己的decoder只是把silk转换成PCM，然后调用ffmpeg转换成mp3。系统中的ffmpeg是自己编译的，在这一步报错，大意是mp3的encoder不存在。</p>
<p>原因是ffmpeg编译时默认不激活mp3编码器（猜测）或者没安装libmp3lame-dev，需要安装这个开发库并给configure指定参数「&ndash;enable-libmp3lame」。</p>
]]></description></item><item><title>欧拉工程第十解</title><link>http://0x3f.org/post/project-euler-10/</link><pubDate>Tue, 18 Nov 2008 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/project-euler-10/</guid><description><![CDATA[<blockquote><p>The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.</p>

<p>Find the sum of all the primes below two million.</p></blockquote>

<p>题目越来越变态，开始好玩儿了。</p>

<p><a href="http://0x3f.org/?p=753">第七解</a>里的算法在这里算是废了，一万个素数都算得那么费劲，两百万以下的素数有十几万个，不得不用筛选法了。</p>

<p>普通的筛选效率也不行，当初就是因为这个原因才没用它。不过优化过的筛选法就很奇妙了，下面是Lua的实现：</p>

<p>
```lua
require('math')

local limit = 2000000

local primes = {}
for i=1,limit do
    table.insert(primes,true)
end
primes[0] = false
primes[1] = false

for i=0,math.floor(math.sqrt(limit)) do
    if primes[i] then
        for j=math.pow(i,2),limit,i do
            primes[j] = false
        end
    end
end

local sumVal = 0
for i,j in ipairs(primes) do
    if j then
        sumVal = sumVal + i
    end
end

print(sumVal)
```
</p>


<p>在我这里两秒半就出结果了，Python的表现也不错，四秒半出结果：</p>

<p>
```python
from math import sqrt

limit = 2000000
primes = [True for i in range(0,limit)]
primes[0] = False
primes[1] = False

for i in range(1,int(sqrt(limit))+1):
    if primes[i]:
        for j in range(i**2,limit,i):
            primes[j] = False

sumVal = 0
for i in range(len(primes)):
    if primes[i]:
        sumVal += i

print sumVal
```
</p>


<p><a href="http://picasaweb.google.com/lh/photo/va8CeXPxRtCojlNw4qpmBQ"></a></p>
]]></description></item><item><title>欧拉工程第七解</title><link>http://0x3f.org/post/project-euler-7/</link><pubDate>Fri, 31 Oct 2008 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/project-euler-7/</guid><description><![CDATA[<p>第七解：</p>

<blockquote><p>By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.</p>

<p>What is the 10001st prime number?</p></blockquote>

<p>穷举，并加以最大程度的优化：对大于2的素数，只判断奇数；判断一个奇数是否素数时，只拿已经找到的素数中小于第这个数平方根的数来相除，如果均不能整除，就是素数。Python的实现：</p>

<p>
```python
def IsPrimeNum(num,feed):
    from math import sqrt
    tmp = feed[:]
    while tmp[-1] > int(sqrt(num)):
        tmp.pop()
    for i in tmp:
        if num % i == 0:
            return False
    return True

limit = 10001
feed = [2,3,5,7]
temp = 7
counter = 4
while counter < limit :
    temp += 2
    if IsPrimeNum(temp,feed):
        feed.append(temp)
        counter += 1
print temp
```
</p>


<p>执行了一下，在我这里居然用了五百秒才出结果，神啊，差不多十分钟啊。想到PHP号称速度很快，于是用PHP重新实现了一下：</p>

<p>
```php
function IsPrimeNum($num,$feed){
    $base = floor(sqrt($num));
    foreach($feed as $i=>$v){
        if($v > $base){
            return true;
        }
        if($num % $v == 0){
            return false;
        }
    }
}

$limit = 10001;
$feed = array(2,3,5,7);
$counter = 4;
$tmp = 7;
while($counter < $limit){
    $tmp += 2;
    if(IsPrimeNum($tmp,$feed)){
        $counter++;
        $feed[] = $tmp;
    }
}

echo $tmp;
```
</p>


<p>还好，七十四秒出结果，看来PHP的牛皮不是吹的。当然，Lua会更快：</p>

<p>
```lua
function IsPrimeNum(num,feed)
    require('math')
    local limit = math.floor(math.sqrt(num))
    for i,v in ipairs(feed) do
        if v > limit then
            return true
        end
        if num % v == 0 then
            return false
        end
    end
end

local limit = 10001
local feed = {2,3,5,7}
local counter = 4
local tmp = 7
while counter < limit do
    tmp = tmp + 2
    if IsPrimeNum(tmp,feed) then
        counter = counter + 1
        table.insert(feed,tmp)
    end
end

print(tmp)
```
</p>


<p>执行完后还是吓了一跳，0.3秒，同样是语言，效率的差别咋就那么大呢？！我在想用Java会不会算到2009去。</p>

<p>我不相信这道题用Python就那么难解，下面是用递归实现的程序：</p>

<p>
```python
from math import sqrt

def GuessPrime(feed,limit):
    if feed == 2 :
        return [2]
    elif feed == 3 :
        return [2,3]
    
    tmp = int(sqrt(feed))
    primes = GuessPrime(tmp,limit)
    
    base = 0
    if tmp % 2 == 0:
        base = tmp + 1
    else:
        base = tmp
    for i in range(base,feed,2):
        flag = 0
        for j in primes:
            if i % j == 0:
                flag = 1
                break
        if flag == 0:
            primes.append(i)
            if len(primes) == limit:
                return primes
    
    return primes

limit = 10001
feed = 1000000
primes = GuessPrime(feed,limit)
print primes[limit-1]
```
</p>


<p>11秒就出了结果，说到底，算法的改进才是硬道理！</p>

<p><a href="http://picasaweb.google.com/lh/photo/Uqg0Cu8ZWv5tlQ84nbVGZw"></a></p>
]]></description></item></channel></rss>