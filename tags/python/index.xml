<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on 晴耕雨讀</title><link>http://0x3f.org/tags/python/</link><description>Recent content in Python on 晴耕雨讀</description><generator>Hugo</generator><language>zh-cn</language><copyright>© 2007-2024 鬼马妖刀</copyright><lastBuildDate>Sun, 30 Jul 2017 08:40:11 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Python 2还是3是个纠结的问题</title><link>http://0x3f.org/posts/bothered-by-python-2-vs-3/</link><pubDate>Sun, 30 Jul 2017 08:40:11 +0000</pubDate><guid>http://0x3f.org/posts/bothered-by-python-2-vs-3/</guid><description>&lt;p&gt;前些天用denite取代unite，用&lt;code&gt;--with-python3&lt;/code&gt;重装了vim，结果发现vdebug只支持python 2。&lt;/p&gt;
&lt;p&gt;vim同时只能在py2和py3中选一个，据说可以通过重新编译python实现共存，但是我在编译py3的时候失败。&lt;/p&gt;
&lt;p&gt;neovim同时支持两个版本，但是尝试deoplete失败，报「Invalid Channel」的错误，似乎是python-neovim的锅。而且由于neovim内建lua、不支持&lt;code&gt;has('lua')&lt;/code&gt;，所以不能fall back到neocomplete。&lt;/p&gt;
&lt;p&gt;万般无奈，只好换回unite。&lt;/p&gt;</description></item><item><title>Project Euler Problem 24 Solved</title><link>http://0x3f.org/posts/project-euler-24/</link><pubDate>Sun, 27 Apr 2014 21:17:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-24/</guid><description>&lt;h2 id="lexicographic-permutations"&gt;Lexicographic permutations&lt;/h2&gt;
&lt;p&gt;A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:&lt;/p&gt;
&lt;p&gt;012 021 102 120 201 210&lt;/p&gt;
&lt;p&gt;What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?&lt;/p&gt;</description></item><item><title>Project Euler Problem 23 Solved</title><link>http://0x3f.org/posts/project-euler-23/</link><pubDate>Fri, 25 Apr 2014 23:56:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-23/</guid><description>&lt;h2 id="non-abundant-sums"&gt;Non-abundant sums&lt;/h2&gt;
&lt;p&gt;A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.&lt;/p&gt;
&lt;p&gt;A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.&lt;/p&gt;</description></item><item><title>UltraBlog.vim v3.6.1: 文章分类自动补全</title><link>http://0x3f.org/posts/ultrablog-v361-released/</link><pubDate>Sun, 20 Apr 2014 22:50:00 +0000</pubDate><guid>http://0x3f.org/posts/ultrablog-v361-released/</guid><description>&lt;p&gt;春节期间收到两个issue，一直拖到今天才有时间完成。&lt;/p&gt;
&lt;p&gt;增加了一个功能，在文章编辑视图的元数据中分类那行，使用热键&amp;lt;C-X&amp;gt;&amp;lt;C-U&amp;gt;自动完成文章的分类。在配置数组&lt;strong&gt;ub_blog&lt;/strong&gt;中增加键值对“categories”，默认使用这一项的值实现自动完成，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-vim" data-lang="vim"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;ub_blog&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; {&lt;span class="s1"&gt;&amp;#39;login_name&amp;#39;&lt;/span&gt;:&lt;span class="s1"&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; \&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;:&lt;span class="s1"&gt;&amp;#39;pass2011&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; \&lt;span class="s1"&gt;&amp;#39;url&amp;#39;&lt;/span&gt;:&lt;span class="s1"&gt;&amp;#39;http://www.sample.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; \&lt;span class="s1"&gt;&amp;#39;xmlrpc_uri&amp;#39;&lt;/span&gt;:&lt;span class="s1"&gt;&amp;#39;xmlrpc.php&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; \&lt;span class="s1"&gt;&amp;#39;db&amp;#39;&lt;/span&gt;:&lt;span class="s1"&gt;&amp;#39;$VIM/UltraBlog.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; \&lt;span class="s1"&gt;&amp;#39;categories&amp;#39;&lt;/span&gt;: &lt;span class="s1"&gt;&amp;#39;News|Computer|Image&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; \}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果这一项不存在，将从博客中拉取分类数据。&lt;/p&gt;
&lt;p&gt;自从迁移到Octopress，有两年不用Wordpress了，没想到居然还有人在用&lt;a href="http://0x3f.org/post/ultrablog-as-an-ultimate-vim-blogging-plugin/"&gt;UltraBlog.vim&lt;/a&gt;。&lt;/p&gt;</description></item><item><title>Project Euler Problem 22 Solved</title><link>http://0x3f.org/posts/project-euler-22/</link><pubDate>Sun, 20 Apr 2014 08:03:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-22/</guid><description>&lt;h2 id="names-scores"&gt;Names scores&lt;/h2&gt;
&lt;p&gt;Using &lt;a href="http://projecteuler.net/project/names.txt"&gt;names.txt&lt;/a&gt; (right click and &amp;lsquo;Save Link/Target As&amp;hellip;&amp;rsquo;), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.&lt;/p&gt;
&lt;p&gt;For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.&lt;/p&gt;</description></item><item><title>Project Euler Problem 21 Solved</title><link>http://0x3f.org/posts/project-euler-21/</link><pubDate>Thu, 17 Apr 2014 22:18:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-21/</guid><description>&lt;h2 id="amicable-numbers"&gt;Amicable numbers&lt;/h2&gt;
&lt;p&gt;Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).&lt;br&gt;
If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.&lt;/p&gt;
&lt;p&gt;For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.&lt;/p&gt;</description></item><item><title>Project Euler Problem 20 Solved</title><link>http://0x3f.org/posts/project-euler-20/</link><pubDate>Mon, 14 Apr 2014 22:19:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-20/</guid><description>&lt;h2 id="factorial-digit-sum"&gt;Factorial digit sum&lt;/h2&gt;
&lt;p&gt;n! means n × (n − 1) × &amp;hellip; × 3 × 2 × 1&lt;/p&gt;
&lt;p&gt;For example, 10! = 10 × 9 × &amp;hellip; × 3 × 2 × 1 = 3628800,&lt;br&gt;
and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.&lt;/p&gt;
&lt;p&gt;Find the sum of the digits in the number 100!&lt;/p&gt;</description></item><item><title>Project Euler Problem 19 Solved</title><link>http://0x3f.org/posts/project-euler-19/</link><pubDate>Sat, 12 Apr 2014 21:21:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-19/</guid><description>&lt;h2 id="counting-sundays"&gt;Counting Sundays&lt;/h2&gt;
&lt;p&gt;You are given the following information, but you may prefer to do some research for yourself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 Jan 1900 was a Monday.&lt;/li&gt;
&lt;li&gt;Thirty days has September,
April, June and November.&lt;br&gt;
All the rest have thirty-one,&lt;br&gt;
Saving February alone,&lt;br&gt;
Which has twenty-eight, rain or shine.&lt;br&gt;
And on leap years, twenty-nine.&lt;/li&gt;
&lt;li&gt;A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?&lt;/p&gt;</description></item><item><title>Project Euler Problem 18&amp;67 Solved</title><link>http://0x3f.org/posts/project-euler-18-and-67/</link><pubDate>Thu, 10 Apr 2014 21:28:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-18-and-67/</guid><description>&lt;h2 id="maximum-path-sum-i"&gt;Maximum path sum I&lt;/h2&gt;
&lt;p&gt;By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.&lt;/p&gt;
&lt;p&gt;3&lt;br&gt;
7 4&lt;br&gt;
2 4 6&lt;br&gt;
8 5 9 3&lt;/p&gt;
&lt;p&gt;That is, 3 + 7 + 4 + 9 = 23.&lt;/p&gt;
&lt;p&gt;Find the maximum total from top to bottom of the triangle below:&lt;/p&gt;
&lt;p&gt;75&lt;br&gt;
95 64&lt;br&gt;
17 47 82&lt;br&gt;
18 35 87 10&lt;br&gt;
20 04 82 47 65&lt;br&gt;
19 01 23 75 03 34&lt;br&gt;
88 02 77 73 07 63 67&lt;br&gt;
99 65 04 28 06 16 70 92&lt;br&gt;
41 41 26 56 83 40 80 70 33&lt;br&gt;
41 48 72 33 47 32 37 16 94 29&lt;br&gt;
53 71 44 65 25 43 91 52 97 51 14&lt;br&gt;
70 11 33 28 77 73 17 78 39 68 17 57&lt;br&gt;
91 71 52 38 17 14 91 43 58 50 27 29 48&lt;br&gt;
63 66 04 68 89 53 67 30 73 16 69 87 40 31&lt;br&gt;
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23&lt;/p&gt;</description></item><item><title>Project Euler Problem 17 Solved</title><link>http://0x3f.org/posts/project-euler-17/</link><pubDate>Wed, 09 Apr 2014 22:29:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-17/</guid><description>&lt;h2 id="number-letter-counts"&gt;Number letter counts&lt;/h2&gt;
&lt;p&gt;If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.&lt;/p&gt;
&lt;p&gt;If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of &amp;ldquo;and&amp;rdquo; when writing out numbers is in compliance with British usage.&lt;/p&gt;</description></item><item><title>Project Euler Problem 16 Solved</title><link>http://0x3f.org/posts/project-euler-16/</link><pubDate>Tue, 08 Apr 2014 21:57:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-16/</guid><description>&lt;h2 id="power-digit-sum"&gt;Power digit sum&lt;/h2&gt;
&lt;p&gt;2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.&lt;/p&gt;
&lt;p&gt;What is the sum of the digits of the number 2^1000?&lt;/p&gt;
&lt;h2 id="solution"&gt;Solution&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;f&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;span class="lnt"&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;math/big&amp;#34;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;strconv&amp;#34;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;big&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NewInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;big&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;NewInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;power&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;power&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;power&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;String&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;strconv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;String&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;bit&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;I&amp;rsquo;m the 109044th person to have solved this problem.&lt;/p&gt;</description></item><item><title>Project Euler Problem 15 Solved</title><link>http://0x3f.org/posts/project-euler-15/</link><pubDate>Wed, 02 Apr 2014 21:44:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-15/</guid><description>&lt;h2 id="lattice-paths"&gt;Lattice paths&lt;/h2&gt;
&lt;p&gt;Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://pic.yupoo.com/leninlee/DEwoQ7qc/medish.jpg" alt=""&gt;&lt;/p&gt;
&lt;p&gt;How many such routes are there through a 20×20 grid?&lt;/p&gt;
&lt;h2 id="solution"&gt;Solution&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;I&amp;rsquo;m the 86747th person to have solved this problem.&lt;/p&gt;</description></item><item><title>PySide: How to Get the Position of a Widget-Value-Changed Cell in QTableWidget</title><link>http://0x3f.org/posts/get-position-in-qtablewidget-for-changed-cellwidgets/</link><pubDate>Mon, 01 Jul 2013 00:57:00 +0000</pubDate><guid>http://0x3f.org/posts/get-position-in-qtablewidget-for-changed-cellwidgets/</guid><description>&lt;p&gt;Assume we have created an instance of QTableWidget, in which cells are filled with widgets like QComboBox, QCheckBox, etc. When values are changed, we need to get the row and column indexes of the cells. But the QTableWidget.cellChanged() and QTableWidget.itemChanged() signals are only effective for cells containing QTableWidgetItem instances, for those in which widgets are filled in with QTableWidget.setCellWidget(), this doesn&amp;rsquo;t work.&lt;/p&gt;
&lt;p&gt;This problem nearly made me crazy last weekend. So how can I make it ?&lt;/p&gt;</description></item><item><title>UltraBlog.vim v3.5.0: 内建浏览器</title><link>http://0x3f.org/posts/ultrablog-v350-released/</link><pubDate>Mon, 30 Apr 2012 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/ultrablog-v350-released/</guid><description>&lt;p&gt;此前预览文章是通过调用系统默认的网络浏览器实现的，缺点是这些功能完备的浏览器启动速度不甚理想，尤其是火狐，谁用谁知道。&lt;/p&gt;
&lt;p&gt;前两天看了TuxRadar的一个Podcast，几分钟内就可以用pywebkitgtk拼装出一个五脏俱全的网络浏览器，pywebkitgtk这个东西实在是非常的好用。不过我实测后发现这东西加载页面的速度比较慢，而且貌似是单线程的，因为图片都是放在最后才加载，不知道是这个绑定本身的问题，还是有API可以实现的。于是突然想到拿这个东西实现一个简单的浏览器，很适合在UB里预览文章。&lt;/p&gt;
&lt;p&gt;增加了一个选项&lt;strong&gt;“ub_use_ubviewer”&lt;/strong&gt;，默认值是1，即默认使用这个内建的浏览器预览文章。当这个选项的值被设为0时，仍然使用系统的默认浏览器，并且在Vim启动时不会加载内建的浏览器。这样做一是为了多一种选择，再一个也可以避开烦人的GTK警告：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;** (gvim:13629): WARNING **: Trying to register gtype 'GMountMountFlags' as enum when in fact it is of type 'GFlags'&lt;/p&gt;
&lt;p&gt;** (gvim:13629): WARNING **: Trying to register gtype 'GDriveStartFlags' as enum when in fact it is of type 'GFlags'&lt;/p&gt;
&lt;p&gt;** (gvim:13629): WARNING **: Trying to register gtype 'GSocketMsgFlags' as enum when in fact it is of type 'GFlags'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些警告是GTK或其它一些程序库的Bug造成的，虽然只在虚拟终端中启动Vim时会显示并且不影响使用，但总会有警告恐惧症患者会觉得这种东西很闹心。如果这样，就把这个选项的值设成0，用回巨型浏览器好了。&lt;/p&gt;
&lt;p&gt;本次更新的全部内容如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feature: Add a tiny web browser to do previewing, which starts much faster than full-functional browsers like firefox and chromium. The later ones are still supported. The matter that whether or not to use the new previewer is controlled by a new option &lt;strong&gt;ub_use_ubviewer&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Bugfix: Issue 7: Keywords highlighting is disabled in item lists, even if searches are made manually.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关于UB的详细信息在&lt;a href="http://0x3f.org/posts/ultrablog-as-an-ultimate-vim-blogging-plugin/"&gt;这里&lt;/a&gt;。&lt;/p&gt;</description></item><item><title>UltraBlog.vim v3.4.0: 正则表达式、批量替换和调试模式</title><link>http://0x3f.org/posts/ultrablog-v340-released/</link><pubDate>Sun, 29 Apr 2012 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/ultrablog-v340-released/</guid><description>&lt;p&gt;这次的更新主要引入了支持正则表达式的全文检索、批量替换和调试模式。&lt;/p&gt;
&lt;h2&gt;正则表达式&lt;/h2&gt;
&lt;p&gt;我一直觉得原来的全文检索有一个遗憾，虽然可以通过多个关键词实现较为精确的查询，但还是不如正则表达式灵活和精确。&lt;/p&gt;
&lt;p&gt;这是个蓄谋已久的需求，但直到真正做起来，才发现很多有意思的东西。虽然SQLite3提供支持正则表达式查询的&lt;strong&gt;“REGEX”&lt;/strong&gt;关键词，但并没有实际实现这个功能，而是需要写程序实现并在数据库接口中注册这个函数：&lt;/p&gt;
```python
import sqlite3

conn = sqlite3.connect('/tmp/your-database-file.db')

# 使用正则表达式匹配给定内容的函数，返回布尔类型
def regexp_search(expr, item):
 """Check if the item has a sub-string which matches the expr"""
 reg = re.compile(expr)
 return reg.search(item) is not None

# 在数据库中注册这个函数
conn.create_function('REGEXP', 2, regexp_search)

cur = conn.execute('select id,title from post where content REGEXP ?', '\babc\b')
row = cur.fetchone()
print row

conn.close()
```

&lt;p&gt;在SQLAlchemy中具体的实现方式是：&lt;/p&gt;
```python
# 注册函数
dbe = sqlalchemy.create_engine("sqlite:///tmp/your-database-file.db")
conn = dbe.connect()
conn.connection.create_function('REGEXP', 2, regexp_search)

# 在SQL Expression Language中创建查询条件
tbl = Post.__table__
cond_1 = tbl.c.title.op('regexp')(r'\babc\b')
cond_2 = tbl.c.content.op('regexp')(r'\babc\b')
```

&lt;p&gt;和普通的全文检索一样，正则表达式的全文检索也支持使用多个表达式作为查询条件，多个条件之间是与的关系。现在可以这样查询所有包含“UltraBlog.vim”但不把推广代码算在内的文章了：&lt;/p&gt;</description></item><item><title>UltraBlog.vim v3.3.0：I18N、超时时间和其它</title><link>http://0x3f.org/posts/ultrablog-v330-released/</link><pubDate>Sun, 15 Apr 2012 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/ultrablog-v330-released/</guid><description>&lt;p&gt;UB一岁了，这算是个周年纪念版吧。&lt;/p&gt;

&lt;p&gt;在这一年里，因为各种原因，博客写得没有以前多了，但每篇都是用这个插件写的，我觉得很好用。断断续续地做了一些修改，因为一切都是一个人在做，所以大的变化不多。这次这个版本里有些改动还是要感谢&lt;a href="http://ihacklog.com/"&gt;荒野无灯&lt;/a&gt;童鞋，他的&lt;a href="https://github.com/xbot/UltraBlog.vim/issues/3"&gt;建议&lt;/a&gt;很大程度上催生了这个新版本：比如加入保存命令的热键映射选项，这样可以使用保存普通文件的热键保存UB中的内容，我自己以前也经常习惯性地用错热键；还有socket超时时间的选项，最近我这里也经常性地在UB操作博客时报超时的异常，荒童鞋关于自定义socket超时时间的建议一语惊醒了梦中人。&lt;/p&gt;

&lt;p&gt;此外，似乎与近期Vim的一次升级&lt;a href="http://comments.gmane.org/gmane.editors.vim.devel/34092"&gt;有关&lt;/a&gt;，在Vim中调用Python接口打印任何内容到标准IO都会导致Vim崩溃，所以这次把所有的输出都改成了调用Vim的输出命令来做。&lt;/p&gt;

&lt;p&gt;本次修改的内容中，还有一项比较重要的内容就是实现了国际化，目前只提供英文和简体中文两种语言，由于Vimball不能处理二进制文件，所以从此以后UB改用zip格式压缩包打包。&lt;/p&gt;

&lt;p&gt;以下是本次更新的详细内容：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Feature: Add i18n support !&lt;/li&gt;
&lt;li&gt;Feature: Add a new option &lt;strong&gt;ub_hotkey_save_current_item&lt;/strong&gt;, users can define their own hotkey for &lt;strong&gt;:UBSave&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Feature: Add a new option &lt;strong&gt;ub_socket_timeout&lt;/strong&gt;, users can customize the timeout period in seconds, useful for slow networks.&lt;/li&gt;
&lt;li&gt;Bugfix: Exception raised when one event is processed by more than one event handlers.&lt;/li&gt;
&lt;li&gt;Change: Echoing messages now uses the command :echoerr instead of python's sys.stderr, because Vim crashes on this due to an upgrade recently.&lt;/li&gt;
&lt;li&gt;Change: Change commands &lt;strong&gt;:UBSave&lt;/strong&gt;, &lt;strong&gt;:UBSend&lt;/strong&gt;, &lt;strong&gt;:UBUpload&lt;/strong&gt;, &lt;strong&gt;:UBConv&lt;/strong&gt;, &lt;strong&gt;:UBPreview&lt;/strong&gt; to be available only in their effective views.&lt;/li&gt;
&lt;li&gt;Change: Lists are set nowrapped.&lt;/li&gt;
&lt;li&gt;Bugfix: Stop complaining '&lt;strong&gt;_pop from empty list_&lt;/strong&gt;' while doing almost everything.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于UB的详细信息在&lt;a href="http://0x3f.org/posts/ultrablog-as-an-ultimate-vim-blogging-plugin/"&gt;这里&lt;/a&gt;。&lt;/p&gt;</description></item><item><title>TurboCRM Cluster Express v1.0 释出</title><link>http://0x3f.org/posts/turbocrm-cluster-express-v1-released/</link><pubDate>Sun, 08 Apr 2012 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/turbocrm-cluster-express-v1-released/</guid><description>&lt;p&gt;TurboCRM Cluster Express是TurboCRM的集群实施工具。&lt;/p&gt;

&lt;p&gt;&lt;img src="http://pic.yupoo.com/leninlee/BSfJUW1x/medium.jpg" alt="illustration" /&gt;&lt;/p&gt;

&lt;p&gt;去年我曾经写过一个配置集群的Bash脚本“cluster.sh”，TCE是对这个脚本的图形界面封装，通过可视化的操作简化集群的实施工作。&lt;/p&gt;

&lt;p&gt;TCE的最新版本和使用说明可以在&lt;a href="http://xbot.github.com/TurboCRM-Cluster-Express/"&gt;这里&lt;/a&gt;找到。&lt;/p&gt;

&lt;p&gt;Posted via &lt;a href="http://0x3f.org/posts/ultrablog-as-an-ultimate-vim-blogging-plugin/"&gt;UltraBlog.vim&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>关于PyGTK.CellRenderer的回调方法中聚焦异常的问题</title><link>http://0x3f.org/posts/the-focus-issue-of-pygtk-cellrenderer/</link><pubDate>Sun, 25 Mar 2012 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/the-focus-issue-of-pygtk-cellrenderer/</guid><description>&lt;p&gt;遇到这样一个问题：&lt;/p&gt;

&lt;p&gt;在pygtk.TreeView中，需要在一个Cell的值被修改后做一个校验，如果不合法，则重新聚焦该Cell并选中其中的内容。&lt;/p&gt;

&lt;p&gt;示意代码如下：&lt;/p&gt;

```python
# pygtk.CellRenderer的edited事件的回调方法
def onCellEdited(self, cell, path, newText, userData):
 store,colNum = userData
 # 使用事件驱动的设计理念，创建一个自定义的事件
 evt = ServerTypeChangedEvent(self, cell, usrData)

 # 事件入队列
 EventQueue.fireEvent(evt)
 # 处理事件队列，如果截获异常，提示并重新聚焦Cell
 try:
 EventQueue.processEvents()
 except Exception,e:
 self.alert(e.message)
 col = self.treeView.get_column(colNum-1)
 # 聚焦Cell，并选中Cell中的内容
 self.treeView.set_cursor_on_cell(path, col, cell, True)
```

&lt;p&gt;关键的代码在最后一行，通过调用TreeView的set_cursor_on_cell方法聚焦Cell并选中其内容。但就是这一步出了问题，报如下警告：&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;GtkWarning: _gtk_tree_view_column_start_editing: assertion `tree_column-&gt;editable_widget == NULL' failed&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;此后整个TreeView的行为表现不正常，表现为可直接修改其它Cell的内容，且原Cell一直处于聚焦状态。&lt;/p&gt;

&lt;p&gt;此问题的原因是：edited事件在Cell的输入控件被销毁前就发出了，这时在事件的回调方法中重新聚焦该Cell就导致了这个问题（&lt;em&gt;详见&lt;a href="http://www.gtkforums.com/viewtopic.php?t=4619"&gt;这里&lt;/a&gt;&lt;/em&gt;）。&lt;/p&gt;

&lt;p&gt;解决方法是借助glib.idle_add函数，在PyGTK空闲的时候再调用set_cursor_on_cell方法，由于此时原控件已被销毁，所以不会有问题。&lt;/p&gt;

&lt;p&gt;修改后的代码如下：&lt;/p&gt;

```python
def onCellEdited(self, cell, path, newText, userData):
 store,colNum = userData
 evt = ServerTypeChangedEvent(self, cell, usrData)

 EventQueue.fireEvent(evt)
 try:
 EventQueue.processEvents()
 except Exception,e:
 self.alert(e.message)
 col = self.treeView.get_column(colNum-1)
 #self.treeView.set_cursor_on_cell(path, col, cell, True)
 import glib
 glib.idle_add(self.treeView.set_cursor_on_cell, path, col, cell, True)
```

&lt;p&gt;Posted via &lt;a href="http://0x3f.org/posts/ultrablog-as-an-ultimate-vim-blogging-plugin/"&gt;UltraBlog.vim&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>YYeTs.py：人人影视BT种子下载辅助脚本</title><link>http://0x3f.org/posts/yyets-torrents-download-script/</link><pubDate>Mon, 14 Nov 2011 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/yyets-torrents-download-script/</guid><description>&lt;p&gt;这是最好的时代，这是最坏的时代。现在还有像&lt;a href="ftp://zhongzi.yyets.net"&gt;人人影视的BT种子FTP&lt;/a&gt;这样的站点，实在不容易。但是所有种子列在一块，想看看最近几天都更新了甚么都很困难，于是早想写个脚本省时省力。这周末终于实现了这个想法。&lt;/p&gt;

&lt;h2&gt;主要功能&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;按关键词查询种子&lt;/li&gt;
&lt;li&gt;限制查询范围为最近几天新增的&lt;/li&gt;
&lt;li&gt;下载符合查询条件的种子，允许下载前编辑任务列表&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;使用说明&lt;/h2&gt;

&lt;h3&gt;环境&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Python 2.7，不支持Python3&lt;/li&gt;
&lt;li&gt;Mac OS X Lion，Archlinux测试通过，理论上支持Windows&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;配置&lt;/h3&gt;

&lt;p&gt;如果需要编辑下载任务列表（&lt;em&gt;即使用-s选项&lt;/em&gt;），应事先配置环境变量&lt;strong&gt;YYETS_EDITOR&lt;/strong&gt;，将值设定为一个文本编辑器的路径，或者修改脚本的私有属性&lt;strong&gt;__editor__&lt;/strong&gt;也一样。如果这两个位置都没有设置，则使用环境变量&lt;strong&gt;EDITOR&lt;/strong&gt;。否则，将报“&lt;strong&gt;Command not found&lt;/strong&gt;”的错误。&lt;/p&gt;

&lt;p&gt;有一点提示，如果使用GVim或MacVim，需要加上选项&lt;strong&gt;-f&lt;/strong&gt;，以阻塞的方式启动它，否则会导致下载结果不能达到预期。例如对于MacVim，可配置&lt;strong&gt;YYETS_EDITOR&lt;/strong&gt;为：&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;mvim -f&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;使用举例&lt;/h3&gt;

```bash
# 列出所有种子
./yyets.py

# 搜索关键词
./yyets.py 猩球崛起 1080p

# 搜索最近三天新增的种子
./yyets.py --past=3

# 搜索最近七天内新增的、满足关键词条件的种子
./yyets.py --past=7 蓝精灵

# 下载满足查询条件的种子
./yyets.py -d --past=30 1080p

# 下载满足查询条件的种子，下载前编辑任务列表
./yyets.py -d -p --past=30 1080p

# 更多详细信息，参阅帮助
./yyets.py -h
./yyets.py --help
```

&lt;h3&gt;下载&lt;/h3&gt;

&lt;p&gt;移步GitHub获取最新版本：&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/xbot/shell"&gt;https://github.com/xbot/shell&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Posted via &lt;a href="http://0x3f.org/posts/ultrablog-as-an-ultimate-vim-blogging-plugin/"&gt;UltraBlog.vim&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>UltraBlog.vim v3.1释出：代码重构与MacVim支持</title><link>http://0x3f.org/posts/ultrablog-v310-released/</link><pubDate>Sat, 05 Nov 2011 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/ultrablog-v310-released/</guid><description>&lt;p&gt;距离上一个版本的释出已经有三个月了，这次新版并没有增加多少功能性的内容，主要是代码的重构和对在MacVim下稳定性的改进。&lt;/p&gt;

&lt;p&gt;对依赖关系检查的不细致导致了一些麻烦，抛出的错误信息有时与实际原因相距甚远。由于开始时是以实现功能为主，所以都是直接用函数实现的，之后修修补补，代码冗余而且维护麻烦。于是著手重构主要功能的源码，面向对象，把所有检查逻辑放到父类中去实现，子类只关注自身逻辑，最后新版减少了二百多行的代码量。&lt;/p&gt;

&lt;p&gt;在重构的过程中偶然发现，在MacVim中，程序抛出任何异常，即便是有捕获逻辑，也会导致编辑器崩溃。在&lt;a href="http://stackoverflow.com/questions/5574702/how-to-print-to-stderr-in-python"&gt;这里&lt;/a&gt;简略地提到：&lt;/p&gt;

&lt;blockquote&gt;
 &lt;p&gt;the failure was actual a crash, through some strange combination of threading, matplotlib pyplot backend, and ssh X11 forwarding, sys.stderr had somehow been assigned to something which python complained wasn't a file-like object&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;于是将所有标准输出与标准错误输出语句换成另一种形式：&lt;/p&gt;

```python
# 原形式
sys.stdout.write('xxx')
sys.stderr.write('xxx')

# 新形式
print &gt;&gt; sys.stdout, 'xxx'
print &gt;&gt; sys.stderr, 'xxx'
```

&lt;p&gt;以上是新版主要变更的内容，此外，也顺便解决了开发过程中发现的个别Bug和做了其它一些改动：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Change: The key "xmlrpc" of the settings list is dropped, a new one with the name "url" is added, you should set its value to the blog url.&lt;/li&gt;
&lt;li&gt;Change: Source code refactorings.&lt;/li&gt;
&lt;li&gt;Change: Solve the crash problem existing in MacVim only.&lt;/li&gt;
&lt;li&gt;Change: &lt;strong&gt;:UBConv&lt;/strong&gt; can be used in any buffer.&lt;/li&gt;
&lt;li&gt;Change: &lt;strong&gt;:UBThis&lt;/strong&gt; now has a third parameter, which enables convertions between syntaxes.&lt;/li&gt;
&lt;li&gt;Bugfix: The second parameter of &lt;strong&gt;:UBThis&lt;/strong&gt; cannot take effect.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这也是将源码从Google Code迁移到GitHub后发布的第一个新版本，更详细的信息请移步&lt;a href="http://0x3f.org/posts/ultrablog-as-an-ultimate-vim-blogging-plugin/"&gt;插件主页&lt;/a&gt;或GitHub上的&lt;a href="https://github.com/xbot/UltraBlog.vim"&gt;代码仓库&lt;/a&gt;。&lt;/p&gt;</description></item><item><title>UltraBlog.vim v3.0释出：全文检索与事件驱动</title><link>http://0x3f.org/posts/ultrablog-v300-released/</link><pubDate>Mon, 25 Jul 2011 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/ultrablog-v300-released/</guid><description>&lt;p&gt;用了一周的业余时间，昨天我释出了&lt;a href="http://0x3f.org/posts/ultrablog-as-an-ultimate-vim-blogging-plugin/"&gt;UltraBlog.vim&lt;/a&gt;的3.0版。新版本主要加入了全文检索的功能，并引入事件驱动的模式。&lt;/p&gt;

&lt;p&gt;全文检索是我蓄谋已久的功能，一个不能搜索的博客客户端的管理功能是大打折扣的。得益于SQLite数据库和SQLAlchemy框架，全文检索的实现是很简单的，新增加的&lt;code&gt;:UBFind&lt;/code&gt;命令将在所有文章和页面的标题与内容中查询，并将搜索结果显示在一个可分页的列表中。这个命令支持任意多个关键词，各关键词之间遵循与的关系。此外，检索结果中，所有的关键词将被自动标记为高亮。&lt;/p&gt;

&lt;p&gt;事件驱动模式的引入是我悍然将版本号跳跃到3.x的主要原因。&lt;/p&gt;

&lt;p&gt;在前几个版本中，我实现了对多窗口的支持，它使得用户可以在新窗口中打开列表中的文章。但UltraBlog.vim最初开发的时候并没有考虑到多窗口的问题，所有命令都只针对当前窗口进行操作。这就有了缓冲区内容同步的问题，假如在一个新的缓冲区中打开了和另一个缓冲区相同的文章，则一个缓冲区内容的改变不会同步到另外一个中，这多少是有些隐患的。&lt;/p&gt;

&lt;p&gt;最直接的做法是在所有可能改变缓冲区内容的功能中加入对其它缓冲区的处理，但这样做有不少问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;代码耦合度太高，违反K.I.S.S原则，不利于今后的开发和维护&lt;/li&gt;
&lt;li&gt;函数体过长，我讨厌难看的代码&lt;/li&gt;
&lt;li&gt;代码冗余，重复劳动&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;事件驱动模式可以很好的解决以上问题，一个函数只干一件事，做完后一个事件抛出去，至于连带著要做什么，谁监听这个事件谁去处理，代码的耦合度很低，复用度很高，易于维护和阅读。&lt;/p&gt;

&lt;p&gt;UltraBlog.vim引入事件驱动模式处理缓冲区同步的问题。不同的操作抛出不同的事件，所有的事件继承自父类&lt;strong&gt;UBEvent&lt;/strong&gt;：&lt;/p&gt;

```python
class UBEvent:
 def __init__(self, srcObj):
 self.srcObj = srcObj

class UBDebugEvent(UBEvent): pass
class UBTmplDelEvent(UBEvent): pass
class UBTmplSaveEvent(UBEvent): pass
class UBLocalPostDelEvent(UBEvent): pass
class UBRemotePostDelEvent(UBEvent): pass
class UBPostSendEvent(UBEvent): pass
class UBPostSaveEvent(UBEvent): pass
```

&lt;p&gt;一个可能改变缓冲区内容的操作执行完后，创建一个特定的事件并将其加入到事件队列中。事件队列类中存放两个列表，一是事件队列，二是事件监听器列表；提供三个方法，分别用来注册事件监听器、对事件执行入队列操作和处理队列中所有事件：&lt;/p&gt;

```python
class UBEventQueue:
 queue = []
 listeners = []

 @classmethod
 def fireEvent(cls, evt):
 cls.queue.append(evt)

 @classmethod
 def processEvents(cls):
 for evt in cls.queue:
 for listener in cls.listeners:
 if listener.isTarget(evt):
 cls.queue.remove(evt)
 listener.processEvent(evt)

 @classmethod
 def registerListener(cls, lsnr):
 cls.listeners.append(lsnr)
```

&lt;p&gt;事件队列对事件的处理是通过事件监听器进行的，每个事件监听器要实现两个功能：识别监听对象和处理监听对象。所有具体事件的监听类都是&lt;strong&gt;UBListener&lt;/strong&gt;的子类：&lt;/p&gt;</description></item><item><title>UltraBlog.vim v2.3.0 Released With Templates</title><link>http://0x3f.org/posts/ultrablog-v230-released/</link><pubDate>Mon, 13 Jun 2011 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/ultrablog-v230-released/</guid><description>&lt;p&gt;I released the new version 2.3.0 of &lt;a href="http://0x3f.org/posts/ultrablog-as-an-ultimate-vim-blogging-plugin/"&gt;UltraBlog.vim&lt;/a&gt; last week. The main improvement in this version is that templates are introduced in.&lt;/p&gt;

&lt;p&gt;Templates are simply HTML strings, they are used to preview posts/pages in the browser locally. This feature is a reparation for the remote previewing, due to the limit of the API, users cannot send a post to Wordpress as draft and preview it without affecting the post status if the post has been published. With templates, they do not have to send drafts to blogs to preview the final effect, but preview drafts directly in the browser in a pre-defined style. Templates can be created as many as users like and their looks can be customized with CSS, HTML and Javascript.&lt;/p&gt;</description></item><item><title>UltraBlog.vim开发手记</title><link>http://0x3f.org/posts/ultrablog-development-note/</link><pubDate>Mon, 11 Apr 2011 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/ultrablog-development-note/</guid><description>&lt;p&gt;对于&lt;a href="http://blog.sina.com.cn/s/blog_694377f90100rmko.html"&gt;博客已死&lt;/a&gt;的说法，我一点都不感到奇怪。早在几年前博客还比较火的时候我就表达过对博客泡沫的&lt;a href="http://0x3f.org/?p=209"&gt;看法&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;经历了短暂的&lt;a href="http://0x3f.org/?p=354"&gt;tumblog&lt;/a&gt;的风头，微博成为现在最火的媒介。说博客已死，无非就是说微博将成为个人信息传播的主流。好吧，现在我知道那时候我所说的不懂什么是博客的人都去干什么了。&lt;/p&gt;

&lt;p&gt;但是博客还是会继续发展，微博的兴起只会减少滥竽充数。因为微博突出的是时效性，最缺乏的是系统性和可重复更新的能力。微博的短处，正是博客的长处。这让我对博客有了一个新的、迟到了很久的认识──一个好的博客，它的文章不应该是写掉就忘的，而应该是不断地更新著的。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0x3f.org/posts/ultrablog-as-an-ultimate-vim-blogging-plugin/"&gt;UltraBlog.vim&lt;/a&gt;就是出于这个需要而写的。&lt;/p&gt;

&lt;p&gt;我对博客客户端的使用大概可以追溯到四五年前，那时候博客正火，在比较了几个&lt;a href="http://en.wikipedia.org/wiki/Blog_service_provider"&gt;BSP&lt;/a&gt;后选择了&lt;a href="http://www.blogcn.com/"&gt;中国博客网&lt;/a&gt;，就是因为他们提供桌面客户端。后来独博之后也试用过几个通用的客户端，但都没坚持多久，最根本的原因是它们几乎无一例外地都是&lt;a href="http://zh.wikipedia.org/wiki/%E6%89%80%E8%A6%8B%E5%8D%B3%E6%89%80%E5%BE%97"&gt;WYSIWYG&lt;/a&gt;。而WYSIWYG的编辑器生成的HTML源码几乎都使用inline的样式，这就导致文章的排版布局很难控制，我对WYSIWYG其实是很抵触的，至今都不怎么用Office这类东西。&lt;/p&gt;

&lt;p&gt;后来我意识到，我所需要的是样式与内容分离，于是准备自己写一个&lt;a href="http://0x3f.org/?p=331"&gt;客户端&lt;/a&gt;，后来由于工作的原因不了了之。与此同时，我自定义了一套文章格式并用Java写了一个转换文章到HTML的&lt;a href="http://0x3f.org/?p=342"&gt;工具&lt;/a&gt;，直到后来发现&lt;a href="http://0x3f.org/?p=383"&gt;Markdown&lt;/a&gt;，我才知道我其实是需要一个轻量标记语言。&lt;/p&gt;

&lt;p&gt;使用Markdown之后，写博客开始变得轻松愉快。我一度用过一段时间&lt;a href="http://www.scintilla.org/SciTE.html"&gt;SciTE&lt;/a&gt;，还用&lt;a href="http://zh.wikipedia.org/wiki/Lua"&gt;Lua&lt;/a&gt;写了个&lt;a href="http://0x3f.org/?p=499"&gt;辅助脚本&lt;/a&gt;。但是我需要一个完整的客户端来管理文章，而这是一个编辑器所不能胜任的，所以就著手实现一个支持Markdown的&lt;a href="http://0x3f.org/?p=812"&gt;客户端&lt;/a&gt;。这一次走得比较远，&lt;a href="http://0x3f.org/?p=812"&gt;ForeverFantasy&lt;/a&gt;最终达到了可用的程度，我一度用它写过一段时间的博客。但是作为一个Vim重症患者，wxPython的编辑器部件是远远达不到我需要的水平的。虽然后来还&lt;a href="http://0x3f.org/?p=1409"&gt;实现&lt;/a&gt;了调用外部程序处理文章内容（&lt;em&gt;当然也可以调用Vim&lt;/em&gt;），但总归觉得不舒服，至今已经一年没更新了。&lt;/p&gt;

&lt;p&gt;直到前段时间试用了一下&lt;a href="http://0x3f.org/?p=1861"&gt;VimRepress&lt;/a&gt;，在修改这个插件的时候突然受到启发，我这几年的需求原来是可以这么简单地解决的。&lt;/p&gt;

&lt;p&gt;其实在几年前&lt;a href="http://www.vim.org/scripts/script.php?script_id=1953"&gt;vimpress&lt;/a&gt;刚刚发布的时候我就了解过这个东西，包括此后接连发布的几个Vim写博客的插件，它们和我原来写的SciTE的那个辅助脚本没有本质的区别，都是博客编辑器。与完整的客户端相比，编辑器缺少对本地文章源码的管理，而且它们不记录文章源码和发布的文章的关联关系，简单地说是无状态的。这不符合博客文章持续更新的观点。&lt;/p&gt;

&lt;p&gt;UltraBlog.vim使用&lt;a href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt;做数据库抽象层，将所有文章的源码及其状态保存在本地的一个SQLite数据库中，并且以此为基础，通过&lt;a href="http://en.wikipedia.org/wiki/XML-RPC"&gt;XMLRPC&lt;/a&gt;接口实现对博客文章、页面的&lt;a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete"&gt;CRUD&lt;/a&gt;操作。同时利用Vim分模式的特点实现了可分页的文章列表和文章编辑视图。&lt;/p&gt;

&lt;p&gt;UltraBlog.vim目前支持Markdown和HTML两种格式的文章，它最大的特点是在Markdown格式的源码和发布到博客中的文章之间建立联系，你可以随时修改本地数据库中的Markdown源码并更新博客中对应的文章。&lt;/p&gt;

&lt;p&gt;新的功能还会不断地加入。&lt;/p&gt;

&lt;p&gt;Posted via &lt;a href="http://0x3f.org/posts/ultrablog-as-an-ultimate-vim-blogging-plugin/"&gt;UltraBlog.vim&lt;/a&gt;.&lt;/p&gt;</description></item><item><title>UltraBlog.vim: Ultimate Vim Blogging Plugin</title><link>http://0x3f.org/posts/ultrablog-as-an-ultimate-vim-blogging-plugin/</link><pubDate>Sat, 02 Apr 2011 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/ultrablog-as-an-ultimate-vim-blogging-plugin/</guid><description>&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;UltraBlog.vim is yet another Vim blogging script for Wordpress.&lt;/p&gt;
&lt;p&gt;The biggest difference between UB and other similar scripts is that UB is an ultimate client, which stores posts locally in an SQLite database, while others just operate remotely. In this way, many things can be done easily by the advantage of local storage and many other utilities, for example, you can search for posts stored in the database with a few keywords by typing a simple command, also you can preview drafts with any of your favorite templates as soon as you want to.&lt;/p&gt;</description></item><item><title>使用Vim写博客</title><link>http://0x3f.org/posts/blogging-with-vim/</link><pubDate>Sat, 19 Mar 2011 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/blogging-with-vim/</guid><description>&lt;p&gt;&lt;a href="http://www.vim.org/scripts/script.php?script_id=3510"&gt;VimRepress&lt;/a&gt;是Vim写博客的插件中较新的一个，是久未更新的&lt;a href="http://www.vim.org/scripts/script.php?script_id=1953"&gt;Vimpress&lt;/a&gt;的一个衍生版。&lt;/p&gt;

&lt;p&gt;虽然不是所有此类插件中功能最多的一个，但VimRepress非常实用，除包含最常用的几个功能外，还支持&lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;。但是当前版本的VimRepress在转换Markdown格式的字符串到HTML时，是通过直接调用外部命令&lt;strong&gt;markdown&lt;/strong&gt;来实现的，这显然只是针对Linux（及其它类UNIX）系统设计的。&lt;/p&gt;

&lt;p&gt;为了使VimRepress支持在Windows下使用Markdown写文章，可以对它做一些改进。&lt;/p&gt;

&lt;p&gt;修改VimRepress的源文件&lt;strong&gt;blog.vim&lt;/strong&gt;，在&lt;code&gt;if __name__ == "__main__":&lt;/code&gt;这一行的上方加入如下两个函数：&lt;/p&gt;

&lt;p&gt;
```python
def markdown_preview2():
 import sys
 reload(sys)
 sys.setdefaultencoding('utf-8')
 import markdown2 as mkd

 global vimpress_temp_dir
 if vimpress_temp_dir == '':
 vimpress_temp_dir = tempfile.mkdtemp(suffix="vimpress")
 temp_htm = os.path.join(vimpress_temp_dir, "vimpress_temp.htm")
 html_heads = \
"""&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
&lt;head&gt;
 &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
&lt;/head&gt;
&lt;body&gt;
"""
 tmp_file = open(temp_htm, 'w')
 tmp_file.write(html_heads)
 txt = "\n".join(vim.current.buffer[:])
 #txt = unicode(txt,'cp936')
 tmp_file.write(mkd.markdown(txt))
 #tmp_file.write(mkd.markdown("\n".join(vim.current.buffer[:])))
 tmp_file.close()

 webbrowser.open("file://%s" % temp_htm)

def markdown_newpost2():
 import sys
 reload(sys)
 sys.setdefaultencoding('utf-8')
 import markdown2 as mkd

 global vimpress_temp_dir
 if vimpress_temp_dir == '':
 vimpress_temp_dir = tempfile.mkdtemp(suffix="vimpress")
 temp_htm = os.path.join(vimpress_temp_dir, "vimpress_post.htm")

 title = ""
 title_s = 0
 try:
 while title_s &lt; 10:
 if vim.current.buffer[title_s].startswith("#"):
 title = vim.current.buffer[title_s].strip('#')
 break
 title_s += 1
 except IndexError:
 pass

 cur_file = vim.eval('expand("%:p")')
 if cur_file is None: 
 cur_file = os.path.join(vimpress_temp_dir, "tmp_vimpress.mkd")
 sys.stdout.write("\n\nCurrent buffer saved to %s\n\n" % cur_file)
 vim.command(":w! %s" % cur_file)
 tmp_file = open(temp_htm, 'w')
 tmp_file.write(mkd.markdown("\n".join(vim.current.buffer[:])))
 tmp_file.close()
 sys.stdout.write("Press ENTER to continue.")
 vim.command(":bdelete")
 vim.command(":r %s" % temp_htm)
 blog_new_post(title = title)
```
&lt;/p&gt;</description></item><item><title>在Vim中检查语法和执行代码</title><link>http://0x3f.org/posts/syntax-checking-and-code-executing-in-vim/</link><pubDate>Sat, 17 Apr 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/syntax-checking-and-code-executing-in-vim/</guid><description>&lt;p&gt;&lt;img src="http://lh3.ggpht.com/_ceUJ_lBTHzc/SaV494hGreI/AAAAAAAAAzY/xExf7CzGyv0/s800/the-mug-of-vi.jpg" alt=""&gt;&lt;/p&gt;
&lt;p&gt;《&lt;a href="http://www.pragprog.com/the-pragmatic-programmer"&gt;The Pragmatic Programmer&lt;/a&gt;》是本好书，虽然中文译名极为恶俗。为践行书中提到的&lt;a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself"&gt;DRY原则&lt;/a&gt;，我开始反思平时编码时总是重复出现的问题，其中之一就是很低级的语法错误，有时忘了语句最后的分号，有时忘了声明变量，凡此种种，不一而足。&lt;/p&gt;
&lt;p&gt;相对于IDE，我更喜欢Vim，这也是语法错误没有检查出来的原因。因此就产生了给Vim添加语法检查功能的需求。下面是检查PHP代码的vimrc内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-vim" data-lang="vim"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&amp;#34; Check the syntax of a PHP file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="nx"&gt;CheckPHPSyntax&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &amp;amp;&lt;span class="k"&gt;filetype&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;php&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;echohl&lt;/span&gt; &lt;span class="nx"&gt;WarningMsg&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;This is not a PHP file !&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;echohl&lt;/span&gt; &lt;span class="nx"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;setlocal&lt;/span&gt; &lt;span class="nx"&gt;makeprg&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;php&lt;/span&gt;\ &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;\ &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;\ &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;\ &lt;span class="nx"&gt;html_errors&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;\ %
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;setlocal&lt;/span&gt; &lt;span class="nx"&gt;errorformat&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;%&lt;span class="nx"&gt;m&lt;/span&gt;\ &lt;span class="nx"&gt;in&lt;/span&gt;\ %&lt;span class="nx"&gt;f&lt;/span&gt;\ &lt;span class="nx"&gt;on&lt;/span&gt;\ &lt;span class="nx"&gt;line&lt;/span&gt;\ %&lt;span class="nx"&gt;l&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;echohl&lt;/span&gt; &lt;span class="nx"&gt;WarningMsg&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Syntax checking output:&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;echohl&lt;/span&gt; &lt;span class="nx"&gt;None&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &amp;amp;&lt;span class="nx"&gt;modified&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;silent&lt;/span&gt; &lt;span class="nx"&gt;write&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;endif&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;silent&lt;/span&gt; &lt;span class="nx"&gt;make&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nx"&gt;clist&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;endfunction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;au&lt;/span&gt; &lt;span class="k"&gt;filetype&lt;/span&gt; &lt;span class="nx"&gt;php&lt;/span&gt; &lt;span class="k"&gt;map&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;F5&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; :&lt;span class="nx"&gt;call&lt;/span&gt; &lt;span class="nx"&gt;CheckPHPSyntax&lt;/span&gt;&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;au&lt;/span&gt; &lt;span class="k"&gt;filetype&lt;/span&gt; &lt;span class="nx"&gt;php&lt;/span&gt; &lt;span class="nx"&gt;imap&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;F5&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ESC&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;:&lt;span class="nx"&gt;call&lt;/span&gt; &lt;span class="nx"&gt;CheckPHPSyntax&lt;/span&gt;&lt;span class="p"&gt;()&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;CR&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;以上脚本为Vim添加了一个检查PHP语法错误的函数和两个快捷键映射，此后可按F5键即时检查当前Buffer中的PHP当面的语法。和网上其它同类的函数相比，这个函数的优点在于改进了检查结果的显示，使用silent命令隐藏了所有不必要的输出。&lt;/p&gt;</description></item><item><title>phpsh：PHP的交互式解释器</title><link>http://0x3f.org/posts/phpsh/</link><pubDate>Mon, 29 Mar 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/phpsh/</guid><description>&lt;p&gt;时常需要测试一些简短的代码是否能得到需要的结果，如果去写测试脚本再执行，显然太麻烦。虽然PHP自身也支持通过&lt;strong&gt;&lt;em&gt;-a&lt;/em&gt;&lt;/strong&gt;参数启动交互模式，但功能较为局限。如果PHP有像&lt;a href="http://bpython-interpreter.org/"&gt;bpython&lt;/a&gt;那样的交互式解释器，就太好了。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.phpsh.org/"&gt;phpsh&lt;/a&gt;就是这样一个工具，它是由&lt;a href="http://zh.wikipedia.org/wiki/Facebook"&gt;facebook&lt;/a&gt;的开发者用Python实现的PHP的交互式解释器，并具备以下特性：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;命令行历史回溯&lt;/li&gt;
&lt;li&gt;tab键自动补全&lt;/li&gt;
&lt;li&gt;快速文档索引&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>使用cx_Freeze的distutils脚本打包Python程序</title><link>http://0x3f.org/posts/cx-freeze/</link><pubDate>Fri, 26 Mar 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/cx-freeze/</guid><description>&lt;p&gt;cx_Freeze打包Python程序的命令基本格式如下：&lt;/p&gt;

&lt;p&gt;
```python
cxfreeze main.py --target-dir appdir
```
&lt;/p&gt;

&lt;p&gt;它表示把脚本main.py或以main.py为程序入口的程序打包并导出到当前路径中名为&lt;strong&gt;appdir&lt;/strong&gt;的目录中。&lt;/p&gt;

&lt;p&gt;对于Windows下的GUI应用程序，以上面的命令导出后，运行时会弹出&lt;strong&gt;cmd&lt;/strong&gt;命令行的黑窗口，须加上如下命令中的参数：&lt;/p&gt;

&lt;p&gt;
```python
cxfreeze main.py --target-dir appdir --base-name=win32gui
```
&lt;/p&gt;

&lt;p&gt;对于比较复杂的程序，cx_Freeze支持&lt;a href="http://www.ibm.com/developerworks/cn/linux/sdk/python/charm-19/"&gt;distutils&lt;/a&gt;格式的打包脚本，当然，彼此之间在引入的模块和支持的参数上还是有差别的。&lt;/p&gt;

&lt;p&gt;cx_Freeze的文档中有其支持的全部命令参数及说明，写到setup.py脚本中时，所有参数中的&lt;strong&gt;-&lt;/strong&gt;符号应换成下划线。&lt;/p&gt;

&lt;p&gt;我的setup.py内容大致如下：&lt;/p&gt;

&lt;p&gt;
```python
#!/usr/bin/python
# -*- coding: utf-8 -*-
from cx_Freeze import setup,Executable

includefiles = [('settings.ini.jctest','settings.ini')
 ,'README.mkd']
includes = []
excludes = ['Tkinter']
packages = ['sqlalchemy.engine', 'sqlalchemy.orm', 'sqlalchemy.dialects.mssql']

setup(
 name = 'pyutil',
 version = '0.1',
 description = 'A general enhancement utility for XXX',
 author = 'Lenin Lee',
 author_email = 'lenin.lee@xxx.com',
 options = {'build_exe':{'excludes':excludes,'packages':packages,'include_files':includefiles}},
 executables = [Executable('jcitk.py')
 , Executable('jcvfd.py')
 , Executable('jcvdupcr.py')
 , Executable('jcddupcr.py')
 , Executable('jcclostfd.py')
 , Executable('jcvcard.py')
 , Executable('jcvcardii.py')
 , Executable('jcclostsoid.py')]
)
```
&lt;/p&gt;</description></item><item><title>Python控制外部进程的灵异事件</title><link>http://0x3f.org/posts/supernatural-phenomenon-of-controlling-external-processes-in-python/</link><pubDate>Mon, 08 Mar 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/supernatural-phenomenon-of-controlling-external-processes-in-python/</guid><description>&lt;p&gt;春节前的一段时间，重新拾起近一年没动过的&lt;a href="http://0x3f.org/?tag=foreverfantasy"&gt;ForeverFantasy&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;虽然一年内没什么更新，但是我却一直都在用，基本上只限于将用Vim写好的&lt;a href="http://en.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt;格式的文档转换成HTML。&lt;/p&gt;

&lt;p&gt;重写了相当一部分代码，较大程度地改变了界面布局，突然发现经过一年的沉淀，对&lt;a href="http://en.wikipedia.org/wiki/WxPython"&gt;wxPython&lt;/a&gt;的理解增进了不少，开发起来比起去年这个时候清楚了很多。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://picasaweb.google.com/lh/photo/bNRGQr0g6aLuqDUm8EQ6mg?feat=embedwebsite"&gt;&lt;img src="http://lh6.ggpht.com/_ceUJ_lBTHzc/S5UYPQmTAzI/AAAAAAAABUc/znMRxXuE8dE/s400/2010-03-08.23%3A27%3A03.%E5%B7%A5%E4%BD%9C%E5%8C%BA%201.01.png" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这些天来一直坚持着每天或多或少的做一些，如果说有什么主要的进展的话，那就是界面的重构，以及昨天实现了调用Vim编辑文档并回收文档内容的功能。&lt;/p&gt;

&lt;p&gt;ForeverFantasy和Vim协同的一个最大的问题就是如何判断Vim已经退出。Python调用外部程序的方法有很多，比如传统的&lt;a href="http://docs.python.org/library/commands.html"&gt;commands&lt;/a&gt;模块、&lt;a href="http://docs.python.org/library/os.html"&gt;os&lt;/a&gt;.system()等，&lt;a href="http://docs.python.org/library/subprocess.html"&gt;subprocess&lt;/a&gt;是致力于替代这些旧有的方式的一个模块，它的一个特点是可以在启动一个外部程序作为子进程后还能监控这个进程的运行状态。这为ForeverFantasy在Vim退出后回收文档内容提供了更简捷的途径。&lt;/p&gt;

&lt;p&gt;下面的代码可以说明如何使用subprocess运行外部程序并监控运行状态：&lt;/p&gt;

&lt;p&gt;
```python
import subprocess
process = subprocess.Popen('gvim', shell=True)
status = process.poll()
if 0 == status:
 print 'The external program exited.'
if status is None:
 print 'The external program is still running.'
```
&lt;/p&gt;

&lt;p&gt;理论上，可以拿实例process的poll()方法监视进程的运行状态，而且这一点在Windows上也确实可以做到，但是到了Linux下，诡异的事出现了，即使刚刚打开gvim，poll()方法也会马上返回一个0，同时process.pid的值总是和实际在运行的那个gvim进程的pid的值差3，而且在虚拟终端中输入gvim命令也不会阻塞终端，就像别的命令加上“&lt;strong&gt;&amp;amp;&lt;/strong&gt;”符号的效果一样。尝试用&lt;a href="http://en.wikipedia.org/wiki/Strace"&gt;strace&lt;/a&gt;跟踪gvim的运行，试图找到问题原因，无果。我猜想可能/usr/bin/gvim是一个跳板，它启动后会启动一个新的gvim进程。总之，这个方法在Linux下是行不通的。&lt;/p&gt;

&lt;p&gt;因此我觉得只能另寻出路了，既然不能监控gvim进程，那就监控gvim进程所编辑的文件，只要这个文件不被任何进程占用，就可以判定gvim已退出。这一点，在Linux下易如反掌，不用说，&lt;a href="http://en.wikipedia.org/wiki/Lsof"&gt;lsof&lt;/a&gt;当仁不让。&lt;/p&gt;

&lt;p&gt;用&lt;strong&gt;commands.getstatusoutput('lsof file.txt')&lt;/strong&gt;测试发现，如果文件file.txt被某进程占用，则返回的状态值为0，反之，返回256。&lt;/p&gt;

&lt;p&gt;最终，我在程序中使用了两种判断方式，在Windows平台使用subprocess跟踪gvim.exe进程，而在Linux及Unix平台使用lsof检查文档占用情况。&lt;/p&gt;

&lt;p&gt;剩下的就是进行这个判断的时间问题了。&lt;/p&gt;

&lt;p&gt;很显然，如果在子进程被启动后马上使用while循环不停的检查，一来必须使用多线程，二来系统资源占用也会很高。这时就需要利用wxPython的事件机制了，当ForeverFantasy启动Gvim时，主窗口失去焦点，而当Gvim退出时，ForeverFantasy又会获得焦点，只要能在ForeverFantasy窗口获得焦点时做一次检查即可。不过，在选择最合适的事件的问题上，又是一波三折。&lt;/p&gt;

&lt;p&gt;在wxPython的&lt;a href="http://www.wxpython.org/docs/api/frames.html"&gt;API&lt;/a&gt;文档中没有找到&lt;a href="http://wiki.wxpython.org/ListOfEvents"&gt;事件列表&lt;/a&gt;，倒是在&lt;a href="http://wiki.wxpython.org"&gt;Wiki&lt;/a&gt;中找到了。顾名思义，觉得wx.EVT_SET_FOCUS比较靠谱，但试用失败，看API中关于FocusEvent的说明，这个事件适用于窗口控件；然后又试了wx.EVT_CHILD_FOCUS，只有在窗口包含的控件中有获得焦点的情况才会触发；最后才发现&lt;strong&gt;wx.EVT_ACTIVATE&lt;/strong&gt;，这个事件会在窗口失去焦点和获得焦点时各触发一次，使用GetActive()方法可以判断是获得焦点还是失去焦点。&lt;/p&gt;

&lt;p&gt;完成与Vim的协同使ForeverFantasy在我手上由原来单纯的格式转换工具进化为基本可用的文档编辑器，就算是&lt;strong&gt;Milestone 2&lt;/strong&gt;吧。&lt;/p&gt;

&lt;p&gt;此外，还有一些小的经验：&lt;/p&gt;

&lt;p&gt;1. 调用非环境变量下的程序，即命令中必须带程序所在的路径时，应当将程序所在目录的完整路径以自然字符串的形式传递给subprocess.Popen类的构造方法的cwd参数，即如下所示：&lt;/p&gt;

&lt;p&gt;
```python
process = subprocess.Popen('gvim.exe', cwd=r'C:\program files\vim\vim72', shell=True)
```
&lt;/p&gt;

&lt;p&gt;这样可以有效避免路径中的空格和特殊字符对命令执行的影响。&lt;/p&gt;

&lt;p&gt;2. Vim编辑一个文档时，实际操作的是一个临时文件，而不是原文件，这个临时文件与原文件同路径，名称为在原文件名的基础上，前面加一个句点，后面加后缀“.swp”。应该用lsof监控这个临时文件，才可以判断出编辑该文档的Vim进程的运行状态。由于对于不存在的文件使用lsof命令的返回值也是256，故可以同时判断临时文件和原文件的占用情况，这样就为对其它编辑器的支持奠定了基础。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2010-03-10 Wednesday 22:52:13 更新&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;感谢KL童鞋和依云童鞋指教，果然加上&lt;strong&gt;-f&lt;/strong&gt;参数就可以了。&lt;/p&gt;</description></item><item><title>SQLAlchemy操作SQL Server的中文问题</title><link>http://0x3f.org/posts/chinese-problem-of-sqlalchemy-with-sqlserver/</link><pubDate>Wed, 24 Feb 2010 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/chinese-problem-of-sqlalchemy-with-sqlserver/</guid><description>&lt;p&gt;最初将脚本的文件编码和coding行都设定为UTF-8，在windows下执行时，中文无法保存，报编码错误。将上述两个编码改为GBK后，保存正常，但查询时报错。&lt;/p&gt;

&lt;p&gt;Traceback内容如下：&lt;/p&gt;

```
Traceback (most recent call last):
File "test.py", line 36, in &lt;code&gt;&amp;lt;module&amp;gt;&lt;/code&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for obj in session.query(User):
File "C:\Python26\lib\site-packages\sqlalchemy-0.6beta1-py2.6.egg\sqlalchemy\orm\query.py", line 1411, in instances
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;rows = [process[0](row, None) for row in fetch]
File "C:\Python26\lib\site-packages\sqlalchemy-0.6beta1-py2.6.egg\sqlalchemy\orm\mapper.py", line 1788, in _instance
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;populate_state(state, dict_, row, isnew, only_load_props)
File "C:\Python26\lib\site-packages\sqlalchemy-0.6beta1-py2.6.egg\sqlalchemy\orm\mapper.py", line 1677, in populate_state
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;populator(state, dict_, row, isnew=isnew, **flags)
File "C:\Python26\lib\site-packages\sqlalchemy-0.6beta1-py2.6.egg\sqlalchemy\orm\strategies.py", line 118, in new_execute
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;dict_[key] = row[col]
File "C:\Python26\lib\site-packages\sqlalchemy-0.6beta1-py2.6.egg\sqlalchemy\engine\base.py", line 1634, in __getitem__
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return self.__colfuncs[key][0](self.__row)
File "C:\Python26\lib\site-packages\sqlalchemy-0.6beta1-py2.6.egg\sqlalchemy\engine\base.py", line 1716, in getcol
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return processor(row[index])
File "C:\Python26\lib\site-packages\sqlalchemy-0.6beta1-py2.6.egg\sqlalchemy\types.py", line 568, in process
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return decoder(value)[0]
File "C:\Python26\lib\encodings\utf_8.py", line 16, in decode
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return codecs.utf_8_decode(input, errors, True)
UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)&lt;/p&gt;</description></item><item><title>欧拉工程第十一解</title><link>http://0x3f.org/posts/project-euler-11/</link><pubDate>Tue, 12 May 2009 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-11/</guid><description>&lt;blockquote&gt;
 &lt;p&gt;In the 20×20 grid below, four numbers along a diagonal line have been marked in red.&lt;/p&gt;
 
 &lt;p&gt;08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
 49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
 81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
 52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
 22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
 24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
 32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
 67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
 24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
 21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
 78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
 16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
 86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
 19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
 04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
 88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
 04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
 20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
 20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
 01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48&lt;/p&gt;</description></item><item><title>欧拉工程第十解</title><link>http://0x3f.org/posts/project-euler-10/</link><pubDate>Tue, 18 Nov 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-10/</guid><description>&lt;blockquote&gt;&lt;p&gt;The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.&lt;/p&gt;

&lt;p&gt;Find the sum of all the primes below two million.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;题目越来越变态，开始好玩儿了。&lt;/p&gt;

&lt;p&gt;&lt;a href="http://0x3f.org/?p=753"&gt;第七解&lt;/a&gt;里的算法在这里算是废了，一万个素数都算得那么费劲，两百万以下的素数有十几万个，不得不用筛选法了。&lt;/p&gt;

&lt;p&gt;普通的筛选效率也不行，当初就是因为这个原因才没用它。不过优化过的筛选法就很奇妙了，下面是Lua的实现：&lt;/p&gt;

&lt;p&gt;
```lua
require('math')

local limit = 2000000

local primes = {}
for i=1,limit do
 table.insert(primes,true)
end
primes[0] = false
primes[1] = false

for i=0,math.floor(math.sqrt(limit)) do
 if primes[i] then
 for j=math.pow(i,2),limit,i do
 primes[j] = false
 end
 end
end

local sumVal = 0
for i,j in ipairs(primes) do
 if j then
 sumVal = sumVal + i
 end
end

print(sumVal)
```
&lt;/p&gt;</description></item><item><title>欧拉工程第九解</title><link>http://0x3f.org/posts/project-euler-9/</link><pubDate>Mon, 10 Nov 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-9/</guid><description>&lt;blockquote&gt;
&lt;p&gt;A Pythagorean triplet is a set of three natural numbers, &lt;b&gt;&lt;em&gt;a&lt;/em&gt;&lt;/b&gt; &lt; &lt;b&gt;&lt;em&gt;b&lt;/em&gt;&lt;/b&gt; &lt; &lt;b&gt;&lt;em&gt;c&lt;/em&gt;&lt;/b&gt;, for which,&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;em&gt;a&lt;/em&gt;&lt;/b&gt;&lt;sup&gt;2&lt;/sup&gt; + &lt;b&gt;&lt;em&gt;b&lt;/em&gt;&lt;/b&gt;&lt;sup&gt;2&lt;/sup&gt; = &lt;b&gt;&lt;em&gt;c&lt;/em&gt;&lt;/b&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;For example, 3&lt;sup&gt;2&lt;/sup&gt; + 4&lt;sup&gt;2&lt;/sup&gt; = 9 + 16 = 25 = 5&lt;sup&gt;2&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;There exists exactly one Pythagorean triplet for which &lt;b&gt;&lt;em&gt;a&lt;/em&gt;&lt;/b&gt; + &lt;b&gt;&lt;em&gt;b&lt;/em&gt;&lt;/b&gt; + &lt;b&gt;&lt;em&gt;c&lt;/em&gt;&lt;/b&gt; = 1000.
Find the product &lt;b&gt;&lt;em&gt;abc&lt;/em&gt;&lt;/b&gt;.
&lt;/blockquote&gt;


&lt;p&gt;解：&lt;/p&gt;

&lt;p&gt;
```python
flag = False
for a in range(1,1000):
 for b in range(1,1000):
 if a ** 2 + b ** 2 == (1000 - a - b) ** 2:
 print a,b,(1000 - a - b)
 print a * b * (1000 - a - b)
 flag = True
 break
 if flag:
 break
```
&lt;/p&gt;</description></item><item><title>欧拉工程第八解</title><link>http://0x3f.org/posts/project-euler-8/</link><pubDate>Sun, 09 Nov 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-8/</guid><description>&lt;blockquote&gt;&lt;p&gt;Find the greatest product of five consecutive digits in the 1000-digit number.&lt;/p&gt;

&lt;p&gt;73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;穷举，解：&lt;/p&gt;

&lt;p&gt;
```python
def MakeProduct(strNum):
 prod = 1
 for char in strNum:
 prod = prod * int(char)
 return prod
 
def GetTheFirstProduct(strNum):
 if len(strNum) &lt; 5:
 return 0,0
 return MakeProduct(strNum[:5]),strNum[1:]

num = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'

largestProduct = 0
while len(num) &gt;= 5:
 tmp = GetTheFirstProduct(num)
 if tmp == (0,0):
 break
 num = tmp[1]
 if largestProduct &lt; tmp[0]:
 largestProduct = tmp[0]
print largestProduct
```
&lt;/p&gt;</description></item><item><title>欧拉工程第七解</title><link>http://0x3f.org/posts/project-euler-7/</link><pubDate>Fri, 31 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-7/</guid><description>&lt;p&gt;第七解：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.&lt;/p&gt;

&lt;p&gt;What is the 10001st prime number?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;穷举，并加以最大程度的优化：对大于2的素数，只判断奇数；判断一个奇数是否素数时，只拿已经找到的素数中小于第这个数平方根的数来相除，如果均不能整除，就是素数。Python的实现：&lt;/p&gt;

&lt;p&gt;
```python
def IsPrimeNum(num,feed):
 from math import sqrt
 tmp = feed[:]
 while tmp[-1] &gt; int(sqrt(num)):
 tmp.pop()
 for i in tmp:
 if num % i == 0:
 return False
 return True

limit = 10001
feed = [2,3,5,7]
temp = 7
counter = 4
while counter &lt; limit :
 temp += 2
 if IsPrimeNum(temp,feed):
 feed.append(temp)
 counter += 1
print temp
```
&lt;/p&gt;</description></item><item><title>欧拉工程第六解</title><link>http://0x3f.org/posts/project-euler-6/</link><pubDate>Wed, 29 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-6/</guid><description>&lt;p&gt;第六解：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The sum of the squares of the first ten natural numbers is,
12 + 22 + &amp;hellip; + 102 = 385&lt;/p&gt;

&lt;p&gt;The square of the sum of the first ten natural numbers is,
(1 + 2 + &amp;hellip; + 10)2 = 552 = 3025&lt;/p&gt;

&lt;p&gt;Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 385 = 2640.
Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.&lt;/p&gt;</description></item><item><title>欧拉工程第五解</title><link>http://0x3f.org/posts/project-euler-5/</link><pubDate>Mon, 27 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-5/</guid><description>&lt;p&gt;第五解：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest number that is evenly divisible by all of the numbers from 1 to 20?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;解：&lt;/p&gt;

&lt;p&gt;
```python
#为简洁明了，此处不作校验
def GetGreatestCommonDivisor(min,max):
 '''辗转相除法求最大公约数'''
 while min &gt; 0:
 tmp = min
 min = max % min
 max = tmp
 return max

def GetLeastCommonMultiple(a,b):
 if a &gt; b:
 max = a
 min = b
 else:
 max = b
 min = a
 div = GetGreatestCommonDivisor(min,max)
 return min * max / div

temp = 1
for i in range(1,21):
 temp = GetLeastCommonMultiple(i,temp)
print temp
```
&lt;/p&gt;</description></item><item><title>欧拉工程第四解</title><link>http://0x3f.org/posts/project-euler-4/</link><pubDate>Wed, 22 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-4/</guid><description>&lt;p&gt;第四解：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
Find the largest palindrome made from the product of two 3-digit numbers.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;解：&lt;/p&gt;

&lt;p&gt;
```python
largestPalindrome = 0
for i in range(100,1000):
 for j in range(100,1000):
 product = i * j
 if int(str(product)[::-1]) == product and product &gt; largestPalindrome:
 largestPalindrome = product
print largestPalindrome
```
&lt;/p&gt;</description></item><item><title>欧拉工程第三解</title><link>http://0x3f.org/posts/project-euler-3/</link><pubDate>Tue, 21 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-3/</guid><description>&lt;p&gt;第三解：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;解：&lt;/p&gt;

&lt;p&gt;
```python
feed = 600851475143

def GetFactor(feed,footmark):
 while footmark &lt; feed:
 footmark += 2
 if feed % footmark == 0:
 print footmark
 GetFactor(feed / footmark,footmark)
 break

GetFactor(feed,1)
```
&lt;/p&gt;

&lt;p&gt;&lt;a href="http://picasaweb.google.com/lh/photo/CQ25Wrocadk-dyd7sOiRUA"&gt;&lt;img src="http://lh6.ggpht.com/lenin.lee/SP3inG0AczI/AAAAAAAAAjA/DBMygQUR9HI/s400/project_euler_problem_003.png" /&gt;&lt;/a&gt;&lt;/p&gt;</description></item><item><title>欧拉工程第二解</title><link>http://0x3f.org/posts/project-euler-2/</link><pubDate>Sun, 19 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-2/</guid><description>&lt;p&gt;第二解：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, &amp;hellip;
Find the sum of all the even-valued terms in the sequence which do not exceed four million.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;解：&lt;/p&gt;

&lt;p&gt;
```python
i = 1
j = 2
sum = 0
while j &lt; 4000000 :
 if j % 2 == 0 :
 sum = sum + j
 t = i
 i = j
 j = t + j
print sum
```
&lt;/p&gt;</description></item><item><title>欧拉工程第一解</title><link>http://0x3f.org/posts/project-euler-1/</link><pubDate>Mon, 06 Oct 2008 00:00:00 +0000</pubDate><guid>http://0x3f.org/posts/project-euler-1/</guid><description>&lt;div style="float:right;margin-left:10px;margin-bottom:10px;"&gt;
	&lt;a href="http://picasaweb.google.com/lh/photo/AAMfMJges97jrmxxYmmsXw"&gt;&lt;img src="http://lh5.ggpht.com/lenin.lee/SOjhkJQQ7HI/AAAAAAAAAbk/HT6_ZIxVCJE/s144/euler.jpg" /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt;
“&lt;a href="http://projecteuler.net/"&gt;欧拉工程&lt;/a&gt;”是一个很有意思的网站，它每周会提供一道数学题，要求访问者使用任一种编程语言设计一个计算机程序求解。到现在为止已经出了二百一十一道题，当然，题的难度是依次递增的。几十个国家的程序员已参与了这个工程，截至目前，中国有四百多人参与，但是解决所有的二百多道题的只有一个人。
&lt;/p&gt;
&lt;p&gt;
我觉得没事儿的时候做一道很有意思，下面是第一道，很简单：
&lt;/p&gt;
	&lt;blockquote&gt;
	If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
	Find the sum of all the multiples of 3 or 5 below 1000.
	&lt;/blockquote&gt;
&lt;p&gt;
最容易想到的一算法就是依次取出一到一千的整数，只要是三或五的倍数，就累加起来，最终的和就是结果：
&lt;/p&gt;
```python
sum = 0

for num in range(1,1000):
	if not (num % 3 != 0 and num % 5 != 0):
		sum += num

print sum
```
&lt;p&gt;
但是我觉得这个算法太普通了，从一到一千要做一千次循环，时间复杂度会比较高。所以我设想只取出三和五的倍数，然后相加就行了，所需要考虑的只是怎么处理三和五的公倍数的问题。下面是我的算法，只有三百多次循环：
&lt;/p&gt;</description></item></channel></rss>