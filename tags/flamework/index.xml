<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Flamework - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/flamework/</link><description>Flamework - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 30 Mar 2014 10:00:00 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/flamework/" rel="self" type="application/rss+xml"/><item><title>PHP框架实战（六）：依赖注入</title><link>http://0x3f.org/post/flamework-dependency-injection/</link><pubDate>Sun, 30 Mar 2014 10:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/flamework-dependency-injection/</guid><description><![CDATA[<h2 id="简述">简述</h2>
<p>依赖注入是个很好的解耦方法，也可以优雅的实现懒加载。</p>
<p>以数据库连接为例，当一个组件用到数据库时，最简单粗暴的办法是在使用前创建连接：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">class</span> <span class="nc">Component</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">doSth</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// ...
</span><span class="c1"></span>
        <span class="nv">$db</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">DatabaseConnection</span><span class="p">(</span><span class="nv">$schema</span><span class="p">,</span> <span class="nv">$host</span><span class="p">,</span> <span class="nv">$port</span><span class="p">,</span> <span class="nv">$login</span><span class="p">,</span> <span class="nv">$password</span><span class="p">);</span>

        <span class="c1">// ...
</span><span class="c1"></span>    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>这样做的缺点是代码一旦执行，Component行为将不可更改，有时我们需要在程序执行的过程中决定其行为。很直接地，可以想到给Component添加一个Setter方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">class</span> <span class="nc">Component</span> <span class="p">{</span>
    <span class="k">private</span> <span class="nv">$__db</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">doSth</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// ...
</span><span class="c1"></span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">__db</span> <span class="o">!==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// do something ...
</span><span class="c1"></span>        <span class="p">}</span>

        <span class="c1">// ...
</span><span class="c1"></span>    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setConnection</span><span class="p">(</span><span class="nv">$db</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">__db</span> <span class="o">=</span> <span class="nv">$db</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>这样就把Component和数据库连接解耦了。这时又有一个问题，怎样管理数据库连接？最简单粗暴的办法是在每次使用前创建，如果在程序中多处需要改变数据库连接，这就把代码写死了。</p>
<p>一种解决问题的方法是使用一个全局变量保存连接，对于简单场景，这没问题，但是这种做法会污染全局命名空间，尤其是在依赖较多的情况下，这种做法就不可取了。另一种方法就是用一个注册表持有所有依赖，这就是依赖注入要做的事。</p>
<p>我曾经处理过一个问题，生产环境中即使在无请求的情况下也会在短时间内生成大量会话文件，直接原因是使用了keepalived检查系统可用性。由于程序在一开始就打开了会话，并且keepalived不能保持会话，导致每次访问都会生成一个新的会话文件。这就是没有使用懒加载导致的错误。</p>
<p>懒加载可以让每个组件只有在需要的情况下才被初始化，一方面简化了代码、提高了可读性，另一方面也能提高程序效率、降低资源消耗。如果组件很多，而每次请求实际用到的很少，初始化所有组件产生的资源消耗将会很可观。</p>
<h2 id="实现">实现</h2>
<p>用单例模式实现，以键值对的形式注册依赖。同时支持以变量和callable的形式注入，前者用以注册简单类型或已实例化的依赖，后者可以用匿名函数的方式更灵活地管理依赖。同时，注入依赖时可以指定该依赖是否为单例模式，如果是，callable类型的依赖将会在第一次被调用后保持下来。此外，使用__call()魔术方法实现直接以getter方法的方式获取依赖。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">org\x3f\flamework\base</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">org\x3f\flamework\exceptions\FlameException</span><span class="p">;</span>

<span class="sd">/**
</span><span class="sd"> * Dependency Injection Class
</span><span class="sd"> *
</span><span class="sd"> * @author Donie Leigh &lt;donie.leigh@gmail.com&gt;
</span><span class="sd"> * @link http://0x3f.org
</span><span class="sd"> * @copyright Copyright &amp;copy; 2013-2014 Donie Leigh
</span><span class="sd"> * @license BSD (3-terms)
</span><span class="sd"> * @since 1.0
</span><span class="sd"> */</span>
<span class="k">class</span> <span class="nc">DI</span>
<span class="p">{</span>
    <span class="sd">/**
</span><span class="sd">     * @var object Singleton instance
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">static</span> <span class="nv">$_instance</span><span class="p">;</span>
    <span class="sd">/**
</span><span class="sd">     * @var array Services
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$_services</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>

    <span class="sd">/**
</span><span class="sd">     * Singleton constructor
</span><span class="sd">     * @return void
</span><span class="sd">     * @author Donie Leigh &lt;donie.leigh@gmail.com&gt;
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
    <span class="p">}</span>

    <span class="sd">/**
</span><span class="sd">     * Return the singleton instance
</span><span class="sd">     * @return object Singleton instance
</span><span class="sd">     * @since 1.0
</span><span class="sd">     **/</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getInstance</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span> <span class="nx">self</span><span class="o">::</span><span class="nv">$_instance</span> <span class="nx">instanceof</span> <span class="nx">self</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">self</span><span class="o">::</span><span class="nv">$_instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">self</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="nv">$_instance</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Add a service to the register
</span><span class="sd">     * @param string $key Service name
</span><span class="sd">     * @param mixed $service Callable to create a service instance or exactly an instance
</span><span class="sd">     * @param bool $isSingleton Set true to treat this service as singleton
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     **/</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">set</span><span class="p">(</span><span class="nv">$key</span><span class="p">,</span> <span class="nv">$service</span><span class="p">,</span> <span class="nv">$isSingleton</span><span class="o">=</span><span class="k">false</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_services</span><span class="p">[</span><span class="nx">strtolower</span><span class="p">(</span><span class="nv">$key</span><span class="p">)]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
            <span class="s1">&#39;service&#39;</span> <span class="o">=&gt;</span> <span class="nv">$service</span><span class="p">,</span>
            <span class="s1">&#39;isSingleton&#39;</span> <span class="o">=&gt;</span> <span class="nv">$isSingleton</span><span class="p">,</span>
            <span class="s1">&#39;instance&#39;</span> <span class="o">=&gt;</span> <span class="k">null</span>
        <span class="p">);</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Get a service instance
</span><span class="sd">     * @return mixed Service instance
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">get</span><span class="p">(</span><span class="nv">$key</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$key</span> <span class="o">=</span> <span class="nx">strtolower</span><span class="p">(</span><span class="nv">$key</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_services</span><span class="p">[</span><span class="nv">$key</span><span class="p">]))</span> <span class="p">{</span>
            <span class="nv">$info</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_services</span><span class="p">[</span><span class="nv">$key</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$info</span><span class="p">[</span><span class="s1">&#39;instance&#39;</span><span class="p">]</span> <span class="o">!==</span> <span class="k">null</span><span class="p">)</span>
                <span class="k">return</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">&#39;instance&#39;</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">is_callable</span><span class="p">(</span><span class="nv">$info</span><span class="p">[</span><span class="s1">&#39;service&#39;</span><span class="p">]))</span> <span class="p">{</span>
                <span class="nv">$instance</span> <span class="o">=</span> <span class="nx">call_user_func</span><span class="p">(</span><span class="nv">$info</span><span class="p">[</span><span class="s1">&#39;service&#39;</span><span class="p">]);</span>
                <span class="k">if</span> <span class="p">(</span><span class="nv">$info</span><span class="p">[</span><span class="s1">&#39;isSingleton&#39;</span><span class="p">]</span> <span class="o">===</span> <span class="k">true</span><span class="p">)</span>
                    <span class="nv">$info</span><span class="p">[</span><span class="s1">&#39;instance&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$instance</span><span class="p">;</span>
                <span class="k">return</span> <span class="nv">$instance</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nv">$info</span><span class="p">[</span><span class="s1">&#39;service&#39;</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Get service with magic method
</span><span class="sd">     * @param string $method get{ServiceName}
</span><span class="sd">     * @param array $parameters Parameters, currently useless
</span><span class="sd">     * @return mixed Service instance
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__call</span><span class="p">(</span><span class="nv">$method</span><span class="p">,</span> <span class="nv">$parameters</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">strpos</span><span class="p">(</span><span class="nx">strtolower</span><span class="p">(</span><span class="nv">$method</span><span class="p">),</span> <span class="s1">&#39;get&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$serviceName</span> <span class="o">=</span> <span class="nx">substr</span><span class="p">(</span><span class="nv">$method</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
            <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="nv">$serviceName</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">FlameException</span><span class="p">(</span><span class="s1">&#39;Call to undefined method: &#39;</span><span class="o">.</span><span class="nv">$method</span><span class="p">);</span>
    <span class="p">}</span>
    
<span class="p">}</span> <span class="c1">// END class DI
</span><span class="c1"></span><span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="使用">使用</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="nv">$di</span> <span class="o">=</span> <span class="nx">DI</span><span class="o">::</span><span class="na">getInstance</span><span class="p">();</span>

<span class="c1">// 简单类型
</span><span class="c1"></span><span class="nv">$di</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">);</span>

<span class="c1">// 每次调用生成不同的依赖
</span><span class="c1"></span><span class="nv">$di</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;newPassword&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
    <span class="nv">$pwd</span> <span class="o">=</span> <span class="nx">”</span><span class="p">;</span>
    <span class="nv">$pwdLen</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$pwdLen</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$pwd</span> <span class="o">.=</span> <span class="nx">chr</span><span class="p">(</span><span class="nx">mt_rand</span><span class="p">(</span><span class="mi">33</span><span class="p">,</span> <span class="mi">126</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nv">$pwd</span><span class="p">;</span>
<span class="p">});</span>

<span class="c1">// 注入对象实例
</span><span class="c1"></span><span class="nv">$di</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;simpleSession&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">SimpleSession</span><span class="p">());</span>

<span class="c1">// 依赖在第一次被获取时动态创建，然后保持为单例
</span><span class="c1"></span><span class="nv">$di</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;complicatedSession&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
    <span class="nv">$session</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ComplicatedSession</span><span class="p">();</span>
    <span class="nv">$session</span><span class="o">-&gt;</span><span class="na">setFirstVisitTime</span><span class="p">(</span><span class="nx">time</span><span class="p">());</span>
    <span class="k">return</span> <span class="nv">$session</span><span class="p">;</span>
<span class="p">},</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">// 获取依赖
</span><span class="c1"></span><span class="k">echo</span> <span class="nv">$di</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>

<span class="c1">// 以getter的形式获取依赖
</span><span class="c1"></span><span class="k">echo</span> <span class="nv">$di</span><span class="o">-&gt;</span><span class="na">getFoo</span><span class="p">();</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<p>之前的版本中，org\x3f\flamework\base\WebApplication中保存了数据库连接和日志级别，现在就可以把它们从这个类中解耦了。使用依赖注入，可以使框架核心保持尽可能的精简，最大程度地保证任何一个组件都是可拆卸和更换的，也是防止过度设计的一个很好的机制。</p>
]]></description></item><item><title>PHP框架实战（∝）：烈焰之终章</title><link>http://0x3f.org/post/flamework-summary/</link><pubDate>Thu, 02 Jan 2014 15:15:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/flamework-summary/</guid><description><![CDATA[<p>写“烈焰”（Flame）用了一周的业余时间，主要是对平时一些想法的总结和验证。实现了比较完整的控制器层和视图层，对模型层的ActiveRecord实现思路做了一下梳理。</p>
<p>当然，一个可实用的框架需要包含的东西远不止这些。比如框架中用到代码动态调用的地方，一定要做好语言安全子集的过滤，否则就是很大的安全漏洞。再比如需要支持依赖反转的缓存机制，实现对多种缓存方式的平滑支持。此外，像URI路由、可扩展、多模板方案支持也都是现代框架的标配。这些留待以后有时间再讨论。然而在这次练习的过程中，我突然想到一个问题——PHP是不是适合实现一个完备的框架。</p>
<p>曾见过一句话，说PHP本身就是一个框架，后来明白，这才是微言大义。PHP有很多高级选项、高级函数和扩展，用得好事半功倍，用不好就是魔鬼。</p>
<p>PHP本身有很多问题，协议不统一、函数命名混乱、命名空间语法怪异而且鸡肋等等都是老生常谈。在运行模式上，无论是Apache+PHP模块，还是NGINX+FastCGI，都只能实现在纵向层面上对一次请求的处理，由于缺乏在内存中持续运行程序的机制，凡是对程序全局共享并持续占有的东西都不能实现，比如数据库连接池等，以至于很多初始化的工作对于每次请求都要重新执行一次，这意味著面向对象越彻底、封装越多，系统资源的重复消耗越厉害，所以PHP的程序在性能和内存占用上与Java相比有一定缺陷。因此PHP更适合短平快的应用场景，不适合实现复杂的业务逻辑。</p>
<p>基于这个观点，我认同混合编程。没有哪种语言是完美的，用对的工具做对的事是最理想的。用PHP实现一个完备的框架也许不是个明智的选择，从短平快的角度出发，它更适合用来实现微框架。</p>
<p>现在微框架是个比较热门的话题，我最早接触的是Python的Bottle和Flask，短小精悍，非常容易上手。微框架主要实现控制器层和视图层，一般不包括模型层。为了以最快的速度将请求路由到处理逻辑，一般以最直接的方式建立URI模板和回调物件之间的映射，控制器层可以以极简的方式实现，例如只做一个像本文后面例子中那样简单的约定。微框架应该尽可能少地包含配置，大部分时候并不需要像Java的S.S.H那样滥用配置，<a href="http://en.wikipedia.org/wiki/Convention_over_configuration" target="_blank" rel="noopener noreffer">CoC原则</a>就持这样的观点，约定可以解决的问题就不要用配置去做。</p>
<p>下面只使用两个函数和五条约定实现一个微框架：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="sd">/**
</span><span class="sd"> * 路由定义与应用
</span><span class="sd"> * @param string $route 用作定义路由规则时，此参数为模板字符串，
</span><span class="sd"> *     使用冒号加参数名作为参数占位符，例如：
</span><span class="sd"> *         on(&#39;/post/edit/:id&#39;, function($id){});
</span><span class="sd"> *     用做应用路由规则时，此参数为URI，例如：
</span><span class="sd"> *         on($_SERVER[&#39;REQUEST_URI&#39;]);
</span><span class="sd"> * @param callable $callback 路由规则的回调逻辑，如果路由规则中
</span><span class="sd"> *     含有参数占位符，回调中需存在同名的参数；当函数作为应用路
</span><span class="sd"> *     由规则使用时，此参数不指定
</span><span class="sd"> * @return void
</span><span class="sd"> * @since 1.0
</span><span class="sd"> */</span>
<span class="k">function</span> <span class="nf">on</span><span class="p">(</span><span class="nv">$route</span><span class="p">,</span> <span class="nv">$callback</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="k">static</span> <span class="nv">$routes</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
    <span class="nv">$regex</span> <span class="o">=</span> <span class="s1">&#39;#&#39;</span><span class="o">.</span><span class="nx">preg_replace</span><span class="p">(</span><span class="s1">&#39;#:[^\/]+#&#39;</span><span class="p">,</span> <span class="s1">&#39;.*&#39;</span><span class="p">,</span> <span class="nv">$route</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;#&#39;</span><span class="p">;</span>
    <span class="nv">$routes</span><span class="p">[</span><span class="nv">$route</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nv">$regex</span><span class="p">,</span> <span class="nv">$callback</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">is_null</span><span class="p">(</span><span class="nv">$callback</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$routes</span> <span class="k">as</span> <span class="nv">$r</span><span class="o">=&gt;</span><span class="nv">$cfg</span><span class="p">){</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="nv">$cfg</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nv">$route</span><span class="p">))</span> <span class="p">{</span>
                <span class="nv">$params</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
                <span class="nv">$idx</span> <span class="o">=</span> <span class="nx">strpos</span><span class="p">(</span><span class="nv">$r</span><span class="p">,</span> <span class="s1">&#39;:&#39;</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">is_int</span><span class="p">(</span><span class="nv">$idx</span><span class="p">))</span> <span class="p">{</span>
                    <span class="nv">$keys</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">substr</span><span class="p">(</span><span class="nv">$r</span><span class="p">,</span> <span class="nv">$idx</span><span class="p">));</span>
                    <span class="nv">$keys</span> <span class="o">=</span> <span class="nx">array_map</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nv">$v</span><span class="p">){</span> <span class="k">return</span> <span class="nx">trim</span><span class="p">(</span><span class="nv">$v</span><span class="p">,</span> <span class="s1">&#39;:&#39;</span><span class="p">);</span> <span class="p">},</span> <span class="nv">$keys</span><span class="p">);</span>
                    <span class="nv">$values</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nx">substr</span><span class="p">(</span><span class="nv">$route</span><span class="p">,</span> <span class="nv">$idx</span><span class="p">));</span>
                    <span class="nv">$params</span> <span class="o">=</span> <span class="nx">array_combine</span><span class="p">(</span><span class="nv">$keys</span><span class="p">,</span> <span class="nv">$values</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="nx">call_user_func_array</span><span class="p">(</span><span class="nv">$callback</span><span class="p">,</span> <span class="nv">$params</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">echo</span> <span class="s1">&#39;404&#39;</span><span class="p">;</span>
    <span class="p">}</span> 
<span class="p">}</span>

<span class="sd">/**
</span><span class="sd"> * 视图渲染函数
</span><span class="sd"> * @param string $view 视图名称
</span><span class="sd"> * @param array $params 关联数组，包含需要填到视图模板中的参数键值对
</span><span class="sd"> * @return void
</span><span class="sd"> * @since 1.0
</span><span class="sd"> */</span>
<span class="k">function</span> <span class="nf">render</span><span class="p">(</span><span class="nv">$view</span><span class="p">,</span> <span class="nv">$params</span><span class="o">=</span><span class="k">array</span><span class="p">())</span> 
<span class="p">{</span>
    <span class="nx">extract</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nx">EXTR_PREFIX_SAME</span><span class="p">,</span> <span class="s1">&#39;tpl_&#39;</span><span class="p">);</span>
    <span class="nv">$viewFile</span> <span class="o">=</span> <span class="nx">dirname</span><span class="p">(</span><span class="nx">realpath</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">))</span><span class="o">.</span><span class="nx">DIRECTORY_SEPARATOR</span><span class="o">.</span><span class="s1">&#39;view&#39;</span>
        <span class="o">.</span><span class="nx">DIRECTORY_SEPARATOR</span><span class="o">.</span><span class="nv">$view</span><span class="o">.</span><span class="s1">&#39;.php&#39;</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">is_readable</span><span class="p">(</span><span class="nv">$viewFile</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">require</span><span class="p">(</span><span class="nv">$viewFile</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&#34;View template </span><span class="si">$view</span><span class="s2"> does not exist or cannot be readable.&#34;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>on()身兼两用，一是定义路由规则和对应的响应逻辑，一是对指定URI应用路由规则。render()的作用是渲染视图模板。用法如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">include</span> <span class="s1">&#39;micro.php&#39;</span><span class="p">;</span>

<span class="nx">on</span><span class="p">(</span><span class="s1">&#39;/post/save&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(){</span>
    <span class="k">echo</span> <span class="s2">&#34;Post saved.</span><span class="se">\n</span><span class="s2">&#34;</span><span class="p">;</span>
<span class="p">});</span>

<span class="nx">on</span><span class="p">(</span><span class="s1">&#39;/mail/send/:address/:title&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$address</span><span class="p">,</span> <span class="nv">$title</span><span class="p">){</span>
    <span class="k">echo</span> <span class="s2">&#34;write letter to </span><span class="si">$address</span><span class="s2"> with title </span><span class="si">$title\n</span><span class="s2">&#34;</span><span class="p">;</span>
<span class="p">});</span>

<span class="nx">on</span><span class="p">(</span><span class="nv">$_SERVER</span><span class="p">[</span><span class="s1">&#39;REQUEST_URI&#39;</span><span class="p">]);</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>约定如下：</p>
<ol>
<li>每个Controller作为一个文件放在项目根目录下的controller目录中，名称即文件名，后缀是“.php”；Action对应于Controller中的各个函数（注意过滤语言安全子集）；</li>
</ol>
<ul>
<li>使用php.ini的配置项“auto_prepend_file”和“auto_append_file”实现过滤器；</li>
<li>使用“set_error_handler()”和“set_exception_handler()”自动处理异常和错误；</li>
<li>使用PDO实现数据库抽象层；</li>
<li>视图模板用PHP脚本实现，模板文件放在当前目录下的view目录里，模板文件名即模板名，后缀为“.php”；</li>
</ul>
<p>当然这离实际可用还差得远，这里只是说明一下微框架的基本理念：第一，打狗不需要金箍棒；第二，大部分项目都是在打狗。结合混合编程，这一点会更明显。</p>
]]></description></item><item><title>PHP框架实战（五）：ORM与ActiveRecord</title><link>http://0x3f.org/post/flamework-active-record/</link><pubDate>Wed, 01 Jan 2014 20:45:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/flamework-active-record/</guid><description><![CDATA[<h2 id="简述">简述</h2>
<p>Model是MVC框架中最复杂的部分，它要提供与业务逻辑相关的数据及数据处理方法的封装，一般要提供数据对象、数据库连接、事务管理、SQL语句构造、数据CRUD、高级通用业务逻辑等一系列功能。由于Model与Controller和View是解耦的，并且本身具备很高的通用性和复杂性，所以有很多独立的实现。本文希望能通过开发一个简单的ActiveRecord，验证这种Model实现方案的原理和过程。</p>
<h2 id="orm对象关系映射">ORM：对象关系映射</h2>
<p>ORM的全称是Object Relational Mapping，即对象关系映射。它是为了解决关系数据库的数学模型和编程语言的对象模型之间的阻抗不匹配问题而提出的解决方案。</p>
<p>阻抗不匹配是个逼格很高的词。</p>
<p>阻抗是指电路中的电容、电感、电阻对交流电的障碍作用，就像电阻对直流电的障碍作用。两个系统传递信号可以形象地看成电压的传递，公式为：</p>
<blockquote>
<p>                <strong>U</strong>(out) * <strong>Z</strong>(in)<br>
<strong>U</strong>(in) =  &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;<br>
                <strong>Z</strong>(in) + <strong>Z</strong>(out)</p>
</blockquote>
<p>即输入电压等于输出电压与输入阻抗的积除以输入阻抗与输出阻抗的和。</p>
<p>理想情况肯定是输入电压等于输出电压，这时信号是没有失真的，也就是要求Z(in)与Z(in)+Z(out)之商无限逼近1，这个过程就叫阻抗匹配。关系型数据库是建立在数学模型的基础上，而编程语言中的对象是建立在人对客观世界认知的具象模型上。说白了，阻抗不匹配问题就是说因这两种模型不一致而导致的问题。</p>
<p>ORM通过建立表与对象、列与属性（<em>这只是一般情况</em>）之间的映射关系而解决问题，这可以实现像操作对象一样对数据库中的数据进行增删改查，简化了开发过程。不过ORM的缺点是不能很好地处理复杂数据关系，会出现效率低下的问题，因此必要时仍然需要直接使用SQL。</p>
<h2 id="activerecord">ActiveRecord</h2>
<p>ActiveRecord是Ruby on Rails提出的一个概念，其实就是ORM的一种实现，它是对象类型、数据、CRUD方法的合体，使对数据的操作以更具象化的方式实现。下面介绍在Flamework中实现一个简单的ActiveRecord的过程。</p>
<p>首先实现数据库的接口，提供数据库连接、查询、执行SQL语句、事务管理等基本功能。这里使用PDO实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">org\x3f\flamework\base</span><span class="p">;</span>

<span class="sd">/**
</span><span class="sd"> * Database connection above PDO
</span><span class="sd"> *
</span><span class="sd"> * @author Donie Leigh &lt;donie.leigh@gmail.com&gt;
</span><span class="sd"> * @link http://0x3f.org
</span><span class="sd"> * @copyright Copyright &amp;copy; 2013-2014 Donie Leigh
</span><span class="sd"> * @license BSD (3-terms)
</span><span class="sd"> * @since 1.0
</span><span class="sd"> */</span>
<span class="k">class</span> <span class="nc">DBConnection</span>
<span class="p">{</span>
    <span class="sd">/**
</span><span class="sd">     * @var PDO Database connection 
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$_c</span><span class="p">;</span>
    <span class="sd">/**
</span><span class="sd">     * @var array PDO options 
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$_options</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;connection_string&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;sqlite::memory:&#39;</span><span class="p">,</span>
        <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="k">null</span><span class="p">,</span>
        <span class="s1">&#39;password&#39;</span> <span class="o">=&gt;</span> <span class="k">null</span><span class="p">,</span>
        <span class="s1">&#39;pdo_options&#39;</span> <span class="o">=&gt;</span> <span class="k">null</span><span class="p">,</span>
    <span class="p">);</span>
    <span class="sd">/**
</span><span class="sd">     * @var PDOStatement Last PDO statement 
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$_lastStmt</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$options</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_options</span> <span class="o">=</span> <span class="nx">array_merge</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_options</span><span class="p">,</span> <span class="nv">$options</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="sd">/**
</span><span class="sd">     * Init DB connection
</span><span class="sd">     * @param string $dsn DB connection string
</span><span class="sd">     * @param string $user DB user name
</span><span class="sd">     * @param string $password DB password
</span><span class="sd">     * @param array $options PDO options
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="k">function</span> <span class="nf">_connectDB</span><span class="p">(</span><span class="nv">$dsn</span><span class="p">,</span> <span class="nv">$user</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$password</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nv">$options</span><span class="o">=</span><span class="k">array</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_c</span> <span class="o">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_c</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\PDO</span><span class="p">(</span><span class="nv">$dsn</span><span class="p">,</span> <span class="nv">$user</span><span class="p">,</span> <span class="nv">$password</span><span class="p">,</span> <span class="nv">$options</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
   
    <span class="sd">/**
</span><span class="sd">     * Execute sql statement
</span><span class="sd">     * @param mixed $sql SQL statement or template
</span><span class="sd">     * @param array $params Parameters for SQL template
</span><span class="sd">     * @return bool
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nv">$sql</span><span class="p">,</span> <span class="nv">$params</span><span class="o">=</span><span class="k">array</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_connectDB</span><span class="p">(</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_options</span><span class="p">[</span><span class="s1">&#39;connection_string&#39;</span><span class="p">],</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_options</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">],</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_options</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">],</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_options</span><span class="p">[</span><span class="s1">&#39;driver_options&#39;</span><span class="p">]</span>
        <span class="p">);</span>
        <span class="nv">$stmt</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_c</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_lastStmt</span> <span class="o">=</span> <span class="nv">$stmt</span><span class="p">;</span>
        <span class="k">return</span> <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">(</span><span class="nv">$params</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Fetch rows
</span><span class="sd">     * @return array Associative array holding data rows
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">rows</span><span class="p">(</span><span class="nv">$sql</span><span class="p">,</span> <span class="nv">$params</span><span class="o">=</span><span class="k">array</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">(</span><span class="nv">$sql</span><span class="p">,</span> <span class="nv">$params</span><span class="p">);</span>
        <span class="nv">$stmt</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getLastStmt</span><span class="p">();</span>
        <span class="nv">$rows</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
        <span class="k">while</span> <span class="p">(</span><span class="nv">$row</span> <span class="o">=</span> <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">fetch</span><span class="p">(</span><span class="nx">\PDO</span><span class="o">::</span><span class="na">FETCH_ASSOC</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$rows</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$row</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nv">$rows</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Return the last PDO statement
</span><span class="sd">     * @return PDOStatement
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">getLastStmt</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_lastStmt</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Begin transaction
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">beginTransaction</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_c</span><span class="o">-&gt;</span><span class="na">beginTransaction</span><span class="p">();</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Commit the current transaction
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">commit</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_c</span><span class="o">-&gt;</span><span class="na">commit</span><span class="p">();</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Rollback the current transaction
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">rollback</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_c</span><span class="o">-&gt;</span><span class="na">rollBack</span><span class="p">();</span>
    <span class="p">}</span>
    
<span class="p">}</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>然后实现ActiveRecord类：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">org\x3f\flamework\base</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">org\x3f\flamework\Flame</span><span class="p">;</span>

<span class="sd">/**
</span><span class="sd"> * Ancestor class for active records
</span><span class="sd"> *
</span><span class="sd"> * @abstract
</span><span class="sd"> * @author Donie Leigh &lt;donie.leigh@gmail.com&gt;
</span><span class="sd"> * @link http://0x3f.org
</span><span class="sd"> * @copyright Copyright &amp;copy; 2013-2014 Donie Leigh
</span><span class="sd"> * @license BSD (3-terms)
</span><span class="sd"> * @since 1.0
</span><span class="sd"> */</span>
<span class="k">abstract</span> <span class="k">class</span> <span class="nc">ActiveRecord</span>
<span class="p">{</span>
    <span class="sd">/**
</span><span class="sd">     * @var array Models 
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="k">static</span> <span class="nv">$_models</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
    <span class="sd">/**
</span><span class="sd">     * @var array Attributes and values
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$_data</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
    <span class="sd">/**
</span><span class="sd">     * @var array Attributes and values which are changed
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$_dirtyData</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
    <span class="sd">/**
</span><span class="sd">     * @var bool Whether this record is a new one 
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$_isNew</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>

    <span class="sd">/**
</span><span class="sd">     * Get model instance
</span><span class="sd">     * @param string $className
</span><span class="sd">     * @return ActiveRecord
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getModel</span><span class="p">(</span><span class="nv">$className</span> <span class="o">=</span> <span class="no">__CLASS__</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="nv">$_models</span><span class="p">[</span><span class="nv">$className</span><span class="p">]))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="nv">$_models</span><span class="p">[</span><span class="nv">$className</span><span class="p">];</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nv">$model</span> <span class="o">=</span> <span class="nx">self</span><span class="o">::</span><span class="nv">$_models</span><span class="p">[</span><span class="nv">$className</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nv">$className</span><span class="p">;</span>
            <span class="k">return</span> <span class="nv">$model</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Get table name of this ActiveRecord
</span><span class="sd">     * @return string Table name
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">abstract</span> <span class="k">public</span> <span class="k">function</span> <span class="nf">getTableName</span><span class="p">();</span>

    <span class="sd">/**
</span><span class="sd">     * Get the name of the primary key column
</span><span class="sd">     * @return string Column name
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">abstract</span> <span class="k">public</span> <span class="k">function</span> <span class="nf">getPrimaryKey</span><span class="p">();</span>
    
    <span class="sd">/**
</span><span class="sd">     * Magic method for accessing model attributes
</span><span class="sd">     * @param string $attr Attribute name
</span><span class="sd">     * @return mixed Attribute value
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__get</span><span class="p">(</span><span class="nv">$attr</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_data</span><span class="p">[</span><span class="nv">$attr</span><span class="p">]))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_data</span><span class="p">[</span><span class="nv">$attr</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Magic method for setting attribute value
</span><span class="sd">     * @param string $attr Attribute name
</span><span class="sd">     * @param mixed $val Attribute value
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__set</span><span class="p">(</span><span class="nv">$attr</span><span class="p">,</span> <span class="nv">$val</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_data</span><span class="p">[</span><span class="nv">$attr</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$val</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getIsNew</span><span class="p">())</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_dirtyData</span><span class="p">[</span><span class="nv">$attr</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$val</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Magic method for checking if an attribute is set
</span><span class="sd">     * @param string $attr Attribute name
</span><span class="sd">     * @return bool
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__isset</span><span class="p">(</span><span class="nv">$attr</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nx">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_data</span><span class="p">[</span><span class="nv">$attr</span><span class="p">]);</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Magic method for unsetting an attribute
</span><span class="sd">     * @param string $attr Attribute name
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__unset</span><span class="p">(</span><span class="nv">$attr</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nx">unset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_data</span><span class="p">[</span><span class="nv">$attr</span><span class="p">]);</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Set this record to be $isNew
</span><span class="sd">     * @param bool $isNew
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">setIsNew</span><span class="p">(</span><span class="nv">$isNew</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_isNew</span> <span class="o">=</span> <span class="nv">$isNew</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Whether this record is new
</span><span class="sd">     * @return bool
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">getIsNew</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_isNew</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Find a record by primary key
</span><span class="sd">     * @param mixed $val Primary key value
</span><span class="sd">     * @return ActiveRecord
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">findByPk</span><span class="p">(</span><span class="nv">$val</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$sql</span> <span class="o">=</span> <span class="s2">&#34;select * from &#34;</span><span class="o">.</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getTableName</span><span class="p">()</span><span class="o">.</span><span class="s2">&#34; where &#34;</span><span class="o">.</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getPrimaryKey</span><span class="p">()</span><span class="o">.</span><span class="s2">&#34;=?&#34;</span><span class="p">;</span>
        <span class="nv">$rows</span> <span class="o">=</span> <span class="nx">Flame</span><span class="o">::</span><span class="na">app</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getDBConnection</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">rows</span><span class="p">(</span><span class="nv">$sql</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$val</span><span class="p">));</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">count</span><span class="p">(</span><span class="nv">$rows</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">createInstance</span><span class="p">(</span><span class="nv">$rows</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Create an instance with given data
</span><span class="sd">     * @param array $row Associative array
</span><span class="sd">     * @return ActiveRecord
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">createInstance</span><span class="p">(</span><span class="nv">$row</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$className</span> <span class="o">=</span> <span class="nx">get_class</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
        <span class="nv">$instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nv">$className</span><span class="p">;</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$row</span> <span class="k">as</span> <span class="nv">$col</span><span class="o">=&gt;</span><span class="nv">$val</span><span class="p">){</span>
            <span class="nv">$instance</span><span class="o">-&gt;</span><span class="nv">$col</span> <span class="o">=</span> <span class="nv">$val</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nv">$instance</span><span class="o">-&gt;</span><span class="na">setIsNew</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
        <span class="k">return</span> <span class="nv">$instance</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Save this record
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">save</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getIsNew</span><span class="p">())</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_insert</span><span class="p">();</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_update</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Save this record into the database as a new row
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="k">function</span> <span class="nf">_insert</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">count</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$cols</span> <span class="o">=</span> <span class="nx">implode</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">,</span> <span class="nx">array_keys</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_data</span><span class="p">));</span>
            <span class="nv">$placeHolders</span> <span class="o">=</span> <span class="nx">implode</span><span class="p">(</span><span class="s1">&#39;, &#39;</span><span class="p">,</span> <span class="nx">array_fill</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">count</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_data</span><span class="p">),</span> <span class="s1">&#39;?&#39;</span><span class="p">));</span>
            <span class="nv">$sql</span> <span class="o">=</span> <span class="s2">&#34;insert into &#34;</span><span class="o">.</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getTableName</span><span class="p">()</span><span class="o">.</span> <span class="s2">&#34; (</span><span class="si">$cols</span><span class="s2">) values (</span><span class="si">$placeHolders</span><span class="s2">)&#34;</span><span class="p">;</span>
            <span class="nx">Flame</span><span class="o">::</span><span class="na">app</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getDBConnection</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">(</span><span class="nv">$sql</span><span class="p">,</span> <span class="nx">array_values</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_data</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Save this record
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="k">function</span> <span class="nf">_update</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">count</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_dirtyData</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$pairs</span> <span class="o">=</span> <span class="nx">implode</span><span class="p">(</span><span class="s1">&#39;=?, &#39;</span><span class="p">,</span> <span class="nx">array_keys</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_dirtyData</span><span class="p">))</span><span class="o">.</span><span class="s1">&#39;=?&#39;</span><span class="p">;</span>
            <span class="nv">$sql</span> <span class="o">=</span> <span class="s1">&#39;update &#39;</span><span class="o">.</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getTableName</span><span class="p">()</span><span class="o">.</span><span class="s2">&#34; set </span><span class="si">$pairs</span><span class="s2"> where &#34;</span><span class="o">.</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getPrimaryKey</span><span class="p">()</span><span class="o">.</span><span class="s1">&#39;=?&#39;</span><span class="p">;</span>
            <span class="nv">$pk</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getPrimaryKey</span><span class="p">();</span>
            <span class="nx">Flame</span><span class="o">::</span><span class="na">app</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getDBConnection</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">(</span><span class="nv">$sql</span><span class="p">,</span> <span class="nx">array_merge</span><span class="p">(</span><span class="nx">array_values</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_dirtyData</span><span class="p">),</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$pk</span><span class="p">)));</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Delete this record
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">delete</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getIsNew</span><span class="p">())</span> <span class="p">{</span>
            <span class="nv">$pk</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getPrimaryKey</span><span class="p">();</span>
            <span class="nv">$sql</span> <span class="o">=</span> <span class="s1">&#39;delete from &#39;</span><span class="o">.</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getTableName</span><span class="p">()</span><span class="o">.</span><span class="s2">&#34; where </span><span class="si">$pk</span><span class="s2">=?&#34;</span><span class="p">;</span>
            <span class="nx">Flame</span><span class="o">::</span><span class="na">app</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getDBConnection</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">(</span><span class="nv">$sql</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="nv">$pk</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
<span class="p">}</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>约定，所有子类都必须覆盖和实现getModel()、getTableName()、getPrimaryKey()这三个方法。getModel()返回不包含具体数据的ActiveRecord实例，用于执行对象类型范畴的操作，例如查询符合特定条件的对象。在包含具体数据的ActiveRecord实例中执行针对该具体对象的操作，例如保存和删除。</p>
<p>为了更好地区分ActiveRecord的属性和对象数据，这里将对象数据存放在关联数组ActiveRecord::$_data里，然后使用__get()、__set()等魔术方法实现像使用ActiveRecord自身属性一样使用对象数据。</p>
<p>在更新对象时，出于性能考虑，应该只更新被修改过的列。这里借助魔术方法__set()，实现向对象属性赋值时将被修改的属性和值添加到关联数组ActiveRecord::$_dirtyData中。最后构造update语句时，从该数组中取值即可。</p>
<h2 id="activerecord的使用">ActiveRecord的使用</h2>
<p>在Demo项目中实现一个对象，继承ActiveRecord：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">org\x3f\flamedemo\model</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">org\x3f\flamework\base\ActiveRecord</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Post</span> <span class="k">extends</span> <span class="nx">ActiveRecord</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getModel</span><span class="p">(</span><span class="nv">$className</span><span class="o">=</span><span class="no">__CLASS__</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">parent</span><span class="o">::</span><span class="na">getModel</span><span class="p">(</span><span class="nv">$className</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="k">function</span> <span class="nf">getTableName</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="s1">&#39;post&#39;</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="k">function</span> <span class="nf">getPrimaryKey</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="s1">&#39;id&#39;</span><span class="p">;</span>
    <span class="p">}</span>
    
<span class="p">}</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>用法如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="c1">// 根据ID查询对象
</span><span class="c1"></span><span class="nv">$p</span> <span class="o">=</span> <span class="nx">Post</span><span class="o">::</span><span class="na">getModel</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">findByPk</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">var_dump</span><span class="p">(</span><span class="nv">$p</span><span class="p">);</span>

<span class="c1">// 更新对象
</span><span class="c1"></span><span class="nv">$p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Post</span><span class="p">();</span>
<span class="nv">$p</span><span class="o">-&gt;</span><span class="na">setIsNew</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
<span class="nv">$p</span><span class="o">-&gt;</span><span class="na">id</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="nv">$p</span><span class="o">-&gt;</span><span class="na">title</span> <span class="o">=</span> <span class="s1">&#39;bad name 2&#39;</span><span class="p">;</span>
<span class="nv">$p</span><span class="o">-&gt;</span><span class="na">save</span><span class="p">();</span>

<span class="c1">// 删除对象
</span><span class="c1"></span><span class="nv">$p</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Post</span><span class="p">();</span>
<span class="nv">$p</span><span class="o">-&gt;</span><span class="na">setIsNew</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
<span class="nv">$p</span><span class="o">-&gt;</span><span class="na">id</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
<span class="nv">$p</span><span class="o">-&gt;</span><span class="na">delete</span><span class="p">();</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<p>ORM的根本任务是解决关系模型与对象模型的阻抗不匹配问题。而ActiveRecord是时下很流行的一种ORM的实现方式。在对ActiveRecord的实现中使用了PDO，这是PHP 5.1开始引入的一个轻量的数据访问抽象层，相比以前针对每种数据库使用不同的函数集的方式，它使PHP的数据库操作变得更简单。此外，魔术方法的使用简化了代码，使数据操作变得更灵活。</p>
<p>本文只实现了一个最基本的ActiveRecord，实际使用时，还要包含SQL语句构造等复杂的逻辑，不过只要弄清楚了核心原理和实现方式，其它也就水到渠成了。</p>
]]></description></item><item><title>PHP框架实战（四）：View的模板与渲染</title><link>http://0x3f.org/post/flamework-view-rendering/</link><pubDate>Mon, 30 Dec 2013 21:05:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/flamework-view-rendering/</guid><description><![CDATA[<h2 id="目标">目标</h2>
<p>实现MVC模型的<strong>V</strong>iew层，Controller的Action中应可以将从Model层获取的数据填充到View模板中，并将渲染结果返回给访问者。本文并不志在实现一个完备的模板框架，相应的需求可借助Smarty这样现有的实现。</p>
<h2 id="获取代码">获取代码</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">git checkout v0.4
</code></pre></td></tr></table>
</div>
</div><h2 id="设计与实现">设计与实现</h2>
<p>View的模板是最好实现的，因为PHP本身就是一个模板语言，所以这里实现的模板主要是指几条约定：</p>
<ol>
<li>模板文件本身是一个普通PHP文件，文件名后缀是“.php”；</li>
</ol>
<ul>
<li>模板文件应存储在项目指定的模板基础目录中；</li>
<li>模板名称指模板文件相对于项目的模板基础目录的路径，并且去掉文件后缀；</li>
<li>模板本身的实际效果等同于在Controller的Action中执行的代码，故可以调用Controller的所有方法以及Flame对象的方法等内容；</li>
<li>所有要填充到模板中的数据以键值对的形式存储在一个关联数组中，并传递给渲染模板的方法，在模板中使用与键名相同的变量调用数据；</li>
</ul>
<p><strong>View的渲染方法</strong></p>
<p>添加Controller::render()方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>

    <span class="c1">// ...
</span><span class="c1"></span>
    <span class="sd">/**
</span><span class="sd">     * Render the view template with data
</span><span class="sd">     * @param string $view View template relative path to base path of the templates
</span><span class="sd">     *                     For example, &#39;post/list&#39; point to file /srv/http/mysite/protected/view/post/list.php
</span><span class="sd">     * @param array $data Associative array in which data is stored as key-value pairs
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">render</span><span class="p">(</span><span class="nv">$view</span><span class="p">,</span> <span class="nv">$data</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nx">extract</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nx">EXTR_PREFIX_SAME</span><span class="p">,</span> <span class="s1">&#39;tpl_&#39;</span><span class="p">);</span>
        <span class="nv">$viewFile</span> <span class="o">=</span> <span class="nx">Flame</span><span class="o">::</span><span class="na">app</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getViewPath</span><span class="p">()</span><span class="o">.</span><span class="nx">DIRECTORY_SEPARATOR</span><span class="o">.</span><span class="nv">$view</span><span class="o">.</span><span class="s1">&#39;.php&#39;</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">is_readable</span><span class="p">(</span><span class="nv">$viewFile</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">require</span><span class="p">(</span><span class="nv">$viewFile</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">FlameException</span><span class="p">(</span><span class="s2">&#34;View template </span><span class="si">$view</span><span class="s2"> does not exist or cannot be readable.&#34;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// ...
</span><span class="c1"></span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>$view是模板名称，$data是要填充到模板中的数据。</p>
<h2 id="验证demo">验证Demo</h2>
<p>在Demo项目的protected下新增文件“view/post/list.php”，并创建不存在的这两个上级目录“view”和“post”。内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;Content-type&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;text/html; charset=utf-8&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Post<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span><span class="cp">&lt;?php echo $name; ?&gt;</span><span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span><span class="cp">&lt;?php echo $age; ?&gt;</span><span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>将DefaultController::index()方法修改为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
    
    <span class="c1">// ...
</span><span class="c1"></span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">render</span><span class="p">(</span><span class="s1">&#39;post/list&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
            <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;leigh&#39;</span><span class="p">,</span>
            <span class="s1">&#39;age&#39;</span> <span class="o">=&gt;</span> <span class="mi">23</span><span class="p">,</span>
        <span class="p">));</span>
    <span class="p">}</span>

    <span class="c1">// ...
</span><span class="c1"></span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>访问Demo项目，页面将显示预期的内容和样式。</p>
<h2 id="总结">总结</h2>
<p>PHP本身的特点使得View这一层很容易实现。不过，随著富客户端的流行，MVC模型的View这一层正在被逐渐弱化，现在主流的开发方式是前端通过AJAX与服务器端交换数据，而不是把数据填充到模板中再返回给客户端。</p>
]]></description></item><item><title>PHP框架实战（三）：实现Controller和Filter</title><link>http://0x3f.org/post/flamework-controller-and-filter/</link><pubDate>Sun, 29 Dec 2013 20:40:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/flamework-controller-and-filter/</guid><description><![CDATA[<h2 id="目标">目标</h2>
<p>实现Controller和Filter，程序可以从HTTP请求中解析Controller和Action，并在这两个切面级别实现Filter链。此外，在Controller中，可以使用Action的参数直接访问HTTP请求中的同名参数。</p>
<h2 id="获取代码">获取代码</h2>
<p>项目目录结构做了调整，framework目录存放Flamework框架源码，demo目录存放示例项目。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">git checkout v0.3
</code></pre></td></tr></table>
</div>
</div><h2 id="设计与实现">设计与实现</h2>
<p><strong>Controller的实现</strong></p>
<p>要求请求URL的格式如下：</p>
<blockquote>
<p><a href="http://www.mydomain.com/index.php?r=post/save">http://www.mydomain.com/index.php?r=post/save</a></p>
</blockquote>
<p><strong>r</strong>表示Route，斜杠前面的<strong>post</strong>表示Controller的名称，后面的<strong>save</strong>表示Action的名称。对HTTP请求的各种处理逻辑封装在新对象HttpRequest中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">org\x3f\flamework\base</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">org\x3f\flamework\Flame</span> <span class="k">as</span> <span class="nx">Flame</span><span class="p">;</span>

<span class="sd">/**
</span><span class="sd"> * HTTP request wrapper
</span><span class="sd"> *
</span><span class="sd"> * @author Donie Leigh &lt;donie.leigh@gmail.com&gt;
</span><span class="sd"> * @link http://0x3f.org
</span><span class="sd"> * @copyright Copyright &amp;copy; 2013-2014 Donie Leigh
</span><span class="sd"> * @license BSD (3-terms)
</span><span class="sd"> * @since 1.0
</span><span class="sd"> */</span>
<span class="k">class</span> <span class="nc">HttpRequest</span>
<span class="p">{</span>
    <span class="sd">/**
</span><span class="sd">     * @var HttpRequest Singleton instance 
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="k">static</span> <span class="nv">$_instance</span><span class="p">;</span>
    <span class="sd">/**
</span><span class="sd">     * @var string Controller name, null if no one is given 
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$_controller</span><span class="p">;</span>
    <span class="sd">/**
</span><span class="sd">     * @var string Action name, null if no one is given 
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$_action</span><span class="p">;</span>

    <span class="sd">/**
</span><span class="sd">     * Singleton constructor
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">parseRoute</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="sd">/**
</span><span class="sd">     * Disable the cloning
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__clone</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nx">trigger_error</span><span class="p">(</span><span class="s1">&#39;Clone is not allow!&#39;</span><span class="p">,</span> <span class="nx">E_USER_ERROR</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="sd">/**
</span><span class="sd">     * Get the singleton instance
</span><span class="sd">     * @return HttpRequest
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getInstance</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="nv">$_instance</span> <span class="nx">instanceof</span> <span class="nx">self</span><span class="p">))</span>
            <span class="nx">self</span><span class="o">::</span><span class="nv">$_instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">self</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="nv">$_instance</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Parse request route, set controller and action names
</span><span class="sd">     *
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">parseRoute</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;r&#39;</span><span class="p">]))</span> <span class="p">{</span>
            <span class="nv">$arr</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;r&#39;</span><span class="p">]);</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_controller</span> <span class="o">=</span> <span class="nv">$arr</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">count</span><span class="p">(</span><span class="nv">$arr</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">)</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_action</span> <span class="o">=</span> <span class="nv">$arr</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_controller</span> <span class="o">=</span> <span class="nx">Flame</span><span class="o">::</span><span class="na">app</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getDefaultController</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Get controller name
</span><span class="sd">     *
</span><span class="sd">     * @return string null if no controller is present
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">getController</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_controller</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Get action name
</span><span class="sd">     *
</span><span class="sd">     * @return string null if no action is found
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">getAction</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_action</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Get parameter value
</span><span class="sd">     *
</span><span class="sd">     * @param string $param Parameter name
</span><span class="sd">     * @return mixed Parameter value
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">getParam</span><span class="p">(</span><span class="nv">$param</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="nv">$param</span><span class="p">]))</span>
            <span class="k">return</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="nv">$param</span><span class="p">];</span>
        <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>

<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>考虑到HttpRequest可能在多个地方被调用，所以用单例模式实现。</p>
<p>WebApplication中添加如下内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">class</span> <span class="nc">WebApplication</span> <span class="p">{</span>

    <span class="c1">// ...
</span><span class="c1"></span>
    <span class="sd">/**
</span><span class="sd">     * @var string The default controller name
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="nv">$defaultController</span> <span class="o">=</span> <span class="s1">&#39;default&#39;</span><span class="p">;</span>

    <span class="c1">// ...
</span><span class="c1"></span>
    <span class="sd">/**
</span><span class="sd">     * Get the default controller name
</span><span class="sd">     * @return string Controller name
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">getDefaultController</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">defaultController</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Get controller path
</span><span class="sd">     * @return string The controller path
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">getControllerPath</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getProtectedPath</span><span class="p">()</span><span class="o">.</span><span class="nx">DIRECTORY_SEPARATOR</span><span class="o">.</span><span class="s1">&#39;controller&#39;</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Create an instance of the controller
</span><span class="sd">     * @param string $controllerName
</span><span class="sd">     * @return Controller Controller instance
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">createController</span><span class="p">(</span><span class="nv">$controllerName</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$className</span> <span class="o">=</span> <span class="nx">ucfirst</span><span class="p">(</span><span class="nv">$controllerName</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;Controller&#39;</span><span class="p">;</span>
        <span class="nv">$classFile</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getControllerPath</span><span class="p">()</span><span class="o">.</span><span class="nx">DIRECTORY_SEPARATOR</span><span class="o">.</span><span class="s2">&#34;</span><span class="si">$className</span><span class="s2">.php&#34;</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">file_exists</span><span class="p">(</span><span class="nv">$classFile</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$ns</span> <span class="o">=</span> <span class="k">include_once</span><span class="p">(</span><span class="nv">$classFile</span><span class="p">);</span>
            <span class="nv">$fullClassName</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">$ns\\$className</span><span class="s2">&#34;</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">class_exists</span><span class="p">(</span><span class="nv">$fullClassName</span><span class="p">))</span> <span class="p">{</span>
                <span class="k">return</span> <span class="k">new</span> <span class="nv">$fullClassName</span><span class="p">();</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nx">HttpException</span><span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="s2">&#34;Request to </span><span class="si">$controllerName</span><span class="s2"> is unresolvable.&#34;</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">HttpException</span><span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="s2">&#34;Request to </span><span class="si">$controllerName</span><span class="s2"> is unresolvable.&#34;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="p">}</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>程序应指定一个缺省的Controller，覆盖$defaultController属性即可，默认为“default”。Controller的类名应在名称后面加“Controller”字样的后缀。由于需要包含命名空间的完整类名来动态实例化Controller，故Controller的源码中都应在最后返回其命名空间（<em>return __NAMESPACE__;</em>）。</p>
<p>增加Controller类，作为所有Controller的父类：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">org\x3f\flamework\base</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">org\x3f\flamework\exceptions\HttpException</span><span class="p">;</span>

<span class="sd">/**
</span><span class="sd"> * Ancestor class for all controllers
</span><span class="sd"> *
</span><span class="sd"> * @author Donie Leigh &lt;donie.leigh@gmail.com&gt;
</span><span class="sd"> * @link http://0x3f.org
</span><span class="sd"> * @copyright Copyright &amp;copy; 2013-2014 Donie Leigh
</span><span class="sd"> * @license BSD (3-terms)
</span><span class="sd"> * @since 1.0
</span><span class="sd"> */</span>
<span class="k">class</span> <span class="nc">Controller</span> 
<span class="p">{</span>
    <span class="sd">/**
</span><span class="sd">     * @var string The default action
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">protected</span> <span class="nv">$defaultAction</span> <span class="o">=</span> <span class="s1">&#39;index&#39;</span><span class="p">;</span>
    <span class="sd">/**
</span><span class="sd">     * @var array Filter classnames and rules.
</span><span class="sd">     *            This is an associative array, in which keys are classnames of filters,
</span><span class="sd">     *            and values are regular expressions.
</span><span class="sd">     *            For example:
</span><span class="sd">     *                array(
</span><span class="sd">     *                    &#39;org\\x3f\\flamedemo\filter\\PerformanceFilter&#39; =&gt; &#39;/^(save|update|delete)$/&#39;,
</span><span class="sd">     *                );
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">protected</span> <span class="nv">$filters</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>

    <span class="sd">/**
</span><span class="sd">     * Process http request
</span><span class="sd">     * @param HttpRequest $request
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">process</span><span class="p">(</span><span class="nx">HttpRequest</span> <span class="nv">$request</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$action</span> <span class="o">=</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">getAction</span><span class="p">()</span> <span class="o">===</span> <span class="k">null</span> <span class="o">?</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">defaultAction</span> <span class="o">:</span> <span class="nv">$request</span><span class="o">-&gt;</span><span class="na">getAction</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">method_exists</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="nv">$action</span><span class="p">))</span> <span class="p">{</span>
            <span class="c1">// do parameter bindings
</span><span class="c1"></span>            <span class="nv">$method</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">\ReflectionMethod</span><span class="p">(</span><span class="nx">get_class</span><span class="p">(</span><span class="nv">$this</span><span class="p">),</span> <span class="nv">$action</span><span class="p">);</span>
            <span class="nv">$params</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="nv">$method</span><span class="o">-&gt;</span><span class="na">getParameters</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$param</span><span class="p">){</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">isset</span><span class="p">(</span><span class="nv">$_REQUEST</span><span class="p">[</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">()]))</span> <span class="p">{</span>
                    <span class="nv">$params</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$_REQUEST</span><span class="p">[</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">()];</span>
                <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">isDefaultValueAvailable</span><span class="p">())</span> <span class="p">{</span>
                    <span class="nv">$params</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$param</span><span class="o">-&gt;</span><span class="na">getDefaultValue</span><span class="p">();</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nx">HttpException</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span> <span class="s2">&#34;Parameter &#34;</span><span class="o">.</span><span class="nv">$param</span><span class="o">-&gt;</span><span class="na">getName</span><span class="p">()</span><span class="o">.</span><span class="s2">&#34; is missing.&#34;</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="c1">// create filter chain and run it
</span><span class="c1"></span>            <span class="nv">$filters</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getActionFilters</span><span class="p">(</span><span class="nv">$action</span><span class="p">);</span>
            <span class="nv">$chain</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FilterChain</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="nv">$action</span><span class="p">,</span> <span class="nv">$params</span><span class="p">,</span> <span class="nv">$filters</span><span class="p">);</span>
            <span class="nv">$chain</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nv">$msg</span> <span class="o">=</span> <span class="s1">&#39;Request to &#39;</span><span class="o">.</span><span class="nv">$request</span><span class="o">-&gt;</span><span class="na">getController</span><span class="p">()</span><span class="o">.</span><span class="s1">&#39;/&#39;</span><span class="o">.</span><span class="nv">$action</span><span class="o">.</span><span class="s1">&#39; cannot be resolved, action does not exist.&#39;</span><span class="p">;</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">HttpException</span><span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="nv">$msg</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Get filters for the given action
</span><span class="sd">     * @param string $action
</span><span class="sd">     * @return array Filter names
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">getActionFilters</span><span class="p">(</span><span class="nv">$action</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$filters</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filters</span> <span class="k">as</span> <span class="nv">$filterClass</span><span class="o">=&gt;</span><span class="nv">$regex</span><span class="p">){</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">preg_match</span><span class="p">(</span><span class="nv">$regex</span><span class="p">,</span> <span class="nv">$action</span><span class="p">))</span>
                <span class="nv">$filters</span><span class="p">[]</span> <span class="o">=</span> <span class="nv">$filterClass</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="nv">$filters</span><span class="p">;</span>
    <span class="p">}</span>
    
<span class="p">}</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>Controller::process()是入口方法，它会通过反射机制实现HTTP参数与Action参数的绑定，并指定Action。</p>
<p><strong>Filter与Filter链的实现</strong></p>
<p>Filter中实现before()和after()方法，Filter链通过对Filter按顺序递归调用，实现所有Filter::before()方法在切面之前顺序执行，并且所有Filter::after()方法在切面之后逆序执行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">org\x3f\flamework\base</span><span class="p">;</span>

<span class="sd">/**
</span><span class="sd"> * Ancestor class for all filters
</span><span class="sd"> *
</span><span class="sd"> * @author Donie Leigh &lt;donie.leigh@gmail.com&gt;
</span><span class="sd"> * @link http://0x3f.org
</span><span class="sd"> * @copyright Copyright &amp;copy; 2013-2014 Donie Leigh
</span><span class="sd"> * @license BSD (3-terms)
</span><span class="sd"> * @since 1.0
</span><span class="sd"> */</span>
<span class="k">class</span> <span class="nc">Filter</span>
<span class="p">{</span>
    <span class="sd">/**
</span><span class="sd">     * Run this filter and the filter chain
</span><span class="sd">     * @param FilterChain $chain
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">filter</span><span class="p">(</span><span class="nx">FilterChain</span> <span class="nv">$chain</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">before</span><span class="p">(</span><span class="nv">$chain</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$chain</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">after</span><span class="p">(</span><span class="nv">$chain</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * The logic to be executed before the aspect point
</span><span class="sd">     * @param FilterChain $chain
</span><span class="sd">     * @return boolean Return true to continue the filter chain, return false to break the chain
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">protected</span> <span class="k">function</span> <span class="nf">before</span><span class="p">(</span><span class="nx">FilterChain</span> <span class="nv">$chain</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="sd">/**
</span><span class="sd">     * The logic to be executed after the aspect point
</span><span class="sd">     * @param FilterChain $chain
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">protected</span> <span class="k">function</span> <span class="nf">after</span><span class="p">(</span><span class="nx">FilterChain</span> <span class="nv">$chain</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">namespace</span> <span class="nx">org\x3f\flamework\base</span><span class="p">;</span>

<span class="sd">/**
</span><span class="sd"> * Filter chain
</span><span class="sd"> *
</span><span class="sd"> * @author Donie Leigh &lt;donie.leigh@gmail.com&gt;
</span><span class="sd"> * @link http://0x3f.org
</span><span class="sd"> * @copyright Copyright &amp;copy; 2013-2014 Donie Leigh
</span><span class="sd"> * @license BSD (3-terms)
</span><span class="sd"> * @since 1.0
</span><span class="sd"> */</span>
<span class="k">class</span> <span class="nc">FilterChain</span>
<span class="p">{</span>
    <span class="sd">/**
</span><span class="sd">     * @var object Object to be filtered 
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="nv">$obj</span><span class="p">;</span>
    <span class="sd">/**
</span><span class="sd">     * @var string Method of the object to be filtered 
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="nv">$method</span><span class="p">;</span>
    <span class="sd">/**
</span><span class="sd">     * @var array Parameters to be passed to the method 
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="nv">$params</span><span class="p">;</span>
    <span class="sd">/**
</span><span class="sd">     * @var array Filters 
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="nv">$filters</span><span class="p">;</span>
    <span class="sd">/**
</span><span class="sd">     * @var int The offset of filters array
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$_offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$obj</span><span class="p">,</span> <span class="nv">$method</span><span class="p">,</span> <span class="nv">$params</span><span class="p">,</span> <span class="nv">$filters</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">obj</span> <span class="o">=</span> <span class="nv">$obj</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">method</span> <span class="o">=</span> <span class="nv">$method</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">params</span> <span class="o">=</span> <span class="nv">$params</span><span class="p">;</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filters</span> <span class="o">=</span> <span class="nv">$filters</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Run this filter and the filter chain
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">run</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="nv">$filter</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">nextFilter</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$filter</span> <span class="nx">instanceof</span> <span class="nx">Filter</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$filter</span><span class="o">-&gt;</span><span class="na">filter</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">call_user_func_array</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">obj</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">method</span><span class="p">),</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">params</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Get next filter
</span><span class="sd">     * @return Filter Filter instance
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="k">function</span> <span class="nf">nextFilter</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_offset</span> <span class="o">&lt;</span> <span class="nx">count</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filters</span><span class="p">))</span> <span class="p">{</span>
            <span class="nv">$filter</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">filters</span><span class="p">[</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_offset</span><span class="p">];</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_offset</span><span class="o">++</span><span class="p">;</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nv">$filter</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
<span class="p">}</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>对FilterChain和Filter的使用方法在前面的WebApplication::run()和Controller::process()中均有包含。Controller级的Filter在配置文件中设置，内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">return</span> <span class="k">array</span><span class="p">(</span>
    
    <span class="c1">// ...
</span><span class="c1"></span>    
    <span class="c1">// app namespace and its path
</span><span class="c1"></span>    <span class="s1">&#39;namespaces&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;org\\x3f\\flamedemo&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;/srv/http/flamework/demo/protected&#39;</span><span class="p">),</span>
    <span class="c1">// filter classes
</span><span class="c1"></span>    <span class="s1">&#39;filters&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;org\\x3f\\flamedemo\\filter\\GlobalFilterA&#39;</span><span class="p">,</span>
        <span class="s1">&#39;org\\x3f\\flamedemo\\filter\\GlobalFilterB&#39;</span><span class="p">,</span>
    <span class="p">),</span>
<span class="p">);</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>Action级的Filter在Controller里覆盖$filters属性：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
    <span class="c1">// ...
</span><span class="c1"></span>
    <span class="k">protected</span> <span class="nv">$filters</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
        <span class="s1">&#39;org\\x3f\\flamedemo\\filter\\ActionFilterC&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;/^(index|noindex)$/&#39;</span><span class="p">,</span>
    <span class="p">);</span>

    <span class="c1">// ...
</span><span class="c1"></span><span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>Action级别的Filter通过$filters数组中的正则表达式选择适用的Action。</p>
<h2 id="demo验证">Demo验证</h2>
<p>Demo中实现了两个Controller级别的Filter（<em>GlobalFilterA和GlobalFilterB</em>），一个Action级别的Filter（<em>ActionFilterC</em>），访问demo项目，页面打印如下结果：</p>
<blockquote>
<p>org\x3f\flamedemo\filter\GlobalFilterA::before
org\x3f\flamedemo\filter\GlobalFilterB::before
org\x3f\flamedemo\filter\ActionFilterC::before
org\x3f\flamedemo\controller\Defaultcontroller::index
org\x3f\flamedemo\filter\ActionFilterC::after
org\x3f\flamedemo\filter\GlobalFilterB::after
org\x3f\flamedemo\filter\GlobalFilterA::after</p>
</blockquote>
<h2 id="总结">总结</h2>
<p>WebApplication作为程序的统一入口，通过对HTTP请求的解析动态创建Controller，并借此实现了Controller级别的Filter链。Controller通过反射机制实现了HTTP参数与Action参数的绑定，以及Action级别的Filter链。而通过对Filter的递归执行，Filter链实现了面向切面编程。</p>
]]></description></item><item><title>PHP框架实战（二）：错误和异常的自动处理</title><link>http://0x3f.org/post/flamework-error-auto-handling/</link><pubDate>Sat, 28 Dec 2013 13:40:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/flamework-error-auto-handling/</guid><description><![CDATA[<h2 id="目标">目标</h2>
<p>实现错误和异常的自动捕获和处理。</p>
<h2 id="获取代码">获取代码</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">git checkout v0.2
</code></pre></td></tr></table>
</div>
</div><h2 id="设计与实现">设计与实现</h2>
<p>使用set_error_handler()和set_exception_handler()两个函数注册错误和异常的处理方法，并在两个处理方法中先调用用户自定义的错误和异常处理逻辑，如果自定义逻辑不存在或者返回false，继续调用框架缺省的处理逻辑，输出错误信息到页面。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">class</span> <span class="nc">WebApplication</span> <span class="p">{</span>
    <span class="c1">// ...
</span><span class="c1"></span>
    <span class="sd">/**
</span><span class="sd">     * @var boolean Whether to enable error auto-handling, default to true 
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="nv">$enableErrorHandling</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="sd">/**
</span><span class="sd">     * @var boolean Whether to enable exception auto-handling, default to true 
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="nv">$enableExceptionHandling</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="sd">/**
</span><span class="sd">     * @var callable Error handler 
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="nv">$errorHandler</span><span class="p">;</span>
    <span class="sd">/**
</span><span class="sd">     * @var callable Exception handler 
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="nv">$exceptionHandler</span><span class="p">;</span>
    <span class="sd">/**
</span><span class="sd">     * @var boolean Whether to enable debug mode, default to false 
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="nv">$debug</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>

    <span class="sd">/**
</span><span class="sd">     * @param string $config
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__construct</span><span class="p">(</span><span class="nv">$config</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// ...
</span><span class="c1"></span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">initErrorHandlers</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="sd">/**
</span><span class="sd">     * Initialize auto-handling for errors and exceptions
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">initErrorHandlers</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">enableErrorHandling</span> <span class="o">==</span> <span class="k">true</span><span class="p">)</span>
            <span class="nx">set_error_handler</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;handleError&#39;</span><span class="p">),</span> <span class="nx">error_reporting</span><span class="p">());</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">enableExceptionHandling</span> <span class="o">==</span> <span class="k">true</span><span class="p">)</span>
            <span class="nx">set_exception_handler</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;handleException&#39;</span><span class="p">));</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Handle errors
</span><span class="sd">     * @param int $code
</span><span class="sd">     * @param string $message
</span><span class="sd">     * @param string $file
</span><span class="sd">     * @param int $line
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">handleError</span><span class="p">(</span><span class="nv">$code</span><span class="p">,</span> <span class="nv">$message</span><span class="p">,</span> <span class="nv">$file</span><span class="p">,</span> <span class="nv">$line</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// prevent recursive errors
</span><span class="c1"></span>        <span class="nx">restore_error_handler</span><span class="p">();</span>
        <span class="nx">restore_exception_handler</span><span class="p">();</span>

        <span class="nv">$msg</span> <span class="o">=</span> <span class="s2">&#34;Error </span><span class="si">$code</span><span class="s2">: </span><span class="si">$message</span><span class="s2"> (</span><span class="si">$file</span><span class="s2">:</span><span class="si">$line</span><span class="s2">)&#34;</span><span class="p">;</span>
        <span class="nx">Flame</span><span class="o">::</span><span class="na">error</span><span class="p">(</span><span class="nv">$msg</span><span class="p">);</span>

        <span class="c1">// let errorHandler() return true to prevent displayError()
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="nx">is_callable</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">errorHandler</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">call_user_func</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">errorHandler</span><span class="p">,</span> <span class="nv">$code</span><span class="p">,</span> <span class="nv">$message</span><span class="p">,</span> <span class="nv">$file</span><span class="p">,</span> <span class="nv">$line</span><span class="p">)</span> <span class="o">!==</span> <span class="k">true</span><span class="p">)</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">displayError</span><span class="p">(</span><span class="nv">$code</span><span class="p">,</span> <span class="nv">$message</span><span class="p">,</span> <span class="nv">$file</span><span class="p">,</span> <span class="nv">$line</span><span class="p">);</span>

        <span class="k">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Handle exceptions
</span><span class="sd">     * @param Exception $exception
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">handleException</span><span class="p">(</span><span class="nv">$exception</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// prevent recursive errors
</span><span class="c1"></span>        <span class="nx">restore_error_handler</span><span class="p">();</span>
        <span class="nx">restore_exception_handler</span><span class="p">();</span>

        <span class="nv">$msg</span> <span class="o">=</span> <span class="nx">get_class</span><span class="p">(</span><span class="nv">$exception</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;: &#39;</span><span class="o">.</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">()</span><span class="o">.</span><span class="s1">&#39; (&#39;</span><span class="o">.</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="na">getFile</span><span class="p">()</span><span class="o">.</span><span class="s1">&#39;:&#39;</span><span class="o">.</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="na">getLine</span><span class="p">()</span><span class="o">.</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="o">.</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="na">getTraceAsString</span><span class="p">();</span>
        <span class="nx">Flame</span><span class="o">::</span><span class="na">error</span><span class="p">(</span><span class="nv">$msg</span><span class="p">);</span>

        <span class="c1">// let exceptionHandler() return true to prevent displayException()
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="nx">is_callable</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exceptionHandler</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">call_user_func</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">exceptionHandler</span><span class="p">,</span> <span class="nv">$exception</span><span class="p">)</span> <span class="o">!==</span> <span class="k">true</span><span class="p">)</span>
            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">displayException</span><span class="p">(</span><span class="nv">$exception</span><span class="p">);</span>

        <span class="k">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Display error information
</span><span class="sd">     * @param int $code
</span><span class="sd">     * @param string $message
</span><span class="sd">     * @param string $file
</span><span class="sd">     * @param int $line
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">displayError</span><span class="p">(</span><span class="nv">$code</span><span class="p">,</span> <span class="nv">$message</span><span class="p">,</span> <span class="nv">$file</span><span class="p">,</span> <span class="nv">$line</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">debug</span> <span class="o">==</span> <span class="k">true</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">echo</span> <span class="s2">&#34;&lt;h1&gt;Error </span><span class="si">$code</span><span class="s2">&lt;/h1&gt;&#34;</span><span class="p">;</span>
            <span class="k">echo</span> <span class="s2">&#34;&lt;p&gt;</span><span class="si">$message</span><span class="s2"> in (</span><span class="si">$file</span><span class="s2">:</span><span class="si">$line</span><span class="s2">)&lt;/p&gt;&#34;</span><span class="p">;</span>
            <span class="k">echo</span> <span class="s1">&#39;&lt;pre&gt;&#39;</span><span class="p">;</span>
            <span class="nx">debug_print_backtrace</span><span class="p">();</span>
            <span class="k">echo</span> <span class="s1">&#39;&lt;/pre&gt;&#39;</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">echo</span> <span class="s2">&#34;&lt;h1&gt;Error </span><span class="si">$code</span><span class="s2">&lt;/h1&gt;&#34;</span><span class="p">;</span>
            <span class="k">echo</span> <span class="s2">&#34;&lt;p&gt;</span><span class="si">$message</span><span class="s2">&lt;/p&gt;&#34;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="sd">/**
</span><span class="sd">     * Display exception information
</span><span class="sd">     * @param Exception $exception
</span><span class="sd">     * @return void
</span><span class="sd">     * @since 1.0
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="nf">displayException</span><span class="p">(</span><span class="nv">$exception</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">debug</span> <span class="o">==</span> <span class="k">true</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">echo</span> <span class="s1">&#39;&lt;h1&gt;&#39;</span><span class="o">.</span><span class="nx">get_class</span><span class="p">(</span><span class="nv">$exception</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;&lt;/h1&gt;&#39;</span><span class="p">;</span>
            <span class="k">echo</span> <span class="s1">&#39;&lt;p&gt;&#39;</span><span class="o">.</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">()</span><span class="o">.</span><span class="s1">&#39; (&#39;</span><span class="o">.</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="na">getFile</span><span class="p">()</span><span class="o">.</span><span class="s1">&#39;:&#39;</span><span class="o">.</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="na">getLine</span><span class="p">()</span><span class="o">.</span><span class="s1">&#39;)&lt;/p&gt;&#39;</span><span class="p">;</span>
            <span class="k">echo</span> <span class="s1">&#39;&lt;pre&gt;&#39;</span><span class="o">.</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="na">getTraceAsString</span><span class="p">()</span><span class="o">.</span><span class="s1">&#39;&lt;/pre&gt;&#39;</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">echo</span> <span class="s1">&#39;&lt;h1&gt;&#39;</span><span class="o">.</span><span class="nx">get_class</span><span class="p">(</span><span class="nv">$exception</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;&lt;/h1&gt;&#39;</span><span class="p">;</span>
            <span class="k">echo</span> <span class="s1">&#39;&lt;p&gt;&#39;</span><span class="o">.</span><span class="nv">$exception</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">()</span><span class="o">.</span><span class="s1">&#39;&lt;/p&gt;&#39;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">// ...
</span><span class="c1"></span><span class="p">}</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>“handleError()”和“handleException()”中先调用了“restore_error_handler()”和“restore_exception_handler()”，用于防止递归处理。</p>
<p>开发者可以在配置数组中指定自定义的错误和异常处理逻辑：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">return</span> <span class="k">array</span><span class="p">(</span>
    <span class="c1">// ...
</span><span class="c1"></span>    <span class="s1">&#39;exceptionHandler&#39;</span> <span class="o">=&gt;</span> <span class="k">function</span><span class="p">(</span><span class="nv">$exception</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">var_dump</span><span class="p">(</span><span class="nv">$exception</span><span class="p">);</span>
        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="s1">&#39;errorHandler&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;MyClass&#39;</span><span class="p">,</span> <span class="s1">&#39;handleError&#39;</span><span class="p">),</span>
<span class="p">);</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>“errorHandler”和“exceptionHandler”的值必须是一个callable类型，在这个callable结束时，如果不希望后续逻辑（<em>例如框架自己的错误、异常处理逻辑</em>）继续处理，就返回true，此时程序将会终止执行并退出。</p>
<h2 id="demo验证">Demo验证</h2>
<p>在WebApplication::run()中抛出一个异常或使用trigger_error()触发一个错误，可以看到均被拦截和处理。</p>
<h2 id="总结">总结</h2>
<p>引入错误和异常的自动处理可以极大地简化代码。我们经常需要在AJAX请求出错时返回一个JSON字符串，并由客户端决定如何处理，这时就可以使用自定义的处理逻辑处理错误和异常，而Controller里只实现正常的逻辑即可，无需再有大量难看的try&hellip;catch块。</p>
]]></description></item><item><title>PHP框架实战（一）：框架入口与类的自动加载</title><link>http://0x3f.org/post/flamework-entry/</link><pubDate>Sat, 28 Dec 2013 01:56:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/flamework-entry/</guid><description><![CDATA[<h2 id="目标">目标</h2>
<p>实现框架入口和类的自动加载。</p>
<h2 id="获取代码">获取代码</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">git checkout v0.1
</code></pre></td></tr></table>
</div>
</div><h2 id="设计与实现">设计与实现</h2>
<p>通过两个类实现本次目标。</p>
<p>静态类Flame作为整个框架的入口，实现一系列框架级公用静态方法（<em>例如创建应用实例和自动加载类</em>）。</p>
<p>WebApplication是应用的抽象层，实现应用的入口和其它应用级（<strong>即运行时</strong>）公用方法（<em>例如读取配置文件</em>）。</p>
<p><strong>程序入口</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="c1">// ...
</span><span class="c1"></span><span class="nx">Flame</span><span class="o">::</span><span class="na">createApplication</span><span class="p">(</span><span class="nv">$config</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>此处传入的$config是应用配置文件的路径，该配置文件内容格式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">return</span> <span class="k">array</span><span class="p">(</span>
    <span class="s1">&#39;opt1&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;val1&#39;</span><span class="p">,</span>
    <span class="c1">// ...
</span><span class="c1"></span><span class="p">);</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>在文件中直接return一个关联数组的好处是，加载该文件时，include()函数的返回值就是该数组，代码更简洁，效率比解析其它格式配置文件高。</p>
<p><strong>类的自动加载</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="c1">// ...
</span><span class="c1"></span><span class="k">class</span> <span class="nc">Flame</span> <span class="p">{</span>

    <span class="c1">// ...
</span><span class="c1"></span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">autoload</span><span class="p">(</span><span class="nv">$className</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isset</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="nv">$_namespaces</span><span class="p">[</span><span class="no">__NAMESPACE__</span><span class="p">]))</span>
            <span class="nx">self</span><span class="o">::</span><span class="nv">$_namespaces</span><span class="p">[</span><span class="no">__NAMESPACE__</span><span class="p">]</span> <span class="o">=</span> <span class="nx">dirname</span><span class="p">(</span><span class="no">__FILE__</span><span class="p">);</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="nv">$_namespaces</span> <span class="k">as</span> <span class="nv">$ns</span><span class="o">=&gt;</span><span class="nv">$path</span><span class="p">){</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">strpos</span><span class="p">(</span><span class="nv">$className</span><span class="p">,</span> <span class="nv">$ns</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nv">$classFile</span> <span class="o">=</span> <span class="nv">$path</span><span class="o">.</span><span class="nx">str_replace</span><span class="p">(</span><span class="s1">&#39;\\&#39;</span><span class="p">,</span> <span class="nx">DIRECTORY_SEPARATOR</span><span class="p">,</span> <span class="nx">substr</span><span class="p">(</span><span class="nv">$className</span><span class="p">,</span> <span class="nx">strlen</span><span class="p">(</span><span class="nv">$ns</span><span class="p">)))</span><span class="o">.</span><span class="s1">&#39;.php&#39;</span><span class="p">;</span>
                <span class="k">include</span><span class="p">(</span><span class="nv">$classFile</span><span class="p">);</span>
                <span class="k">return</span> <span class="nx">class_exists</span><span class="p">(</span><span class="nv">$className</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c1">// ...
</span><span class="c1"></span>
<span class="p">}</span>

<span class="nx">spl_autoload_register</span><span class="p">(</span><span class="no">__NAMESPACE__</span><span class="o">.</span><span class="s1">&#39;\\Flame::autoload&#39;</span><span class="p">);</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>通过函数spl_autoload_register()注册Flame::autoload()方法。当用到一个类时，PHP会先检查该类是否已加载，如果没有，就把包括命名空间在内的完整的类名传递给autoload()，最终完成类的加载。</p>
<blockquote>
<p>当不填参数调用spl_autoload_register()时，PHP使用默认的spl_autoload()函数加载类文件，如果命名空间与目录结构完全对应，也可以实现自动加载，而且效率比指定的自定义加载方法更高。但是spl_autoload()有个历久弥新的Bug，它总是试图加载文件名是小写字母的文件，例如，假如类名是MyClass，spl_autoload()就去找文件名为myclass.php的文件，然而一般情况是文件名与类名相同，即MyClass.php，这在大小写敏感的系统中就找不到了。这个函数的开发者得有多恨Linux啊。</p>
</blockquote>
<h2 id="验证demo">验证Demo</h2>
<p>整个Demo程序的index.php只需包含以下代码即可：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">require_once</span> <span class="s1">&#39;../flamework/Flame.php&#39;</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">org\x3f\flamework\Flame</span> <span class="k">as</span> <span class="nx">Flame</span><span class="p">;</span>

<span class="nv">$_config</span> <span class="o">=</span> <span class="s1">&#39;protected/config.php&#39;</span><span class="p">;</span>

<span class="nx">Flame</span><span class="o">::</span><span class="na">createApplication</span><span class="p">(</span><span class="nv">$_config</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">run</span><span class="p">();</span>
<span class="cp">?&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="总结">总结</h2>
<p>这样一个最简单的框架就实现了。</p>
<p>通过这两个类，将框架级静态逻辑与运行时的动态逻辑分开。对应用高度的抽象和OOP封装使框架和应用的代码更易读。单一的应用入口也方便实现一些横向逻辑（<em>例如过滤器</em>）。</p>
<p>此外，利用include()会将它所加载的脚本中return的值作为自身返回值的特性实现配置文件的读取，简化了代码，提高了效率。类的自动加载使开发者不必再关心类文件的引入和移除，避免因多余的include或require而导致效率下降和资源浪费。</p>
]]></description></item><item><title>PHP框架实战（零）：代码规范</title><link>http://0x3f.org/post/flamework-code-spec/</link><pubDate>Thu, 26 Dec 2013 22:07:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/flamework-code-spec/</guid><description><![CDATA[<p>类C语言语法风格最大的问题就是用花括号区分代码块，这导致源码排版容易混乱，对于我这种有代码洁癖的人来说非常痛苦，所以我最喜欢的语法风格是Python的，用缩进区分代码块，排版不规范直接判处语法错误。</p>
<h2 id="命名规范">命名规范</h2>
<p>所有命名使用驼峰风格。</p>
<p>源码开头定义命名空间，Flamework框架入口类的命名空间为“<strong>org\x3f\flamework</strong>”，其余类的命名空间应在此基础上追加与所在目录路径匹配的内容。例如，框架源码目录下一级子目录“base”中的类文件的命名空间均为“org\x3f\flamework\base”。</p>
<p>类名必须是名词，不允许添加任何无意义的前缀或后缀，只允许使用大小写英文字母且首字母大写。</p>
<p>方法名必须是“动词+名词”的形式（<em>如果动词意义明确且不需要宾语，可省略后者</em>），只允许使用大小写英文字母及阿拉伯数字和下划线，首字母小写。</p>
<p>属性名分两种情况，对于存储普通数据的属性，名称必须是名词；对于布尔型属性，名称必须是“动词+名词”的形式。只允许使用大小写英文字母及阿拉伯数字和下划线，首字母小写。</p>
<p>源码文件名必须与类名相同，后缀统一使用“.php”。</p>
<h2 id="注释规范">注释规范</h2>
<p>统一使用<a href="http://www.phpdoc.org/" target="_blank" rel="noopener noreffer">phpDocumenter</a>的注释规范。</p>
<p>类注释必须注明@author、@since。</p>
<p>属性和方法的作者如果和类的创建者不同，必须注明@author，此外必须注明@since。</p>
<h2 id="文件格式">文件格式</h2>
<p>所有文本文件统一使用UNIX格式和UTF-8编码。</p>
<p>严禁使用制表符缩进代码，必须使用4个空格替代制表符。</p>
<p>类、属性、方法、方法内部代码块都必须严格按照层级缩进。</p>
]]></description></item><item><title>PHP框架实战：Flamework</title><link>http://0x3f.org/post/flamework/</link><pubDate>Thu, 26 Dec 2013 20:24:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/flamework/</guid><description><![CDATA[<p>从今天开始，逐步实现一个PHP的MVC框架，以践行平时对这方面的一些想法。</p>
<h2 id="项目信息">项目信息</h2>
<ul>
<li>名称：Flamework (<em>Flame Framework</em>)</li>
<li>源码：https://github.com/xbot/flamework</li>
</ul>
<h2 id="框架特性">框架特性</h2>
<p><strong>激进</strong></p>
<p>用PHP高版本引入的新特性，不考虑向前兼容问题，没有历史包袱。</p>
<p><strong>命名空间</strong></p>
<p>PHP 5.3引入的命名空间可以有效避免类命名冲突，这样可以使类名看起来更自然，不用再在类名前面加难看的前缀了。</p>
<p><strong>类的自动加载</strong></p>
<p>手动include会增加维护的难度，因为经常会出现一个类被从源码中移除而它的include行还在的问题，这会拖慢程序执行速度、增加内存占用。</p>
<p>实现类的自动加载可以在类被引用时自动include相应的源码。</p>
<p><strong>异常的自动处理</strong></p>
<p>在设计程序时，一般应该把用户级的错误返回给页面显示，或者对一些HTTP错误显示个性化的页面（<em>例如人民群众喜闻乐见的404页面</em>），所以在业务逻辑、数据操作这些层一般应该逐级向上抛异常，然后在Controller里捕获并加工成页面可识别的格式（<em>例如JSON</em>）。这样做的缺点是Controller里每个Action都包含重复的try&hellip;catch块。</p>
<p>异常的自动处理允许开发者指定自定义的异常处理逻辑，将异常处理与普通逻辑解耦，这样每个Action只需实现它所关注的功能即可。</p>
<p><strong>过滤器</strong></p>
<p>过滤器允许面向切面编程，是将横向逻辑与纵向逻辑解耦的重要工具。Flamework要实现针对Controller和Action两个级别的过滤器链，过滤器可在该级别逻辑前后执行，并能停止该级别逻辑及后续过滤器的执行。</p>
<p><strong>懒加载</strong></p>
<p>对尽可能多的资源实现懒加载，例如数据库连接、类、组件等，目的是提高效率、节约资源。</p>
<p><strong>参数绑定</strong></p>
<p>自动将请求中的参数与Action方法的参数绑定，从而避免在Action里出现通过$_POST、$_GET这些数组取参数的脏代码，也可以自动实现参数的校验和错误处理。</p>
<p><strong>ActiveRecord</strong></p>
<p>ORM是对关系模型和对象模型的阻抗不匹配问题的解决方案，ActiveRecord是目前最流行的一种ORM的实现方式。通过AR，可以以更对象化的方式操作关系数据库的数据。</p>
<p><strong>依赖注入</strong></p>
<p>依赖注入是个很好的解耦方法，也可以很优雅地实现懒加载。</p>
<h2 id="目录">目录</h2>
<ol>
<li><a href="/post/flamework-code-spec" rel="">零：代码规范</a></li>
</ol>
<ul>
<li><a href="/post/flamework-entry" rel="">一：框架入口与类的自动加载</a></li>
<li><a href="/post/flamework-error-auto-handling" rel="">二：错误和异常的自动处理</a></li>
<li><a href="/post/flamework-controller-and-filter" rel="">三：实现Controller和Filter</a></li>
<li><a href="/post/flamework-view-rendering" rel="">四：视图的模板与渲染</a></li>
<li><a href="/post/flamework-active-record" rel="">五：ORM与ActiveRecord</a></li>
<li><a href="/post/flamework-dependency-injection" rel="">六：依赖注入</a></li>
<li><a href="/post/flamework-summary" rel="">∝：烈焰之终章</a></li>
</ul>
]]></description></item></channel></rss>