<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>源码 - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/%E6%BA%90%E7%A0%81/</link><description>源码 - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 18 Jun 2015 14:15:00 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/%E6%BA%90%E7%A0%81/" rel="self" type="application/rss+xml"/><item><title>PHP扩展框架的创建</title><link>http://0x3f.org/post/create-php-extension-skeleton/</link><pubDate>Thu, 18 Jun 2015 14:15:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/create-php-extension-skeleton/</guid><description>创建项目 在PHP源码目录下的ext目录下执行： 1 ./ext_skel --extname=foobar 修改foobar/config.m4，移除以下三行前的dnl： dnl PHP_ARG_WITH(foobar, for foobar support, dnl Make sure that the comment is aligned:</description></item><item><title>PHP流的上下文和过滤器的实现</title><link>http://0x3f.org/post/contexts-and-filters-implementation-of-php/</link><pubDate>Mon, 15 Jun 2015 19:15:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/contexts-and-filters-implementation-of-php/</guid><description>上下文的实现和应用 上下文包含流的选项和流的参数两部分内容。 1 php_stream_context *php_stream_context_alloc(void); 流的选项是一系列键值对。 1 2 3 int php_stream_context_set_option(php_stream_context *context, const char *wrappername, const char *optionname, zval *optionvalue); int php_stream_context_get_option(php_stream_context *context, const char *wrappername, const char *optionname, zval ***optionvalue); 流</description></item><item><title>PHP流的操作</title><link>http://0x3f.org/post/stream-operations-of-php/</link><pubDate>Mon, 01 Jun 2015 15:33:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/stream-operations-of-php/</guid><description><![CDATA[实现 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 /* reimplement fopen using stream */ ZEND_FUNCTION(donie_stream_fopen) { php_stream *stream; char *path, *mode; int path_len, mode_len; int options = ENFORCE_SAFE_MODE|REPORT_ERRORS; if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, &#34;ss&#34;, &amp;path, &amp;path_len, &amp;mode, &amp;mode_len) == FAILURE) { return; } stream = php_stream_open_wrapper(path, mode, options, NULL); if (!stream) { RETURN_FALSE; } php_stream_to_zval(stream, return_value); }]]></description></item><item><title>PHP流的实现</title><link>http://0x3f.org/post/stream-implementation-in-php/</link><pubDate>Fri, 29 May 2015 17:33:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/stream-implementation-in-php/</guid><description>流的概念 流是一系列概念的集合，包括流包装器、流资源、流操作、上下文等内容。流是对不同资源进行操作的抽象，允许线性地从指定位置读取或写入数据，</description></item><item><title>PHP全局变量的实现和操作</title><link>http://0x3f.org/post/globals-implementation-in-php/</link><pubDate>Fri, 08 May 2015 17:23:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/globals-implementation-in-php/</guid><description><![CDATA[扩展内部的全局变量 1 2 3 4 ZEND_BEGIN_MODULE_GLOBALS(donie) unsigned long global_long; char *global_string; ZEND_END_MODULE_GLOBALS(donie) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 ZEND_DECLARE_MODULE_GLOBALS(donie); static void php_donie_init_globals(zend_donie_globals *donie_globals) { donie_globals-&gt;global_long = 2015; donie_globals-&gt;global_string = &#34;Long live Donie Leigh !&#34;; }]]></description></item><item><title>PHP常量的实现和操作</title><link>http://0x3f.org/post/constant-implementation-in-php/</link><pubDate>Thu, 07 May 2015 16:29:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/constant-implementation-in-php/</guid><description>存储结构 常量存储在哈希表EG(zend_constants)中。 常量的结构定义为： 1 2 3 4 5 6 7 typedef struct _zend_constant { zval value; int flags; char *name; uint name_len; int module_number; } zend_constant; value是</description></item><item><title>PHP资源的实现和操作</title><link>http://0x3f.org/post/resource-implementation-in-php/</link><pubDate>Tue, 05 May 2015 18:53:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/resource-implementation-in-php/</guid><description>存储结构 资源变量也是一个zval结构，zval-&amp;gt;type == IS_RESOURCE，zval-&amp;gt;value-&amp;gt;lval存储</description></item><item><title>PHP对象的实现和操作</title><link>http://0x3f.org/post/object-implementation-in-php/</link><pubDate>Wed, 29 Apr 2015 23:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/object-implementation-in-php/</guid><description>Object的存储结构 对象实例用zval存储。zval-&amp;gt;type == IS_OBJECT，zval-&amp;gt;value-&amp;gt;obj存</description></item><item><title>PHP类和接口的实现</title><link>http://0x3f.org/post/class-interface-implementation-in-php/</link><pubDate>Tue, 28 Apr 2015 18:38:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/class-interface-implementation-in-php/</guid><description>Class的实现 类的注册是在扩展的MINIT方法里。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44</description></item><item><title>PHP数组的实现与操作</title><link>http://0x3f.org/post/array-implementation-in-php/</link><pubDate>Fri, 24 Apr 2015 12:09:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/array-implementation-in-php/</guid><description>存储结构 和其它变量一样，PHP的数组也是一个zval。存储数据的哈希表存放在zval-&amp;gt;value-&amp;gt;ht中。 符号表操作 为实现可</description></item></channel></rss>