<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Git - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/git/</link><description>Git - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 28 Mar 2020 23:17:45 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/git/" rel="self" type="application/rss+xml"/><item><title>用 SSH 命令调试 Git 的连接问题</title><link>http://0x3f.org/post/debug-git-connection-with-ssh/</link><pubDate>Sat, 28 Mar 2020 23:17:45 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/debug-git-connection-with-ssh/</guid><description>昨天执行git pull的时候发现会一直卡在那儿，排除了各种可能，而且 Github 上的项目也是可以正常拉取的，说明跟网络、代理等关系应该不大，git 命令</description></item><item><title>Git工作流调研报告</title><link>http://0x3f.org/post/investigation-report-of-git-flows/</link><pubDate>Wed, 15 May 2019 16:14:17 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/investigation-report-of-git-flows/</guid><description><![CDATA[<h2 id="面临的问题">面临的问题</h2>
<ol>
<li>
<p>测试环境杂乱导致的问题</p>
<p>每个任务都要搭建测试环境，或者把闲置的测试环境切换到待测试分支。麻烦，而且容易出问题。</p>
</li>
<li>
<p>抢占beta环境的问题</p>
<p>每个任务部署到beta环境时都要和别人确认，同时其它任务都要等待。</p>
</li>
<li>
<p>上线任务A把尚在测试中的任务B的部分代码部署上线的问题</p>
<p>先把feature分支合并到master分支，再部署到beta环境。</p>
</li>
<li>
<p>任务A和B在逻辑上互斥或者代码有冲突，导致问题在上线后才发现</p>
<p>测试阶段是针对每个feature分支测试，而不是针对一个集成的分支。</p>
</li>
<li>
<p>不能保证所有上线的代码都经过测试</p>
<p>直接把feature分支合并到master分支，不能保证所有代码都经过测试。</p>
</li>
</ol>]]></description></item><item><title>用gv.vim查看git提交历史</title><link>http://0x3f.org/post/gv-vim/</link><pubDate>Wed, 18 Oct 2017 13:28:16 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/gv-vim/</guid><description><![CDATA[gv.vim是fugitive的插件，用于查看git提交历史，特点是速度快、好用。我现在用它做code review。 1 2 3 4 nnoremap &lt;leader&gt;gll :GV --no-merges&lt;CR&gt;nnoremap &lt;leader&gt;glc :GV!&lt;CR&gt;nnoremap &lt;leader&gt;gla :GV]]></description></item><item><title>Git的衍合</title><link>http://0x3f.org/post/git-rebase/</link><pubDate>Wed, 22 Feb 2017 18:44:37 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/git-rebase/</guid><description>合并分支有两种方式，merge和rebase。merge是根据三方合并的差异，创建一个新的提交。rebase是将上游分支的各个提交在比较差异</description></item><item><title>Git Reset、Revert和Checkout的区别</title><link>http://0x3f.org/post/differences-among-reset-checkout-revert-of-git/</link><pubDate>Thu, 09 Feb 2017 19:27:47 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/differences-among-reset-checkout-revert-of-git/</guid><description>reset在提交层面，是将HEAD设定到指定的提交，通常用来舍弃最新的几个提交。在文件层面，是将指定的提交中的该文件保存到暂存区，工作区中的</description></item><item><title>Vultr基配可以部署Gitlab</title><link>http://0x3f.org/post/setup-gitlab-on-vultr-basic-vps/</link><pubDate>Sat, 24 Dec 2016 17:18:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/setup-gitlab-on-vultr-basic-vps/</guid><description>想在Vultr上部署Gitlab，但是官方文档上说最低要求1GB RAM + 3GB swap，而我的VPS是基础配置：768MB RAM。 忐忑地试了一下，居</description></item><item><title>用好代码时光机</title><link>http://0x3f.org/post/leverage-code-time-machine/</link><pubDate>Fri, 21 Nov 2014 23:19:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/leverage-code-time-machine/</guid><description>今天看了篇文章，讲几种常见的、糟糕的注释用法。其中之一是把废弃的代码注释起来，而不是直接删掉，原因是担心以后可能会用。 这个其实就是版本控制系</description></item><item><title>迁移到 Octopress</title><link>http://0x3f.org/post/migrate-blog-to-octopress/</link><pubDate>Sat, 23 Jun 2012 23:13:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/migrate-blog-to-octopress/</guid><description>关于迁移 前段时间，用了五年的虚拟主机突然限制了PHP内存上限，导致Wordpress只能启用有限的几个插件，根本不能满足需要。 所以毅然决定迁</description></item><item><title>读完《Pro Git》</title><link>http://0x3f.org/post/after-reading-pro-git/</link><pubDate>Mon, 14 Nov 2011 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/after-reading-pro-git/</guid><description>花了大约一周的时间，周日晚上读完《Pro Git》的最后几页。 高效、安全的分布式和强大的分枝合并是Git的杀手级特性，这本书在语言上浅显易懂、</description></item></channel></rss>