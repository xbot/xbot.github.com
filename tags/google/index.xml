<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Google - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/google/</link><description>Google - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 06 Mar 2011 00:00:00 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/google/" rel="self" type="application/rss+xml"/><item><title>刷了Oxygen v2.0.1</title><link>http://0x3f.org/post/flashed-oxygen-v201/</link><pubDate>Sun, 06 Mar 2011 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/flashed-oxygen-v201/</guid><description><![CDATA[<p>上周Oxygen v2.0发布之后，感觉还不稳定，忍住了。前两天终于刷上了刚发布的Oxygen v2.0.1。</p>
<p>事先直接做了一次完整的wipe，刷完后没发现XDA上乱七八糟的问题。用了两天，除了UI的变化，没看出来跟以前版本有什么不同，只是仍未实现轨迹球唤醒这点很遗憾。</p>
<p><a href="https://picasaweb.google.com/lh/photo/C-dYsOdeOj-iYlIZm_l8IA?feat=embedwebsite"></a></p>
]]></description></item><item><title>Root了Desire并刷了Oxygen</title><link>http://0x3f.org/post/rooted-desire-and-flashed-oxygen/</link><pubDate>Sun, 19 Dec 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/rooted-desire-and-flashed-oxygen/</guid><description><![CDATA[<p>五月末入手Desire后一直没有折腾，一是因为时间和精力不够，二也没有迫切的需要。</p>
<p>这次Google Map的<a href="http://android.guao.hk/posts/google-maps-5-0-for-android-coming.html">更新</a>给了我足够的理由，加上Froyo原生的“<em>移动到SD</em>”功能已被榨干最后一点油水，于是用<a href="http://unrevoked.com/">unrEVOked3</a>很傻瓜地root了Desire，用Move2SD Enabler开启了完全的App2SD，用Market Enabler化妆潜入米国菜市场安装了Google Map 5.0，最后还启用了SetCPU。</p>
<p>后来还是没有把持住，一不做二不休，对原装的Sense做了一个nandroid备份，刷上了<a href="http://forum.xda-developers.com/showthread.php?t=829734">Oxygen</a>。Oxygen的主题十分的简洁美观，我觉得比Sense漂亮：</p>
<p><a href="http://picasaweb.google.com/lh/photo/9wFenU4A3IbKivS2cGboQw?feat=embedwebsite"></a></p>
<p>Oxygen基于<a href="http://source.android.com/">AOSP</a>，是改动较少、较接近于官方Android的一个ROM，最大的优点是速度快和稳定性高。这两天使用的感受证明了这两点，尤其是速度，一骑绝尘啊，与之相比 ，神马Sense之类的都是浮云。当然，因为精简，理论上在耗电量上较Sense要小，不过我实际感觉如果持续使用的话也好不到哪去，但是待机的话效果还是比较明显，可能跟启用了SetCPU也有一定的关系。</p>
<p>开始差点刷了<a href="http://www.miui.com/">MIUI</a>，但是随即发现很多人反映耗电和稳定性的问题，虽然是个好东西，还是等稳定了再说。</p>
]]></description></item><item><title>搭建自己的Twitter API</title><link>http://0x3f.org/post/howto-setup-twitter-api-of-your-own/</link><pubDate>Fri, 01 Oct 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/howto-setup-twitter-api-of-your-own/</guid><description><![CDATA[<h2> 创建Twitter应用程序 </h2>
<p>从2010年9月起，twitter只支持第三方应用程序使用oauth方式登录。要使用第三方API程序，就必须先在twitter中创建应用程序。</p>
<p>申请地址如下：</p>
<p><a href="https://twitter.com/apps/">https://twitter.com/apps/</a></p>
<p>填写信息时，<b>Application Type</b>应该选<b>Browser</b>，<b>Default Access type</b>应选<b>Read &amp; Write</b>，<b>User Twitter for login</b>不选，其它随便。</p>
<p>创建成功后，该应用程序的<b>Consumer key</b>和<b>Consumer secret</b>在部署API时一般都要用到。</p>
<h2> 第三方API程序 </h2>
<h3> gtap </h3>
<p><a href="http://code.google.com/p/gtap/">gtap</a>使用python开发，可部署在appspot上。</p>
<p>部署前，先修改<b>app.yaml</b>，填写在appspot上创建的应用程序的ID，并使用符号#注释掉<b>secure: always</b>，因为GFW屏蔽了appspot的https。</p>
<p>然后修改<b>main.py</b>，填写Consumer key和Consumer secret。</p>
<p>最后安装<a href="http://code.google.com/intl/zh-CN/appengine/downloads.html">App Engine SDK</a>，使用其中的<b>appcfg.py</b>上传gtap文件夹：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">appcfg.py update gtap
</code></pre></td></tr></table>
</div>
</div><p>在浏览器中（此时应使用可以翻墙的代理）访问在appspot上创建的应用程序的URL地址（如：http://xxx.appspot.com ），在打开的页面中点击<b>Sign in with Twitter</b>，然后在跳转到的页面中点击<b>Allow</b>按钮。在跳转到的页面上修改API的密码（据说有些客户端要求API的密码与Twitter的密码一致）。</p>
<p>在客户端中使用API的地址如下：</p>
<blockquote>
http://xxx.appspot.com/
</blockquote>
<p>其中，<b>xxx</b>是appspot应用程序的ID，末尾的斜杠必不可少。</p>
<h3> twip </h3>
<p><a href="http://code.google.com/p/twip/">twip</a>使用php开发，应部署在支持PHP的服务器上。</p>
<p>首先将<b>config-example.php</b>改名为<b>config.php</b>，然后修改其中的OAUTH_KEY/OAUTH_SECRET/BASE_URL三项内容，前两项分别是Consumer key和Consumer secret，base_url应该是twip部署到服务器上后的URL地址（如http://myblog.com/twip/ ，最后的斜杠必不可少）。</p>
<p>然后在浏览器中访问上面的base_url，选择使用o模式，API地址会在最后的页面中输出。</p>
<h2> 补充说明 </h2>
<ol>
<li>当前版本的Google App Engine SDK要求使用python 2.5，但如果只是用来上传应用程序到appspot，2.5以上版本的python也可以用，只是在上传时会报某些模块已不推荐使用。如果使用appcfg.py时报找不到2.5版本的python，可以强制使用已安装的新版本的python执行之，即：python appcfg.py update gtap</li>
</ol>
]]></description></item><item><title>中秋后记</title><link>http://0x3f.org/post/note-after-the-mid-autumn-day/</link><pubDate>Sun, 26 Sep 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/note-after-the-mid-autumn-day/</guid><description><![CDATA[<p>可以让回忆放肆一些。</p>
<p>中秋的晚上公司餐厅放电影，《邻家特工》和《越光宝盒》，本来打算看完《越光》就走，结果先放的是《特工》。也好，复习一下，好在这片子不错，再看也挺有意思。《越光》纯属烂片，但是如今看看这种不费脑子的东西也变得无可无不可。免费的零食很烘托气氛，唯一的惊喜是居然还有罐装啤酒。</p>
<p>回到住处的当夜就发布了Dumperor。其实这个东西很早就开始做了，起初的目的是为了判断数据库脚本从SQL Server迁移到Oracle和MySQL是否成功。单纯的迁移只能保证修改后的脚本在这两个数据库中执行不会报错，但究竟是不是该执行的东西都成功执行了，一般很难判断，尤其是那帮家伙总是在发版前一两天才告诉我要迁移脚本，那么多不规范的语句，能保证不报错就已经不错了，遑论没有遗漏。所以就著手做一个数据库表结构和数据的导出工具，这样只需用diff工具比较标准数据库和测试数据库导出的脚本就可以了。</p>
<p>从一开始我就决定不使用公司产品的一行代码。其实做这个东西最大的麻烦不是来自来自于如何查询不同的数据库的表结构，而是数据库抽象层。如果要白手起家搞个抽象层的话，我想可能代码量比Dumperor本身都大，于是选择了Yii框架。后来在Dumperor基本成型时又觉得为了仅仅使用最基本的数据库查询功能就捆绑这么大一个框架，有点搞笑，谢天谢地，我终于花时间学了PDO。</p>
<p>中秋节放假的第二天，开始读Google Code上关于Chrome扩展开发的官方文档。这事源于本尊被另一个Chrome扩展作者无视了。</p>
<p>一直强迫自己喜欢上Firefox，但都败了。本来对Opera充满希望，但是从10.0起它带给我的除了失望就是更多的失望，这个东西的发展就像它的国家的位置一样怪异，你永远不能以常人的思维去臆测Opera的开发者，他们就像一群母系氏族社会的娘们儿一样整天跟著感觉走。</p>
<p>于是不知道什么时候我就开始经常用Chrome了，前段时间开始用一个扩展辅助MLDonkey下载。这个东西会在工具栏里添加一个图标，唯一的作用就是打开选项设置页面设置那个也许这辈子都只需要设置一次的MLDonkey的URL地址。于是我给那个扩展的作者写了封邮件，那家伙居然到现在都没有回复。</p>
<p>所以本尊决定无视他了。太祖武皇帝的那句丰衣足食的圣谕真是至理名言，读完文档我就发现这个扩展完全应该用Chrome的Page Action取代Browser Action，简单地说就是当且仅当本页面中包含有可下载的资源时才在地址栏中显示一个图标，而不应该总是在工具栏占用一个图标的位置。</p>
<p>随后要做的就是用AJAX请求取代弹出新窗口的方式添加下载任务，我嫌每次添加一个下载任务后都要关闭一个弹出窗口太麻烦。我的目标是用AJAX请求将要下载的任务在后台传递给MLDonkey，并用Chrome的Desktop Notification功能弹出桌面提示对话框显示结果状态。这样很优雅。</p>
<p>但是实际去做的时候问题来了，虽然Chrome本身允许扩展使用跨域的AJAX，但是至少在和MLDonkey进行通讯时，无论成功与否，得到的返回信息都是空的，状态码也都是0。这个问题浪费了我几乎一整天的时间，最终我决定用AJAX的请求响应时间来判断失败或成功，因为一次AJAX请求响应过程在MLDonkey没启动的时候耗费的时间一般会比正在运行时要长。这就要求每个用户都要根据自己的情况设定合适的超时时间。为了避免麻烦，最后还是实现了通过弹窗添加下载任务的模式，毕竟这个东西总是可靠的。</p>
<p>要发布的时候发现如今在Chrome Extension Gallery中发布扩展居然要收费了，虽然只是一次性的。最后花了八两银子注册了Google Checkout账户，又付了五刀美帝币，才把DonkeyBuddy传上去。发布个免费扩展还得倒贴，本尊也太背了吧。</p>
<p>节后收到了Dell sk8115键盘、HP百灵无线鼠标和Nokia BH-105蓝牙耳机，sk8115是用来让我的纤纤玉手撒野的，百灵鼠是用来接替即将退役的雷柏7100的，而BH-105和我的小七搭配得天衣无缝。</p>
<p>很久没有安静地整理一下头绪了，感谢我那价值四十两银子的Dell sk8115，它让我显得如此的语无伦次。</p>
]]></description></item><item><title>DonkeyBuddy: A Chrome Extension for MLDonkey</title><link>http://0x3f.org/post/donkeybuddy-a-chrome-extension-for-mldonkey/</link><pubDate>Fri, 24 Sep 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/donkeybuddy-a-chrome-extension-for-mldonkey/</guid><description><![CDATA[<div class="illustration_left">
<a href="http://picasaweb.google.com/lh/photo/CLpE8Gtpb3r3F9kcqmS60g?feat=embedwebsite"></a>
</div>

<p><strong>DonkeyBuddy</strong> is an extension for Google Chrome Browser. It's intended to make life easier when you add downloading tasks to MLDonkey.</p>

<h2>Features</h2>

<ol>
<li>Users can choose how to interact with MLDonkey, either by AJAX or
popup windows.</li>
<li>The AJAX mode interacts with MLDonkey by AJAX requests and uses
desktop notifications to show the results, so it won't bother you by
popping up windows and forcing you to close them.</li>
<li>The popup-window mode interacts with MLDonkey by popping up a window
and displays results in it, this is always a reliable way to add
downloads but annoying.</li>
<li>An icon will be displayed in the location bar only when downloadable
resources are found in the current tab, so it saves you the space in
both toolbar and location bar.</li>
<li>Batch downloading.</li>
</ol>

<h2>Screenshots</h2>

<ol>
<li>Location bar icon: <br />
<a href="http://picasaweb.google.com/lh/photo/021647BS--VLalgORMtuVA?feat=embedwebsite"></a></li>
<li>Desktop notification: <br />
<a href="http://picasaweb.google.com/lh/photo/aBu0jSZu3y7Ux-EKKgQibQ?feat=embedwebsite"></a></li>
<li>Popup window: <br />
<a href="http://picasaweb.google.com/lh/photo/GbGe38VG8mU_LyXZDFYgtA?feat=embedwebsite"></a></li>
<li>Settings page: <br />
<a href="http://picasaweb.google.com/lh/photo/uUKzfwcmEQfJaHY6cHVNqw?feat=embedwebsite"></a></li>
</ol>

<h2>Install</h2>

<p><a href="https://chrome.google.com/webstore/detail/hbajjpcakkngealbehjippmdbfapodnn">https://chrome.google.com/webstore/detail/hbajjpcakkngealbehjippmdbfapodnn</a></p>

<h2>FAQ</h2>

<ol>
<li><p><strong>Why a success notification pops up when I haven't even started
MLDonkey ?</strong></p>

<ul>
<li>Since the responses of the cross-domain AJAX requests have an
empty message and a status which has the value 0, so I can't
identify that whether they are successful or not.</li>
<li>But when MLDonkey is not running, AJAX requests always take more
time to receive responses, so if a request has not received its
reponse within a reasonable time, DonkeyBuddy will take it as a
failure. So you should set the *AJAX timeout* option to a
suitable value on your condition.</li>
<li>If you are still in trouble, use the popup-windows mode instead.</li>
</ul></li>
<li><p><strong>Why a failure notification pops up when the downloading task has
acturally been added ?</strong></p>

<ul>
<li>Take a look at the upper question.</li>
</ul></li>
<li><p><strong>How can I send the selected links to MLDonkey in one click ?</strong></p>

<ul>
<li>Click on this extension's icon in the address bar.</li>
</ul></li>
</ol>

<h2>Change log</h2>

<blockquote>
  <p><strong>version 1.1.0 (2011-05-15 Sunday)</strong>
  Enable batch downloading for VeryCD.com.</p>
  
  <p><strong>version 1.0.1 (2010-09-25 Saturday)</strong>
  1.  Fix the problem that the image in the option page doesn't display
      as is expected.
  2.  Set the default value of the option *AJAX timeout* to 1000.</p>
  
  <p><strong>version 1.0 (2010-09-24 Friday)</strong> Initial release.</p>
</blockquote>
]]></description></item></channel></rss>