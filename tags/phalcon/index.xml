<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>phalcon - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/phalcon/</link><description>phalcon - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 29 Nov 2014 09:58:00 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/phalcon/" rel="self" type="application/rss+xml"/><item><title>Phalcon项目中PHPUnit的初始化</title><link>http://0x3f.org/post/testing-with-phpunit-in-phalcon/</link><pubDate>Sat, 29 Nov 2014 09:58:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/testing-with-phpunit-in-phalcon/</guid><description><![CDATA[<p>参考<a href="http://docs.phalconphp.com/zh/latest/reference/unit-testing.html" target="_blank" rel="noopener noreffer">官方文档</a>，稍作修改。</p>
<p>在项目下创建目录unittests，进入目录执行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">composer require phpunit/phpunit
</code></pre></td></tr></table>
</div>
</div><p>创建tests目录并在其中创建文件Bootstrap.php：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">use</span> <span class="nx">Phalcon\DI</span><span class="p">,</span>
    <span class="nx">Phalcon\DI\FactoryDefault</span><span class="p">;</span>

<span class="nx">ini_set</span><span class="p">(</span><span class="s1">&#39;display_errors&#39;</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">error_reporting</span><span class="p">(</span><span class="k">E_ALL</span><span class="p">);</span>

<span class="nx">define</span><span class="p">(</span><span class="s1">&#39;ROOT_PATH&#39;</span><span class="p">,</span> <span class="no">__DIR__</span><span class="p">);</span>
<span class="nx">define</span><span class="p">(</span><span class="s1">&#39;PROJECT_DIR&#39;</span><span class="p">,</span> <span class="s1">&#39;/home/taoqi/workspace&#39;</span><span class="p">);</span>

<span class="nx">set_include_path</span><span class="p">(</span>
    <span class="nx">ROOT_PATH</span> <span class="o">.</span> <span class="nx">PATH_SEPARATOR</span> <span class="o">.</span> <span class="nx">get_include_path</span><span class="p">()</span>
<span class="p">);</span>

<span class="c1">// required for phalcon/incubator
</span><span class="c1"></span><span class="k">include</span> <span class="no">__DIR__</span> <span class="o">.</span> <span class="s2">&#34;/../vendor/autoload.php&#34;</span><span class="p">;</span>

<span class="c1">// 加载项目文件
</span><span class="c1"></span><span class="nv">$config</span> <span class="o">=</span> <span class="k">require_once</span> <span class="nx">PROJECT_DIR</span><span class="o">.</span><span class="s1">&#39;/web/config/config.php&#39;</span><span class="p">;</span>
<span class="k">require_once</span> <span class="nx">PROJECT_DIR</span><span class="o">.</span><span class="s1">&#39;/web/config/loader.php&#39;</span><span class="p">;</span>
<span class="nv">$loader</span><span class="o">-&gt;</span><span class="na">registerDirs</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
    <span class="nx">ROOT_PATH</span>
<span class="p">),</span> <span class="k">true</span><span class="p">);</span>

<span class="c1">// $di = new FactoryDefault();
</span><span class="c1"></span><span class="nx">DI</span><span class="o">::</span><span class="na">reset</span><span class="p">();</span>

<span class="c1">// add any needed services to the DI here
</span><span class="c1"></span><span class="k">require_once</span> <span class="nx">PROJECT_DIR</span><span class="o">.</span><span class="s1">&#39;/web/config/services.php&#39;</span><span class="p">;</span>

<span class="nx">DI</span><span class="o">::</span><span class="na">setDefault</span><span class="p">(</span><span class="nv">$di</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>安装phalcon的phpunit辅助库：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">composer require phalcon/incubator
</code></pre></td></tr></table>
</div>
</div><p>创建phpunit.xml：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;</span>
<span class="nt">&lt;phpunit</span> <span class="na">bootstrap=</span><span class="s">&#34;./Bootstrap.php&#34;</span>
        <span class="na">backupGlobals=</span><span class="s">&#34;false&#34;</span>
        <span class="na">backupStaticAttributes=</span><span class="s">&#34;false&#34;</span>
        <span class="na">verbose=</span><span class="s">&#34;true&#34;</span>
        <span class="na">colors=</span><span class="s">&#34;false&#34;</span>
        <span class="na">convertErrorsToExceptions=</span><span class="s">&#34;true&#34;</span>
        <span class="na">convertNoticesToExceptions=</span><span class="s">&#34;true&#34;</span>
        <span class="na">convertWarningsToExceptions=</span><span class="s">&#34;true&#34;</span>
        <span class="na">processIsolation=</span><span class="s">&#34;false&#34;</span>
        <span class="na">stopOnFailure=</span><span class="s">&#34;false&#34;</span>
        <span class="na">syntaxCheck=</span><span class="s">&#34;true&#34;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;testsuite</span> <span class="na">name=</span><span class="s">&#34;Phalcon - Testsuite&#34;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;directory&gt;</span>./<span class="nt">&lt;/directory&gt;</span>
    <span class="nt">&lt;/testsuite&gt;</span>
<span class="nt">&lt;/phpunit&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>创建单元测试基类UnitTestCase.php：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="k">use</span> <span class="nx">Phalcon\DI</span><span class="p">,</span>
    <span class="nx">\Phalcon\Test\UnitTestCase</span> <span class="k">as</span> <span class="nx">PhalconTestCase</span><span class="p">;</span>

<span class="k">abstract</span> <span class="k">class</span> <span class="nc">UnitTestCase</span> <span class="k">extends</span> <span class="nx">PhalconTestCase</span> <span class="p">{</span>

    <span class="sd">/**
</span><span class="sd">     * @var \Voice\Cache
</span><span class="sd">     */</span>
    <span class="k">protected</span> <span class="nv">$_cache</span><span class="p">;</span>

    <span class="sd">/**
</span><span class="sd">     * @var \Phalcon\Config
</span><span class="sd">     */</span>
    <span class="k">protected</span> <span class="nv">$_config</span><span class="p">;</span>

    <span class="sd">/**
</span><span class="sd">     * @var bool
</span><span class="sd">     */</span>
    <span class="k">private</span> <span class="nv">$_loaded</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">setUp</span><span class="p">(</span><span class="nx">Phalcon\DiInterface</span> <span class="nv">$di</span> <span class="o">=</span> <span class="k">NULL</span><span class="p">,</span> <span class="nx">Phalcon\Config</span> <span class="nv">$config</span> <span class="o">=</span> <span class="k">NULL</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">// Load any additional services that might be required during testing
</span><span class="c1"></span>        <span class="nv">$di</span> <span class="o">=</span> <span class="nx">DI</span><span class="o">::</span><span class="na">getDefault</span><span class="p">();</span>

        <span class="c1">// get any DI components here. If you have a config, be sure to pass it to the parent
</span><span class="c1"></span>        <span class="k">parent</span><span class="o">::</span><span class="na">setUp</span><span class="p">(</span><span class="nv">$di</span><span class="p">);</span>

        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_loaded</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>

    <span class="p">}</span>

    <span class="sd">/**
</span><span class="sd">     * Check if the test case is setup properly
</span><span class="sd">     * @throws \PHPUnit_Framework_IncompleteTestError;
</span><span class="sd">     */</span>
    <span class="k">public</span> <span class="k">function</span> <span class="fm">__destruct</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_loaded</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nx">\PHPUnit_Framework_IncompleteTestError</span><span class="p">(</span><span class="s1">&#39;Please run parent::setUp().&#39;</span><span class="p">);</span>

        <span class="p">}</span>

    <span class="p">}</span>

<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>创建单元测试类testsTestUnitTest.php：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>

<span class="k">namespace</span> <span class="nx">Test</span><span class="p">;</span>

<span class="sd">/**
</span><span class="sd"> * Class UnitTest
</span><span class="sd"> */</span>
<span class="k">class</span> <span class="nc">UnitTests</span> <span class="k">extends</span> <span class="nx">\UnitTestCase</span> <span class="p">{</span>

    <span class="k">public</span> <span class="k">function</span> <span class="nf">testTestCase</span><span class="p">()</span> <span class="p">{</span>
        <span class="nv">$post</span> <span class="o">=</span> <span class="nx">\Post</span><span class="o">::</span><span class="na">find</span><span class="p">(</span><span class="mi">33</span><span class="p">);</span>
        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">assertObjectHasAttribute</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="nv">$post</span><span class="p">,</span> <span class="s1">&#39;where is title ?&#39;</span><span class="p">);</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>在tests目录下建立phpunit的软连接并执行测试：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">ln -sf ../vendor/bin/phpunit run
./run
</code></pre></td></tr></table>
</div>
</div><p><strong>另</strong>：发现个诡异的问题，如果Model中不覆盖getSource()方法，单元测试中会自动找用下划线分隔的表名，即假如Model名为FooBar，会去找foo_bar的表名，但正常执行程序时找的是foobar。在官方论坛问的<a href="http://forum.phalconphp.com/discussion/4078/whats-the-principle-when-phalcon-gets-the-table-name-of-a-model" target="_blank" rel="noopener noreffer">问题</a>还木有解决。phalcon坑挺多的。</p>
]]></description></item></channel></rss>