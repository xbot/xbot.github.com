<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>数据库 - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/</link><description>数据库 - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 21 Jul 2020 16:25:09 +0800</lastBuildDate><atom:link href="http://0x3f.org/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/" rel="self" type="application/rss+xml"/><item><title>MySQL 事务的一致性、隔离级别与幻读问题</title><link>http://0x3f.org/post/isolation-levels-and-phantom-reads-in-mysql/</link><pubDate>Tue, 21 Jul 2020 16:25:09 +0800</pubDate><author>作者</author><guid>http://0x3f.org/post/isolation-levels-and-phantom-reads-in-mysql/</guid><description><![CDATA[<h2 id="数据库事务的一致性">数据库事务的一致性</h2>
<p>数据库事务有四个特性：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability），简称“ACID”。</p>
<p>其中，“一致性”指的是数据库层面的一致性，与应用层面的一致性不同。</p>
<p>数据库层面的一致性是说，事务具备把数据库从一个正确的状态迁移到另一个正确的状态的特性。所谓正确的状态，是指任何写入数据库的数据都满足数据库既定的规则，这些规则包括各种约束、级联回滚、触发器以及任何它们的组合。</p>
<p>与数据库层面的一致性不同，应用层面的一致性要求保证结果的正确性。例如，当执行如下 SQL 语句时：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">update</span> <span class="n">accounts</span> <span class="k">set</span> <span class="n">balance</span> <span class="o">=</span> <span class="n">balance</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">where</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">3</span>
</code></pre></td></tr></table>
</div>
</div><p>我希望最终的结果是在事务开始时 id = 3 的这行数据 balance 列的值的基础上加一，否则，结果就是不正确的。</p>
<p>因此，只要写入的数据满足数据库的规则，就保证了数据库层面的一致性。<strong>数据库层面的一致性并不保证数据正确</strong><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>。</p>
<h2 id="mysql-事务的隔离级别与幻读问题">MySQL 事务的隔离级别与幻读问题</h2>
<h3 id="隔离级别">隔离级别</h3>
<p>隔离性是指：多个事务并发执行时，每个事务对数据库所做的更改必须与其它事务隔离。</p>
<p>隔离性是并发控制的主要目标<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>，并发控制用来实现在保证应用层面一致性的前提下，尽可能快地对并发请求做出响应。由此可见，隔离性和并发能力是一对此消彼长的关系。极端情况下，如果并发的请求按顺序执行，隔离性是最好的，但是响应最慢，反之亦然。</p>
<p>在此基础上，产生了四个隔离级别的划分。由低到高依次为：读未提交、读已提交、可重复读、序列化。据前所述，它们的并发能力是依次下降的。</p>
<p>因此，<strong>隔离级别的本质是通过适度地破坏隔离性来提高并发能力。</strong></p>
<h3 id="隔离级别的问题">隔离级别的问题</h3>
<p>隔离级别不同，存在的问题也不一样。</p>
<p>“读未提交”的级别最低、并发能力最高，存在的问题也最多，包括：脏读、不可重复读、幻读。其中，脏读是这个级别独有的，即事务 A 读取了并发事务 B 未提交的数据。</p>
<p>“读已提交”顾名思义，事务 A 不会读取并发事务 B 未提交的数据，但可以读取其已提交的。因此，这个级别存在不可重复读和幻读的问题。</p>
<p>在“可重复读”级别下，同一事务中两次同样的查询结果一致，不会受并发事务的影响，它因此也解决了不可重复读的问题。但还会存在幻读问题。</p>
<p>“序列化”级别要求对查询的对象加范围锁并保持到事务结束，因此，它避免了幻读的问题。</p>
<h3 id="幻读问题phantom-reads">幻读问题（Phantom Reads）</h3>
<p>幻读问题是个很 tricky 的问题，以至于网上找到的很多文章对它的理解都是不全面甚至是错误的。</p>
<p>幻读即同一事务中两次相同查询的结果集不一致。乍一看，好像和不可重复读是一样的。那它们的区别是什么呢？</p>
<p>事实上，幻读是不可重复读的一种特殊情况。换句话说，<strong>只要存在幻行（Phantom Rows），就是幻读问题</strong>。</p>
<p>所谓幻行，即同一事务中两次相同的查询结果集的非空差集里的元素，或者说第二次查询后发现不存在于前一次结果集中的行。</p>
<p>幻行产生的原因主要是除“序列化”之外的隔离级别不要求对查询结果加范围锁，导致并发事务在查询范围内插入新的行后被当前事务查到。</p>
<h4 id="mvcc">MVCC</h4>
<p>在此基础上，MySQL 的 InnoDB 引擎实现了“多版本并发控制”（MVCC: Multiversion Concurrency Control）。</p>
<p>简单地说，InnoDB 的表存在两个隐藏列，用于记录每行数据的版本信息。当插入一行数据时，InnoDB 将当前事务的版本信息一并写入。当修改一行数据时，InnoDB 先将该行做一次复制，并把当前版本信息写入进去。查询时，只返回版本小于等于当前事务版本的数据。通过这样保证一个事务中查询到的是事务开始前已经存在的数据或当前事务写入的数据。其它事务写入的数据则不会被读取。</p>
<p>从这个意义上讲，InnoDB 通过 MVCC 解决了这种幻读问题。</p>
<h4 id="next-key-lock">Next-Key Lock</h4>
<p>上述普通的 SELECT 查询属于 InnoDB 读操作的一种：快照读。此外，还存在一种“当前读”。快照读顾名思义读取的是快照中的内容，而当前读读取的是当前最新的数据。INSERT、DELETE、UPDATE、SELECT &hellip; FOR UPDATE 都是当前读。</p>
<p>因此，还存在一种特殊情况：</p>
<p><figure><a class="lightgallery" href="https://www.plantuml.com/plantuml/svg/dP91Inj15CVlyoaUUbWZQzaau26WQ9iA7Wf5Ul4uoRx4mTsPC3jRzIP5gTQqKL4KyQ8WtX8F8j7aspIp9gT-XRx482nuybtUpEFFx__Ucrc83DSc3WF6edKXQrpp4FoQWBpdCMQ42H3iuuDj7FMU3kolgwHnR7Tlx66zrzxkjJk3a-RpnKvoUfVyRjfMj__pdgxsiTDlTGPdpS7rEGkmYj9dGF52W6-RMUYr_r3EZT79_ct_glwlMnS-sBspv7BVdhJ8uFd-sdPF_sx_O8I0COdnib5wI64-Dxp48uJYnzTgZWInKJ8EIwWP6vhDpCoJeW0bh0h9XhRfIaeKOO1b0zDGqIg4E48TmSOQQWHgRWxoJ2g3e4LrpO2gZ8QPzBnFdulP0dYWrKO4GXB5i9IJa4Gob8mQGwU4xmAleWkIXvY1xpo8aSfvbtRlWkChAT39f2Xb5OR2Z9QPQlhzz3UcMLfQf2Z0LDQRpRamKOnhWIXpqg4qUWkSl0CLslKwqddazk7holANnPLLPoB3s08z4lsd_m00" title="并发事务插入同一主键的数据导致的幻读问题" data-thumbnail="https://www.plantuml.com/plantuml/svg/dP91Inj15CVlyoaUUbWZQzaau26WQ9iA7Wf5Ul4uoRx4mTsPC3jRzIP5gTQqKL4KyQ8WtX8F8j7aspIp9gT-XRx482nuybtUpEFFx__Ucrc83DSc3WF6edKXQrpp4FoQWBpdCMQ42H3iuuDj7FMU3kolgwHnR7Tlx66zrzxkjJk3a-RpnKvoUfVyRjfMj__pdgxsiTDlTGPdpS7rEGkmYj9dGF52W6-RMUYr_r3EZT79_ct_glwlMnS-sBspv7BVdhJ8uFd-sdPF_sx_O8I0COdnib5wI64-Dxp48uJYnzTgZWInKJ8EIwWP6vhDpCoJeW0bh0h9XhRfIaeKOO1b0zDGqIg4E48TmSOQQWHgRWxoJ2g3e4LrpO2gZ8QPzBnFdulP0dYWrKO4GXB5i9IJa4Gob8mQGwU4xmAleWkIXvY1xpo8aSfvbtRlWkChAT39f2Xb5OR2Z9QPQlhzz3UcMLfQf2Z0LDQRpRamKOnhWIXpqg4qUWkSl0CLslKwqddazk7holANnPLLPoB3s08z4lsd_m00" data-sub-html="<h2>并发事务插入同一主键的数据导致的幻读问题</h2><p>并发事务插入同一主键的数据导致的幻读问题</p>">
        
    </a><figcaption class="image-caption">并发事务插入同一主键的数据导致的幻读问题</figcaption>
    </figure></p>
<p>以及另一种特殊情况：</p>
<p><figure><a class="lightgallery" href="https://www.plantuml.com/plantuml/svg/pPBFJjj04CRl-nGZzP2c2fAJ2Acg14A5la5VO1DFaXNsRcIleOSUeWh4Vo8G0LIWKY9Lt0Y7g8AIjsdM9AU-GcTj2_2XTtpvTdTcV_jz8o-5cWSwyZt6mbKXsppWFhXj0LN7OKmBxI745wFuzDRS_pBTeydlFRFRZxl7PlFdu_UDk7SR7zoOuNYwDQAjkN-O3XzcPpUpmJdpi8dIPK1VUWi-Vod3vEwGj08fBjwvdlRt_uxtUHF1R9_5bpkpgn_cP3YvwpoE1cRS-zFvnWW36OtnkbQ19J6NQrxZ8SBAnwVJ2ZL4Mid8hs70c7rmRcwHEZv03Pj2Cljq_YJN5AA7TGtle14e7w8GWn3MMnWW29VwzJgYXB83d1ozTvXK6Y4GpPO6rKZYlN6SvKyhvIJrLtl9YWrdLN8_MMJLIYhpJggkaW9jrSQrP9PpAoIvqIHQPSRU2hTasQK4N8GrxaL8nzKICKjGI825OevILxulT68W5pngqpWn0uUeKwyBKD3ABsGZi34M2Frg9aRUu4Mr-f_gypoNQ4d_-Zy0" title="更新并发事务插入的数据导致的幻读问题" data-thumbnail="https://www.plantuml.com/plantuml/svg/pPBFJjj04CRl-nGZzP2c2fAJ2Acg14A5la5VO1DFaXNsRcIleOSUeWh4Vo8G0LIWKY9Lt0Y7g8AIjsdM9AU-GcTj2_2XTtpvTdTcV_jz8o-5cWSwyZt6mbKXsppWFhXj0LN7OKmBxI745wFuzDRS_pBTeydlFRFRZxl7PlFdu_UDk7SR7zoOuNYwDQAjkN-O3XzcPpUpmJdpi8dIPK1VUWi-Vod3vEwGj08fBjwvdlRt_uxtUHF1R9_5bpkpgn_cP3YvwpoE1cRS-zFvnWW36OtnkbQ19J6NQrxZ8SBAnwVJ2ZL4Mid8hs70c7rmRcwHEZv03Pj2Cljq_YJN5AA7TGtle14e7w8GWn3MMnWW29VwzJgYXB83d1ozTvXK6Y4GpPO6rKZYlN6SvKyhvIJrLtl9YWrdLN8_MMJLIYhpJggkaW9jrSQrP9PpAoIvqIHQPSRU2hTasQK4N8GrxaL8nzKICKjGI825OevILxulT68W5pngqpWn0uUeKwyBKD3ABsGZi34M2Frg9aRUu4Mr-f_gypoNQ4d_-Zy0" data-sub-html="<h2>更新并发事务插入的数据导致的幻读问题</h2><p>更新并发事务插入的数据导致的幻读问题</p>">
        
    </a><figcaption class="image-caption">更新并发事务插入的数据导致的幻读问题</figcaption>
    </figure></p>
<p>以上两种情况都是在有当前读操作时可能发生的幻读问题。这是 MVCC 无法解决的。</p>
<p>InnoDB 用 Next-Key Lock 解决这种幻读问题。</p>
<p>Next-Key Lock 实际上是记录锁（Record Lock）和间隙锁（Gap Lock）的结合。加锁规则如下：</p>
<ol>
<li>Next-Key Lock 的格式是左开右闭。例如：( 5, 9 ] 表示间隙 ( 5, 9 ) 的间隙锁和 9 的行锁。</li>
<li>对查询条件范围的“行和间隙”（如果存在）加锁。</li>
<li>对于等值查询：
<ol>
<li>对于唯一索引，Next-Key Lock 退化为行锁。</li>
<li>向右遍历至查询条件范围内最后一个值右侧节点时，若该节点不满足等值条件，Next-Key Lock 退化为间隙锁。</li>
</ol>
</li>
</ol>
<p>例如，users 表结构如下：</p>
<table>
<thead>
<tr>
<th>列名</th>
<th>类型</th>
<th>索引</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td>bigint</td>
<td>唯一</td>
</tr>
<tr>
<td>age</td>
<td>smallint</td>
<td>不唯一</td>
</tr>
</tbody>
</table>
<p>表中的数据：</p>
<table>
<thead>
<tr>
<th>id</th>
<th>age</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>10</td>
</tr>
<tr>
<td>5</td>
<td>50</td>
</tr>
<tr>
<td>11</td>
<td>30</td>
</tr>
</tbody>
</table>
<p>对于上述第一种问题，事务 A 中通过任何一种当前读操作 id = 3 的行（例如 INSERT），都会自动给这个索引值加记录锁。此时，事务 B 中再插入 id = 3 的数据时就会被阻塞。从而避免了这种幻读问题。</p>
<p>对于第二种问题，事务 A 中对 age = 30 的数据加排他锁：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">users</span> <span class="k">where</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">30</span> <span class="k">for</span> <span class="k">update</span>
</code></pre></td></tr></table>
</div>
</div><p>数据库会加 ( (10, 1), (30, 11) ] 和 ( (30, 11), (50, 5) ] 两个 Next-Key Lock 。注意，由于 InnoDB 使用 B+ 树存储索引，且对于辅助索引， B+ 树叶子节点存储的是索引值和主键值，所以这里间隙用 <code>( ( 头节点索引值, 头节点主键值 ), ( 尾节点索引值, 尾节点主键值 ) )</code> 表示。而且，由于 (30, 11) 右侧间隙的尾结点 (50, 5) 不满足等值条件，所以这个 Next-Key Lock 退化为间隙锁 ( (30, 11), (50, 5) ) 。</p>
<p>此时，事务 B 更新 age = 30 的数据时将会被阻塞。也就避免了这种幻读问题。</p>
<h4 id="总结">总结</h4>
<p>InnoDB 通过 MVCC 解决了普通查询中的幻读问题，通过 Next-Key Lock 解决了当前读导致的幻读问题。</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://en.wikipedia.org/wiki/Consistency_(database_systems)">https://en.wikipedia.org/wiki/Consistency_(database_systems)</a> <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="https://en.wikipedia.org/wiki/ACID#Isolation">https://en.wikipedia.org/wiki/ACID#Isolation</a> <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></description></item><item><title>调校mycli</title><link>http://0x3f.org/post/fine-tune-mycli/</link><pubDate>Mon, 26 Jun 2017 18:05:31 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/fine-tune-mycli/</guid><description><![CDATA[<p>做以下配置，使mycli按需使用pager，并在数据过多时不破坏表格格式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-ini" data-lang="ini"><span class="c1"># ~/.my.cnf</span>

<span class="k">[client]</span>
<span class="na">pager</span> <span class="o">=</span> <span class="s">less -FSXR</span>

</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>用MySQL的全文检索实现相关性排序</title><link>http://0x3f.org/post/fulltext-searching-in-mysql/</link><pubDate>Mon, 19 Jun 2017 23:10:41 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/fulltext-searching-in-mysql/</guid><description><![CDATA[<p>实现根据文章的关键词搜索出相关的文章，并按相关性排序。</p>
<p>数据库版本是5.6.x，还不能像5.7那样支持中文的全文检索，所以另外创建一列保存关键词的编码。方法为base64转码并去掉「%」符号：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-php" data-lang="php"><span class="cp">&lt;?php</span>
<span class="sd">/**
</span><span class="sd"> * 转换关键词到全文检索的格式
</span><span class="sd"> *
</span><span class="sd"> * @param   mixed $keywords 关键词数组或英文逗号分隔的字符串
</span><span class="sd"> * @return  string
</span><span class="sd"> */</span>
<span class="k">function</span> <span class="nf">encode_keywords</span><span class="p">(</span><span class="nv">$keywords</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$encoder</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$keyword</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">str_replace</span><span class="p">(</span><span class="s1">&#39;%&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nx">urlencode</span><span class="p">(</span><span class="nx">trim</span><span class="p">(</span><span class="nv">$keyword</span><span class="p">)));</span>
    <span class="p">};</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">is_array</span><span class="p">(</span><span class="nv">$keywords</span><span class="p">))</span> <span class="p">{</span>
        <span class="nv">$keywords</span> <span class="o">=</span> <span class="nx">explode</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">,</span> <span class="nv">$keywords</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">implode</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="nx">array_map</span><span class="p">(</span><span class="nv">$encoder</span><span class="p">,</span> <span class="nv">$keywords</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>对该列创建全文检索的索引：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">CREATE</span> <span class="n">FULLTEXT</span> <span class="k">INDEX</span> <span class="n">idx_post_keywords</span> <span class="k">ON</span> <span class="n">posts</span> <span class="p">(</span><span class="n">keywords_ft</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>查询语句：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">SELECT</span>
    <span class="n">id</span><span class="p">,</span>
    <span class="n">title</span><span class="p">,</span>
    <span class="n">keywords</span><span class="p">,</span>
    <span class="p">(</span><span class="k">MATCH</span> <span class="p">(</span><span class="n">keywords_ft</span><span class="p">)</span> <span class="n">AGAINST</span> <span class="p">(</span><span class="s1">&#39;E697B6E5B09A E5A8B1E4B990E59C88&#39;</span> <span class="k">IN</span> <span class="k">NATURAL</span> <span class="k">LANGUAGE</span> <span class="k">MODE</span><span class="p">))</span> <span class="k">AS</span> <span class="o">`</span><span class="n">score</span><span class="o">`</span>
<span class="k">FROM</span>
    <span class="n">posts</span>
<span class="k">WHERE</span>
    <span class="k">MATCH</span> <span class="p">(</span><span class="n">keywords_ft</span><span class="p">)</span> <span class="n">AGAINST</span> <span class="p">(</span><span class="s1">&#39;E697B6E5B09A E5A8B1E4B990E59C88&#39;</span> <span class="k">IN</span> <span class="k">NATURAL</span> <span class="k">LANGUAGE</span> <span class="k">MODE</span><span class="p">)</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">score</span> <span class="k">DESC</span>
<span class="k">LIMIT</span> <span class="mi">10</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>读完《MongoDB权威指南》第二版</title><link>http://0x3f.org/post/after-reading-mongodb-the-definitive-guide/</link><pubDate>Sun, 26 Oct 2014 10:01:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/after-reading-mongodb-the-definitive-guide/</guid><description><![CDATA[<p></p>
<p>第二版比第一版补充了很多内容，介绍得很详细，是学习mongodb的好书。</p>
<p>但是翻译版有很多印刷错误，个别译句也有问题。</p>
]]></description></item><item><title>Navicat: 轻量的多数据库客户端</title><link>http://0x3f.org/post/navicat-a-light-weight-database-client/</link><pubDate>Wed, 06 Apr 2011 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/navicat-a-light-weight-database-client/</guid><description><![CDATA[<p><a href="http://www.navicat.com/en/">Navicat</a>是一套商业软件，但是它的免费版Navicat Lite已足够好用。作为一套数据库客户端，它具有以下特性：</p>

<ul>
<li>支持Microsoft SQL Server、Oracle、MySQL、PostgreSQL、SQLite五个最常见的关系数据库。</li>
<li>占用系统资源少，轻便快捷</li>
<li>功能较为全面，使用方便</li>
<li>跨平台</li>
</ul>

<p>我使用Navicat完成一般的数据库操作，这样可以无须在多种数据库的官方客户端之间来回切换，而且对于速度不快的机器来说，Navicat轻量的优势是很明显的。</p>

<p>Navicat另外一个为人所忽略的优点是对SQLite的支持，我曾花不少时间找一个好的SQLite的客户端，大部分搜索结果都介绍的是另外一个<a href="http://sqliteman.com/">Sqliteman</a>，但是我始终不能习惯它，感觉这个东西功能少而且不好用。直到发现Navicat，才算找到一个完善的SQLite客户端。</p>

<p>对于跨平台的特性，Navicat对Linux平台的支持其实是通过wine实现的，好在其安装包对wine已做过定制，运行状况良好。</p>

<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item><item><title>InstallShield在MySQL和Oracle中执行SQL脚本的方法</title><link>http://0x3f.org/post/howto-run-sql-scripts-in-mysql-oracle-within-installshield/</link><pubDate>Tue, 24 Aug 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/howto-run-sql-scripts-in-mysql-oracle-within-installshield/</guid><description><![CDATA[<h2>简述</h2>
<p>InstallShield已经内建了对MySQL和Oracle的支持。但是这个功能是通过ODBC实现的，它对SQL脚本的格式要求非常严格，因此已经通过官方客户端测试的脚本在IS中执行时往往就会报错。</p>
<p>一般来说，数据库脚本只保证通过官方客户端测试即可，同时维护一份供IS执行的脚本费时费力。因此，考虑安装程序对两数据库的支持通过官方客户端实现。</p>
<h2>MySQL</h2><br>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">function InstallMySQLComponent(szComponent)
    NUMBER nResult;
    STRING szServer,szDB,szUser,szPassword,sCMD,sOPT,sResult1,sResult2,svLine,sMsg,sPath;
    NUMBER nvFileHandle,nvCount;
    LIST listStatus;
begin
    sMsg = &#39;安装&#39;+szComponent+&#39; ...&#39;;
    SdShowMsg(sMsg, TRUE);
    // source命令不认识windows路径中的反斜杠，故将SRCDIR中的反斜杠替换成斜杠
    sPath = SRCDIR;
    StrReplace(sPath, &#39;\\&#39;, &#39;/&#39;, 0);
    // Fetch database connection information
    SQLRTGetConnectionInfo( &#39;mysql&#39;, szServer, szDB, szUser, szPassword );
    sCMD = WINSYSDIR^&#39;cmd.exe&#39;;
    sOPT = &#39; /c &#39;+SRCDIR^&#39;mysql.exe -h&#39;+szServer+&#39; -u&#39;+szUser+&#39; -p&#39;+szPassword+&#39; -D&#39;+szDB;
    sOPT = sOPT+&#39; -e &#34;source &#39;+sPath^szComponent+&#39;.sql&#34; &gt; &#39;+SRCDIR^&#39;dbstatus.txt 2&gt;&amp;1&#39;;
    // Execute the script associated with the given component in database
    nResult=LaunchAppAndWait(sCMD, sOPT, WAIT|LAAW_OPTION_HIDDEN);
    if (nResult &lt; 0) then
        MessageBox(&#39;Failed installing &#39;+szComponent+&#39; !&#39;, SEVERE);
        abort;
    endif;
    // 关闭安装提示
    SdShowMsg(&#39;&#39;, FALSE);
    // Read dbstatus.txt
    OpenFileMode(FILE_MODE_NORMAL);
    if (OpenFile(nvFileHandle, SRCDIR, &#39;dbstatus.txt&#39;)&lt;0) then
        MessageBox(&#39;Failed checking the status of installing &#39;+szComponent+&#39; !&#39;, SEVERE);
        abort;
    endif;
    listStatus = ListCreate(STRINGLIST);
    while GetLine(nvFileHandle, svLine) = 0
        ListAddString(listStatus, svLine, AFTER);
    endwhile;
    CloseFile(nvFileHandle);
    // Count how many lines fetched from dbstatus.txt
    nvCount = ListCount(listStatus);
    if nvCount &gt; 0 then
        sMsg = &#34;更新数据库出错，点“是”打开日志文件并退出安装，点“否”直接退出安装。\n&#34;;
        sMsg = sMsg+&#34;若错误可忽略，可选择数据库类型“none”以跳过数据库更新并直接更新程序，\n&#34;;
        sMsg = sMsg+&#34;然后在数据库中手工执行SQL脚本（安装后保存在script目录下）&#34;;
        nResult = AskYesNo(sMsg, YES);
        if (nResult = YES) then
            LaunchApp(WINSYSDIR^&#39;notepad.exe&#39;, SRCDIR^&#39;dbstatus.txt&#39;);
	endif;                   
        abort;
    endif;
end;
</code></pre></td></tr></table>
</div>
</div><h2>Oracle</h2><br>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">function InstallOracleComponent(szComponent)  
    NUMBER nResult,nvFileHandle,nIndex,nvCount;
    STRING sMsg,szServer,szDB,szUser,szPassword,sCMD,sOPT,sInstance,sTmp,svLine;
    LIST listStatus;
begin
    sMsg = &#39;安装&#39;+szComponent+&#39; ...&#39;;
    SdShowMsg(sMsg, TRUE);
    // Fetch database connection information
    SQLRTGetConnectionInfo( &#39;oracle&#39;, szServer, szDB, szUser, szPassword );
    nIndex = StrFind(szServer, &#39;:&#39;);
    nIndex = StrFindEx(szServer, &#39;/&#39;, nIndex);
    StrSub(sInstance, szServer, nIndex+1, 100);
    sCMD = WINSYSDIR^&#39;cmd.exe&#39;;
    sOPT = &#39; /c &#39;+&#39;sqlplus.exe -L -S &#39;+szUser+&#39;/&#39;+szPassword+&#39;@&#39;+sInstance;
    sOPT = sOPT+&#39; @&#39;+SRCDIR^szComponent+&#39;.sql &gt; &#39;+SRCDIR^&#39;dbstatus.txt 2&gt;&amp;1&#39;;
    // Execute the script associated with the given component in database
    nResult=LaunchAppAndWait(sCMD, sOPT, WAIT|LAAW_OPTION_HIDDEN);
    if (nResult &lt; 0) then
        MessageBox(&#39;Failed installing &#39;+szComponent+&#39; !&#39;, SEVERE);
        abort;
    endif;               
    // 关闭安装提示
    SdShowMsg(&#39;&#39;, FALSE);
    // 在dbstatus.txt中查询字符串holytail，如果存在，说明脚本已执行完
    if (FileGrep(SRCDIR^&#39;dbstatus.txt&#39;, &#39;holytail&#39;, svLine, nIndex, RESTART) = 0) then
        // 在dbstatus.txt中查询字符串ORA-，如果存在，说明脚本执行出现错误
        if (FileGrep(SRCDIR^&#39;dbstatus.txt&#39;, &#39;ORA-&#39;, svLine, nIndex, RESTART) = 0) then
            sMsg = &#34;更新数据库出错，点“是”打开日志文件并退出安装，点“否”直接退出安装。\n&#34;;
            sMsg = sMsg+&#34;若错误可忽略，可选择数据库类型“none”以跳过数据库更新并直接更新程序，\n&#34;;
            sMsg = sMsg+&#34;然后在数据库中手工执行SQL脚本（安装后保存在script目录下）&#34;;
            nResult = AskYesNo(sMsg, YES);
            if (nResult = YES) then
                LaunchApp(WINSYSDIR^&#39;notepad.exe&#39;, SRCDIR^&#39;dbstatus.txt&#39;);
            endif;                   
            abort;
        endif;
    else
        sMsg = &#34;更新数据库出错，点“是”打开日志文件并退出安装，点“否”直接退出安装。\n&#34;;
        sMsg = sMsg+&#34;若错误可忽略，可选择数据库类型“none”以跳过数据库更新并直接更新程序，\n&#34;;
        sMsg = sMsg+&#34;然后在数据库中手工执行SQL脚本（安装后保存在script目录下）&#34;;
        nResult = AskYesNo(sMsg, YES);
        if (nResult = YES) then
            LaunchApp(WINSYSDIR^&#39;notepad.exe&#39;, SRCDIR^&#39;dbstatus.txt&#39;);
        endif;                   
        abort;
    endif;
end;
</code></pre></td></tr></table>
</div>
</div><h2>总结</h2>
<ol>
	<li>为便于获取脚本在数据库中的执行结果，故通过官方客户端执行脚本时通过符号“<strong>></strong>”将客户端的输出信息重定向到<strong>dbstatus.txt</strong>中；同时，使用“<strong>2>&1</strong>”将标准错误输出重定向到标准输出设备上，当然，会进一步重定向到dbstatus.txt文件中，否则，无法获取出错信息。</li>
	<li>sqlplus执行SQL脚本后不会自动退出，故应在Oracle的脚本后加上语句“<strong>exit;</strong>”。</li>
	<li>重载<strong>OnSQLComponentInstalled()</strong>函数，并在其中禁止MySQL和Oracle的SQL脚本对应的Component被执行安装，然后通过以上两个函数更新数据库。</li>
</ol>
]]></description></item><item><title>Linux下使用freetds连接SQL Server</title><link>http://0x3f.org/post/connect-to-sqlserver-using-freetds-on-linux/</link><pubDate>Sun, 20 Jun 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/connect-to-sqlserver-using-freetds-on-linux/</guid><description><![CDATA[<p><a href="http://www.freetds.org">freetds</a>是第三方、开源的数据库客户端和连接库，支持Sybase和Microsoft SQL Server，它最大的好处是允许非Windows平台的程序连接SQL Server。</p>
<p>freetds的编译和安装命令如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">./configure --with-tdsver<span class="o">=</span>8.0 --enable-msdblib
make
make install
</code></pre></td></tr></table>
</div>
</div><p>configure的这两个参数是必不可少的，否则可能无法连接SQL Server。</p>
<p>安装后修改<strong>freetds.conf</strong>（<em>一般应该在/usr/local/etc/freetds.conf</em>），添加如下内容：</p>
<blockquote>
[mysvr]
        host = 10.1.29.40
        port = 1433
        tds version = 8.0
        client charset = utf-8
</blockquote>
<p>上述参数应根据实际情况修改。</p>
<p>最后使用如下命令测试连接：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">tsql -S mysvr -U sa -P <span class="m">123456</span>
</code></pre></td></tr></table>
</div>
</div><p>给公司产品做Linux下的安装包，把开发环境放在了Cygwin中，非常享受在全屏、半透明的mintty下敲命令。今天发现在Cygwin下也是可以编译安装Linux下的程序的，只是效率非常低下。故上述内容对Cygwin环境同样成立。</p>
]]></description></item><item><title>Inno Setup执行SQL脚本的方法</title><link>http://0x3f.org/post/howto-execute-sql-scripts-in-inno-setup/</link><pubDate>Mon, 17 May 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/howto-execute-sql-scripts-in-inno-setup/</guid><description><![CDATA[<p>作为和<a href="http://zh.wikipedia.org/zh-cn/Nullsoft%E8%85%B3%E6%9C%AC%E5%AE%89%E8%A3%9D%E7%B3%BB%E7%B5%B1">NSIS</a>并立的、两个最流行的免费Windows应用程序安装包制作工具之一，<a href="http://en.wikipedia.org/wiki/Inno_Setup">Inno</a>在学习难度上相对要低一些，非常适合对一些简单的桌面程序打包。但对于较复杂的安装过程，或者Web应用程序来说，我个人觉得不是Inno的强项。当然，既然Inno内嵌了<a href="http://zh.wikipedia.org/zh-cn/Pascal">Pascal</a>语言用以扩展功能，理论上不是不可以应付复杂的安装过程，但实现起来要复杂一些。</p>

<p>比如对于在安装过程中连接数据库并执行SQL脚本这样的需求，使用<a href="http://en.wikipedia.org/wiki/InstallShield">InstallShield</a>应该会简单地多，而Inno却不支持直接操作数据库，并且相关的资料说明少之又少，还不如NSIS丰富，以至于我踏破铁鞋无觅处，最终却在NSIS的资料中找到了思路。</p>

<p>主要的思路是，在安装过程中，调用数据库客户端连接数据库并执行SQL脚本，然后将执行结果或错误信息输出到文件中，最后通过分析这个文件来判断命令执行的结果。但是，既然是调用特定的客户端，那么对不同数据库的操作自然就有所区别，具体情况如下所述。</p>

<p>首先在打包脚本的<strong>[Files]</strong>段将必需的文件包含进来：</p>

```ini
[Files]
Source: "D:\Development\MyDemoApp\code\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "D:\Development\MyDemoApp\sqlcmd.exe"; Flags: dontcopy
Source: "D:\Development\MyDemoApp\sqlcmd.rll"; Flags: dontcopy
Source: "D:\Development\MyDemoApp\mysql.exe"; Flags: dontcopy
Source: "D:\Development\MyDemoApp\script_mssql.sql"; Flags: dontcopy
Source: "D:\Development\MyDemoApp\script_mysql.sql"; Flags: dontcopy
Source: "D:\Development\MyDemoApp\script_oracle.sql"; Flags: dontcopy
```

<p>在SQL Server中执行脚本的代码片断：</p>

```pascal
function ExecScriptInMSSQL(DBHost, DBLogin, DBPass, DBName: String): Boolean;
var
    ConnectExe: String;
    ConnectParam: String;
begin
    {解压临时文件}
    ExtractTemporaryFile('sqlcmd.exe');
    ExtractTemporaryFile('sqlcmd.rll');
    ExtractTemporaryFile('script_mssql.sql');
    {构造数据库连接字符串}
    ConnectExe := ExpandConstant('{tmp}') + '\sqlcmd.exe';
    ConnectParam := ' -S ' + DBHost
        + ' -U ' + DBLogin
        + ' -P ' + DBPass
        + ' -d ' + DBName
        + ' -i script_mssql.sql -o '
        + ExpandConstant('{tmp}') + '\dbstatus.txt';
    {建立数据库连接并执行脚本}
    if Exec(ConnectExe, ConnectParam, '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then begin
        Result := ResultCode = 0;
        LoadStringFromFile(ExpandConstant('{tmp}') + '\dbstatus.txt', StatusString);
        if StatusString <> '' then begin
            MsgBox(StatusString, mbError, MB_OK);
            Result := False;
        end else begin
            Result := True;
        end;
    end else begin
        MsgBox('Database update failed:'#10#10 + SysErrorMessage(ResultCode), mbError, MB_OK);
        Result := False;
    end;
end;
```

<p>在MySQL中执行脚本的代码片断：</p>

```pascal
function ExecScriptInMYSQL(DBHost, DBLogin, DBPass, DBName: String): Boolean;
var
    ConnectExe: String;
    ConnectParam: String;
begin
    {解压临时文件}
    ExtractTemporaryFile('mysql.exe');
    ExtractTemporaryFile('script_mysql.sql');
    {构造数据库连接字符串}
    ConnectExe := ExpandConstant('cmd');
    ConnectParam := ' /c "' + ExpandConstant('{tmp}') + '\mysql.exe'
        + ' -h' + DBHost
        + ' -u' + DBLogin
        + ' -p' + DBPass
        + ' -D' + DBName
        + ' -e "source ' + ExpandConstant('{tmp}') + '\script_mysql.sql"" > ' + ExpandConstant('{tmp}') + '\dbstatus.txt 2>&1';
    {建立数据库连接并执行脚本}
    if Exec(ConnectExe, ConnectParam, '', SW_HIDE, ewWaitUntilTerminated, ResultCode) then begin
        Result := ResultCode = 0;
        LoadStringFromFile(ExpandConstant('{tmp}') + '\dbstatus.txt', StatusString);
        if StatusString <> '' then begin
            MsgBox(StatusString, mbError, MB_OK);
            Result := False;
        end else begin
            Result := True;
        end;
    end else begin
        MsgBox('Database update failed:'#10#10 + SysErrorMessage(ResultCode), mbError, MB_OK);
        Result := False;
    end;
end;
```

<p>由于mysql.exe没有输出结果到文件的参数，故需要使用cmd.exe来运行mysql.exe以便将其输出重定向到文件dbstatus.txt中。此外，在命令的最后加上参数<strong>2&gt;&amp;1</strong>，将标准错误输出设备也重定向到文件上，否则命令执行的错误信息不会输出到文件中。</p>

<p>在Oracle中执行脚本的代码片断：</p>

```pascal
function ExecScriptInORACLE(ClientPath, DBInstance, DBLogin, DBPass: String): Boolean;
begin
    {解压临时文件}
    ExtractTemporaryFile('script_oracle.sql');
    {连接数据库并执行脚本}
    if Exec(ExpandConstant('cmd'), ' /c "' + ClientPath + ' -L -S ' + DBLogin
        + '/' + DBPass
        + '@' + DBInstance
        + ' @' + ExpandConstant('{tmp}') + '\script_oracle.sql > ' + ExpandConstant('{tmp}') + '\dbstatus.txt 2>&1',
        '',
        SW_HIDE, ewWaitUntilTerminated, ResultCode)
    then begin
        Result := ResultCode = 0;
        LoadStringFromFile(ExpandConstant('{tmp}') + '\dbstatus.txt', StatusString);
        if Pos('holytail', StatusString) <> 0 then begin
            {若输出信息中有“holytail”的子串，则表示脚本成功执行}
            {若执行有误，提示用户打开日志文件}
            if Pos('ORA-', StatusString) <> 0 then begin
                {提示用户脚本执行出错}
                if MsgBox('数据库更新出错，是否打开日志文件？', mbConfirmation, MB_YESNO) = IDYES then begin
                    {打开日志}
                    if not ShellExec('', ExpandConstant('{tmp}') + '\dbstatus.txt', '', '', SW_SHOW, ewNoWait, ErrorCode) then begin
                        MsgBox('日志文件打开错误！', mbError, MB_OK);
                    end;
                end;
                Result := False;
            {若执行无误，返回True}
            end else begin
                Result := True;
            end;
        end else if StatusString <> '' then begin
            MsgBox(StatusString, mbError, MB_OK);
            Result := False;
        end else begin
            Result := True;
        end;
    end else begin
        MsgBox('Database update failed:'#10#10 + SysErrorMessage(ResultCode), mbError, MB_OK);
        Result := False;
    end;
end;
```

<p>Oracle的客户端太大，不能集成到安装包中，应使用一个<strong>TInputFileWizardPage</strong>由用户选择sqlplus.exe的安装位置。同时，由于sqlplus.exe也没有输出结果到文件的参数，也须使用cmd.exe来运行它并重定向输出到文件。此外，由于sqlplus.exe执行脚本时无论成功还是失败，都会输出信息，故无法像使用sqlcmd.exe和mysql.exe那样简单地判断脚本是否执行成功，需要在脚本的最后通过select语句输出一个特殊的字符串到文件中，然后通过判断dbstatus.txt中是否存在该字符串来判断脚本的执行情况；且由于sqlplus.exe执行完脚本后不会自动退出，还要在脚本最后加上exit语句；故<strong>script_oracle.sql</strong>的最后必须是如下内容：</p>

```sql
SELECT 'holytail' FROM dual;
exit;
```
]]></description></item><item><title>SQL Server的自定义函数：统计两日期之间工作日的数量</title><link>http://0x3f.org/post/counting-days-between-dates-in-sqlserver/</link><pubDate>Sat, 13 Mar 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/counting-days-between-dates-in-sqlserver/</guid><description><![CDATA[<p>前段时间工作中遇到的一个需求，要求计算两个日期之间工作日的数量，即排除期间所有的周六和周日之后的天数。</p>

<p>在网上找到一个自定义函数，原函数有些小问题，例如如果传入的截止日期如果有时间且足够大，则计算结果可能出错，修正后代码如下：</p>

<p>
```sql
--函数：类似datediff，不统计期间所有的周六和周日
if exists (select * from dbo.sysobjects where id=object_id(N'[dbo].[f_WorkDay]') and xtype in (N'FN',N'IF',N'TF')) 
drop function [dbo].[f_WorkDay] 
GO

CREATE FUNCTION f_WorkDay(
@dt_begin   datetime,
@dt_end     datetime 
)RETURNS int 
AS 
BEGIN 
    DECLARE @workday int,@i int,@bz bit,@dt datetime 

    set @dt_begin = convert(datetime, convert(nvarchar(32), @dt_begin, 23))
    set @dt_end = convert(datetime, convert(nvarchar(32), @dt_end, 23))    

    IF @dt_begin>@dt_end 
        SELECT @bz=1,@dt=@dt_begin,@dt_begin=@dt_end,@dt_end=@dt 
    ELSE 
        SET @bz=0 

    SELECT @i=DATEDIFF(Day,@dt_begin,@dt_end),@workday=@i/7*5,@dt_begin=DATEADD(Day,@i/7*7,@dt_begin) 

    WHILE @dt_begin<@dt_end 
    BEGIN 
        SELECT @workday=CASE WHEN (@@DATEFIRST+DATEPART(Weekday,@dt_begin)-1)%7 BETWEEN 1 AND 5 THEN @workday+1 ELSE @workday END,@dt_begin=@dt_begin+1 
    END 

    RETURN(CASE WHEN @bz=1 THEN -@workday ELSE @workday END) 
END 
GO
```
</p>

<p>此函数的原理是，使用datediff计算两日期之间的差值A，然后取A与7的商，即计算期间内有几个整周。然后使用这个商与5相乘，得到所有整周内的工作日天数B。接着，使用A除以7再乘以7得到C，这就约去了A中最后不到一个整周的天数。再在起始日期的基础上加上C，得到一个新的起始日期，然后从这个新的起始日期开始遍历至截止日期的每一天，每增加一天，判断若此日期是工作日，则在C的基础上累加一。判断一个日期（假设使用@dt_begin表示）是否是工作日的方法是：<strong>(@@datefirst+datepart(Weekday, @dt_begin)-1)%7</strong>的值在1和5之间。</p>

<p>此外还有一个需求是计算两个日期之间排除最后一个周六周日后的天数，仿照上面的函数实现了一个新函数，现在想来，有点儿把问题复杂化了，完全可以直接从后往前推的。</p>

<p>
```sql
--函数：类似datediff，不统计截止日期@dt_end前最近一次的周六和周日，若dt_end是周日，则不统计其前面的那个周六。
if exists (select * from dbo.sysobjects where id=object_id(N'[dbo].[f_WorkDayOnce]') and xtype in (N'FN',N'IF',N'TF')) 
drop function [dbo].[f_WorkDayOnce]
GO

CREATE FUNCTION f_WorkDayOnce(
@dt_begin   datetime,
@dt_end     datetime 
)RETURNS int 
AS 
BEGIN 
    DECLARE @day_count int,@weekday int,@weekend_dropped int,@i int,@bz bit,@dt datetime 

    set @dt_begin = convert(datetime, convert(nvarchar(32), @dt_begin, 23))
    set @dt_end = convert(datetime, convert(nvarchar(32), @dt_end, 23))    

    IF @dt_begin>@dt_end 
        SELECT @bz=1,@dt=@dt_begin,@dt_begin=@dt_end,@dt_end=@dt 
    ELSE 
        SET @bz=0 

    SELECT @i=DATEDIFF(Day,@dt_begin,@dt_end),@weekday=(@@datefirst+datepart(weekday,@dt_end)-1)%7,@day_count=@i,@weekend_dropped=0

    if @i=0
        set @day_count=0
    else
    begin
        if @weekday=0
            set @day_count=@i-1
        else
        begin
            while @dt_begin<@dt_end and @weekend_dropped<2
            begin
                select @weekend_dropped=@weekend_dropped+(case when (@@datefirst+datepart(weekday,@dt_begin)-1)%7 between 1 and 5 then 0 else 1 end),@dt_begin=@dt_begin+1
            end
            select @day_count=@day_count-@weekend_dropped
        end
    end

    RETURN(CASE WHEN @bz=1 THEN -@day_count ELSE @day_count END) 
END 
GO
```
</p>
]]></description></item><item><title>SQLAlchemy操作SQL Server的中文问题</title><link>http://0x3f.org/post/chinese-problem-of-sqlalchemy-with-sqlserver/</link><pubDate>Wed, 24 Feb 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/chinese-problem-of-sqlalchemy-with-sqlserver/</guid><description><![CDATA[<p>最初将脚本的文件编码和coding行都设定为UTF-8，在windows下执行时，中文无法保存，报编码错误。将上述两个编码改为GBK后，保存正常，但查询时报错。</p>

<p>Traceback内容如下：</p>

```
Traceback (most recent call last):
File "test.py", line 36, in <code>&lt;module&gt;</code>
&nbsp;&nbsp;&nbsp;&nbsp;for obj in session.query(User):
File "C:\Python26\lib\site-packages\sqlalchemy-0.6beta1-py2.6.egg\sqlalchemy\orm\query.py", line 1411, in instances
&nbsp;&nbsp;&nbsp;&nbsp;rows = [process[0](row, None) for row in fetch]
File "C:\Python26\lib\site-packages\sqlalchemy-0.6beta1-py2.6.egg\sqlalchemy\orm\mapper.py", line 1788, in _instance
&nbsp;&nbsp;&nbsp;&nbsp;populate_state(state, dict_, row, isnew, only_load_props)
File "C:\Python26\lib\site-packages\sqlalchemy-0.6beta1-py2.6.egg\sqlalchemy\orm\mapper.py", line 1677, in populate_state
&nbsp;&nbsp;&nbsp;&nbsp;populator(state, dict_, row, isnew=isnew, **flags)
File "C:\Python26\lib\site-packages\sqlalchemy-0.6beta1-py2.6.egg\sqlalchemy\orm\strategies.py", line 118, in new_execute
&nbsp;&nbsp;&nbsp;&nbsp;dict_[key] = row[col]
File "C:\Python26\lib\site-packages\sqlalchemy-0.6beta1-py2.6.egg\sqlalchemy\engine\base.py", line 1634, in __getitem__
&nbsp;&nbsp;&nbsp;&nbsp;return self.__colfuncs[key][0](self.__row)
File "C:\Python26\lib\site-packages\sqlalchemy-0.6beta1-py2.6.egg\sqlalchemy\engine\base.py", line 1716, in getcol
&nbsp;&nbsp;&nbsp;&nbsp;return processor(row[index])
File "C:\Python26\lib\site-packages\sqlalchemy-0.6beta1-py2.6.egg\sqlalchemy\types.py", line 568, in process
&nbsp;&nbsp;&nbsp;&nbsp;return decoder(value)[0]
File "C:\Python26\lib\encodings\utf_8.py", line 16, in decode
&nbsp;&nbsp;&nbsp;&nbsp;return codecs.utf_8_decode(input, errors, True)
UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)</p>
```

<p>环境为：</p>

<p>OS：Windows XP简体中文版
DB：SQL Server 2008 Express简体中文版
DB模块：pyodbc
脚本文件编码：GBK
脚本coding行：GBK</p>

<p>脚本内容：</p>

<p>
```python
#!/usr/bin/python
# -*- encoding: gbk -*-

from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy import Column, Integer, String, Text, ForeignKey, Numeric, Unicode

Base = declarative_base()

class User(Base):
    """User class"""

    __tablename__ = 'users'

    id = Column(Numeric(22,0), primary_key=True)
    name = Column(Unicode(128), nullable=False, unique=True)

    def __init__(self, id, name):
        self.id = id
        self.name = name

if __name__ == '__main__':
    db_engine = create_engine('mssql://sa:password@localhost/mydatabase', echo=True)
    Session = sessionmaker(bind=db_engine)
    session = Session()

    Base.metadata.drop_all(db_engine)
    Base.metadata.create_all(db_engine)

    jim = User(1, '中文')
    session.add(jim)
    session.commit()

    '''
    for obj in session.query(User):
        print obj.name
    '''
```
</p>

<p>上面的脚本执行后，数据得以正常保存，在数据库中的查询结果也正常，没有乱码。但是，当把从drop_all()到commit()行注释掉，取消for循环前后的多行字符串起止符后，即运行查询时，抛出上面的Traceback。</p>

<p>Google了很长时间，没有找到有用的东西。CPyUG更没指望。</p>

<p>回溯Traceback，打开sqlalchemy的types.py，UnicodeEncodeError的抛出点在String类的result_processor()方法：</p>

<p>
```python
def result_processor(self, dialect, coltype):
    wants_unicode = self.convert_unicode or dialect.convert_unicode
    needs_convert = wants_unicode and \
                    (not dialect.returns_unicode_strings or 
                    self.convert_unicode == 'force')

    if needs_convert:
        # note we *assume* that we do not have a unicode object
        # here, instead of an expensive isinstance() check.
        decoder = codecs.getdecoder(dialect.encoding)
        def process(value):
            if value is not None:
                # decoder returns a tuple: (value, len)
                return decoder(value)[0]
            else:
                return value
        return process
    else:
        return None
```
</p>

<p>这个方法就是根据数据库方言dialect和字段类型coltype返回一个字符串的解码函数。若在if语句上面将needs_convert置为False，即不对该字段使用解码器，则再执行上面的脚本时，查询正常。</p>

<p>由于前面create_engine()函数的encoding参数缺省为UTF-8，故dialect.encoding的值为“UTF-8”，故if语句中decoder实际引用的是codecs.utf_8_decode()。也就是说，result_processor()方法在实际执行过程中返回的是一个封装了utf_8_decode()函数的函数。即，UnicodeEncodeError是在对从数据库中查询出来的中文字符串进行UTF-8解码时抛出的。</p>

<p>对传入process()函数的值作isinstance(value,unicode)判断，显示为True，表明从数据库中查询出来的中文本身就是unicode字节码，当对它再进行UTF-8解码时，就抛出了UnicodeEncodeError的错误。为验证以上判断，做如下实验：</p>

<p>
```python
>>>t = '中文'
>>>u = u'中文'
>>>isinstance(t, str)
True
>>>isinstance(t, unicode)
False
>>>isinstance(u, str)
False
>>>isinstance(u, unicode)
True
>>>x = t.decode('utf-8')
>>>x
u'\u4e2d\u6587'
>>>isinstance(x, unicode)
True
>>>x == u
True
>>> import codecs
>>> dc = codecs.getdecoder('utf-8')
>>> dc(u)
Traceback (most recent call last):
  File "<input>", line 1, in <module>
  File "/usr/lib/python2.6/encodings/utf_8.py", line 16, in decode
    return codecs.utf_8_decode(input, errors, True)
UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)
```
</p>

<p>得证。</p>

<p>在Python中，字符串类型str和unicode类型是两种不同的数据类型，str类型的数据可以通过指定正确的编码来转换成unicode类型，对unicode类型的数据作重复的解码操作就会抛出类似上面的错误。</p>

<p>实事上，若将name字段声明为String类，则保存和查询操作均无问题。但由于我需要sqlalchemy建表时将相应字段的类型设为nvarchar，故必须使用Unicode类声明该列。</p>

<p>那有没有办法使result_processor()方法不返回一个对字段值作重复解码的函数呢？</p>

<p>返回result_processor()方法，self.convert_unicode对于Unicode类是True，dialect.convert_unicode由create_engine()函数的convert_unicode参数控制，缺省为False，故needs_convert变量为True，无法更改；dialect.returns_unicode_strings是由sqlalchemy.engine模块default.py中的DefaultDialect类的_check_unicode_returns()方法返回的，该方法内容为：</p>

<p>
```python
def _check_unicode_returns(self, connection):
    cursor = connection.connection.cursor()
    cursor.execute(
        str(
            expression.select( 
            [expression.cast(
                expression.literal_column("'test unicode returns'"),sqltypes.VARCHAR(60))
            ]).compile(dialect=self)
        )
    )

    row = cursor.fetchone()
    result = isinstance(row[0], unicode)
    cursor.close()
    return result
```
</p>

<p>此方法的功能为生成一条SQL语句，在数据库中执行后，判断返回的值是否为unicode类型。由于SQL Server是ASCII编码，故此方法返回False。因此，dialect.returns_unicode_strings的值为False。最终，needs_convert只能为True。我觉得这是sqlalchemy的一个Bug。</p>

<p>在此条件下，目前尚未找到较好的解决办法，只能使用硬编码强制置result_processor()方法中的needs_convert变量为False。</p>

<p><strong>2010-02-25 更新：</strong></p>

<p>谢谢KL童鞋指出问题原因和解决办法，使问题得以完美解决。</p>

<p>1、由于Python在载入site模块时会删除setdefaultencoding()函数，故不能以在脚本开头调用此函数的方式指定默认编码；sitecustomize.py是一个python会自动导入的模块，故应当使用这个文件指定默认编码；</p>

<p>2、我这里需要使用utf-8作默认编码器，sitecustomize.py的内容如下：</p>

<p>
```python
#!/usr/bin/python
# -*- coding: gbk -*-
import sys
sys.setdefaultencoding('utf-8')
```
</p>

<p>3、将sitecustomize.py保存到python安装目录下的Lib\site-packages目录中；</p>

<p>另外，在<a href="http://www.woodpecker.org.cn/diveintopython/xml_processing/unicode.html">此处</a>发现了跟本问题相关的资料，辅助治疗，效果更佳。</p>
]]></description></item></channel></rss>