<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>wiki - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/wiki/</link><description>wiki - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 10 Apr 2017 16:36:27 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/wiki/" rel="self" type="application/rss+xml"/><item><title>编写接口文档的最佳实践</title><link>http://0x3f.org/post/the-best-practice-of-writing-api-documents/</link><pubDate>Mon, 10 Apr 2017 16:36:27 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/the-best-practice-of-writing-api-documents/</guid><description><![CDATA[<p></p>
<h2 id="前言">前言</h2>
<p>传统的做法是用office写接口文档，这种方式的缺点很多：</p>
<h3 id="格式混乱">格式混乱</h3>
<p>事实上，所有的传统富文本文档都存在这个问题，富文本的跨平台兼容性很差，很容易造成格式错乱。</p>
<h3 id="版本管理困难">版本管理困难</h3>
<p>依赖文件系统管理文档是很落后的做法，很难保证手头的文档是最新的版本。</p>
<h3 id="兼容性差">兼容性差</h3>
<p>不是所有人都用windows。</p>
<h3 id="低效">低效</h3>
<p>对效率的负面影响很大程度上已经包含在前面几项里。此外，编辑工具的臃肿、编辑内容的同时还要调整样式、缺少全文检索等，也是导致效率下降的原因。</p>
<h2 id="理想情况">理想情况</h2>
<p>理想的接口文档应该有以下特征：</p>
<h3 id="方便创作">方便创作</h3>
<p>文档编辑最重要的是文档的内容，而不是编辑操作本身。所以编写文档的过程应该是简单快捷的，而且最好不需要额外的学习成本。</p>
<h3 id="排版简洁规范">排版简洁规范</h3>
<p>技术文档的排版，简洁规范是最重要的，花哨的排版会降低效率。</p>
<h3 id="方便查阅">方便查阅</h3>
<p>应该有目录或者大纲视图，并且可以方便地全文检索。</p>
<h3 id="在线协作">在线协作</h3>
<p>传统的离线文档不方便协作。</p>
<h3 id="多端兼容">多端兼容</h3>
<p>允许在大多数常见平台编辑和使用文档。</p>
<h3 id="版本管理">版本管理</h3>
<p>可以查看什么人在什么时间改了哪些内容。</p>
<h3 id="交互式文档">交互式文档</h3>
<p>所见即所得。可以修改参数、发送请求并查看接口返回值。</p>
<h3 id="可订阅">可订阅</h3>
<p>可以给接口打标签。用户可以订阅任意标签下的接口变更，也可以针对接口订阅。</p>
<h3 id="自动生成">自动生成</h3>
<p>如果代码的可读性足够好，何必浪费时间写文档？或者至少可以自动生成。</p>
<h2 id="当前实践">当前实践</h2>
<p>理想很丰满，但是目前还没有能满足以上所有需求的解决方案。权衡之下，markdown和wiki是目前比较合适的方案。</p>
<h3 id="markdown">markdown</h3>
<p>用markdown写文档有以下特点：</p>
<ul>
<li>适合单文档形式</li>
<li>主流git托管平台都支持</li>
<li>适合个人创作</li>
<li>适合小型项目、需要移交开发成果的项目</li>
</ul>
<p>下面是用markdown写的接口文档的例子：
</p>
<p>主流markdown编辑器在转换过程中会为标题添加锚点，利用这个特性可以实现从接口列表跳转到接口详情。</p>
<h4 id="最佳工具">最佳工具</h4>
<p><a href="https://www.zybuluo.com" target="_blank" rel="noopener noreffer">Cmd Markdown</a></p>
<ul>
<li>美观</li>
<li>跨平台</li>
<li>编辑操作支持Vim模式</li>
</ul>
<h3 id="wiki">wiki</h3>
<p>用wiki写文档有这些特点：</p>
<ul>
<li>方便多层级文档</li>
<li>需要自己搭建平台</li>
<li>适合团队创作</li>
<li>适合长期、大型项目</li>
</ul>
<h4 id="最佳工具-1">最佳工具</h4>
<p><a href="https://www.dokuwiki.org" target="_blank" rel="noopener noreffer">dokuwiki</a></p>
<ul>
<li>刚刚好</li>
</ul>
<h2 id="结论">结论</h2>
<p>综上，小型的、托管在主流git平台的项目适合用markdown，公司级项目用wiki更好。但这还达不到理想的标准，需要继续探索更好的解决方案。</p>
]]></description></item><item><title>升级到wordpress3.0</title><link>http://0x3f.org/post/after-upgrading-to-wordpress30/</link><pubDate>Sat, 19 Jun 2010 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/after-upgrading-to-wordpress30/</guid><description><![CDATA[<p>昨天发现wordpress3.0已经发布，就顺手升级了。</p>
<p>略看了一下更新内容，几乎没什么让我感兴趣的，但与MU版本的合并堪称WP历史上的一个里程碑，从此一套WP可以支持创建多个博客了。</p>
<p>但我最近几度都想把博客换到dokuwiki下。</p>
<p>自从<a href="http://0x3f.org/?p=1455">开始用dokuwiki来组织知识和GTD</a>以来，我对wiki产生了越来越深的痴迷，最主要的原因就是它可以用很简单的语法写出格式规整的文章，我几乎可以不用考虑排版布局而只需把注意力放在文章内容上就行了。而将wiki上的文章发到博客上时，还需要重写，比较浪费时间。</p>
<p>但我最终放弃这个想法，最主要的原因是博客文章太多了，截至现在已经有五百多篇且大多是用HTML写的，难以转换。何况WP作为一个博客系统较wiki有着天生的优势，使用较为方便，如果用wiki来做博客，要做不少工作。</p>
]]></description></item></channel></rss>