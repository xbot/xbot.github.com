<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>插件 - 标签 - 晴耕雨讀</title><link>http://0x3f.org/tags/%E6%8F%92%E4%BB%B6/</link><description>插件 - 标签 - 晴耕雨讀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 24 Feb 2016 11:06:00 +0000</lastBuildDate><atom:link href="http://0x3f.org/tags/%E6%8F%92%E4%BB%B6/" rel="self" type="application/rss+xml"/><item><title>FastFold：Vim折叠功能的救赎</title><link>http://0x3f.org/post/fastfold-for-vim/</link><pubDate>Wed, 24 Feb 2016 11:06:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/fastfold-for-vim/</guid><description><![CDATA[<p>设置Vim的折叠规则为syntax存在两个问题。一是如果源码中有大量折叠区域，在插入模式中输入会变得很卡。二是刚输入一个折叠区域的起始符号，后面所有的折叠都会被打开。</p>
<p>第一个问题是因为Vim的syntax折叠规则处理过于低效。而后一个问题对于所有自动折叠规则都会存在，原因是Vim对折叠的更新过早。</p>
<p>传统的解决办法是将折叠规则置为manual，并在合适的时机重置为syntax或其它相应规则。但是工作繁复而且往往问题很多。</p>
<p><a href="https://github.com/Konfekt/FastFold" target="_blank" rel="noopener noreffer">FastFold</a>是遵循上面所说的方法解决这些问题的插件，不过默认会在所有与折叠相关的时机更新折叠，会导致相关的操作变慢，例如zc和zo时都会有明显的卡顿。鉴于其它时机对折叠的更新已经足够及时，可以通过配置取消受在到明显影响的时机更新折叠：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="c">&#34; FastFold只在za/zA/zx/zX时更新折叠信息</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">fastfold_fold_command_suffixes</span> <span class="p">=</span>  [<span class="s1">&#39;x&#39;</span><span class="p">,</span><span class="s1">&#39;X&#39;</span><span class="p">,</span><span class="s1">&#39;a&#39;</span><span class="p">,</span><span class="s1">&#39;A&#39;</span>]<span class="err">
</span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>FZF: 又一个文件模糊查询工具</title><link>http://0x3f.org/post/fzf-yet-another-fuzzy-finder/</link><pubDate>Mon, 01 Feb 2016 11:42:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/fzf-yet-another-fuzzy-finder/</guid><description><![CDATA[<p><a href="https://github.com/junegunn/fzf" target="_blank" rel="noopener noreffer">fzf</a>是个独立的命令行工具，索引速度很快，可以通过<a href="https://github.com/junegunn/fzf.vim" target="_blank" rel="noopener noreffer">fzf-vim</a>配合使用。</p>
<h2 id="特性">特性</h2>
<p>功能支持还是比较全的：</p>
<table>
<thead>
<tr>
<th>Command</th>
<th>List</th>
</tr>
</thead>
<tbody>
<tr>
<td>Files [PATH]</td>
<td>Files (similar to  <code>:FZF</code> )</td>
</tr>
<tr>
<td>GitFiles</td>
<td>Git files</td>
</tr>
<tr>
<td>Buffers</td>
<td>Open buffers</td>
</tr>
<tr>
<td>Colors</td>
<td>Color schemes</td>
</tr>
<tr>
<td>Ag [PATTERN]</td>
<td>{ag}{5} search result (ALT-A to select all, ALT-D to deselect all)</td>
</tr>
<tr>
<td>Lines</td>
<td>Lines in loaded buffers</td>
</tr>
<tr>
<td>BLines</td>
<td>Lines in the current buffer</td>
</tr>
<tr>
<td>Tags</td>
<td>Tags in the project ( <code>ctags -R</code> )</td>
</tr>
<tr>
<td>BTags</td>
<td>Tags in the current buffer</td>
</tr>
<tr>
<td>Marks</td>
<td>Marks</td>
</tr>
<tr>
<td>Windows</td>
<td>Windows</td>
</tr>
<tr>
<td>Locate PATTERN</td>
<td><code>locate</code>  command output</td>
</tr>
<tr>
<td>History</td>
<td><code>v:oldfiles</code>  and open buffers</td>
</tr>
<tr>
<td>History:</td>
<td>Command history</td>
</tr>
<tr>
<td>History/</td>
<td>Search history</td>
</tr>
<tr>
<td>Snippets</td>
<td>Snippets ({UltiSnips}{6})</td>
</tr>
<tr>
<td>Commits</td>
<td>Git commits (requires {fugitive.vim}{7})</td>
</tr>
<tr>
<td>BCommits</td>
<td>Git commits for the current buffer</td>
</tr>
<tr>
<td>Commands</td>
<td>Commands</td>
</tr>
<tr>
<td>Maps</td>
<td>Normal mode mappings</td>
</tr>
<tr>
<td>Helptags</td>
<td>Help tags [1]</td>
</tr>
</tbody>
</table>
<h2 id="结论">结论</h2>
<p>fzf需要在终端中执行，在vim中使用时需要另外启动一个xterm实例，UI的割裂感很强，而且xterm本身的操性你懂的。另外Tags模式需要两次回车。所以暂不会用它取代ctrlp和unite。</p>
]]></description></item><item><title>ctags vs gtags vs phpctags</title><link>http://0x3f.org/post/ctags-vs-gtags-vs-phpctags/</link><pubDate>Fri, 29 Jan 2016 17:55:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/ctags-vs-gtags-vs-phpctags/</guid><description><![CDATA[<p>这两天把源码分析工具从ctags向gtags迁移，另外尝试了一下phpctags。</p>
<p>之前用ctags有两个问题，一个是如果同一tag有多个定义，按Ctrl+]只能跳转到第一处。另一个是用cscope查询tag的调用记录时，有些tag查不到结果。</p>
<p>几年前接触过gtags，因为当时还不支持宇宙最好语言，所以没用。这次测试了一下，前面两个ctags的问题都可以解决。</p>
<p>安装后需要手工拷贝gtags.vim和gtags-cscope.vim到vim的plugin目录，然后配置如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-vim" data-lang="vim"><span class="k">let</span> <span class="nx">Gtags_Close_When_Single</span> <span class="p">=</span> <span class="m">1</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">Gtags_Auto_Update</span> <span class="p">=</span> <span class="m">0</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">cscope_silent</span> <span class="p">=</span> <span class="m">1</span><span class="err">
</span><span class="err"></span><span class="nx">au</span> <span class="nx">FileType</span> <span class="nx">php</span><span class="p">,</span><span class="nx">python</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">cpp</span><span class="p">,</span><span class="nx">javascript</span><span class="p">,</span><span class="nx">go</span> <span class="nx">map</span> <span class="p">&lt;</span><span class="nx">C</span><span class="p">-</span>]<span class="p">&gt;</span> :<span class="nx">Gtags</span><span class="p">&lt;</span><span class="nx">CR</span><span class="p">&gt;&lt;</span><span class="nx">CR</span><span class="p">&gt;</span><span class="err">
</span><span class="err"></span><span class="nx">au</span> <span class="nx">FileType</span> <span class="nx">php</span><span class="p">,</span><span class="nx">python</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">cpp</span><span class="p">,</span><span class="nx">javascript</span><span class="p">,</span><span class="nx">go</span> <span class="nx">map</span> <span class="p">&lt;</span><span class="nx">C</span><span class="p">-</span>[<span class="p">&gt;</span> :<span class="nx">Gtags</span> <span class="p">-</span><span class="nx">r</span><span class="p">&lt;</span><span class="nx">CR</span><span class="p">&gt;&lt;</span><span class="nx">CR</span><span class="p">&gt;</span><span class="err">
</span><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">leader</span><span class="p">&gt;&lt;</span><span class="nx">C</span><span class="p">-</span>]<span class="p">&gt;</span> :<span class="nx">execute</span> <span class="s1">&#39;Unite gtags/def:&#39;</span>.<span class="nx">expand</span><span class="p">(</span><span class="s1">&#39;&lt;cword&gt;&#39;</span><span class="p">)&lt;</span><span class="nx">CR</span><span class="p">&gt;</span><span class="err">
</span><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">leader</span><span class="p">&gt;&lt;</span><span class="nx">C</span><span class="p">-</span>[<span class="p">&gt;</span> :<span class="nx">execute</span> <span class="s1">&#39;Unite gtags/ref:&#39;</span>.<span class="nx">expand</span><span class="p">(</span><span class="s1">&#39;&lt;cword&gt;&#39;</span><span class="p">)&lt;</span><span class="nx">CR</span><span class="p">&gt;</span><span class="err">
</span></code></pre></td></tr></table>
</div>
</div><p>其它选项参见前面两个文件里的注释。</p>
<p>另外尝试了一下phpctags，据说和ctags兼容并对php做了优化。实际使用效果和ctags没发现有什么区别，不过tagbar-phpctags倒是比tagbar用ctags时效果更好。</p>
]]></description></item><item><title>How to Make YouCompleteMe Compatible with UltiSnips</title><link>http://0x3f.org/post/make-youcompleteme-ultisnips-compatible/</link><pubDate>Thu, 23 May 2013 11:26:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/make-youcompleteme-ultisnips-compatible/</guid><description><![CDATA[<p>I replaced <a href="https://github.com/Shougo/neocomplcache" target="_blank" rel="noopener noreffer">NeoComplCache</a> with <a href="https://github.com/Valloric/YouCompleteMe" target="_blank" rel="noopener noreffer">YouCompleteMe</a> today. The main reason is for the auto-complete feature and the fast speed. Besides, it seems that YCM provides more features than NCC.</p>
<p>Although NCC can also do auto-completions, it was so slow that I had to turn it off. For a long time, I have been doing completions by triggering the TAB key manually. YCM is much faster in most conditions, but I found it is also slow for C source files. Moreover, with the power of <a href="https://github.com/davidhalter/jedi" target="_blank" rel="noopener noreffer">jedi</a>, YCM makes completions of python sources much wiser, which is very convenient.</p>
<p>Then a problem raised again. It&rsquo;s the confiliction of mappings for Tab key between YCM and <a href="https://github.com/SirVer/ultisnips" target="_blank" rel="noopener noreffer">UltiSnips</a>. Many people changed the default mapping of either YCM or UltiSnips, but I cannot tolerate that. I insist that the most convenient way is UltiSnips having a higher priority above YCM, which means, when Tab is triggered, UltiSnips expands the snippet, if there is not a valid snippet, YCM will take over the job.</p>
<p>Fortunately, there is a solution. The idea is the same with <a href="/post/neocomplcache-vim/" rel="">my former post about NCC</a>. I made it by the help of <a href="https://github.com/ervandew/supertab" target="_blank" rel="noopener noreffer">SuperTab</a>.</p>
<p>I have to say that UltiSnips is a well-written script, it passes Tab key through if there is not a snippet. Then SuperTab will be triggered. Since the default action of SuperTab is customizable, so I can set it to the key-binding of YCM. That is the whole trick.</p>
<p>First, change the default key-binding of YCM to &lt;C-TAB&gt; and &lt;C-S-TAB&gt;:</p>
<blockquote>
<p>let g:ycm_key_list_select_completion = ['&lt;C-TAB&gt;&rsquo;, &lsquo;&lt;Down&gt;&rsquo;]<br>
let g:ycm_key_list_previous_completion = ['&lt;C-S-TAB&gt;&rsquo;, &lsquo;&lt;Up&gt;&rsquo;]</p>
</blockquote>
<p>Then set the default action of SuperTab to triggering &lt;C-TAB&gt;:</p>
<blockquote>
<p>let g:SuperTabDefaultCompletionType = &lsquo;&lt;C-Tab&gt;&rsquo;</p>
</blockquote>
<p>OK, job done.</p>
<h3 id="相关阅读">相关阅读：</h3>
<ul>
<li><a href="/post/replace-youcompleteme-with-neocomplete/" rel="">用neocomplete换掉了YouCompleteMe</a></li>
<li><a href="/post/neocomplcache-vim/" rel="">Vim的终极自动补全插件：NeoComplCache</a></li>
</ul>
]]></description></item><item><title>Vundle vs Pathogen</title><link>http://0x3f.org/post/vundle-vs-pathogen/</link><pubDate>Wed, 22 May 2013 21:33:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/vundle-vs-pathogen/</guid><description><![CDATA[<p>I have been using Pathogen for a long time and I am happy with it. But it seems that more and more Vim scripts are recommending to use Vundle in their install references. So I made a study today, the conclusion is, although almost all the articles I found from Google have a positive attitude on Vundle, I still prefer Pathogen.</p>
<p>Most supporters of Vundle praise it for one reason, that is, it can install and update scripts automatically, which is lacked by Pathogen. Yes, since Vundle leverages the vim-scripts repository on GitHub, it is really easier to do so than Pathogen. But the disadvantage is as good as the advantage. I found that the vim-scripts repo is not updated in time, the latest activity was carried out a month ago ! As an OCD patient of updating, I cannot tolerate old versions of vim scripts. Although that Vundle supports using scripts&rsquo; git repos of their own (either on GitHub or other places), there is still a problem, what if authors commit broken code to the master brunch ?</p>
<p>Moreover, not all scripts are deposited in public git repos. How can I organize those scripts in ~/.vim/bundle/ and prevent :BundleClean from deleting them at the same time ?</p>
<p>Pathogen only handles the organization job that puts scripts in individual folders under ~/.vim/bundle/, so there is without the above problem. For updating issues, GetLatestVimScripts.vim is a good choice, it fetches the latest stable updates from vim.org, so I don&rsquo;t have to worry about careless commits. The only problem is, when GetLatestVimScripts.vim downloads all packages, I should install them manually. But since most scripts rarely update, I think this is not a hard work to do.</p>
<p>KISS things are always good.</p>
]]></description></item><item><title>MatchTag.vim: 高亮配对的HTML标签</title><link>http://0x3f.org/post/highlighting-paired-html-tags-using-matchtag-vim/</link><pubDate>Wed, 23 Nov 2011 00:00:00 +0000</pubDate><author>作者</author><guid>http://0x3f.org/post/highlighting-paired-html-tags-using-matchtag-vim/</guid><description><![CDATA[<p>两年前我曾在<a href="http://vim.1045645.n5.nabble.com/How-can-Vim-highlight-the-matching-tag-when-I-put-the-cursor-on-the-other-one-in-a-pair-of-tags-td1177554.html">Vim邮件列表</a>里问怎样高亮配对的HTML标签，但没能解决。今天意外收到一封邮件，Linqq童鞋在<a href="http://stackoverflow.com/questions/8168320/can-vim-highlight-matching-html-tags-like-notepad">StackOverflow</a>上问了同样的问题，有人就写了这个<a href="http://www.vim.org/scripts/script.php?script_id=3818">插件</a>。</p>

<p><a href="https://picasaweb.google.com/lh/photo/wGB584-nLWrQRHCQ7qgADdMTjNZETYmyPJy0liipFm0?feat=embedwebsite"></a></p>

<p>Posted via <a href="http://0x3f.org/?p=1894">UltraBlog.vim</a>.</p>
]]></description></item></channel></rss>